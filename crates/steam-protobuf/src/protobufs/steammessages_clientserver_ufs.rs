// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_clientserver_ufs.proto`

// @@protoc_insertion_point(message:CMsgClientUFSUploadFileRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSUploadFileRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.file_size)
    pub file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.raw_file_size)
    pub raw_file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.sha_file)
    pub sha_file: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.time_stamp)
    pub time_stamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.platforms_to_sync_deprecated)
    pub platforms_to_sync_deprecated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.platforms_to_sync)
    pub platforms_to_sync: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.cell_id)
    pub cell_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileRequest.can_encrypt)
    pub can_encrypt: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSUploadFileRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSUploadFileRequest {
    fn default() -> &'a CMsgClientUFSUploadFileRequest {
        <CMsgClientUFSUploadFileRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSUploadFileRequest {
    pub fn new() -> CMsgClientUFSUploadFileRequest {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 file_size = 2;

    pub fn file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint32 raw_file_size = 3;

    pub fn raw_file_size(&self) -> u32 {
        self.raw_file_size.unwrap_or(0)
    }

    pub fn clear_raw_file_size(&mut self) {
        self.raw_file_size = ::std::option::Option::None;
    }

    pub fn has_raw_file_size(&self) -> bool {
        self.raw_file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_file_size(&mut self, v: u32) {
        self.raw_file_size = ::std::option::Option::Some(v);
    }

    // optional bytes sha_file = 4;

    pub fn sha_file(&self) -> &[u8] {
        match self.sha_file.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_file(&mut self) {
        self.sha_file = ::std::option::Option::None;
    }

    pub fn has_sha_file(&self) -> bool {
        self.sha_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
        self.sha_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
        if self.sha_file.is_none() {
            self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.sha_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
        self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint64 time_stamp = 5;

    pub fn time_stamp(&self) -> u64 {
        self.time_stamp.unwrap_or(0)
    }

    pub fn clear_time_stamp(&mut self) {
        self.time_stamp = ::std::option::Option::None;
    }

    pub fn has_time_stamp(&self) -> bool {
        self.time_stamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_stamp(&mut self, v: u64) {
        self.time_stamp = ::std::option::Option::Some(v);
    }

    // optional string file_name = 6;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 platforms_to_sync_deprecated = 7;

    pub fn platforms_to_sync_deprecated(&self) -> u32 {
        self.platforms_to_sync_deprecated.unwrap_or(0)
    }

    pub fn clear_platforms_to_sync_deprecated(&mut self) {
        self.platforms_to_sync_deprecated = ::std::option::Option::None;
    }

    pub fn has_platforms_to_sync_deprecated(&self) -> bool {
        self.platforms_to_sync_deprecated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platforms_to_sync_deprecated(&mut self, v: u32) {
        self.platforms_to_sync_deprecated = ::std::option::Option::Some(v);
    }

    // optional uint32 platforms_to_sync = 8;

    pub fn platforms_to_sync(&self) -> u32 {
        self.platforms_to_sync.unwrap_or(4294967295u32)
    }

    pub fn clear_platforms_to_sync(&mut self) {
        self.platforms_to_sync = ::std::option::Option::None;
    }

    pub fn has_platforms_to_sync(&self) -> bool {
        self.platforms_to_sync.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platforms_to_sync(&mut self, v: u32) {
        self.platforms_to_sync = ::std::option::Option::Some(v);
    }

    // optional uint32 cell_id = 9;

    pub fn cell_id(&self) -> u32 {
        self.cell_id.unwrap_or(0)
    }

    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: u32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional bool can_encrypt = 10;

    pub fn can_encrypt(&self) -> bool {
        self.can_encrypt.unwrap_or(false)
    }

    pub fn clear_can_encrypt(&mut self) {
        self.can_encrypt = ::std::option::Option::None;
    }

    pub fn has_can_encrypt(&self) -> bool {
        self.can_encrypt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_can_encrypt(&mut self, v: bool) {
        self.can_encrypt = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSUploadFileRequest| { &m.app_id },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_size",
            |m: &CMsgClientUFSUploadFileRequest| { &m.file_size },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_file_size",
            |m: &CMsgClientUFSUploadFileRequest| { &m.raw_file_size },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.raw_file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha_file",
            |m: &CMsgClientUFSUploadFileRequest| { &m.sha_file },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.sha_file },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_stamp",
            |m: &CMsgClientUFSUploadFileRequest| { &m.time_stamp },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.time_stamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSUploadFileRequest| { &m.file_name },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.file_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platforms_to_sync_deprecated",
            |m: &CMsgClientUFSUploadFileRequest| { &m.platforms_to_sync_deprecated },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.platforms_to_sync_deprecated },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platforms_to_sync",
            |m: &CMsgClientUFSUploadFileRequest| { &m.platforms_to_sync },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.platforms_to_sync },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "cell_id",
            |m: &CMsgClientUFSUploadFileRequest| { &m.cell_id },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.cell_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "can_encrypt",
            |m: &CMsgClientUFSUploadFileRequest| { &m.can_encrypt },
            |m: &mut CMsgClientUFSUploadFileRequest| { &mut m.can_encrypt },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSUploadFileRequest>(
            "CMsgClientUFSUploadFileRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSUploadFileRequest {
    const NAME: &'static str = "CMsgClientUFSUploadFileRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.raw_file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                40 => {
                    self.time_stamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.platforms_to_sync_deprecated = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.platforms_to_sync = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.cell_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.can_encrypt = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.file_size {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.raw_file_size {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.sha_file.as_ref() {
            my_size += crate::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.time_stamp {
            my_size += crate::rt::uint64_size(5, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.platforms_to_sync_deprecated {
            my_size += crate::rt::uint32_size(7, v);
        }
        if let Some(v) = self.platforms_to_sync {
            my_size += crate::rt::uint32_size(8, v);
        }
        if let Some(v) = self.cell_id {
            my_size += crate::rt::uint32_size(9, v);
        }
        if let Some(v) = self.can_encrypt {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.raw_file_size {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.sha_file.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.time_stamp {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.platforms_to_sync_deprecated {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.platforms_to_sync {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.cell_id {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.can_encrypt {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSUploadFileRequest {
        CMsgClientUFSUploadFileRequest::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.raw_file_size = ::std::option::Option::None;
        self.sha_file = ::std::option::Option::None;
        self.time_stamp = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.platforms_to_sync_deprecated = ::std::option::Option::None;
        self.platforms_to_sync = ::std::option::Option::None;
        self.cell_id = ::std::option::Option::None;
        self.can_encrypt = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSUploadFileRequest {
        static instance: CMsgClientUFSUploadFileRequest = CMsgClientUFSUploadFileRequest {
            app_id: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            raw_file_size: ::std::option::Option::None,
            sha_file: ::std::option::Option::None,
            time_stamp: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            platforms_to_sync_deprecated: ::std::option::Option::None,
            platforms_to_sync: ::std::option::Option::None,
            cell_id: ::std::option::Option::None,
            can_encrypt: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSUploadFileRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadFileRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSUploadFileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSUploadFileRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSUploadFileResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSUploadFileResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.sha_file)
    pub sha_file: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.use_http)
    pub use_http: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.http_host)
    pub http_host: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.http_url)
    pub http_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.kv_headers)
    pub kv_headers: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.use_https)
    pub use_https: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileResponse.encrypt_file)
    pub encrypt_file: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSUploadFileResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSUploadFileResponse {
    fn default() -> &'a CMsgClientUFSUploadFileResponse {
        <CMsgClientUFSUploadFileResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSUploadFileResponse {
    pub fn new() -> CMsgClientUFSUploadFileResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional bytes sha_file = 2;

    pub fn sha_file(&self) -> &[u8] {
        match self.sha_file.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_file(&mut self) {
        self.sha_file = ::std::option::Option::None;
    }

    pub fn has_sha_file(&self) -> bool {
        self.sha_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
        self.sha_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
        if self.sha_file.is_none() {
            self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.sha_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
        self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bool use_http = 3;

    pub fn use_http(&self) -> bool {
        self.use_http.unwrap_or(false)
    }

    pub fn clear_use_http(&mut self) {
        self.use_http = ::std::option::Option::None;
    }

    pub fn has_use_http(&self) -> bool {
        self.use_http.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_http(&mut self, v: bool) {
        self.use_http = ::std::option::Option::Some(v);
    }

    // optional string http_host = 4;

    pub fn http_host(&self) -> &str {
        match self.http_host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_host(&mut self) {
        self.http_host = ::std::option::Option::None;
    }

    pub fn has_http_host(&self) -> bool {
        self.http_host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_host(&mut self, v: ::std::string::String) {
        self.http_host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_host(&mut self) -> &mut ::std::string::String {
        if self.http_host.is_none() {
            self.http_host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.http_host.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_host(&mut self) -> ::std::string::String {
        self.http_host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string http_url = 5;

    pub fn http_url(&self) -> &str {
        match self.http_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_url(&mut self) {
        self.http_url = ::std::option::Option::None;
    }

    pub fn has_http_url(&self) -> bool {
        self.http_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_url(&mut self, v: ::std::string::String) {
        self.http_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_url(&mut self) -> &mut ::std::string::String {
        if self.http_url.is_none() {
            self.http_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.http_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_url(&mut self) -> ::std::string::String {
        self.http_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes kv_headers = 6;

    pub fn kv_headers(&self) -> &[u8] {
        match self.kv_headers.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_kv_headers(&mut self) {
        self.kv_headers = ::std::option::Option::None;
    }

    pub fn has_kv_headers(&self) -> bool {
        self.kv_headers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kv_headers(&mut self, v: ::bytes::Bytes) {
        self.kv_headers = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kv_headers(&mut self) -> &mut ::bytes::Bytes {
        if self.kv_headers.is_none() {
            self.kv_headers = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.kv_headers.as_mut().unwrap()
    }

    // Take field
    pub fn take_kv_headers(&mut self) -> ::bytes::Bytes {
        self.kv_headers.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bool use_https = 7;

    pub fn use_https(&self) -> bool {
        self.use_https.unwrap_or(false)
    }

    pub fn clear_use_https(&mut self) {
        self.use_https = ::std::option::Option::None;
    }

    pub fn has_use_https(&self) -> bool {
        self.use_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_https(&mut self, v: bool) {
        self.use_https = ::std::option::Option::Some(v);
    }

    // optional bool encrypt_file = 8;

    pub fn encrypt_file(&self) -> bool {
        self.encrypt_file.unwrap_or(false)
    }

    pub fn clear_encrypt_file(&mut self) {
        self.encrypt_file = ::std::option::Option::None;
    }

    pub fn has_encrypt_file(&self) -> bool {
        self.encrypt_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypt_file(&mut self, v: bool) {
        self.encrypt_file = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSUploadFileResponse| { &m.eresult },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha_file",
            |m: &CMsgClientUFSUploadFileResponse| { &m.sha_file },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.sha_file },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_http",
            |m: &CMsgClientUFSUploadFileResponse| { &m.use_http },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.use_http },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "http_host",
            |m: &CMsgClientUFSUploadFileResponse| { &m.http_host },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.http_host },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "http_url",
            |m: &CMsgClientUFSUploadFileResponse| { &m.http_url },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.http_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "kv_headers",
            |m: &CMsgClientUFSUploadFileResponse| { &m.kv_headers },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.kv_headers },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_https",
            |m: &CMsgClientUFSUploadFileResponse| { &m.use_https },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.use_https },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encrypt_file",
            |m: &CMsgClientUFSUploadFileResponse| { &m.encrypt_file },
            |m: &mut CMsgClientUFSUploadFileResponse| { &mut m.encrypt_file },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSUploadFileResponse>(
            "CMsgClientUFSUploadFileResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSUploadFileResponse {
    const NAME: &'static str = "CMsgClientUFSUploadFileResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                24 => {
                    self.use_http = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.http_host = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.http_url = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.kv_headers = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                56 => {
                    self.use_https = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.encrypt_file = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.sha_file.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.use_http {
            my_size += 1 + 1;
        }
        if let Some(v) = self.http_host.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.http_url.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.kv_headers.as_ref() {
            my_size += crate::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.use_https {
            my_size += 1 + 1;
        }
        if let Some(v) = self.encrypt_file {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.sha_file.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.use_http {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.http_host.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.http_url.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.kv_headers.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.use_https {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.encrypt_file {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSUploadFileResponse {
        CMsgClientUFSUploadFileResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.sha_file = ::std::option::Option::None;
        self.use_http = ::std::option::Option::None;
        self.http_host = ::std::option::Option::None;
        self.http_url = ::std::option::Option::None;
        self.kv_headers = ::std::option::Option::None;
        self.use_https = ::std::option::Option::None;
        self.encrypt_file = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSUploadFileResponse {
        static instance: CMsgClientUFSUploadFileResponse = CMsgClientUFSUploadFileResponse {
            eresult: ::std::option::Option::None,
            sha_file: ::std::option::Option::None,
            use_http: ::std::option::Option::None,
            http_host: ::std::option::Option::None,
            http_url: ::std::option::Option::None,
            kv_headers: ::std::option::Option::None,
            use_https: ::std::option::Option::None,
            encrypt_file: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSUploadFileResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadFileResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSUploadFileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSUploadFileResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSUploadCommit)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSUploadCommit {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSUploadCommit.files)
    pub files: ::std::vec::Vec<cmsg_client_ufsupload_commit::File>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSUploadCommit.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSUploadCommit {
    fn default() -> &'a CMsgClientUFSUploadCommit {
        <CMsgClientUFSUploadCommit as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSUploadCommit {
    pub fn new() -> CMsgClientUFSUploadCommit {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientUFSUploadCommit.File files = 1;

    pub fn files(&self) -> &[cmsg_client_ufsupload_commit::File] {
        &self.files
    }

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::std::vec::Vec<cmsg_client_ufsupload_commit::File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::std::vec::Vec<cmsg_client_ufsupload_commit::File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::std::vec::Vec<cmsg_client_ufsupload_commit::File> {
        ::std::mem::replace(&mut self.files, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &CMsgClientUFSUploadCommit| { &m.files },
            |m: &mut CMsgClientUFSUploadCommit| { &mut m.files },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSUploadCommit>(
            "CMsgClientUFSUploadCommit",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSUploadCommit {
    const NAME: &'static str = "CMsgClientUFSUploadCommit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.files {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSUploadCommit {
        CMsgClientUFSUploadCommit::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSUploadCommit {
        static instance: CMsgClientUFSUploadCommit = CMsgClientUFSUploadCommit {
            files: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSUploadCommit {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadCommit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSUploadCommit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSUploadCommit {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientUFSUploadCommit`
pub mod cmsg_client_ufsupload_commit {
    // @@protoc_insertion_point(message:CMsgClientUFSUploadCommit.File)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct File {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommit.File.eresult)
        pub eresult: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommit.File.app_id)
        pub app_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommit.File.sha_file)
        pub sha_file: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommit.File.cub_file)
        pub cub_file: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommit.File.file_name)
        pub file_name: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientUFSUploadCommit.File.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a File {
        fn default() -> &'a File {
            <File as crate::Message>::default_instance()
        }
    }

    impl File {
        pub fn new() -> File {
            ::std::default::Default::default()
        }

        // optional int32 eresult = 1;

        pub fn eresult(&self) -> i32 {
            self.eresult.unwrap_or(2i32)
        }

        pub fn clear_eresult(&mut self) {
            self.eresult = ::std::option::Option::None;
        }

        pub fn has_eresult(&self) -> bool {
            self.eresult.is_some()
        }

        // Param is passed by value, moved
        pub fn set_eresult(&mut self, v: i32) {
            self.eresult = ::std::option::Option::Some(v);
        }

        // optional uint32 app_id = 2;

        pub fn app_id(&self) -> u32 {
            self.app_id.unwrap_or(0)
        }

        pub fn clear_app_id(&mut self) {
            self.app_id = ::std::option::Option::None;
        }

        pub fn has_app_id(&self) -> bool {
            self.app_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_id(&mut self, v: u32) {
            self.app_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha_file = 3;

        pub fn sha_file(&self) -> &[u8] {
            match self.sha_file.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha_file(&mut self) {
            self.sha_file = ::std::option::Option::None;
        }

        pub fn has_sha_file(&self) -> bool {
            self.sha_file.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
            self.sha_file = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
            if self.sha_file.is_none() {
                self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.sha_file.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
            self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional uint32 cub_file = 4;

        pub fn cub_file(&self) -> u32 {
            self.cub_file.unwrap_or(0)
        }

        pub fn clear_cub_file(&mut self) {
            self.cub_file = ::std::option::Option::None;
        }

        pub fn has_cub_file(&self) -> bool {
            self.cub_file.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cub_file(&mut self, v: u32) {
            self.cub_file = ::std::option::Option::Some(v);
        }

        // optional string file_name = 5;

        pub fn file_name(&self) -> &str {
            match self.file_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_file_name(&mut self) {
            self.file_name = ::std::option::Option::None;
        }

        pub fn has_file_name(&self) -> bool {
            self.file_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_file_name(&mut self, v: ::std::string::String) {
            self.file_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
            if self.file_name.is_none() {
                self.file_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.file_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_file_name(&mut self) -> ::std::string::String {
            self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "eresult",
                |m: &File| { &m.eresult },
                |m: &mut File| { &mut m.eresult },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "app_id",
                |m: &File| { &m.app_id },
                |m: &mut File| { &mut m.app_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha_file",
                |m: &File| { &m.sha_file },
                |m: &mut File| { &mut m.sha_file },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "cub_file",
                |m: &File| { &m.cub_file },
                |m: &mut File| { &mut m.cub_file },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "file_name",
                |m: &File| { &m.file_name },
                |m: &mut File| { &mut m.file_name },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<File>(
                "CMsgClientUFSUploadCommit.File",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for File {
        const NAME: &'static str = "File";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.eresult = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    32 => {
                        self.cub_file = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        self.file_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.eresult {
                my_size += crate::rt::int32_size(1, v);
            }
            if let Some(v) = self.app_id {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.sha_file.as_ref() {
                my_size += crate::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.cub_file {
                my_size += crate::rt::uint32_size(4, v);
            }
            if let Some(v) = self.file_name.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.eresult {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.app_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.sha_file.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.cub_file {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.file_name.as_ref() {
                os.write_string(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> File {
            File::new()
        }

        fn clear(&mut self) {
            self.eresult = ::std::option::Option::None;
            self.app_id = ::std::option::Option::None;
            self.sha_file = ::std::option::Option::None;
            self.cub_file = ::std::option::Option::None;
            self.file_name = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static File {
            static instance: File = File {
                eresult: ::std::option::Option::None,
                app_id: ::std::option::Option::None,
                sha_file: ::std::option::Option::None,
                cub_file: ::std::option::Option::None,
                file_name: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for File {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadCommit.File").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for File {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for File {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientUFSUploadCommitResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSUploadCommitResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSUploadCommitResponse.files)
    pub files: ::std::vec::Vec<cmsg_client_ufsupload_commit_response::File>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSUploadCommitResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSUploadCommitResponse {
    fn default() -> &'a CMsgClientUFSUploadCommitResponse {
        <CMsgClientUFSUploadCommitResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSUploadCommitResponse {
    pub fn new() -> CMsgClientUFSUploadCommitResponse {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientUFSUploadCommitResponse.File files = 1;

    pub fn files(&self) -> &[cmsg_client_ufsupload_commit_response::File] {
        &self.files
    }

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::std::vec::Vec<cmsg_client_ufsupload_commit_response::File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::std::vec::Vec<cmsg_client_ufsupload_commit_response::File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::std::vec::Vec<cmsg_client_ufsupload_commit_response::File> {
        ::std::mem::replace(&mut self.files, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &CMsgClientUFSUploadCommitResponse| { &m.files },
            |m: &mut CMsgClientUFSUploadCommitResponse| { &mut m.files },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSUploadCommitResponse>(
            "CMsgClientUFSUploadCommitResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSUploadCommitResponse {
    const NAME: &'static str = "CMsgClientUFSUploadCommitResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.files {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSUploadCommitResponse {
        CMsgClientUFSUploadCommitResponse::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSUploadCommitResponse {
        static instance: CMsgClientUFSUploadCommitResponse = CMsgClientUFSUploadCommitResponse {
            files: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSUploadCommitResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadCommitResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSUploadCommitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSUploadCommitResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientUFSUploadCommitResponse`
pub mod cmsg_client_ufsupload_commit_response {
    // @@protoc_insertion_point(message:CMsgClientUFSUploadCommitResponse.File)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct File {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommitResponse.File.eresult)
        pub eresult: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommitResponse.File.app_id)
        pub app_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientUFSUploadCommitResponse.File.sha_file)
        pub sha_file: ::std::option::Option<::bytes::Bytes>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientUFSUploadCommitResponse.File.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a File {
        fn default() -> &'a File {
            <File as crate::Message>::default_instance()
        }
    }

    impl File {
        pub fn new() -> File {
            ::std::default::Default::default()
        }

        // optional int32 eresult = 1;

        pub fn eresult(&self) -> i32 {
            self.eresult.unwrap_or(2i32)
        }

        pub fn clear_eresult(&mut self) {
            self.eresult = ::std::option::Option::None;
        }

        pub fn has_eresult(&self) -> bool {
            self.eresult.is_some()
        }

        // Param is passed by value, moved
        pub fn set_eresult(&mut self, v: i32) {
            self.eresult = ::std::option::Option::Some(v);
        }

        // optional uint32 app_id = 2;

        pub fn app_id(&self) -> u32 {
            self.app_id.unwrap_or(0)
        }

        pub fn clear_app_id(&mut self) {
            self.app_id = ::std::option::Option::None;
        }

        pub fn has_app_id(&self) -> bool {
            self.app_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_id(&mut self, v: u32) {
            self.app_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha_file = 3;

        pub fn sha_file(&self) -> &[u8] {
            match self.sha_file.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha_file(&mut self) {
            self.sha_file = ::std::option::Option::None;
        }

        pub fn has_sha_file(&self) -> bool {
            self.sha_file.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
            self.sha_file = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
            if self.sha_file.is_none() {
                self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.sha_file.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
            self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "eresult",
                |m: &File| { &m.eresult },
                |m: &mut File| { &mut m.eresult },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "app_id",
                |m: &File| { &m.app_id },
                |m: &mut File| { &mut m.app_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha_file",
                |m: &File| { &m.sha_file },
                |m: &mut File| { &mut m.sha_file },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<File>(
                "CMsgClientUFSUploadCommitResponse.File",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for File {
        const NAME: &'static str = "File";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.eresult = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.eresult {
                my_size += crate::rt::int32_size(1, v);
            }
            if let Some(v) = self.app_id {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.sha_file.as_ref() {
                my_size += crate::rt::bytes_size(3, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.eresult {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.app_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.sha_file.as_ref() {
                os.write_bytes(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> File {
            File::new()
        }

        fn clear(&mut self) {
            self.eresult = ::std::option::Option::None;
            self.app_id = ::std::option::Option::None;
            self.sha_file = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static File {
            static instance: File = File {
                eresult: ::std::option::Option::None,
                app_id: ::std::option::Option::None,
                sha_file: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for File {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadCommitResponse.File").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for File {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for File {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientUFSFileChunk)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSFileChunk {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSFileChunk.sha_file)
    pub sha_file: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSFileChunk.file_start)
    pub file_start: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSFileChunk.data)
    pub data: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSFileChunk.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSFileChunk {
    fn default() -> &'a CMsgClientUFSFileChunk {
        <CMsgClientUFSFileChunk as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSFileChunk {
    pub fn new() -> CMsgClientUFSFileChunk {
        ::std::default::Default::default()
    }

    // optional bytes sha_file = 1;

    pub fn sha_file(&self) -> &[u8] {
        match self.sha_file.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_file(&mut self) {
        self.sha_file = ::std::option::Option::None;
    }

    pub fn has_sha_file(&self) -> bool {
        self.sha_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
        self.sha_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
        if self.sha_file.is_none() {
            self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.sha_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
        self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint32 file_start = 2;

    pub fn file_start(&self) -> u32 {
        self.file_start.unwrap_or(0)
    }

    pub fn clear_file_start(&mut self) {
        self.file_start = ::std::option::Option::None;
    }

    pub fn has_file_start(&self) -> bool {
        self.file_start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_start(&mut self, v: u32) {
        self.file_start = ::std::option::Option::Some(v);
    }

    // optional bytes data = 3;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        self.data.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha_file",
            |m: &CMsgClientUFSFileChunk| { &m.sha_file },
            |m: &mut CMsgClientUFSFileChunk| { &mut m.sha_file },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_start",
            |m: &CMsgClientUFSFileChunk| { &m.file_start },
            |m: &mut CMsgClientUFSFileChunk| { &mut m.file_start },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &CMsgClientUFSFileChunk| { &m.data },
            |m: &mut CMsgClientUFSFileChunk| { &mut m.data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSFileChunk>(
            "CMsgClientUFSFileChunk",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSFileChunk {
    const NAME: &'static str = "CMsgClientUFSFileChunk";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                16 => {
                    self.file_start = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.data = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sha_file.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.file_start {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sha_file.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.file_start {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSFileChunk {
        CMsgClientUFSFileChunk::new()
    }

    fn clear(&mut self) {
        self.sha_file = ::std::option::Option::None;
        self.file_start = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSFileChunk {
        static instance: CMsgClientUFSFileChunk = CMsgClientUFSFileChunk {
            sha_file: ::std::option::Option::None,
            file_start: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSFileChunk {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSFileChunk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSFileChunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSFileChunk {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSTransferHeartbeat)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSTransferHeartbeat {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSTransferHeartbeat.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSTransferHeartbeat {
    fn default() -> &'a CMsgClientUFSTransferHeartbeat {
        <CMsgClientUFSTransferHeartbeat as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSTransferHeartbeat {
    pub fn new() -> CMsgClientUFSTransferHeartbeat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSTransferHeartbeat>(
            "CMsgClientUFSTransferHeartbeat",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSTransferHeartbeat {
    const NAME: &'static str = "CMsgClientUFSTransferHeartbeat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSTransferHeartbeat {
        CMsgClientUFSTransferHeartbeat::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSTransferHeartbeat {
        static instance: CMsgClientUFSTransferHeartbeat = CMsgClientUFSTransferHeartbeat {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSTransferHeartbeat {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSTransferHeartbeat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSTransferHeartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSTransferHeartbeat {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSUploadFileFinished)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSUploadFileFinished {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileFinished.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSUploadFileFinished.sha_file)
    pub sha_file: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSUploadFileFinished.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSUploadFileFinished {
    fn default() -> &'a CMsgClientUFSUploadFileFinished {
        <CMsgClientUFSUploadFileFinished as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSUploadFileFinished {
    pub fn new() -> CMsgClientUFSUploadFileFinished {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional bytes sha_file = 2;

    pub fn sha_file(&self) -> &[u8] {
        match self.sha_file.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_file(&mut self) {
        self.sha_file = ::std::option::Option::None;
    }

    pub fn has_sha_file(&self) -> bool {
        self.sha_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
        self.sha_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
        if self.sha_file.is_none() {
            self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.sha_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
        self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSUploadFileFinished| { &m.eresult },
            |m: &mut CMsgClientUFSUploadFileFinished| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha_file",
            |m: &CMsgClientUFSUploadFileFinished| { &m.sha_file },
            |m: &mut CMsgClientUFSUploadFileFinished| { &mut m.sha_file },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSUploadFileFinished>(
            "CMsgClientUFSUploadFileFinished",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSUploadFileFinished {
    const NAME: &'static str = "CMsgClientUFSUploadFileFinished";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.sha_file.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.sha_file.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSUploadFileFinished {
        CMsgClientUFSUploadFileFinished::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.sha_file = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSUploadFileFinished {
        static instance: CMsgClientUFSUploadFileFinished = CMsgClientUFSUploadFileFinished {
            eresult: ::std::option::Option::None,
            sha_file: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSUploadFileFinished {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSUploadFileFinished").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSUploadFileFinished {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSUploadFileFinished {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSDeleteFileRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSDeleteFileRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSDeleteFileRequest.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDeleteFileRequest.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSDeleteFileRequest.is_explicit_delete)
    pub is_explicit_delete: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSDeleteFileRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSDeleteFileRequest {
    fn default() -> &'a CMsgClientUFSDeleteFileRequest {
        <CMsgClientUFSDeleteFileRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSDeleteFileRequest {
    pub fn new() -> CMsgClientUFSDeleteFileRequest {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string file_name = 2;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_explicit_delete = 3;

    pub fn is_explicit_delete(&self) -> bool {
        self.is_explicit_delete.unwrap_or(false)
    }

    pub fn clear_is_explicit_delete(&mut self) {
        self.is_explicit_delete = ::std::option::Option::None;
    }

    pub fn has_is_explicit_delete(&self) -> bool {
        self.is_explicit_delete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_explicit_delete(&mut self, v: bool) {
        self.is_explicit_delete = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSDeleteFileRequest| { &m.app_id },
            |m: &mut CMsgClientUFSDeleteFileRequest| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSDeleteFileRequest| { &m.file_name },
            |m: &mut CMsgClientUFSDeleteFileRequest| { &mut m.file_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_explicit_delete",
            |m: &CMsgClientUFSDeleteFileRequest| { &m.is_explicit_delete },
            |m: &mut CMsgClientUFSDeleteFileRequest| { &mut m.is_explicit_delete },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSDeleteFileRequest>(
            "CMsgClientUFSDeleteFileRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSDeleteFileRequest {
    const NAME: &'static str = "CMsgClientUFSDeleteFileRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.is_explicit_delete = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.is_explicit_delete {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.is_explicit_delete {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSDeleteFileRequest {
        CMsgClientUFSDeleteFileRequest::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.is_explicit_delete = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSDeleteFileRequest {
        static instance: CMsgClientUFSDeleteFileRequest = CMsgClientUFSDeleteFileRequest {
            app_id: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            is_explicit_delete: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSDeleteFileRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSDeleteFileRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSDeleteFileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSDeleteFileRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSDeleteFileResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSDeleteFileResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSDeleteFileResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDeleteFileResponse.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSDeleteFileResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSDeleteFileResponse {
    fn default() -> &'a CMsgClientUFSDeleteFileResponse {
        <CMsgClientUFSDeleteFileResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSDeleteFileResponse {
    pub fn new() -> CMsgClientUFSDeleteFileResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string file_name = 2;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSDeleteFileResponse| { &m.eresult },
            |m: &mut CMsgClientUFSDeleteFileResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSDeleteFileResponse| { &m.file_name },
            |m: &mut CMsgClientUFSDeleteFileResponse| { &mut m.file_name },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSDeleteFileResponse>(
            "CMsgClientUFSDeleteFileResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSDeleteFileResponse {
    const NAME: &'static str = "CMsgClientUFSDeleteFileResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSDeleteFileResponse {
        CMsgClientUFSDeleteFileResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSDeleteFileResponse {
        static instance: CMsgClientUFSDeleteFileResponse = CMsgClientUFSDeleteFileResponse {
            eresult: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSDeleteFileResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSDeleteFileResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSDeleteFileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSDeleteFileResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSGetFileListForApp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSGetFileListForApp {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForApp.apps_to_query)
    pub apps_to_query: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForApp.send_path_prefixes)
    pub send_path_prefixes: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSGetFileListForApp.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSGetFileListForApp {
    fn default() -> &'a CMsgClientUFSGetFileListForApp {
        <CMsgClientUFSGetFileListForApp as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSGetFileListForApp {
    pub fn new() -> CMsgClientUFSGetFileListForApp {
        ::std::default::Default::default()
    }

    // repeated uint32 apps_to_query = 1;

    pub fn apps_to_query(&self) -> &[u32] {
        &self.apps_to_query
    }

    pub fn clear_apps_to_query(&mut self) {
        self.apps_to_query.clear();
    }

    // Param is passed by value, moved
    pub fn set_apps_to_query(&mut self, v: ::std::vec::Vec<u32>) {
        self.apps_to_query = v;
    }

    // Mutable pointer to the field.
    pub fn mut_apps_to_query(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.apps_to_query
    }

    // Take field
    pub fn take_apps_to_query(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.apps_to_query, ::std::vec::Vec::new())
    }

    // optional bool send_path_prefixes = 2;

    pub fn send_path_prefixes(&self) -> bool {
        self.send_path_prefixes.unwrap_or(false)
    }

    pub fn clear_send_path_prefixes(&mut self) {
        self.send_path_prefixes = ::std::option::Option::None;
    }

    pub fn has_send_path_prefixes(&self) -> bool {
        self.send_path_prefixes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_path_prefixes(&mut self, v: bool) {
        self.send_path_prefixes = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apps_to_query",
            |m: &CMsgClientUFSGetFileListForApp| { &m.apps_to_query },
            |m: &mut CMsgClientUFSGetFileListForApp| { &mut m.apps_to_query },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_path_prefixes",
            |m: &CMsgClientUFSGetFileListForApp| { &m.send_path_prefixes },
            |m: &mut CMsgClientUFSGetFileListForApp| { &mut m.send_path_prefixes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSGetFileListForApp>(
            "CMsgClientUFSGetFileListForApp",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSGetFileListForApp {
    const NAME: &'static str = "CMsgClientUFSGetFileListForApp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.apps_to_query)?;
                },
                8 => {
                    self.apps_to_query.push(is.read_uint32()?);
                },
                16 => {
                    self.send_path_prefixes = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.apps_to_query {
            my_size += crate::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.send_path_prefixes {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.apps_to_query {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.send_path_prefixes {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSGetFileListForApp {
        CMsgClientUFSGetFileListForApp::new()
    }

    fn clear(&mut self) {
        self.apps_to_query.clear();
        self.send_path_prefixes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSGetFileListForApp {
        static instance: CMsgClientUFSGetFileListForApp = CMsgClientUFSGetFileListForApp {
            apps_to_query: ::std::vec::Vec::new(),
            send_path_prefixes: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSGetFileListForApp {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSGetFileListForApp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSGetFileListForApp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSGetFileListForApp {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSGetFileListForAppResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSGetFileListForAppResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.files)
    pub files: ::std::vec::Vec<cmsg_client_ufsget_file_list_for_app_response::File>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
    pub path_prefixes: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSGetFileListForAppResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSGetFileListForAppResponse {
    fn default() -> &'a CMsgClientUFSGetFileListForAppResponse {
        <CMsgClientUFSGetFileListForAppResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSGetFileListForAppResponse {
    pub fn new() -> CMsgClientUFSGetFileListForAppResponse {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientUFSGetFileListForAppResponse.File files = 1;

    pub fn files(&self) -> &[cmsg_client_ufsget_file_list_for_app_response::File] {
        &self.files
    }

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::std::vec::Vec<cmsg_client_ufsget_file_list_for_app_response::File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::std::vec::Vec<cmsg_client_ufsget_file_list_for_app_response::File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::std::vec::Vec<cmsg_client_ufsget_file_list_for_app_response::File> {
        ::std::mem::replace(&mut self.files, ::std::vec::Vec::new())
    }

    // repeated string path_prefixes = 2;

    pub fn path_prefixes(&self) -> &[::std::string::String] {
        &self.path_prefixes
    }

    pub fn clear_path_prefixes(&mut self) {
        self.path_prefixes.clear();
    }

    // Param is passed by value, moved
    pub fn set_path_prefixes(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.path_prefixes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path_prefixes(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.path_prefixes
    }

    // Take field
    pub fn take_path_prefixes(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.path_prefixes, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &CMsgClientUFSGetFileListForAppResponse| { &m.files },
            |m: &mut CMsgClientUFSGetFileListForAppResponse| { &mut m.files },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "path_prefixes",
            |m: &CMsgClientUFSGetFileListForAppResponse| { &m.path_prefixes },
            |m: &mut CMsgClientUFSGetFileListForAppResponse| { &mut m.path_prefixes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSGetFileListForAppResponse>(
            "CMsgClientUFSGetFileListForAppResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSGetFileListForAppResponse {
    const NAME: &'static str = "CMsgClientUFSGetFileListForAppResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_message()?);
                },
                18 => {
                    self.path_prefixes.push(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.path_prefixes {
            my_size += crate::rt::string_size(2, &value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.files {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.path_prefixes {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSGetFileListForAppResponse {
        CMsgClientUFSGetFileListForAppResponse::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.path_prefixes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSGetFileListForAppResponse {
        static instance: CMsgClientUFSGetFileListForAppResponse = CMsgClientUFSGetFileListForAppResponse {
            files: ::std::vec::Vec::new(),
            path_prefixes: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSGetFileListForAppResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSGetFileListForAppResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSGetFileListForAppResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSGetFileListForAppResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientUFSGetFileListForAppResponse`
pub mod cmsg_client_ufsget_file_list_for_app_response {
    // @@protoc_insertion_point(message:CMsgClientUFSGetFileListForAppResponse.File)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct File {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.app_id)
        pub app_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.file_name)
        pub file_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.sha_file)
        pub sha_file: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.time_stamp)
        pub time_stamp: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.raw_file_size)
        pub raw_file_size: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.is_explicit_delete)
        pub is_explicit_delete: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.platforms_to_sync)
        pub platforms_to_sync: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientUFSGetFileListForAppResponse.File.path_prefix_index)
        pub path_prefix_index: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientUFSGetFileListForAppResponse.File.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a File {
        fn default() -> &'a File {
            <File as crate::Message>::default_instance()
        }
    }

    impl File {
        pub fn new() -> File {
            ::std::default::Default::default()
        }

        // optional uint32 app_id = 1;

        pub fn app_id(&self) -> u32 {
            self.app_id.unwrap_or(0)
        }

        pub fn clear_app_id(&mut self) {
            self.app_id = ::std::option::Option::None;
        }

        pub fn has_app_id(&self) -> bool {
            self.app_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_id(&mut self, v: u32) {
            self.app_id = ::std::option::Option::Some(v);
        }

        // optional string file_name = 2;

        pub fn file_name(&self) -> &str {
            match self.file_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_file_name(&mut self) {
            self.file_name = ::std::option::Option::None;
        }

        pub fn has_file_name(&self) -> bool {
            self.file_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_file_name(&mut self, v: ::std::string::String) {
            self.file_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
            if self.file_name.is_none() {
                self.file_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.file_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_file_name(&mut self) -> ::std::string::String {
            self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes sha_file = 3;

        pub fn sha_file(&self) -> &[u8] {
            match self.sha_file.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha_file(&mut self) {
            self.sha_file = ::std::option::Option::None;
        }

        pub fn has_sha_file(&self) -> bool {
            self.sha_file.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
            self.sha_file = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
            if self.sha_file.is_none() {
                self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.sha_file.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
            self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional uint64 time_stamp = 4;

        pub fn time_stamp(&self) -> u64 {
            self.time_stamp.unwrap_or(0)
        }

        pub fn clear_time_stamp(&mut self) {
            self.time_stamp = ::std::option::Option::None;
        }

        pub fn has_time_stamp(&self) -> bool {
            self.time_stamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_stamp(&mut self, v: u64) {
            self.time_stamp = ::std::option::Option::Some(v);
        }

        // optional uint32 raw_file_size = 5;

        pub fn raw_file_size(&self) -> u32 {
            self.raw_file_size.unwrap_or(0)
        }

        pub fn clear_raw_file_size(&mut self) {
            self.raw_file_size = ::std::option::Option::None;
        }

        pub fn has_raw_file_size(&self) -> bool {
            self.raw_file_size.is_some()
        }

        // Param is passed by value, moved
        pub fn set_raw_file_size(&mut self, v: u32) {
            self.raw_file_size = ::std::option::Option::Some(v);
        }

        // optional bool is_explicit_delete = 6;

        pub fn is_explicit_delete(&self) -> bool {
            self.is_explicit_delete.unwrap_or(false)
        }

        pub fn clear_is_explicit_delete(&mut self) {
            self.is_explicit_delete = ::std::option::Option::None;
        }

        pub fn has_is_explicit_delete(&self) -> bool {
            self.is_explicit_delete.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_explicit_delete(&mut self, v: bool) {
            self.is_explicit_delete = ::std::option::Option::Some(v);
        }

        // optional uint32 platforms_to_sync = 7;

        pub fn platforms_to_sync(&self) -> u32 {
            self.platforms_to_sync.unwrap_or(0)
        }

        pub fn clear_platforms_to_sync(&mut self) {
            self.platforms_to_sync = ::std::option::Option::None;
        }

        pub fn has_platforms_to_sync(&self) -> bool {
            self.platforms_to_sync.is_some()
        }

        // Param is passed by value, moved
        pub fn set_platforms_to_sync(&mut self, v: u32) {
            self.platforms_to_sync = ::std::option::Option::Some(v);
        }

        // optional uint32 path_prefix_index = 8;

        pub fn path_prefix_index(&self) -> u32 {
            self.path_prefix_index.unwrap_or(0)
        }

        pub fn clear_path_prefix_index(&mut self) {
            self.path_prefix_index = ::std::option::Option::None;
        }

        pub fn has_path_prefix_index(&self) -> bool {
            self.path_prefix_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_path_prefix_index(&mut self, v: u32) {
            self.path_prefix_index = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(8);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "app_id",
                |m: &File| { &m.app_id },
                |m: &mut File| { &mut m.app_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "file_name",
                |m: &File| { &m.file_name },
                |m: &mut File| { &mut m.file_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha_file",
                |m: &File| { &m.sha_file },
                |m: &mut File| { &mut m.sha_file },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_stamp",
                |m: &File| { &m.time_stamp },
                |m: &mut File| { &mut m.time_stamp },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "raw_file_size",
                |m: &File| { &m.raw_file_size },
                |m: &mut File| { &mut m.raw_file_size },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_explicit_delete",
                |m: &File| { &m.is_explicit_delete },
                |m: &mut File| { &mut m.is_explicit_delete },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "platforms_to_sync",
                |m: &File| { &m.platforms_to_sync },
                |m: &mut File| { &mut m.platforms_to_sync },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "path_prefix_index",
                |m: &File| { &m.path_prefix_index },
                |m: &mut File| { &mut m.path_prefix_index },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<File>(
                "CMsgClientUFSGetFileListForAppResponse.File",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for File {
        const NAME: &'static str = "File";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.file_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    32 => {
                        self.time_stamp = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    40 => {
                        self.raw_file_size = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.is_explicit_delete = ::std::option::Option::Some(is.read_bool()?);
                    },
                    56 => {
                        self.platforms_to_sync = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.path_prefix_index = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.app_id {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.file_name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.sha_file.as_ref() {
                my_size += crate::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.time_stamp {
                my_size += crate::rt::uint64_size(4, v);
            }
            if let Some(v) = self.raw_file_size {
                my_size += crate::rt::uint32_size(5, v);
            }
            if let Some(v) = self.is_explicit_delete {
                my_size += 1 + 1;
            }
            if let Some(v) = self.platforms_to_sync {
                my_size += crate::rt::uint32_size(7, v);
            }
            if let Some(v) = self.path_prefix_index {
                my_size += crate::rt::uint32_size(8, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.app_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.file_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.sha_file.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.time_stamp {
                os.write_uint64(4, v)?;
            }
            if let Some(v) = self.raw_file_size {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.is_explicit_delete {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.platforms_to_sync {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.path_prefix_index {
                os.write_uint32(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> File {
            File::new()
        }

        fn clear(&mut self) {
            self.app_id = ::std::option::Option::None;
            self.file_name = ::std::option::Option::None;
            self.sha_file = ::std::option::Option::None;
            self.time_stamp = ::std::option::Option::None;
            self.raw_file_size = ::std::option::Option::None;
            self.is_explicit_delete = ::std::option::Option::None;
            self.platforms_to_sync = ::std::option::Option::None;
            self.path_prefix_index = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static File {
            static instance: File = File {
                app_id: ::std::option::Option::None,
                file_name: ::std::option::Option::None,
                sha_file: ::std::option::Option::None,
                time_stamp: ::std::option::Option::None,
                raw_file_size: ::std::option::Option::None,
                is_explicit_delete: ::std::option::Option::None,
                platforms_to_sync: ::std::option::Option::None,
                path_prefix_index: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for File {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientUFSGetFileListForAppResponse.File").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for File {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for File {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientUFSDownloadRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSDownloadRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadRequest.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadRequest.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadRequest.can_handle_http)
    pub can_handle_http: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSDownloadRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSDownloadRequest {
    fn default() -> &'a CMsgClientUFSDownloadRequest {
        <CMsgClientUFSDownloadRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSDownloadRequest {
    pub fn new() -> CMsgClientUFSDownloadRequest {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string file_name = 2;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool can_handle_http = 3;

    pub fn can_handle_http(&self) -> bool {
        self.can_handle_http.unwrap_or(false)
    }

    pub fn clear_can_handle_http(&mut self) {
        self.can_handle_http = ::std::option::Option::None;
    }

    pub fn has_can_handle_http(&self) -> bool {
        self.can_handle_http.is_some()
    }

    // Param is passed by value, moved
    pub fn set_can_handle_http(&mut self, v: bool) {
        self.can_handle_http = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSDownloadRequest| { &m.app_id },
            |m: &mut CMsgClientUFSDownloadRequest| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSDownloadRequest| { &m.file_name },
            |m: &mut CMsgClientUFSDownloadRequest| { &mut m.file_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "can_handle_http",
            |m: &CMsgClientUFSDownloadRequest| { &m.can_handle_http },
            |m: &mut CMsgClientUFSDownloadRequest| { &mut m.can_handle_http },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSDownloadRequest>(
            "CMsgClientUFSDownloadRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSDownloadRequest {
    const NAME: &'static str = "CMsgClientUFSDownloadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.can_handle_http = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.can_handle_http {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.can_handle_http {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSDownloadRequest {
        CMsgClientUFSDownloadRequest::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.can_handle_http = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSDownloadRequest {
        static instance: CMsgClientUFSDownloadRequest = CMsgClientUFSDownloadRequest {
            app_id: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            can_handle_http: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSDownloadRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSDownloadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSDownloadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSDownloadRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSDownloadResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSDownloadResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.file_size)
    pub file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.raw_file_size)
    pub raw_file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.sha_file)
    pub sha_file: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.time_stamp)
    pub time_stamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.is_explicit_delete)
    pub is_explicit_delete: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.use_http)
    pub use_http: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.http_host)
    pub http_host: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.http_url)
    pub http_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.kv_headers)
    pub kv_headers: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.use_https)
    pub use_https: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientUFSDownloadResponse.encrypted)
    pub encrypted: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSDownloadResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSDownloadResponse {
    fn default() -> &'a CMsgClientUFSDownloadResponse {
        <CMsgClientUFSDownloadResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSDownloadResponse {
    pub fn new() -> CMsgClientUFSDownloadResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 file_size = 3;

    pub fn file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint32 raw_file_size = 4;

    pub fn raw_file_size(&self) -> u32 {
        self.raw_file_size.unwrap_or(0)
    }

    pub fn clear_raw_file_size(&mut self) {
        self.raw_file_size = ::std::option::Option::None;
    }

    pub fn has_raw_file_size(&self) -> bool {
        self.raw_file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_file_size(&mut self, v: u32) {
        self.raw_file_size = ::std::option::Option::Some(v);
    }

    // optional bytes sha_file = 5;

    pub fn sha_file(&self) -> &[u8] {
        match self.sha_file.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_file(&mut self) {
        self.sha_file = ::std::option::Option::None;
    }

    pub fn has_sha_file(&self) -> bool {
        self.sha_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
        self.sha_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
        if self.sha_file.is_none() {
            self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.sha_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
        self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint64 time_stamp = 6;

    pub fn time_stamp(&self) -> u64 {
        self.time_stamp.unwrap_or(0)
    }

    pub fn clear_time_stamp(&mut self) {
        self.time_stamp = ::std::option::Option::None;
    }

    pub fn has_time_stamp(&self) -> bool {
        self.time_stamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_stamp(&mut self, v: u64) {
        self.time_stamp = ::std::option::Option::Some(v);
    }

    // optional bool is_explicit_delete = 7;

    pub fn is_explicit_delete(&self) -> bool {
        self.is_explicit_delete.unwrap_or(false)
    }

    pub fn clear_is_explicit_delete(&mut self) {
        self.is_explicit_delete = ::std::option::Option::None;
    }

    pub fn has_is_explicit_delete(&self) -> bool {
        self.is_explicit_delete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_explicit_delete(&mut self, v: bool) {
        self.is_explicit_delete = ::std::option::Option::Some(v);
    }

    // optional bool use_http = 8;

    pub fn use_http(&self) -> bool {
        self.use_http.unwrap_or(false)
    }

    pub fn clear_use_http(&mut self) {
        self.use_http = ::std::option::Option::None;
    }

    pub fn has_use_http(&self) -> bool {
        self.use_http.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_http(&mut self, v: bool) {
        self.use_http = ::std::option::Option::Some(v);
    }

    // optional string http_host = 9;

    pub fn http_host(&self) -> &str {
        match self.http_host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_host(&mut self) {
        self.http_host = ::std::option::Option::None;
    }

    pub fn has_http_host(&self) -> bool {
        self.http_host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_host(&mut self, v: ::std::string::String) {
        self.http_host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_host(&mut self) -> &mut ::std::string::String {
        if self.http_host.is_none() {
            self.http_host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.http_host.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_host(&mut self) -> ::std::string::String {
        self.http_host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string http_url = 10;

    pub fn http_url(&self) -> &str {
        match self.http_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_url(&mut self) {
        self.http_url = ::std::option::Option::None;
    }

    pub fn has_http_url(&self) -> bool {
        self.http_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_url(&mut self, v: ::std::string::String) {
        self.http_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_url(&mut self) -> &mut ::std::string::String {
        if self.http_url.is_none() {
            self.http_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.http_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_url(&mut self) -> ::std::string::String {
        self.http_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes kv_headers = 11;

    pub fn kv_headers(&self) -> &[u8] {
        match self.kv_headers.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_kv_headers(&mut self) {
        self.kv_headers = ::std::option::Option::None;
    }

    pub fn has_kv_headers(&self) -> bool {
        self.kv_headers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kv_headers(&mut self, v: ::bytes::Bytes) {
        self.kv_headers = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kv_headers(&mut self) -> &mut ::bytes::Bytes {
        if self.kv_headers.is_none() {
            self.kv_headers = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.kv_headers.as_mut().unwrap()
    }

    // Take field
    pub fn take_kv_headers(&mut self) -> ::bytes::Bytes {
        self.kv_headers.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bool use_https = 12;

    pub fn use_https(&self) -> bool {
        self.use_https.unwrap_or(false)
    }

    pub fn clear_use_https(&mut self) {
        self.use_https = ::std::option::Option::None;
    }

    pub fn has_use_https(&self) -> bool {
        self.use_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_https(&mut self, v: bool) {
        self.use_https = ::std::option::Option::Some(v);
    }

    // optional bool encrypted = 13;

    pub fn encrypted(&self) -> bool {
        self.encrypted.unwrap_or(false)
    }

    pub fn clear_encrypted(&mut self) {
        self.encrypted = ::std::option::Option::None;
    }

    pub fn has_encrypted(&self) -> bool {
        self.encrypted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted(&mut self, v: bool) {
        self.encrypted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSDownloadResponse| { &m.eresult },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSDownloadResponse| { &m.app_id },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_size",
            |m: &CMsgClientUFSDownloadResponse| { &m.file_size },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_file_size",
            |m: &CMsgClientUFSDownloadResponse| { &m.raw_file_size },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.raw_file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha_file",
            |m: &CMsgClientUFSDownloadResponse| { &m.sha_file },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.sha_file },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_stamp",
            |m: &CMsgClientUFSDownloadResponse| { &m.time_stamp },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.time_stamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_explicit_delete",
            |m: &CMsgClientUFSDownloadResponse| { &m.is_explicit_delete },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.is_explicit_delete },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_http",
            |m: &CMsgClientUFSDownloadResponse| { &m.use_http },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.use_http },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "http_host",
            |m: &CMsgClientUFSDownloadResponse| { &m.http_host },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.http_host },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "http_url",
            |m: &CMsgClientUFSDownloadResponse| { &m.http_url },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.http_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "kv_headers",
            |m: &CMsgClientUFSDownloadResponse| { &m.kv_headers },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.kv_headers },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_https",
            |m: &CMsgClientUFSDownloadResponse| { &m.use_https },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.use_https },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encrypted",
            |m: &CMsgClientUFSDownloadResponse| { &m.encrypted },
            |m: &mut CMsgClientUFSDownloadResponse| { &mut m.encrypted },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSDownloadResponse>(
            "CMsgClientUFSDownloadResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSDownloadResponse {
    const NAME: &'static str = "CMsgClientUFSDownloadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.raw_file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                48 => {
                    self.time_stamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.is_explicit_delete = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.use_http = ::std::option::Option::Some(is.read_bool()?);
                },
                74 => {
                    self.http_host = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.http_url = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.kv_headers = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                96 => {
                    self.use_https = ::std::option::Option::Some(is.read_bool()?);
                },
                104 => {
                    self.encrypted = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.file_size {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.raw_file_size {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.sha_file.as_ref() {
            my_size += crate::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.time_stamp {
            my_size += crate::rt::uint64_size(6, v);
        }
        if let Some(v) = self.is_explicit_delete {
            my_size += 1 + 1;
        }
        if let Some(v) = self.use_http {
            my_size += 1 + 1;
        }
        if let Some(v) = self.http_host.as_ref() {
            my_size += crate::rt::string_size(9, &v);
        }
        if let Some(v) = self.http_url.as_ref() {
            my_size += crate::rt::string_size(10, &v);
        }
        if let Some(v) = self.kv_headers.as_ref() {
            my_size += crate::rt::bytes_size(11, &v);
        }
        if let Some(v) = self.use_https {
            my_size += 1 + 1;
        }
        if let Some(v) = self.encrypted {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.raw_file_size {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.sha_file.as_ref() {
            os.write_bytes(5, v)?;
        }
        if let Some(v) = self.time_stamp {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.is_explicit_delete {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.use_http {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.http_host.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.http_url.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.kv_headers.as_ref() {
            os.write_bytes(11, v)?;
        }
        if let Some(v) = self.use_https {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.encrypted {
            os.write_bool(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSDownloadResponse {
        CMsgClientUFSDownloadResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.raw_file_size = ::std::option::Option::None;
        self.sha_file = ::std::option::Option::None;
        self.time_stamp = ::std::option::Option::None;
        self.is_explicit_delete = ::std::option::Option::None;
        self.use_http = ::std::option::Option::None;
        self.http_host = ::std::option::Option::None;
        self.http_url = ::std::option::Option::None;
        self.kv_headers = ::std::option::Option::None;
        self.use_https = ::std::option::Option::None;
        self.encrypted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSDownloadResponse {
        static instance: CMsgClientUFSDownloadResponse = CMsgClientUFSDownloadResponse {
            eresult: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            raw_file_size: ::std::option::Option::None,
            sha_file: ::std::option::Option::None,
            time_stamp: ::std::option::Option::None,
            is_explicit_delete: ::std::option::Option::None,
            use_http: ::std::option::Option::None,
            http_host: ::std::option::Option::None,
            http_url: ::std::option::Option::None,
            kv_headers: ::std::option::Option::None,
            use_https: ::std::option::Option::None,
            encrypted: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSDownloadResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSDownloadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSDownloadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSDownloadResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSLoginRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSLoginRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSLoginRequest.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSLoginRequest.am_session_token)
    pub am_session_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientUFSLoginRequest.apps)
    pub apps: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSLoginRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSLoginRequest {
    fn default() -> &'a CMsgClientUFSLoginRequest {
        <CMsgClientUFSLoginRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSLoginRequest {
    pub fn new() -> CMsgClientUFSLoginRequest {
        ::std::default::Default::default()
    }

    // optional uint32 protocol_version = 1;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    // optional uint64 am_session_token = 2;

    pub fn am_session_token(&self) -> u64 {
        self.am_session_token.unwrap_or(0)
    }

    pub fn clear_am_session_token(&mut self) {
        self.am_session_token = ::std::option::Option::None;
    }

    pub fn has_am_session_token(&self) -> bool {
        self.am_session_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_am_session_token(&mut self, v: u64) {
        self.am_session_token = ::std::option::Option::Some(v);
    }

    // repeated uint32 apps = 3;

    pub fn apps(&self) -> &[u32] {
        &self.apps
    }

    pub fn clear_apps(&mut self) {
        self.apps.clear();
    }

    // Param is passed by value, moved
    pub fn set_apps(&mut self, v: ::std::vec::Vec<u32>) {
        self.apps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_apps(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.apps
    }

    // Take field
    pub fn take_apps(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.apps, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgClientUFSLoginRequest| { &m.protocol_version },
            |m: &mut CMsgClientUFSLoginRequest| { &mut m.protocol_version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "am_session_token",
            |m: &CMsgClientUFSLoginRequest| { &m.am_session_token },
            |m: &mut CMsgClientUFSLoginRequest| { &mut m.am_session_token },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apps",
            |m: &CMsgClientUFSLoginRequest| { &m.apps },
            |m: &mut CMsgClientUFSLoginRequest| { &mut m.apps },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSLoginRequest>(
            "CMsgClientUFSLoginRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSLoginRequest {
    const NAME: &'static str = "CMsgClientUFSLoginRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.am_session_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.apps)?;
                },
                24 => {
                    self.apps.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.protocol_version {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.am_session_token {
            my_size += crate::rt::uint64_size(2, v);
        }
        for value in &self.apps {
            my_size += crate::rt::uint32_size(3, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.protocol_version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.am_session_token {
            os.write_uint64(2, v)?;
        }
        for v in &self.apps {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSLoginRequest {
        CMsgClientUFSLoginRequest::new()
    }

    fn clear(&mut self) {
        self.protocol_version = ::std::option::Option::None;
        self.am_session_token = ::std::option::Option::None;
        self.apps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSLoginRequest {
        static instance: CMsgClientUFSLoginRequest = CMsgClientUFSLoginRequest {
            protocol_version: ::std::option::Option::None,
            am_session_token: ::std::option::Option::None,
            apps: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSLoginRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSLoginRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSLoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSLoginRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSLoginResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSLoginResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSLoginResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSLoginResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSLoginResponse {
    fn default() -> &'a CMsgClientUFSLoginResponse {
        <CMsgClientUFSLoginResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSLoginResponse {
    pub fn new() -> CMsgClientUFSLoginResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSLoginResponse| { &m.eresult },
            |m: &mut CMsgClientUFSLoginResponse| { &mut m.eresult },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSLoginResponse>(
            "CMsgClientUFSLoginResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSLoginResponse {
    const NAME: &'static str = "CMsgClientUFSLoginResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSLoginResponse {
        CMsgClientUFSLoginResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSLoginResponse {
        static instance: CMsgClientUFSLoginResponse = CMsgClientUFSLoginResponse {
            eresult: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSLoginResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSLoginResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSLoginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSLoginResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSGetUGCDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSGetUGCDetails {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetails.hcontent)
    pub hcontent: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSGetUGCDetails.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSGetUGCDetails {
    fn default() -> &'a CMsgClientUFSGetUGCDetails {
        <CMsgClientUFSGetUGCDetails as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSGetUGCDetails {
    pub fn new() -> CMsgClientUFSGetUGCDetails {
        ::std::default::Default::default()
    }

    // optional fixed64 hcontent = 1;

    pub fn hcontent(&self) -> u64 {
        self.hcontent.unwrap_or(18446744073709551615u64)
    }

    pub fn clear_hcontent(&mut self) {
        self.hcontent = ::std::option::Option::None;
    }

    pub fn has_hcontent(&self) -> bool {
        self.hcontent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hcontent(&mut self, v: u64) {
        self.hcontent = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hcontent",
            |m: &CMsgClientUFSGetUGCDetails| { &m.hcontent },
            |m: &mut CMsgClientUFSGetUGCDetails| { &mut m.hcontent },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSGetUGCDetails>(
            "CMsgClientUFSGetUGCDetails",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSGetUGCDetails {
    const NAME: &'static str = "CMsgClientUFSGetUGCDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.hcontent = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hcontent {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.hcontent {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSGetUGCDetails {
        CMsgClientUFSGetUGCDetails::new()
    }

    fn clear(&mut self) {
        self.hcontent = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSGetUGCDetails {
        static instance: CMsgClientUFSGetUGCDetails = CMsgClientUFSGetUGCDetails {
            hcontent: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSGetUGCDetails {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSGetUGCDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSGetUGCDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSGetUGCDetails {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSGetUGCDetailsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSGetUGCDetailsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
    pub steamid_creator: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.file_size)
    pub file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
    pub compressed_file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
    pub rangecheck_host: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
    pub file_encoded_sha1: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSGetUGCDetailsResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSGetUGCDetailsResponse {
    fn default() -> &'a CMsgClientUFSGetUGCDetailsResponse {
        <CMsgClientUFSGetUGCDetailsResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSGetUGCDetailsResponse {
    pub fn new() -> CMsgClientUFSGetUGCDetailsResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional string url = 2;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string filename = 4;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid_creator = 5;

    pub fn steamid_creator(&self) -> u64 {
        self.steamid_creator.unwrap_or(0)
    }

    pub fn clear_steamid_creator(&mut self) {
        self.steamid_creator = ::std::option::Option::None;
    }

    pub fn has_steamid_creator(&self) -> bool {
        self.steamid_creator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_creator(&mut self, v: u64) {
        self.steamid_creator = ::std::option::Option::Some(v);
    }

    // optional uint32 file_size = 6;

    pub fn file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint32 compressed_file_size = 7;

    pub fn compressed_file_size(&self) -> u32 {
        self.compressed_file_size.unwrap_or(0)
    }

    pub fn clear_compressed_file_size(&mut self) {
        self.compressed_file_size = ::std::option::Option::None;
    }

    pub fn has_compressed_file_size(&self) -> bool {
        self.compressed_file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compressed_file_size(&mut self, v: u32) {
        self.compressed_file_size = ::std::option::Option::Some(v);
    }

    // optional string rangecheck_host = 8;

    pub fn rangecheck_host(&self) -> &str {
        match self.rangecheck_host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rangecheck_host(&mut self) {
        self.rangecheck_host = ::std::option::Option::None;
    }

    pub fn has_rangecheck_host(&self) -> bool {
        self.rangecheck_host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rangecheck_host(&mut self, v: ::std::string::String) {
        self.rangecheck_host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rangecheck_host(&mut self) -> &mut ::std::string::String {
        if self.rangecheck_host.is_none() {
            self.rangecheck_host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.rangecheck_host.as_mut().unwrap()
    }

    // Take field
    pub fn take_rangecheck_host(&mut self) -> ::std::string::String {
        self.rangecheck_host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string file_encoded_sha1 = 9;

    pub fn file_encoded_sha1(&self) -> &str {
        match self.file_encoded_sha1.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_encoded_sha1(&mut self) {
        self.file_encoded_sha1 = ::std::option::Option::None;
    }

    pub fn has_file_encoded_sha1(&self) -> bool {
        self.file_encoded_sha1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_encoded_sha1(&mut self, v: ::std::string::String) {
        self.file_encoded_sha1 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_encoded_sha1(&mut self) -> &mut ::std::string::String {
        if self.file_encoded_sha1.is_none() {
            self.file_encoded_sha1 = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_encoded_sha1.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_encoded_sha1(&mut self) -> ::std::string::String {
        self.file_encoded_sha1.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.eresult },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.url },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.app_id },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.filename },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.filename },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_creator",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.steamid_creator },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.steamid_creator },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_size",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.file_size },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "compressed_file_size",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.compressed_file_size },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.compressed_file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rangecheck_host",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.rangecheck_host },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.rangecheck_host },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_encoded_sha1",
            |m: &CMsgClientUFSGetUGCDetailsResponse| { &m.file_encoded_sha1 },
            |m: &mut CMsgClientUFSGetUGCDetailsResponse| { &mut m.file_encoded_sha1 },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSGetUGCDetailsResponse>(
            "CMsgClientUFSGetUGCDetailsResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSGetUGCDetailsResponse {
    const NAME: &'static str = "CMsgClientUFSGetUGCDetailsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                41 => {
                    self.steamid_creator = ::std::option::Option::Some(is.read_fixed64()?);
                },
                48 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.compressed_file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    self.rangecheck_host = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.file_encoded_sha1 = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.filename.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.steamid_creator {
            my_size += 1 + 8;
        }
        if let Some(v) = self.file_size {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.compressed_file_size {
            my_size += crate::rt::uint32_size(7, v);
        }
        if let Some(v) = self.rangecheck_host.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        if let Some(v) = self.file_encoded_sha1.as_ref() {
            my_size += crate::rt::string_size(9, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.filename.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.steamid_creator {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.compressed_file_size {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.rangecheck_host.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.file_encoded_sha1.as_ref() {
            os.write_string(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSGetUGCDetailsResponse {
        CMsgClientUFSGetUGCDetailsResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.filename = ::std::option::Option::None;
        self.steamid_creator = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.compressed_file_size = ::std::option::Option::None;
        self.rangecheck_host = ::std::option::Option::None;
        self.file_encoded_sha1 = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSGetUGCDetailsResponse {
        static instance: CMsgClientUFSGetUGCDetailsResponse = CMsgClientUFSGetUGCDetailsResponse {
            eresult: ::std::option::Option::None,
            url: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            filename: ::std::option::Option::None,
            steamid_creator: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            compressed_file_size: ::std::option::Option::None,
            rangecheck_host: ::std::option::Option::None,
            file_encoded_sha1: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSGetUGCDetailsResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSGetUGCDetailsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSGetUGCDetailsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSGetUGCDetailsResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSGetSingleFileInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSGetSingleFileInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfo.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfo.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSGetSingleFileInfo.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSGetSingleFileInfo {
    fn default() -> &'a CMsgClientUFSGetSingleFileInfo {
        <CMsgClientUFSGetSingleFileInfo as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSGetSingleFileInfo {
    pub fn new() -> CMsgClientUFSGetSingleFileInfo {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string file_name = 2;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSGetSingleFileInfo| { &m.app_id },
            |m: &mut CMsgClientUFSGetSingleFileInfo| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSGetSingleFileInfo| { &m.file_name },
            |m: &mut CMsgClientUFSGetSingleFileInfo| { &mut m.file_name },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSGetSingleFileInfo>(
            "CMsgClientUFSGetSingleFileInfo",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSGetSingleFileInfo {
    const NAME: &'static str = "CMsgClientUFSGetSingleFileInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSGetSingleFileInfo {
        CMsgClientUFSGetSingleFileInfo::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSGetSingleFileInfo {
        static instance: CMsgClientUFSGetSingleFileInfo = CMsgClientUFSGetSingleFileInfo {
            app_id: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSGetSingleFileInfo {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSGetSingleFileInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSGetSingleFileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSGetSingleFileInfo {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSGetSingleFileInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSGetSingleFileInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
    pub sha_file: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
    pub time_stamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
    pub raw_file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
    pub is_explicit_delete: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSGetSingleFileInfoResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSGetSingleFileInfoResponse {
    fn default() -> &'a CMsgClientUFSGetSingleFileInfoResponse {
        <CMsgClientUFSGetSingleFileInfoResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSGetSingleFileInfoResponse {
    pub fn new() -> CMsgClientUFSGetSingleFileInfoResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string file_name = 3;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes sha_file = 4;

    pub fn sha_file(&self) -> &[u8] {
        match self.sha_file.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_file(&mut self) {
        self.sha_file = ::std::option::Option::None;
    }

    pub fn has_sha_file(&self) -> bool {
        self.sha_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_file(&mut self, v: ::bytes::Bytes) {
        self.sha_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_file(&mut self) -> &mut ::bytes::Bytes {
        if self.sha_file.is_none() {
            self.sha_file = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.sha_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_file(&mut self) -> ::bytes::Bytes {
        self.sha_file.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint64 time_stamp = 5;

    pub fn time_stamp(&self) -> u64 {
        self.time_stamp.unwrap_or(0)
    }

    pub fn clear_time_stamp(&mut self) {
        self.time_stamp = ::std::option::Option::None;
    }

    pub fn has_time_stamp(&self) -> bool {
        self.time_stamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_stamp(&mut self, v: u64) {
        self.time_stamp = ::std::option::Option::Some(v);
    }

    // optional uint32 raw_file_size = 6;

    pub fn raw_file_size(&self) -> u32 {
        self.raw_file_size.unwrap_or(0)
    }

    pub fn clear_raw_file_size(&mut self) {
        self.raw_file_size = ::std::option::Option::None;
    }

    pub fn has_raw_file_size(&self) -> bool {
        self.raw_file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_file_size(&mut self, v: u32) {
        self.raw_file_size = ::std::option::Option::Some(v);
    }

    // optional bool is_explicit_delete = 7;

    pub fn is_explicit_delete(&self) -> bool {
        self.is_explicit_delete.unwrap_or(false)
    }

    pub fn clear_is_explicit_delete(&mut self) {
        self.is_explicit_delete = ::std::option::Option::None;
    }

    pub fn has_is_explicit_delete(&self) -> bool {
        self.is_explicit_delete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_explicit_delete(&mut self, v: bool) {
        self.is_explicit_delete = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.eresult },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.app_id },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.file_name },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.file_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sha_file",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.sha_file },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.sha_file },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_stamp",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.time_stamp },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.time_stamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_file_size",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.raw_file_size },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.raw_file_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_explicit_delete",
            |m: &CMsgClientUFSGetSingleFileInfoResponse| { &m.is_explicit_delete },
            |m: &mut CMsgClientUFSGetSingleFileInfoResponse| { &mut m.is_explicit_delete },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSGetSingleFileInfoResponse>(
            "CMsgClientUFSGetSingleFileInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSGetSingleFileInfoResponse {
    const NAME: &'static str = "CMsgClientUFSGetSingleFileInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.sha_file = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                40 => {
                    self.time_stamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.raw_file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.is_explicit_delete = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.sha_file.as_ref() {
            my_size += crate::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.time_stamp {
            my_size += crate::rt::uint64_size(5, v);
        }
        if let Some(v) = self.raw_file_size {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.is_explicit_delete {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.sha_file.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.time_stamp {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.raw_file_size {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.is_explicit_delete {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSGetSingleFileInfoResponse {
        CMsgClientUFSGetSingleFileInfoResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.sha_file = ::std::option::Option::None;
        self.time_stamp = ::std::option::Option::None;
        self.raw_file_size = ::std::option::Option::None;
        self.is_explicit_delete = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSGetSingleFileInfoResponse {
        static instance: CMsgClientUFSGetSingleFileInfoResponse = CMsgClientUFSGetSingleFileInfoResponse {
            eresult: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            sha_file: ::std::option::Option::None,
            time_stamp: ::std::option::Option::None,
            raw_file_size: ::std::option::Option::None,
            is_explicit_delete: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSGetSingleFileInfoResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSGetSingleFileInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSGetSingleFileInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSGetSingleFileInfoResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSShareFile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSShareFile {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSShareFile.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientUFSShareFile.file_name)
    pub file_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSShareFile.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSShareFile {
    fn default() -> &'a CMsgClientUFSShareFile {
        <CMsgClientUFSShareFile as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSShareFile {
    pub fn new() -> CMsgClientUFSShareFile {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string file_name = 2;

    pub fn file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_name(&mut self) {
        self.file_name = ::std::option::Option::None;
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgClientUFSShareFile| { &m.app_id },
            |m: &mut CMsgClientUFSShareFile| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_name",
            |m: &CMsgClientUFSShareFile| { &m.file_name },
            |m: &mut CMsgClientUFSShareFile| { &mut m.file_name },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSShareFile>(
            "CMsgClientUFSShareFile",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSShareFile {
    const NAME: &'static str = "CMsgClientUFSShareFile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.file_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.file_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.file_name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSShareFile {
        CMsgClientUFSShareFile::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.file_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSShareFile {
        static instance: CMsgClientUFSShareFile = CMsgClientUFSShareFile {
            app_id: ::std::option::Option::None,
            file_name: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSShareFile {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSShareFile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSShareFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSShareFile {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientUFSShareFileResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientUFSShareFileResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientUFSShareFileResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientUFSShareFileResponse.hcontent)
    pub hcontent: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientUFSShareFileResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientUFSShareFileResponse {
    fn default() -> &'a CMsgClientUFSShareFileResponse {
        <CMsgClientUFSShareFileResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientUFSShareFileResponse {
    pub fn new() -> CMsgClientUFSShareFileResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional fixed64 hcontent = 2;

    pub fn hcontent(&self) -> u64 {
        self.hcontent.unwrap_or(18446744073709551615u64)
    }

    pub fn clear_hcontent(&mut self) {
        self.hcontent = ::std::option::Option::None;
    }

    pub fn has_hcontent(&self) -> bool {
        self.hcontent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hcontent(&mut self, v: u64) {
        self.hcontent = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientUFSShareFileResponse| { &m.eresult },
            |m: &mut CMsgClientUFSShareFileResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hcontent",
            |m: &CMsgClientUFSShareFileResponse| { &m.hcontent },
            |m: &mut CMsgClientUFSShareFileResponse| { &mut m.hcontent },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientUFSShareFileResponse>(
            "CMsgClientUFSShareFileResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientUFSShareFileResponse {
    const NAME: &'static str = "CMsgClientUFSShareFileResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                17 => {
                    self.hcontent = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.hcontent {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.hcontent {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientUFSShareFileResponse {
        CMsgClientUFSShareFileResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.hcontent = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientUFSShareFileResponse {
        static instance: CMsgClientUFSShareFileResponse = CMsgClientUFSShareFileResponse {
            eresult: ::std::option::Option::None,
            hcontent: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientUFSShareFileResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientUFSShareFileResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientUFSShareFileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientUFSShareFileResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_clientserver_ufs.proto\x1a\x18steammessages_base.proto\
    \"\x82\x03\n\x1eCMsgClientUFSUploadFileRequest\x12\x15\n\x06app_id\x18\
    \x01\x20\x01(\rR\x05appId\x12\x1b\n\tfile_size\x18\x02\x20\x01(\rR\x08fi\
    leSize\x12\"\n\rraw_file_size\x18\x03\x20\x01(\rR\x0brawFileSize\x12\x19\
    \n\x08sha_file\x18\x04\x20\x01(\x0cR\x07shaFile\x12\x1d\n\ntime_stamp\
    \x18\x05\x20\x01(\x04R\ttimeStamp\x12\x1b\n\tfile_name\x18\x06\x20\x01(\
    \tR\x08fileName\x12?\n\x1cplatforms_to_sync_deprecated\x18\x07\x20\x01(\
    \rR\x19platformsToSyncDeprecated\x126\n\x11platforms_to_sync\x18\x08\x20\
    \x01(\r:\n4294967295R\x0fplatformsToSync\x12\x17\n\x07cell_id\x18\t\x20\
    \x01(\rR\x06cellId\x12\x1f\n\x0bcan_encrypt\x18\n\x20\x01(\x08R\ncanEncr\
    ypt\"\x8b\x02\n\x1fCMsgClientUFSUploadFileResponse\x12\x1b\n\x07eresult\
    \x18\x01\x20\x01(\x05:\x012R\x07eresult\x12\x19\n\x08sha_file\x18\x02\
    \x20\x01(\x0cR\x07shaFile\x12\x19\n\x08use_http\x18\x03\x20\x01(\x08R\
    \x07useHttp\x12\x1b\n\thttp_host\x18\x04\x20\x01(\tR\x08httpHost\x12\x19\
    \n\x08http_url\x18\x05\x20\x01(\tR\x07httpUrl\x12\x1d\n\nkv_headers\x18\
    \x06\x20\x01(\x0cR\tkvHeaders\x12\x1b\n\tuse_https\x18\x07\x20\x01(\x08R\
    \x08useHttps\x12!\n\x0cencrypt_file\x18\x08\x20\x01(\x08R\x0bencryptFile\
    \"\xe2\x01\n\x19CMsgClientUFSUploadCommit\x125\n\x05files\x18\x01\x20\
    \x03(\x0b2\x1f.CMsgClientUFSUploadCommit.FileR\x05files\x1a\x8d\x01\n\
    \x04File\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\x12\
    \x15\n\x06app_id\x18\x02\x20\x01(\rR\x05appId\x12\x19\n\x08sha_file\x18\
    \x03\x20\x01(\x0cR\x07shaFile\x12\x19\n\x08cub_file\x18\x04\x20\x01(\rR\
    \x07cubFile\x12\x1b\n\tfile_name\x18\x05\x20\x01(\tR\x08fileName\"\xb9\
    \x01\n!CMsgClientUFSUploadCommitResponse\x12=\n\x05files\x18\x01\x20\x03\
    (\x0b2'.CMsgClientUFSUploadCommitResponse.FileR\x05files\x1aU\n\x04File\
    \x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\x12\x15\n\
    \x06app_id\x18\x02\x20\x01(\rR\x05appId\x12\x19\n\x08sha_file\x18\x03\
    \x20\x01(\x0cR\x07shaFile\"f\n\x16CMsgClientUFSFileChunk\x12\x19\n\x08sh\
    a_file\x18\x01\x20\x01(\x0cR\x07shaFile\x12\x1d\n\nfile_start\x18\x02\
    \x20\x01(\rR\tfileStart\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\
    \"\x20\n\x1eCMsgClientUFSTransferHeartbeat\"Y\n\x1fCMsgClientUFSUploadFi\
    leFinished\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\
    \x12\x19\n\x08sha_file\x18\x02\x20\x01(\x0cR\x07shaFile\"\x82\x01\n\x1eC\
    MsgClientUFSDeleteFileRequest\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\
    \x05appId\x12\x1b\n\tfile_name\x18\x02\x20\x01(\tR\x08fileName\x12,\n\
    \x12is_explicit_delete\x18\x03\x20\x01(\x08R\x10isExplicitDelete\"[\n\
    \x1fCMsgClientUFSDeleteFileResponse\x12\x1b\n\x07eresult\x18\x01\x20\x01\
    (\x05:\x012R\x07eresult\x12\x1b\n\tfile_name\x18\x02\x20\x01(\tR\x08file\
    Name\"r\n\x1eCMsgClientUFSGetFileListForApp\x12\"\n\rapps_to_query\x18\
    \x01\x20\x03(\rR\x0bappsToQuery\x12,\n\x12send_path_prefixes\x18\x02\x20\
    \x01(\x08R\x10sendPathPrefixes\"\xbc\x03\n&CMsgClientUFSGetFileListForAp\
    pResponse\x12B\n\x05files\x18\x01\x20\x03(\x0b2,.CMsgClientUFSGetFileLis\
    tForAppResponse.FileR\x05files\x12#\n\rpath_prefixes\x18\x02\x20\x03(\tR\
    \x0cpathPrefixes\x1a\x9e\x02\n\x04File\x12\x15\n\x06app_id\x18\x01\x20\
    \x01(\rR\x05appId\x12\x1b\n\tfile_name\x18\x02\x20\x01(\tR\x08fileName\
    \x12\x19\n\x08sha_file\x18\x03\x20\x01(\x0cR\x07shaFile\x12\x1d\n\ntime_\
    stamp\x18\x04\x20\x01(\x04R\ttimeStamp\x12\"\n\rraw_file_size\x18\x05\
    \x20\x01(\rR\x0brawFileSize\x12,\n\x12is_explicit_delete\x18\x06\x20\x01\
    (\x08R\x10isExplicitDelete\x12*\n\x11platforms_to_sync\x18\x07\x20\x01(\
    \rR\x0fplatformsToSync\x12*\n\x11path_prefix_index\x18\x08\x20\x01(\rR\
    \x0fpathPrefixIndex:\x08\x80\xb5\x18\x08\x88\xb5\x18\x10\"z\n\x1cCMsgCli\
    entUFSDownloadRequest\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05appId\
    \x12\x1b\n\tfile_name\x18\x02\x20\x01(\tR\x08fileName\x12&\n\x0fcan_hand\
    le_http\x18\x03\x20\x01(\x08R\rcanHandleHttp\"\xa9\x03\n\x1dCMsgClientUF\
    SDownloadResponse\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07er\
    esult\x12\x15\n\x06app_id\x18\x02\x20\x01(\rR\x05appId\x12\x1b\n\tfile_s\
    ize\x18\x03\x20\x01(\rR\x08fileSize\x12\"\n\rraw_file_size\x18\x04\x20\
    \x01(\rR\x0brawFileSize\x12\x19\n\x08sha_file\x18\x05\x20\x01(\x0cR\x07s\
    haFile\x12\x1d\n\ntime_stamp\x18\x06\x20\x01(\x04R\ttimeStamp\x12,\n\x12\
    is_explicit_delete\x18\x07\x20\x01(\x08R\x10isExplicitDelete\x12\x19\n\
    \x08use_http\x18\x08\x20\x01(\x08R\x07useHttp\x12\x1b\n\thttp_host\x18\t\
    \x20\x01(\tR\x08httpHost\x12\x19\n\x08http_url\x18\n\x20\x01(\tR\x07http\
    Url\x12\x1d\n\nkv_headers\x18\x0b\x20\x01(\x0cR\tkvHeaders\x12\x1b\n\tus\
    e_https\x18\x0c\x20\x01(\x08R\x08useHttps\x12\x1c\n\tencrypted\x18\r\x20\
    \x01(\x08R\tencrypted\"\x84\x01\n\x19CMsgClientUFSLoginRequest\x12)\n\
    \x10protocol_version\x18\x01\x20\x01(\rR\x0fprotocolVersion\x12(\n\x10am\
    _session_token\x18\x02\x20\x01(\x04R\x0eamSessionToken\x12\x12\n\x04apps\
    \x18\x03\x20\x03(\rR\x04apps\"9\n\x1aCMsgClientUFSLoginResponse\x12\x1b\
    \n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\"N\n\x1aCMsgClientU\
    FSGetUGCDetails\x120\n\x08hcontent\x18\x01\x20\x01(\x06:\x14184467440737\
    09551615R\x08hcontent\"\xd3\x02\n\"CMsgClientUFSGetUGCDetailsResponse\
    \x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\x12\x10\n\
    \x03url\x18\x02\x20\x01(\tR\x03url\x12\x15\n\x06app_id\x18\x03\x20\x01(\
    \rR\x05appId\x12\x1a\n\x08filename\x18\x04\x20\x01(\tR\x08filename\x12'\
    \n\x0fsteamid_creator\x18\x05\x20\x01(\x06R\x0esteamidCreator\x12\x1b\n\
    \tfile_size\x18\x06\x20\x01(\rR\x08fileSize\x120\n\x14compressed_file_si\
    ze\x18\x07\x20\x01(\rR\x12compressedFileSize\x12'\n\x0frangecheck_host\
    \x18\x08\x20\x01(\tR\x0erangecheckHost\x12*\n\x11file_encoded_sha1\x18\t\
    \x20\x01(\tR\x0ffileEncodedSha1\"T\n\x1eCMsgClientUFSGetSingleFileInfo\
    \x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05appId\x12\x1b\n\tfile_name\
    \x18\x02\x20\x01(\tR\x08fileName\"\x85\x02\n&CMsgClientUFSGetSingleFileI\
    nfoResponse\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\
    \x12\x15\n\x06app_id\x18\x02\x20\x01(\rR\x05appId\x12\x1b\n\tfile_name\
    \x18\x03\x20\x01(\tR\x08fileName\x12\x19\n\x08sha_file\x18\x04\x20\x01(\
    \x0cR\x07shaFile\x12\x1d\n\ntime_stamp\x18\x05\x20\x01(\x04R\ttimeStamp\
    \x12\"\n\rraw_file_size\x18\x06\x20\x01(\rR\x0brawFileSize\x12,\n\x12is_\
    explicit_delete\x18\x07\x20\x01(\x08R\x10isExplicitDelete\"L\n\x16CMsgCl\
    ientUFSShareFile\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05appId\x12\
    \x1b\n\tfile_name\x18\x02\x20\x01(\tR\x08fileName\"o\n\x1eCMsgClientUFSS\
    hareFileResponse\x12\x1b\n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07ere\
    sult\x120\n\x08hcontent\x18\x02\x20\x01(\x06:\x1418446744073709551615R\
    \x08hcontentB\x05H\x01\x80\x01\0\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(24);
            messages.push(CMsgClientUFSUploadFileRequest::generated_message_descriptor_data());
            messages.push(CMsgClientUFSUploadFileResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSUploadCommit::generated_message_descriptor_data());
            messages.push(CMsgClientUFSUploadCommitResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSFileChunk::generated_message_descriptor_data());
            messages.push(CMsgClientUFSTransferHeartbeat::generated_message_descriptor_data());
            messages.push(CMsgClientUFSUploadFileFinished::generated_message_descriptor_data());
            messages.push(CMsgClientUFSDeleteFileRequest::generated_message_descriptor_data());
            messages.push(CMsgClientUFSDeleteFileResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSGetFileListForApp::generated_message_descriptor_data());
            messages.push(CMsgClientUFSGetFileListForAppResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSDownloadRequest::generated_message_descriptor_data());
            messages.push(CMsgClientUFSDownloadResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSLoginRequest::generated_message_descriptor_data());
            messages.push(CMsgClientUFSLoginResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSGetUGCDetails::generated_message_descriptor_data());
            messages.push(CMsgClientUFSGetUGCDetailsResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSGetSingleFileInfo::generated_message_descriptor_data());
            messages.push(CMsgClientUFSGetSingleFileInfoResponse::generated_message_descriptor_data());
            messages.push(CMsgClientUFSShareFile::generated_message_descriptor_data());
            messages.push(CMsgClientUFSShareFileResponse::generated_message_descriptor_data());
            messages.push(cmsg_client_ufsupload_commit::File::generated_message_descriptor_data());
            messages.push(cmsg_client_ufsupload_commit_response::File::generated_message_descriptor_data());
            messages.push(cmsg_client_ufsget_file_list_for_app_response::File::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
