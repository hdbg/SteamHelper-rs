// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_secrets.steamclient.proto`

// @@protoc_insertion_point(message:CKeyEscrow_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CKeyEscrow_Request {
    // message fields
    // @@protoc_insertion_point(field:CKeyEscrow_Request.rsa_oaep_sha_ticket)
    pub rsa_oaep_sha_ticket: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CKeyEscrow_Request.password)
    pub password: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CKeyEscrow_Request.usage)
    pub usage: ::std::option::Option<crate::EnumOrUnknown<EKeyEscrowUsage>>,
    // @@protoc_insertion_point(field:CKeyEscrow_Request.device_name)
    pub device_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CKeyEscrow_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CKeyEscrow_Request {
    fn default() -> &'a CKeyEscrow_Request {
        <CKeyEscrow_Request as crate::Message>::default_instance()
    }
}

impl CKeyEscrow_Request {
    pub fn new() -> CKeyEscrow_Request {
        ::std::default::Default::default()
    }

    // optional bytes rsa_oaep_sha_ticket = 1;

    pub fn rsa_oaep_sha_ticket(&self) -> &[u8] {
        match self.rsa_oaep_sha_ticket.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_rsa_oaep_sha_ticket(&mut self) {
        self.rsa_oaep_sha_ticket = ::std::option::Option::None;
    }

    pub fn has_rsa_oaep_sha_ticket(&self) -> bool {
        self.rsa_oaep_sha_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rsa_oaep_sha_ticket(&mut self, v: ::bytes::Bytes) {
        self.rsa_oaep_sha_ticket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rsa_oaep_sha_ticket(&mut self) -> &mut ::bytes::Bytes {
        if self.rsa_oaep_sha_ticket.is_none() {
            self.rsa_oaep_sha_ticket = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.rsa_oaep_sha_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_rsa_oaep_sha_ticket(&mut self) -> ::bytes::Bytes {
        self.rsa_oaep_sha_ticket.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bytes password = 2;

    pub fn password(&self) -> &[u8] {
        match self.password.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::bytes::Bytes) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::bytes::Bytes {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::bytes::Bytes {
        self.password.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional .EKeyEscrowUsage usage = 3;

    pub fn usage(&self) -> EKeyEscrowUsage {
        match self.usage {
            Some(e) => e.enum_value_or(EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice),
            None => EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice,
        }
    }

    pub fn clear_usage(&mut self) {
        self.usage = ::std::option::Option::None;
    }

    pub fn has_usage(&self) -> bool {
        self.usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: EKeyEscrowUsage) {
        self.usage = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string device_name = 4;

    pub fn device_name(&self) -> &str {
        match self.device_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_name(&mut self) {
        self.device_name = ::std::option::Option::None;
    }

    pub fn has_device_name(&self) -> bool {
        self.device_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        if self.device_name.is_none() {
            self.device_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        self.device_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rsa_oaep_sha_ticket",
            |m: &CKeyEscrow_Request| { &m.rsa_oaep_sha_ticket },
            |m: &mut CKeyEscrow_Request| { &mut m.rsa_oaep_sha_ticket },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CKeyEscrow_Request| { &m.password },
            |m: &mut CKeyEscrow_Request| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "usage",
            |m: &CKeyEscrow_Request| { &m.usage },
            |m: &mut CKeyEscrow_Request| { &mut m.usage },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_name",
            |m: &CKeyEscrow_Request| { &m.device_name },
            |m: &mut CKeyEscrow_Request| { &mut m.device_name },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CKeyEscrow_Request>(
            "CKeyEscrow_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CKeyEscrow_Request {
    const NAME: &'static str = "CKeyEscrow_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rsa_oaep_sha_ticket = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                18 => {
                    self.password = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                24 => {
                    self.usage = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.device_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.rsa_oaep_sha_ticket.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.usage {
            my_size += crate::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.device_name.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.rsa_oaep_sha_ticket.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.password.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.usage {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.device_name.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CKeyEscrow_Request {
        CKeyEscrow_Request::new()
    }

    fn clear(&mut self) {
        self.rsa_oaep_sha_ticket = ::std::option::Option::None;
        self.password = ::std::option::Option::None;
        self.usage = ::std::option::Option::None;
        self.device_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CKeyEscrow_Request {
        static instance: CKeyEscrow_Request = CKeyEscrow_Request {
            rsa_oaep_sha_ticket: ::std::option::Option::None,
            password: ::std::option::Option::None,
            usage: ::std::option::Option::None,
            device_name: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CKeyEscrow_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CKeyEscrow_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CKeyEscrow_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CKeyEscrow_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CKeyEscrow_Ticket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CKeyEscrow_Ticket {
    // message fields
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.password)
    pub password: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.identifier)
    pub identifier: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.payload)
    pub payload: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.usage)
    pub usage: ::std::option::Option<crate::EnumOrUnknown<EKeyEscrowUsage>>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.device_name)
    pub device_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.device_model)
    pub device_model: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.device_serial)
    pub device_serial: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CKeyEscrow_Ticket.device_provisioning_id)
    pub device_provisioning_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CKeyEscrow_Ticket.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CKeyEscrow_Ticket {
    fn default() -> &'a CKeyEscrow_Ticket {
        <CKeyEscrow_Ticket as crate::Message>::default_instance()
    }
}

impl CKeyEscrow_Ticket {
    pub fn new() -> CKeyEscrow_Ticket {
        ::std::default::Default::default()
    }

    // optional bytes password = 1;

    pub fn password(&self) -> &[u8] {
        match self.password.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::bytes::Bytes) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::bytes::Bytes {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::bytes::Bytes {
        self.password.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint64 identifier = 2;

    pub fn identifier(&self) -> u64 {
        self.identifier.unwrap_or(0)
    }

    pub fn clear_identifier(&mut self) {
        self.identifier = ::std::option::Option::None;
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: u64) {
        self.identifier = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 3;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::bytes::Bytes) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::bytes::Bytes {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::bytes::Bytes {
        self.payload.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint32 timestamp = 4;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional .EKeyEscrowUsage usage = 5;

    pub fn usage(&self) -> EKeyEscrowUsage {
        match self.usage {
            Some(e) => e.enum_value_or(EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice),
            None => EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice,
        }
    }

    pub fn clear_usage(&mut self) {
        self.usage = ::std::option::Option::None;
    }

    pub fn has_usage(&self) -> bool {
        self.usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: EKeyEscrowUsage) {
        self.usage = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string device_name = 6;

    pub fn device_name(&self) -> &str {
        match self.device_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_name(&mut self) {
        self.device_name = ::std::option::Option::None;
    }

    pub fn has_device_name(&self) -> bool {
        self.device_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        if self.device_name.is_none() {
            self.device_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        self.device_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string device_model = 7;

    pub fn device_model(&self) -> &str {
        match self.device_model.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_model(&mut self) {
        self.device_model = ::std::option::Option::None;
    }

    pub fn has_device_model(&self) -> bool {
        self.device_model.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_model(&mut self, v: ::std::string::String) {
        self.device_model = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_model(&mut self) -> &mut ::std::string::String {
        if self.device_model.is_none() {
            self.device_model = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_model.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_model(&mut self) -> ::std::string::String {
        self.device_model.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string device_serial = 8;

    pub fn device_serial(&self) -> &str {
        match self.device_serial.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_serial(&mut self) {
        self.device_serial = ::std::option::Option::None;
    }

    pub fn has_device_serial(&self) -> bool {
        self.device_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_serial(&mut self, v: ::std::string::String) {
        self.device_serial = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_serial(&mut self) -> &mut ::std::string::String {
        if self.device_serial.is_none() {
            self.device_serial = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_serial.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_serial(&mut self) -> ::std::string::String {
        self.device_serial.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 device_provisioning_id = 9;

    pub fn device_provisioning_id(&self) -> u32 {
        self.device_provisioning_id.unwrap_or(0)
    }

    pub fn clear_device_provisioning_id(&mut self) {
        self.device_provisioning_id = ::std::option::Option::None;
    }

    pub fn has_device_provisioning_id(&self) -> bool {
        self.device_provisioning_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_provisioning_id(&mut self, v: u32) {
        self.device_provisioning_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CKeyEscrow_Ticket| { &m.password },
            |m: &mut CKeyEscrow_Ticket| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "identifier",
            |m: &CKeyEscrow_Ticket| { &m.identifier },
            |m: &mut CKeyEscrow_Ticket| { &mut m.identifier },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &CKeyEscrow_Ticket| { &m.payload },
            |m: &mut CKeyEscrow_Ticket| { &mut m.payload },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CKeyEscrow_Ticket| { &m.timestamp },
            |m: &mut CKeyEscrow_Ticket| { &mut m.timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "usage",
            |m: &CKeyEscrow_Ticket| { &m.usage },
            |m: &mut CKeyEscrow_Ticket| { &mut m.usage },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_name",
            |m: &CKeyEscrow_Ticket| { &m.device_name },
            |m: &mut CKeyEscrow_Ticket| { &mut m.device_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_model",
            |m: &CKeyEscrow_Ticket| { &m.device_model },
            |m: &mut CKeyEscrow_Ticket| { &mut m.device_model },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_serial",
            |m: &CKeyEscrow_Ticket| { &m.device_serial },
            |m: &mut CKeyEscrow_Ticket| { &mut m.device_serial },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_provisioning_id",
            |m: &CKeyEscrow_Ticket| { &m.device_provisioning_id },
            |m: &mut CKeyEscrow_Ticket| { &mut m.device_provisioning_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CKeyEscrow_Ticket>(
            "CKeyEscrow_Ticket",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CKeyEscrow_Ticket {
    const NAME: &'static str = "CKeyEscrow_Ticket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                16 => {
                    self.identifier = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.payload = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                32 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.usage = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                50 => {
                    self.device_name = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.device_model = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.device_serial = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.device_provisioning_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.identifier {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.usage {
            my_size += crate::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.device_name.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.device_model.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        if let Some(v) = self.device_serial.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        if let Some(v) = self.device_provisioning_id {
            my_size += crate::rt::uint32_size(9, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.identifier {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.usage {
            os.write_enum(5, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.device_name.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.device_model.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.device_serial.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.device_provisioning_id {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CKeyEscrow_Ticket {
        CKeyEscrow_Ticket::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.identifier = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.usage = ::std::option::Option::None;
        self.device_name = ::std::option::Option::None;
        self.device_model = ::std::option::Option::None;
        self.device_serial = ::std::option::Option::None;
        self.device_provisioning_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CKeyEscrow_Ticket {
        static instance: CKeyEscrow_Ticket = CKeyEscrow_Ticket {
            password: ::std::option::Option::None,
            identifier: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            usage: ::std::option::Option::None,
            device_name: ::std::option::Option::None,
            device_model: ::std::option::Option::None,
            device_serial: ::std::option::Option::None,
            device_provisioning_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CKeyEscrow_Ticket {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CKeyEscrow_Ticket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CKeyEscrow_Ticket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CKeyEscrow_Ticket {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CKeyEscrow_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CKeyEscrow_Response {
    // message fields
    // @@protoc_insertion_point(field:CKeyEscrow_Response.ticket)
    pub ticket: crate::MessageField<CKeyEscrow_Ticket>,
    // special fields
    // @@protoc_insertion_point(special_field:CKeyEscrow_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CKeyEscrow_Response {
    fn default() -> &'a CKeyEscrow_Response {
        <CKeyEscrow_Response as crate::Message>::default_instance()
    }
}

impl CKeyEscrow_Response {
    pub fn new() -> CKeyEscrow_Response {
        ::std::default::Default::default()
    }

    // optional .CKeyEscrow_Ticket ticket = 1;

    pub fn ticket(&self) -> &CKeyEscrow_Ticket {
        self.ticket.as_ref().unwrap_or_else(|| <CKeyEscrow_Ticket as crate::Message>::default_instance())
    }

    pub fn clear_ticket(&mut self) {
        self.ticket.clear();
    }

    pub fn has_ticket(&self) -> bool {
        self.ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticket(&mut self, v: CKeyEscrow_Ticket) {
        self.ticket = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticket(&mut self) -> &mut CKeyEscrow_Ticket {
        self.ticket.mut_or_insert_default()
    }

    // Take field
    pub fn take_ticket(&mut self) -> CKeyEscrow_Ticket {
        self.ticket.take().unwrap_or_else(|| CKeyEscrow_Ticket::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CKeyEscrow_Ticket>(
            "ticket",
            |m: &CKeyEscrow_Response| { &m.ticket },
            |m: &mut CKeyEscrow_Response| { &mut m.ticket },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CKeyEscrow_Response>(
            "CKeyEscrow_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CKeyEscrow_Response {
    const NAME: &'static str = "CKeyEscrow_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.ticket)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ticket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.ticket.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CKeyEscrow_Response {
        CKeyEscrow_Response::new()
    }

    fn clear(&mut self) {
        self.ticket.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CKeyEscrow_Response {
        static instance: CKeyEscrow_Response = CKeyEscrow_Response {
            ticket: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CKeyEscrow_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CKeyEscrow_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CKeyEscrow_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CKeyEscrow_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EKeyEscrowUsage)
pub enum EKeyEscrowUsage {
    // @@protoc_insertion_point(enum_value:EKeyEscrowUsage.k_EKeyEscrowUsageStreamingDevice)
    k_EKeyEscrowUsageStreamingDevice = 0,
}

impl crate::Enum for EKeyEscrowUsage {
    const NAME: &'static str = "EKeyEscrowUsage";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EKeyEscrowUsage> {
        match value {
            0 => ::std::option::Option::Some(EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EKeyEscrowUsage> {
        match str {
            "k_EKeyEscrowUsageStreamingDevice" => ::std::option::Option::Some(EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EKeyEscrowUsage] = &[
        EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice,
    ];
}

impl crate::EnumFull for EKeyEscrowUsage {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EKeyEscrowUsage").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EKeyEscrowUsage {
    fn default() -> Self {
        EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice
    }
}

impl EKeyEscrowUsage {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EKeyEscrowUsage>("EKeyEscrowUsage")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_secrets.steamclient.proto\x1a\x18steammessages_base.pro\
    to\x1a,steammessages_unified_base.steamclient.proto\"\xca\x01\n\x12CKeyE\
    scrow_Request\x12-\n\x13rsa_oaep_sha_ticket\x18\x01\x20\x01(\x0cR\x10rsa\
    OaepShaTicket\x12\x1a\n\x08password\x18\x02\x20\x01(\x0cR\x08password\
    \x12H\n\x05usage\x18\x03\x20\x01(\x0e2\x10.EKeyEscrowUsage:\x20k_EKeyEsc\
    rowUsageStreamingDeviceR\x05usage\x12\x1f\n\x0bdevice_name\x18\x04\x20\
    \x01(\tR\ndeviceName\"\xf0\x02\n\x11CKeyEscrow_Ticket\x12\x1a\n\x08passw\
    ord\x18\x01\x20\x01(\x0cR\x08password\x12\x1e\n\nidentifier\x18\x02\x20\
    \x01(\x04R\nidentifier\x12\x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07pay\
    load\x12\x1c\n\ttimestamp\x18\x04\x20\x01(\rR\ttimestamp\x12H\n\x05usage\
    \x18\x05\x20\x01(\x0e2\x10.EKeyEscrowUsage:\x20k_EKeyEscrowUsageStreamin\
    gDeviceR\x05usage\x12\x1f\n\x0bdevice_name\x18\x06\x20\x01(\tR\ndeviceNa\
    me\x12!\n\x0cdevice_model\x18\x07\x20\x01(\tR\x0bdeviceModel\x12#\n\rdev\
    ice_serial\x18\x08\x20\x01(\tR\x0cdeviceSerial\x124\n\x16device_provisio\
    ning_id\x18\t\x20\x01(\rR\x14deviceProvisioningId\"A\n\x13CKeyEscrow_Res\
    ponse\x12*\n\x06ticket\x18\x01\x20\x01(\x0b2\x12.CKeyEscrow_TicketR\x06t\
    icket*7\n\x0fEKeyEscrowUsage\x12$\n\x20k_EKeyEscrowUsageStreamingDevice\
    \x10\02A\n\x07Secrets\x126\n\tKeyEscrow\x12\x13.CKeyEscrow_Request\x1a\
    \x14.CKeyEscrow_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CKeyEscrow_Request::generated_message_descriptor_data());
            messages.push(CKeyEscrow_Ticket::generated_message_descriptor_data());
            messages.push(CKeyEscrow_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EKeyEscrowUsage::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
