// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_shader.steamclient.proto`

// @@protoc_insertion_point(message:CShader_GetShaderReportingCadence_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetShaderReportingCadence_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetShaderReportingCadence_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetShaderReportingCadence_Request {
    fn default() -> &'a CShader_GetShaderReportingCadence_Request {
        <CShader_GetShaderReportingCadence_Request as crate::Message>::default_instance()
    }
}

impl CShader_GetShaderReportingCadence_Request {
    pub fn new() -> CShader_GetShaderReportingCadence_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetShaderReportingCadence_Request>(
            "CShader_GetShaderReportingCadence_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_GetShaderReportingCadence_Request {
    const NAME: &'static str = "CShader_GetShaderReportingCadence_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetShaderReportingCadence_Request {
        CShader_GetShaderReportingCadence_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetShaderReportingCadence_Request {
        static instance: CShader_GetShaderReportingCadence_Request = CShader_GetShaderReportingCadence_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_GetShaderReportingCadence_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetShaderReportingCadence_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetShaderReportingCadence_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_GetShaderReportingCadence_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetShaderReportingCadence_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetShaderReportingCadence_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetShaderReportingCadence_Response.rereport_time_threshold)
    pub rereport_time_threshold: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetShaderReportingCadence_Response.percent_to_rereport)
    pub percent_to_rereport: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetShaderReportingCadence_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetShaderReportingCadence_Response {
    fn default() -> &'a CShader_GetShaderReportingCadence_Response {
        <CShader_GetShaderReportingCadence_Response as crate::Message>::default_instance()
    }
}

impl CShader_GetShaderReportingCadence_Response {
    pub fn new() -> CShader_GetShaderReportingCadence_Response {
        ::std::default::Default::default()
    }

    // optional uint64 rereport_time_threshold = 1;

    pub fn rereport_time_threshold(&self) -> u64 {
        self.rereport_time_threshold.unwrap_or(0)
    }

    pub fn clear_rereport_time_threshold(&mut self) {
        self.rereport_time_threshold = ::std::option::Option::None;
    }

    pub fn has_rereport_time_threshold(&self) -> bool {
        self.rereport_time_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rereport_time_threshold(&mut self, v: u64) {
        self.rereport_time_threshold = ::std::option::Option::Some(v);
    }

    // optional uint32 percent_to_rereport = 2;

    pub fn percent_to_rereport(&self) -> u32 {
        self.percent_to_rereport.unwrap_or(0)
    }

    pub fn clear_percent_to_rereport(&mut self) {
        self.percent_to_rereport = ::std::option::Option::None;
    }

    pub fn has_percent_to_rereport(&self) -> bool {
        self.percent_to_rereport.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percent_to_rereport(&mut self, v: u32) {
        self.percent_to_rereport = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rereport_time_threshold",
            |m: &CShader_GetShaderReportingCadence_Response| { &m.rereport_time_threshold },
            |m: &mut CShader_GetShaderReportingCadence_Response| { &mut m.rereport_time_threshold },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "percent_to_rereport",
            |m: &CShader_GetShaderReportingCadence_Response| { &m.percent_to_rereport },
            |m: &mut CShader_GetShaderReportingCadence_Response| { &mut m.percent_to_rereport },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetShaderReportingCadence_Response>(
            "CShader_GetShaderReportingCadence_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_GetShaderReportingCadence_Response {
    const NAME: &'static str = "CShader_GetShaderReportingCadence_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rereport_time_threshold = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.percent_to_rereport = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.rereport_time_threshold {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.percent_to_rereport {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.rereport_time_threshold {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.percent_to_rereport {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetShaderReportingCadence_Response {
        CShader_GetShaderReportingCadence_Response::new()
    }

    fn clear(&mut self) {
        self.rereport_time_threshold = ::std::option::Option::None;
        self.percent_to_rereport = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetShaderReportingCadence_Response {
        static instance: CShader_GetShaderReportingCadence_Response = CShader_GetShaderReportingCadence_Response {
            rereport_time_threshold: ::std::option::Option::None,
            percent_to_rereport: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_GetShaderReportingCadence_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetShaderReportingCadence_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetShaderReportingCadence_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_GetShaderReportingCadence_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_RegisterShader_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_RegisterShader_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_RegisterShader_Request.shaders)
    pub shaders: ::std::vec::Vec<cshader_register_shader_request::Shader>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_RegisterShader_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_RegisterShader_Request {
    fn default() -> &'a CShader_RegisterShader_Request {
        <CShader_RegisterShader_Request as crate::Message>::default_instance()
    }
}

impl CShader_RegisterShader_Request {
    pub fn new() -> CShader_RegisterShader_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 2;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 3;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CShader_RegisterShader_Request.Shader shaders = 4;

    pub fn shaders(&self) -> &[cshader_register_shader_request::Shader] {
        &self.shaders
    }

    pub fn clear_shaders(&mut self) {
        self.shaders.clear();
    }

    // Param is passed by value, moved
    pub fn set_shaders(&mut self, v: ::std::vec::Vec<cshader_register_shader_request::Shader>) {
        self.shaders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shaders(&mut self) -> &mut ::std::vec::Vec<cshader_register_shader_request::Shader> {
        &mut self.shaders
    }

    // Take field
    pub fn take_shaders(&mut self) -> ::std::vec::Vec<cshader_register_shader_request::Shader> {
        ::std::mem::replace(&mut self.shaders, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_RegisterShader_Request| { &m.appid },
            |m: &mut CShader_RegisterShader_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_RegisterShader_Request| { &m.gpu_desc },
            |m: &mut CShader_RegisterShader_Request| { &mut m.gpu_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_RegisterShader_Request| { &m.driver_desc },
            |m: &mut CShader_RegisterShader_Request| { &mut m.driver_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shaders",
            |m: &CShader_RegisterShader_Request| { &m.shaders },
            |m: &mut CShader_RegisterShader_Request| { &mut m.shaders },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_RegisterShader_Request>(
            "CShader_RegisterShader_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_RegisterShader_Request {
    const NAME: &'static str = "CShader_RegisterShader_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.shaders.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        for value in &self.shaders {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.shaders {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_RegisterShader_Request {
        CShader_RegisterShader_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.shaders.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_RegisterShader_Request {
        static instance: CShader_RegisterShader_Request = CShader_RegisterShader_Request {
            appid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            shaders: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_RegisterShader_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_RegisterShader_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_RegisterShader_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_RegisterShader_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CShader_RegisterShader_Request`
pub mod cshader_register_shader_request {
    // @@protoc_insertion_point(message:CShader_RegisterShader_Request.Shader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Shader {
        // message fields
        // @@protoc_insertion_point(field:CShader_RegisterShader_Request.Shader.cache_key_sha)
        pub cache_key_sha: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CShader_RegisterShader_Request.Shader.shader_code_sha)
        pub shader_code_sha: ::std::option::Option<::bytes::Bytes>,
        // special fields
        // @@protoc_insertion_point(special_field:CShader_RegisterShader_Request.Shader.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Shader {
        fn default() -> &'a Shader {
            <Shader as crate::Message>::default_instance()
        }
    }

    impl Shader {
        pub fn new() -> Shader {
            ::std::default::Default::default()
        }

        // optional bytes cache_key_sha = 1;

        pub fn cache_key_sha(&self) -> &[u8] {
            match self.cache_key_sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_cache_key_sha(&mut self) {
            self.cache_key_sha = ::std::option::Option::None;
        }

        pub fn has_cache_key_sha(&self) -> bool {
            self.cache_key_sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cache_key_sha(&mut self, v: ::bytes::Bytes) {
            self.cache_key_sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_cache_key_sha(&mut self) -> &mut ::bytes::Bytes {
            if self.cache_key_sha.is_none() {
                self.cache_key_sha = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.cache_key_sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_cache_key_sha(&mut self) -> ::bytes::Bytes {
            self.cache_key_sha.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional bytes shader_code_sha = 2;

        pub fn shader_code_sha(&self) -> &[u8] {
            match self.shader_code_sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_shader_code_sha(&mut self) {
            self.shader_code_sha = ::std::option::Option::None;
        }

        pub fn has_shader_code_sha(&self) -> bool {
            self.shader_code_sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shader_code_sha(&mut self, v: ::bytes::Bytes) {
            self.shader_code_sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_shader_code_sha(&mut self) -> &mut ::bytes::Bytes {
            if self.shader_code_sha.is_none() {
                self.shader_code_sha = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.shader_code_sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_shader_code_sha(&mut self) -> ::bytes::Bytes {
            self.shader_code_sha.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "cache_key_sha",
                |m: &Shader| { &m.cache_key_sha },
                |m: &mut Shader| { &mut m.cache_key_sha },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "shader_code_sha",
                |m: &Shader| { &m.shader_code_sha },
                |m: &mut Shader| { &mut m.shader_code_sha },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Shader>(
                "CShader_RegisterShader_Request.Shader",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Shader {
        const NAME: &'static str = "Shader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.cache_key_sha = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    18 => {
                        self.shader_code_sha = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cache_key_sha.as_ref() {
                my_size += crate::rt::bytes_size(1, &v);
            }
            if let Some(v) = self.shader_code_sha.as_ref() {
                my_size += crate::rt::bytes_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.cache_key_sha.as_ref() {
                os.write_bytes(1, v)?;
            }
            if let Some(v) = self.shader_code_sha.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Shader {
            Shader::new()
        }

        fn clear(&mut self) {
            self.cache_key_sha = ::std::option::Option::None;
            self.shader_code_sha = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Shader {
            static instance: Shader = Shader {
                cache_key_sha: ::std::option::Option::None,
                shader_code_sha: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Shader {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CShader_RegisterShader_Request.Shader").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Shader {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Shader {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CShader_RegisterShader_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_RegisterShader_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_RegisterShader_Response.requested_codeids)
    pub requested_codeids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_RegisterShader_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_RegisterShader_Response {
    fn default() -> &'a CShader_RegisterShader_Response {
        <CShader_RegisterShader_Response as crate::Message>::default_instance()
    }
}

impl CShader_RegisterShader_Response {
    pub fn new() -> CShader_RegisterShader_Response {
        ::std::default::Default::default()
    }

    // repeated uint32 requested_codeids = 1;

    pub fn requested_codeids(&self) -> &[u32] {
        &self.requested_codeids
    }

    pub fn clear_requested_codeids(&mut self) {
        self.requested_codeids.clear();
    }

    // Param is passed by value, moved
    pub fn set_requested_codeids(&mut self, v: ::std::vec::Vec<u32>) {
        self.requested_codeids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requested_codeids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.requested_codeids
    }

    // Take field
    pub fn take_requested_codeids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.requested_codeids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requested_codeids",
            |m: &CShader_RegisterShader_Response| { &m.requested_codeids },
            |m: &mut CShader_RegisterShader_Response| { &mut m.requested_codeids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_RegisterShader_Response>(
            "CShader_RegisterShader_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_RegisterShader_Response {
    const NAME: &'static str = "CShader_RegisterShader_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.requested_codeids)?;
                },
                8 => {
                    self.requested_codeids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.requested_codeids {
            my_size += crate::rt::uint32_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.requested_codeids {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_RegisterShader_Response {
        CShader_RegisterShader_Response::new()
    }

    fn clear(&mut self) {
        self.requested_codeids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_RegisterShader_Response {
        static instance: CShader_RegisterShader_Response = CShader_RegisterShader_Response {
            requested_codeids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_RegisterShader_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_RegisterShader_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_RegisterShader_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_RegisterShader_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_SendShader_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_SendShader_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_SendShader_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_SendShader_Request.shaders)
    pub shaders: ::std::vec::Vec<cshader_send_shader_request::ShaderCode>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_SendShader_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_SendShader_Request {
    fn default() -> &'a CShader_SendShader_Request {
        <CShader_SendShader_Request as crate::Message>::default_instance()
    }
}

impl CShader_SendShader_Request {
    pub fn new() -> CShader_SendShader_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // repeated .CShader_SendShader_Request.ShaderCode shaders = 2;

    pub fn shaders(&self) -> &[cshader_send_shader_request::ShaderCode] {
        &self.shaders
    }

    pub fn clear_shaders(&mut self) {
        self.shaders.clear();
    }

    // Param is passed by value, moved
    pub fn set_shaders(&mut self, v: ::std::vec::Vec<cshader_send_shader_request::ShaderCode>) {
        self.shaders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shaders(&mut self) -> &mut ::std::vec::Vec<cshader_send_shader_request::ShaderCode> {
        &mut self.shaders
    }

    // Take field
    pub fn take_shaders(&mut self) -> ::std::vec::Vec<cshader_send_shader_request::ShaderCode> {
        ::std::mem::replace(&mut self.shaders, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_SendShader_Request| { &m.appid },
            |m: &mut CShader_SendShader_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "shaders",
            |m: &CShader_SendShader_Request| { &m.shaders },
            |m: &mut CShader_SendShader_Request| { &mut m.shaders },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_SendShader_Request>(
            "CShader_SendShader_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_SendShader_Request {
    const NAME: &'static str = "CShader_SendShader_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.shaders.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.shaders {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        for v in &self.shaders {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_SendShader_Request {
        CShader_SendShader_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.shaders.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_SendShader_Request {
        static instance: CShader_SendShader_Request = CShader_SendShader_Request {
            appid: ::std::option::Option::None,
            shaders: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_SendShader_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_SendShader_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_SendShader_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_SendShader_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CShader_SendShader_Request`
pub mod cshader_send_shader_request {
    // @@protoc_insertion_point(message:CShader_SendShader_Request.ShaderCode)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ShaderCode {
        // message fields
        // @@protoc_insertion_point(field:CShader_SendShader_Request.ShaderCode.shader_code_sha)
        pub shader_code_sha: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CShader_SendShader_Request.ShaderCode.shader_code)
        pub shader_code: ::std::option::Option<::bytes::Bytes>,
        // special fields
        // @@protoc_insertion_point(special_field:CShader_SendShader_Request.ShaderCode.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ShaderCode {
        fn default() -> &'a ShaderCode {
            <ShaderCode as crate::Message>::default_instance()
        }
    }

    impl ShaderCode {
        pub fn new() -> ShaderCode {
            ::std::default::Default::default()
        }

        // optional bytes shader_code_sha = 1;

        pub fn shader_code_sha(&self) -> &[u8] {
            match self.shader_code_sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_shader_code_sha(&mut self) {
            self.shader_code_sha = ::std::option::Option::None;
        }

        pub fn has_shader_code_sha(&self) -> bool {
            self.shader_code_sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shader_code_sha(&mut self, v: ::bytes::Bytes) {
            self.shader_code_sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_shader_code_sha(&mut self) -> &mut ::bytes::Bytes {
            if self.shader_code_sha.is_none() {
                self.shader_code_sha = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.shader_code_sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_shader_code_sha(&mut self) -> ::bytes::Bytes {
            self.shader_code_sha.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional bytes shader_code = 2;

        pub fn shader_code(&self) -> &[u8] {
            match self.shader_code.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_shader_code(&mut self) {
            self.shader_code = ::std::option::Option::None;
        }

        pub fn has_shader_code(&self) -> bool {
            self.shader_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shader_code(&mut self, v: ::bytes::Bytes) {
            self.shader_code = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_shader_code(&mut self) -> &mut ::bytes::Bytes {
            if self.shader_code.is_none() {
                self.shader_code = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.shader_code.as_mut().unwrap()
        }

        // Take field
        pub fn take_shader_code(&mut self) -> ::bytes::Bytes {
            self.shader_code.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "shader_code_sha",
                |m: &ShaderCode| { &m.shader_code_sha },
                |m: &mut ShaderCode| { &mut m.shader_code_sha },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "shader_code",
                |m: &ShaderCode| { &m.shader_code },
                |m: &mut ShaderCode| { &mut m.shader_code },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ShaderCode>(
                "CShader_SendShader_Request.ShaderCode",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ShaderCode {
        const NAME: &'static str = "ShaderCode";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.shader_code_sha = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    18 => {
                        self.shader_code = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.shader_code_sha.as_ref() {
                my_size += crate::rt::bytes_size(1, &v);
            }
            if let Some(v) = self.shader_code.as_ref() {
                my_size += crate::rt::bytes_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.shader_code_sha.as_ref() {
                os.write_bytes(1, v)?;
            }
            if let Some(v) = self.shader_code.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ShaderCode {
            ShaderCode::new()
        }

        fn clear(&mut self) {
            self.shader_code_sha = ::std::option::Option::None;
            self.shader_code = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ShaderCode {
            static instance: ShaderCode = ShaderCode {
                shader_code_sha: ::std::option::Option::None,
                shader_code: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ShaderCode {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CShader_SendShader_Request.ShaderCode").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ShaderCode {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ShaderCode {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CShader_SendShader_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_SendShader_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CShader_SendShader_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_SendShader_Response {
    fn default() -> &'a CShader_SendShader_Response {
        <CShader_SendShader_Response as crate::Message>::default_instance()
    }
}

impl CShader_SendShader_Response {
    pub fn new() -> CShader_SendShader_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_SendShader_Response>(
            "CShader_SendShader_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_SendShader_Response {
    const NAME: &'static str = "CShader_SendShader_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_SendShader_Response {
        CShader_SendShader_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_SendShader_Response {
        static instance: CShader_SendShader_Response = CShader_SendShader_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_SendShader_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_SendShader_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_SendShader_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_SendShader_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetBucketManifest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetBucketManifest_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetBucketManifest_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetBucketManifest_Request {
    fn default() -> &'a CShader_GetBucketManifest_Request {
        <CShader_GetBucketManifest_Request as crate::Message>::default_instance()
    }
}

impl CShader_GetBucketManifest_Request {
    pub fn new() -> CShader_GetBucketManifest_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 2;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 3;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_GetBucketManifest_Request| { &m.appid },
            |m: &mut CShader_GetBucketManifest_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_GetBucketManifest_Request| { &m.gpu_desc },
            |m: &mut CShader_GetBucketManifest_Request| { &mut m.gpu_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_GetBucketManifest_Request| { &m.driver_desc },
            |m: &mut CShader_GetBucketManifest_Request| { &mut m.driver_desc },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetBucketManifest_Request>(
            "CShader_GetBucketManifest_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_GetBucketManifest_Request {
    const NAME: &'static str = "CShader_GetBucketManifest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetBucketManifest_Request {
        CShader_GetBucketManifest_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetBucketManifest_Request {
        static instance: CShader_GetBucketManifest_Request = CShader_GetBucketManifest_Request {
            appid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_GetBucketManifest_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetBucketManifest_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetBucketManifest_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_GetBucketManifest_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetBucketManifest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetBucketManifest_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Response.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Response.depotsize)
    pub depotsize: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetBucketManifest_Response.bucketid)
    pub bucketid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetBucketManifest_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetBucketManifest_Response {
    fn default() -> &'a CShader_GetBucketManifest_Response {
        <CShader_GetBucketManifest_Response as crate::Message>::default_instance()
    }
}

impl CShader_GetBucketManifest_Response {
    pub fn new() -> CShader_GetBucketManifest_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifestid = 1;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    // optional uint64 depotsize = 2;

    pub fn depotsize(&self) -> u64 {
        self.depotsize.unwrap_or(0)
    }

    pub fn clear_depotsize(&mut self) {
        self.depotsize = ::std::option::Option::None;
    }

    pub fn has_depotsize(&self) -> bool {
        self.depotsize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotsize(&mut self, v: u64) {
        self.depotsize = ::std::option::Option::Some(v);
    }

    // optional uint64 bucketid = 3;

    pub fn bucketid(&self) -> u64 {
        self.bucketid.unwrap_or(0)
    }

    pub fn clear_bucketid(&mut self) {
        self.bucketid = ::std::option::Option::None;
    }

    pub fn has_bucketid(&self) -> bool {
        self.bucketid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucketid(&mut self, v: u64) {
        self.bucketid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifestid",
            |m: &CShader_GetBucketManifest_Response| { &m.manifestid },
            |m: &mut CShader_GetBucketManifest_Response| { &mut m.manifestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotsize",
            |m: &CShader_GetBucketManifest_Response| { &m.depotsize },
            |m: &mut CShader_GetBucketManifest_Response| { &mut m.depotsize },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketid",
            |m: &CShader_GetBucketManifest_Response| { &m.bucketid },
            |m: &mut CShader_GetBucketManifest_Response| { &mut m.bucketid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetBucketManifest_Response>(
            "CShader_GetBucketManifest_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_GetBucketManifest_Response {
    const NAME: &'static str = "CShader_GetBucketManifest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.depotsize = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.bucketid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manifestid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.depotsize {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.bucketid {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.manifestid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.depotsize {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.bucketid {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetBucketManifest_Response {
        CShader_GetBucketManifest_Response::new()
    }

    fn clear(&mut self) {
        self.manifestid = ::std::option::Option::None;
        self.depotsize = ::std::option::Option::None;
        self.bucketid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetBucketManifest_Response {
        static instance: CShader_GetBucketManifest_Response = CShader_GetBucketManifest_Response {
            manifestid: ::std::option::Option::None,
            depotsize: ::std::option::Option::None,
            bucketid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_GetBucketManifest_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetBucketManifest_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetBucketManifest_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_GetBucketManifest_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetStaleBucket_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetStaleBucket_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetStaleBucket_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetStaleBucket_Request {
    fn default() -> &'a CShader_GetStaleBucket_Request {
        <CShader_GetStaleBucket_Request as crate::Message>::default_instance()
    }
}

impl CShader_GetStaleBucket_Request {
    pub fn new() -> CShader_GetStaleBucket_Request {
        ::std::default::Default::default()
    }

    // optional string gpu_desc = 1;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 2;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_GetStaleBucket_Request| { &m.gpu_desc },
            |m: &mut CShader_GetStaleBucket_Request| { &mut m.gpu_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_GetStaleBucket_Request| { &m.driver_desc },
            |m: &mut CShader_GetStaleBucket_Request| { &mut m.driver_desc },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetStaleBucket_Request>(
            "CShader_GetStaleBucket_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_GetStaleBucket_Request {
    const NAME: &'static str = "CShader_GetStaleBucket_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetStaleBucket_Request {
        CShader_GetStaleBucket_Request::new()
    }

    fn clear(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetStaleBucket_Request {
        static instance: CShader_GetStaleBucket_Request = CShader_GetStaleBucket_Request {
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_GetStaleBucket_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetStaleBucket_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetStaleBucket_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_GetStaleBucket_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_GetStaleBucket_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_GetStaleBucket_Response {
    // message fields
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.bucketid)
    pub bucketid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_GetStaleBucket_Response.depot_encryption_key)
    pub depot_encryption_key: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_GetStaleBucket_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_GetStaleBucket_Response {
    fn default() -> &'a CShader_GetStaleBucket_Response {
        <CShader_GetStaleBucket_Response as crate::Message>::default_instance()
    }
}

impl CShader_GetStaleBucket_Response {
    pub fn new() -> CShader_GetStaleBucket_Response {
        ::std::default::Default::default()
    }

    // optional uint64 bucketid = 1;

    pub fn bucketid(&self) -> u64 {
        self.bucketid.unwrap_or(0)
    }

    pub fn clear_bucketid(&mut self) {
        self.bucketid = ::std::option::Option::None;
    }

    pub fn has_bucketid(&self) -> bool {
        self.bucketid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucketid(&mut self, v: u64) {
        self.bucketid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 manifestid = 3;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 4;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 5;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes depot_encryption_key = 6;

    pub fn depot_encryption_key(&self) -> &[u8] {
        match self.depot_encryption_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_depot_encryption_key(&mut self) {
        self.depot_encryption_key = ::std::option::Option::None;
    }

    pub fn has_depot_encryption_key(&self) -> bool {
        self.depot_encryption_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_encryption_key(&mut self, v: ::bytes::Bytes) {
        self.depot_encryption_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_depot_encryption_key(&mut self) -> &mut ::bytes::Bytes {
        if self.depot_encryption_key.is_none() {
            self.depot_encryption_key = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.depot_encryption_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_depot_encryption_key(&mut self) -> ::bytes::Bytes {
        self.depot_encryption_key.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketid",
            |m: &CShader_GetStaleBucket_Response| { &m.bucketid },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.bucketid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_GetStaleBucket_Response| { &m.appid },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifestid",
            |m: &CShader_GetStaleBucket_Response| { &m.manifestid },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.manifestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_GetStaleBucket_Response| { &m.gpu_desc },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.gpu_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_GetStaleBucket_Response| { &m.driver_desc },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.driver_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "depot_encryption_key",
            |m: &CShader_GetStaleBucket_Response| { &m.depot_encryption_key },
            |m: &mut CShader_GetStaleBucket_Response| { &mut m.depot_encryption_key },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_GetStaleBucket_Response>(
            "CShader_GetStaleBucket_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_GetStaleBucket_Response {
    const NAME: &'static str = "CShader_GetStaleBucket_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bucketid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.depot_encryption_key = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bucketid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.manifestid {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.depot_encryption_key.as_ref() {
            my_size += crate::rt::bytes_size(6, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.bucketid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.manifestid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.depot_encryption_key.as_ref() {
            os.write_bytes(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_GetStaleBucket_Response {
        CShader_GetStaleBucket_Response::new()
    }

    fn clear(&mut self) {
        self.bucketid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.manifestid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.depot_encryption_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_GetStaleBucket_Response {
        static instance: CShader_GetStaleBucket_Response = CShader_GetStaleBucket_Response {
            bucketid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            manifestid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            depot_encryption_key: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_GetStaleBucket_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_GetStaleBucket_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_GetStaleBucket_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_GetStaleBucket_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_ReportExternalBuild_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_ReportExternalBuild_Request {
    // message fields
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.gpu_desc)
    pub gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.driver_desc)
    pub driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.source_gpu_desc)
    pub source_gpu_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.source_driver_desc)
    pub source_driver_desc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CShader_ReportExternalBuild_Request.depotsize)
    pub depotsize: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CShader_ReportExternalBuild_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_ReportExternalBuild_Request {
    fn default() -> &'a CShader_ReportExternalBuild_Request {
        <CShader_ReportExternalBuild_Request as crate::Message>::default_instance()
    }
}

impl CShader_ReportExternalBuild_Request {
    pub fn new() -> CShader_ReportExternalBuild_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string gpu_desc = 2;

    pub fn gpu_desc(&self) -> &str {
        match self.gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gpu_desc(&mut self) {
        self.gpu_desc = ::std::option::Option::None;
    }

    pub fn has_gpu_desc(&self) -> bool {
        self.gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gpu_desc(&mut self, v: ::std::string::String) {
        self.gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.gpu_desc.is_none() {
            self.gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_gpu_desc(&mut self) -> ::std::string::String {
        self.gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver_desc = 3;

    pub fn driver_desc(&self) -> &str {
        match self.driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver_desc(&mut self) {
        self.driver_desc = ::std::option::Option::None;
    }

    pub fn has_driver_desc(&self) -> bool {
        self.driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver_desc(&mut self, v: ::std::string::String) {
        self.driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.driver_desc.is_none() {
            self.driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver_desc(&mut self) -> ::std::string::String {
        self.driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 manifestid = 4;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    // optional string source_gpu_desc = 5;

    pub fn source_gpu_desc(&self) -> &str {
        match self.source_gpu_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_gpu_desc(&mut self) {
        self.source_gpu_desc = ::std::option::Option::None;
    }

    pub fn has_source_gpu_desc(&self) -> bool {
        self.source_gpu_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_gpu_desc(&mut self, v: ::std::string::String) {
        self.source_gpu_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_gpu_desc(&mut self) -> &mut ::std::string::String {
        if self.source_gpu_desc.is_none() {
            self.source_gpu_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_gpu_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_gpu_desc(&mut self) -> ::std::string::String {
        self.source_gpu_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string source_driver_desc = 6;

    pub fn source_driver_desc(&self) -> &str {
        match self.source_driver_desc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_driver_desc(&mut self) {
        self.source_driver_desc = ::std::option::Option::None;
    }

    pub fn has_source_driver_desc(&self) -> bool {
        self.source_driver_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_driver_desc(&mut self, v: ::std::string::String) {
        self.source_driver_desc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_driver_desc(&mut self) -> &mut ::std::string::String {
        if self.source_driver_desc.is_none() {
            self.source_driver_desc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_driver_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_driver_desc(&mut self) -> ::std::string::String {
        self.source_driver_desc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 depotsize = 7;

    pub fn depotsize(&self) -> u64 {
        self.depotsize.unwrap_or(0)
    }

    pub fn clear_depotsize(&mut self) {
        self.depotsize = ::std::option::Option::None;
    }

    pub fn has_depotsize(&self) -> bool {
        self.depotsize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotsize(&mut self, v: u64) {
        self.depotsize = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CShader_ReportExternalBuild_Request| { &m.appid },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gpu_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.gpu_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.gpu_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "driver_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.driver_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.driver_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifestid",
            |m: &CShader_ReportExternalBuild_Request| { &m.manifestid },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.manifestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_gpu_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.source_gpu_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.source_gpu_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_driver_desc",
            |m: &CShader_ReportExternalBuild_Request| { &m.source_driver_desc },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.source_driver_desc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotsize",
            |m: &CShader_ReportExternalBuild_Request| { &m.depotsize },
            |m: &mut CShader_ReportExternalBuild_Request| { &mut m.depotsize },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_ReportExternalBuild_Request>(
            "CShader_ReportExternalBuild_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_ReportExternalBuild_Request {
    const NAME: &'static str = "CShader_ReportExternalBuild_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    self.source_gpu_desc = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.source_driver_desc = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.depotsize = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver_desc.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.manifestid {
            my_size += crate::rt::uint64_size(4, v);
        }
        if let Some(v) = self.source_gpu_desc.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.source_driver_desc.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.depotsize {
            my_size += crate::rt::uint64_size(7, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.gpu_desc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver_desc.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.manifestid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.source_gpu_desc.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.source_driver_desc.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.depotsize {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_ReportExternalBuild_Request {
        CShader_ReportExternalBuild_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.gpu_desc = ::std::option::Option::None;
        self.driver_desc = ::std::option::Option::None;
        self.manifestid = ::std::option::Option::None;
        self.source_gpu_desc = ::std::option::Option::None;
        self.source_driver_desc = ::std::option::Option::None;
        self.depotsize = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_ReportExternalBuild_Request {
        static instance: CShader_ReportExternalBuild_Request = CShader_ReportExternalBuild_Request {
            appid: ::std::option::Option::None,
            gpu_desc: ::std::option::Option::None,
            driver_desc: ::std::option::Option::None,
            manifestid: ::std::option::Option::None,
            source_gpu_desc: ::std::option::Option::None,
            source_driver_desc: ::std::option::Option::None,
            depotsize: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_ReportExternalBuild_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_ReportExternalBuild_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_ReportExternalBuild_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_ReportExternalBuild_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CShader_ReportExternalBuild_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CShader_ReportExternalBuild_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CShader_ReportExternalBuild_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CShader_ReportExternalBuild_Response {
    fn default() -> &'a CShader_ReportExternalBuild_Response {
        <CShader_ReportExternalBuild_Response as crate::Message>::default_instance()
    }
}

impl CShader_ReportExternalBuild_Response {
    pub fn new() -> CShader_ReportExternalBuild_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CShader_ReportExternalBuild_Response>(
            "CShader_ReportExternalBuild_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CShader_ReportExternalBuild_Response {
    const NAME: &'static str = "CShader_ReportExternalBuild_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CShader_ReportExternalBuild_Response {
        CShader_ReportExternalBuild_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CShader_ReportExternalBuild_Response {
        static instance: CShader_ReportExternalBuild_Response = CShader_ReportExternalBuild_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CShader_ReportExternalBuild_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CShader_ReportExternalBuild_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CShader_ReportExternalBuild_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CShader_ReportExternalBuild_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&steammessages_shader.steamclient.proto\x1a\x18steammessages_base.prot\
    o\x1a,steammessages_unified_base.steamclient.proto\"+\n)CShader_GetShade\
    rReportingCadence_Request\"\x94\x01\n*CShader_GetShaderReportingCadence_\
    Response\x126\n\x17rereport_time_threshold\x18\x01\x20\x01(\x04R\x15rere\
    portTimeThreshold\x12.\n\x13percent_to_rereport\x18\x02\x20\x01(\rR\x11p\
    ercentToRereport\"\x8a\x02\n\x1eCShader_RegisterShader_Request\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x19\n\x08gpu_desc\x18\x02\x20\
    \x01(\tR\x07gpuDesc\x12\x1f\n\x0bdriver_desc\x18\x03\x20\x01(\tR\ndriver\
    Desc\x12@\n\x07shaders\x18\x04\x20\x03(\x0b2&.CShader_RegisterShader_Req\
    uest.ShaderR\x07shaders\x1aT\n\x06Shader\x12\"\n\rcache_key_sha\x18\x01\
    \x20\x01(\x0cR\x0bcacheKeySha\x12&\n\x0fshader_code_sha\x18\x02\x20\x01(\
    \x0cR\rshaderCodeSha\"N\n\x1fCShader_RegisterShader_Response\x12+\n\x11r\
    equested_codeids\x18\x01\x20\x03(\rR\x10requestedCodeids\"\xcb\x01\n\x1a\
    CShader_SendShader_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05app\
    id\x12@\n\x07shaders\x18\x02\x20\x03(\x0b2&.CShader_SendShader_Request.S\
    haderCodeR\x07shaders\x1aU\n\nShaderCode\x12&\n\x0fshader_code_sha\x18\
    \x01\x20\x01(\x0cR\rshaderCodeSha\x12\x1f\n\x0bshader_code\x18\x02\x20\
    \x01(\x0cR\nshaderCode\"\x1d\n\x1bCShader_SendShader_Response\"u\n!CShad\
    er_GetBucketManifest_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05a\
    ppid\x12\x19\n\x08gpu_desc\x18\x02\x20\x01(\tR\x07gpuDesc\x12\x1f\n\x0bd\
    river_desc\x18\x03\x20\x01(\tR\ndriverDesc\"~\n\"CShader_GetBucketManife\
    st_Response\x12\x1e\n\nmanifestid\x18\x01\x20\x01(\x04R\nmanifestid\x12\
    \x1c\n\tdepotsize\x18\x02\x20\x01(\x04R\tdepotsize\x12\x1a\n\x08bucketid\
    \x18\x03\x20\x01(\x04R\x08bucketid\"\\\n\x1eCShader_GetStaleBucket_Reque\
    st\x12\x19\n\x08gpu_desc\x18\x01\x20\x01(\tR\x07gpuDesc\x12\x1f\n\x0bdri\
    ver_desc\x18\x02\x20\x01(\tR\ndriverDesc\"\xe1\x01\n\x1fCShader_GetStale\
    Bucket_Response\x12\x1a\n\x08bucketid\x18\x01\x20\x01(\x04R\x08bucketid\
    \x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12\x1e\n\nmanifestid\
    \x18\x03\x20\x01(\x04R\nmanifestid\x12\x19\n\x08gpu_desc\x18\x04\x20\x01\
    (\tR\x07gpuDesc\x12\x1f\n\x0bdriver_desc\x18\x05\x20\x01(\tR\ndriverDesc\
    \x120\n\x14depot_encryption_key\x18\x06\x20\x01(\x0cR\x12depotEncryption\
    Key\"\x8b\x02\n#CShader_ReportExternalBuild_Request\x12\x14\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appid\x12\x19\n\x08gpu_desc\x18\x02\x20\x01(\tR\
    \x07gpuDesc\x12\x1f\n\x0bdriver_desc\x18\x03\x20\x01(\tR\ndriverDesc\x12\
    \x1e\n\nmanifestid\x18\x04\x20\x01(\x04R\nmanifestid\x12&\n\x0fsource_gp\
    u_desc\x18\x05\x20\x01(\tR\rsourceGpuDesc\x12,\n\x12source_driver_desc\
    \x18\x06\x20\x01(\tR\x10sourceDriverDesc\x12\x1c\n\tdepotsize\x18\x07\
    \x20\x01(\x04R\tdepotsize\"&\n$CShader_ReportExternalBuild_Response2\xb3\
    \x04\n\x06Shader\x12t\n\x19GetShaderReportingCadence\x12*.CShader_GetSha\
    derReportingCadence_Request\x1a+.CShader_GetShaderReportingCadence_Respo\
    nse\x12S\n\x0eRegisterShader\x12\x1f.CShader_RegisterShader_Request\x1a\
    \x20.CShader_RegisterShader_Response\x12G\n\nSendShader\x12\x1b.CShader_\
    SendShader_Request\x1a\x1c.CShader_SendShader_Response\x12\\\n\x11GetBuc\
    ketManifest\x12\".CShader_GetBucketManifest_Request\x1a#.CShader_GetBuck\
    etManifest_Response\x12S\n\x0eGetStaleBucket\x12\x1f.CShader_GetStaleBuc\
    ket_Request\x1a\x20.CShader_GetStaleBucket_Response\x12b\n\x13ReportExte\
    rnalBuild\x12$.CShader_ReportExternalBuild_Request\x1a%.CShader_ReportEx\
    ternalBuild_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(CShader_GetShaderReportingCadence_Request::generated_message_descriptor_data());
            messages.push(CShader_GetShaderReportingCadence_Response::generated_message_descriptor_data());
            messages.push(CShader_RegisterShader_Request::generated_message_descriptor_data());
            messages.push(CShader_RegisterShader_Response::generated_message_descriptor_data());
            messages.push(CShader_SendShader_Request::generated_message_descriptor_data());
            messages.push(CShader_SendShader_Response::generated_message_descriptor_data());
            messages.push(CShader_GetBucketManifest_Request::generated_message_descriptor_data());
            messages.push(CShader_GetBucketManifest_Response::generated_message_descriptor_data());
            messages.push(CShader_GetStaleBucket_Request::generated_message_descriptor_data());
            messages.push(CShader_GetStaleBucket_Response::generated_message_descriptor_data());
            messages.push(CShader_ReportExternalBuild_Request::generated_message_descriptor_data());
            messages.push(CShader_ReportExternalBuild_Response::generated_message_descriptor_data());
            messages.push(cshader_register_shader_request::Shader::generated_message_descriptor_data());
            messages.push(cshader_send_shader_request::ShaderCode::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
