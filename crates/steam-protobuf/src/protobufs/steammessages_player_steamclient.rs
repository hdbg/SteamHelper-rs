// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_player.steamclient.proto`

// @@protoc_insertion_point(message:CPlayer_GetPlayerLinkDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPlayerLinkDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Request.steamids)
    pub steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPlayerLinkDetails_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPlayerLinkDetails_Request {
    fn default() -> &'a CPlayer_GetPlayerLinkDetails_Request {
        <CPlayer_GetPlayerLinkDetails_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPlayerLinkDetails_Request {
    pub fn new() -> CPlayer_GetPlayerLinkDetails_Request {
        ::std::default::Default::default()
    }

    // repeated uint64 steamids = 1;

    pub fn steamids(&self) -> &[u64] {
        &self.steamids
    }

    pub fn clear_steamids(&mut self) {
        self.steamids.clear();
    }

    // Param is passed by value, moved
    pub fn set_steamids(&mut self, v: ::std::vec::Vec<u64>) {
        self.steamids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_steamids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.steamids
    }

    // Take field
    pub fn take_steamids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.steamids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steamids",
            |m: &CPlayer_GetPlayerLinkDetails_Request| { &m.steamids },
            |m: &mut CPlayer_GetPlayerLinkDetails_Request| { &mut m.steamids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPlayerLinkDetails_Request>(
            "CPlayer_GetPlayerLinkDetails_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPlayerLinkDetails_Request {
    const NAME: &'static str = "CPlayer_GetPlayerLinkDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.steamids)?;
                },
                8 => {
                    self.steamids.push(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.steamids {
            my_size += crate::rt::uint64_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.steamids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPlayerLinkDetails_Request {
        CPlayer_GetPlayerLinkDetails_Request::new()
    }

    fn clear(&mut self) {
        self.steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPlayerLinkDetails_Request {
        static instance: CPlayer_GetPlayerLinkDetails_Request = CPlayer_GetPlayerLinkDetails_Request {
            steamids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPlayerLinkDetails_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPlayerLinkDetails_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPlayerLinkDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPlayerLinkDetails_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPlayerLinkDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPlayerLinkDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.accounts)
    pub accounts: ::std::vec::Vec<cplayer_get_player_link_details_response::PlayerLinkDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPlayerLinkDetails_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPlayerLinkDetails_Response {
    fn default() -> &'a CPlayer_GetPlayerLinkDetails_Response {
        <CPlayer_GetPlayerLinkDetails_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPlayerLinkDetails_Response {
    pub fn new() -> CPlayer_GetPlayerLinkDetails_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails accounts = 1;

    pub fn accounts(&self) -> &[cplayer_get_player_link_details_response::PlayerLinkDetails] {
        &self.accounts
    }

    pub fn clear_accounts(&mut self) {
        self.accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_accounts(&mut self, v: ::std::vec::Vec<cplayer_get_player_link_details_response::PlayerLinkDetails>) {
        self.accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_accounts(&mut self) -> &mut ::std::vec::Vec<cplayer_get_player_link_details_response::PlayerLinkDetails> {
        &mut self.accounts
    }

    // Take field
    pub fn take_accounts(&mut self) -> ::std::vec::Vec<cplayer_get_player_link_details_response::PlayerLinkDetails> {
        ::std::mem::replace(&mut self.accounts, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accounts",
            |m: &CPlayer_GetPlayerLinkDetails_Response| { &m.accounts },
            |m: &mut CPlayer_GetPlayerLinkDetails_Response| { &mut m.accounts },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPlayerLinkDetails_Response>(
            "CPlayer_GetPlayerLinkDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPlayerLinkDetails_Response {
    const NAME: &'static str = "CPlayer_GetPlayerLinkDetails_Response";

    fn is_initialized(&self) -> bool {
        for v in &self.accounts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.accounts.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.accounts {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPlayerLinkDetails_Response {
        CPlayer_GetPlayerLinkDetails_Response::new()
    }

    fn clear(&mut self) {
        self.accounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPlayerLinkDetails_Response {
        static instance: CPlayer_GetPlayerLinkDetails_Response = CPlayer_GetPlayerLinkDetails_Response {
            accounts: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPlayerLinkDetails_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPlayerLinkDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPlayerLinkDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPlayerLinkDetails_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetPlayerLinkDetails_Response`
pub mod cplayer_get_player_link_details_response {
    // @@protoc_insertion_point(message:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerLinkDetails {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.public_data)
        pub public_data: crate::MessageField<player_link_details::AccountPublicData>,
        // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.private_data)
        pub private_data: crate::MessageField<player_link_details::AccountPrivateData>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerLinkDetails {
        fn default() -> &'a PlayerLinkDetails {
            <PlayerLinkDetails as crate::Message>::default_instance()
        }
    }

    impl PlayerLinkDetails {
        pub fn new() -> PlayerLinkDetails {
            ::std::default::Default::default()
        }

        // optional .CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData public_data = 1;

        pub fn public_data(&self) -> &player_link_details::AccountPublicData {
            self.public_data.as_ref().unwrap_or_else(|| <player_link_details::AccountPublicData as crate::Message>::default_instance())
        }

        pub fn clear_public_data(&mut self) {
            self.public_data.clear();
        }

        pub fn has_public_data(&self) -> bool {
            self.public_data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_public_data(&mut self, v: player_link_details::AccountPublicData) {
            self.public_data = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_public_data(&mut self) -> &mut player_link_details::AccountPublicData {
            self.public_data.mut_or_insert_default()
        }

        // Take field
        pub fn take_public_data(&mut self) -> player_link_details::AccountPublicData {
            self.public_data.take().unwrap_or_else(|| player_link_details::AccountPublicData::new())
        }

        // optional .CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData private_data = 2;

        pub fn private_data(&self) -> &player_link_details::AccountPrivateData {
            self.private_data.as_ref().unwrap_or_else(|| <player_link_details::AccountPrivateData as crate::Message>::default_instance())
        }

        pub fn clear_private_data(&mut self) {
            self.private_data.clear();
        }

        pub fn has_private_data(&self) -> bool {
            self.private_data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_private_data(&mut self, v: player_link_details::AccountPrivateData) {
            self.private_data = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_private_data(&mut self) -> &mut player_link_details::AccountPrivateData {
            self.private_data.mut_or_insert_default()
        }

        // Take field
        pub fn take_private_data(&mut self) -> player_link_details::AccountPrivateData {
            self.private_data.take().unwrap_or_else(|| player_link_details::AccountPrivateData::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, player_link_details::AccountPublicData>(
                "public_data",
                |m: &PlayerLinkDetails| { &m.public_data },
                |m: &mut PlayerLinkDetails| { &mut m.public_data },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, player_link_details::AccountPrivateData>(
                "private_data",
                |m: &PlayerLinkDetails| { &m.private_data },
                |m: &mut PlayerLinkDetails| { &mut m.private_data },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PlayerLinkDetails>(
                "CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PlayerLinkDetails {
        const NAME: &'static str = "PlayerLinkDetails";

        fn is_initialized(&self) -> bool {
            for v in &self.public_data {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.private_data {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.public_data)?;
                    },
                    18 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.private_data)?;
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.public_data.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.private_data.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.public_data.as_ref() {
                crate::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.private_data.as_ref() {
                crate::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerLinkDetails {
            PlayerLinkDetails::new()
        }

        fn clear(&mut self) {
            self.public_data.clear();
            self.private_data.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerLinkDetails {
            static instance: PlayerLinkDetails = PlayerLinkDetails {
                public_data: crate::MessageField::none(),
                private_data: crate::MessageField::none(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PlayerLinkDetails {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PlayerLinkDetails {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PlayerLinkDetails {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `PlayerLinkDetails`
    pub mod player_link_details {
        // @@protoc_insertion_point(message:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct AccountPublicData {
            // message fields
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.steamid)
            pub steamid: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.visibility_state)
            pub visibility_state: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.privacy_state)
            pub privacy_state: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.profile_state)
            pub profile_state: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.ban_expires_time)
            pub ban_expires_time: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.account_flags)
            pub account_flags: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.sha_digest_avatar)
            pub sha_digest_avatar: ::std::option::Option<::bytes::Bytes>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.persona_name)
            pub persona_name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.profile_url)
            pub profile_url: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.content_country_restricted)
            pub content_country_restricted: ::std::option::Option<bool>,
            // special fields
            // @@protoc_insertion_point(special_field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData.special_fields)
            pub special_fields: crate::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a AccountPublicData {
            fn default() -> &'a AccountPublicData {
                <AccountPublicData as crate::Message>::default_instance()
            }
        }

        impl AccountPublicData {
            pub fn new() -> AccountPublicData {
                ::std::default::Default::default()
            }

            // required fixed64 steamid = 1;

            pub fn steamid(&self) -> u64 {
                self.steamid.unwrap_or(0)
            }

            pub fn clear_steamid(&mut self) {
                self.steamid = ::std::option::Option::None;
            }

            pub fn has_steamid(&self) -> bool {
                self.steamid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_steamid(&mut self, v: u64) {
                self.steamid = ::std::option::Option::Some(v);
            }

            // optional int32 visibility_state = 2;

            pub fn visibility_state(&self) -> i32 {
                self.visibility_state.unwrap_or(0)
            }

            pub fn clear_visibility_state(&mut self) {
                self.visibility_state = ::std::option::Option::None;
            }

            pub fn has_visibility_state(&self) -> bool {
                self.visibility_state.is_some()
            }

            // Param is passed by value, moved
            pub fn set_visibility_state(&mut self, v: i32) {
                self.visibility_state = ::std::option::Option::Some(v);
            }

            // optional int32 privacy_state = 3;

            pub fn privacy_state(&self) -> i32 {
                self.privacy_state.unwrap_or(0)
            }

            pub fn clear_privacy_state(&mut self) {
                self.privacy_state = ::std::option::Option::None;
            }

            pub fn has_privacy_state(&self) -> bool {
                self.privacy_state.is_some()
            }

            // Param is passed by value, moved
            pub fn set_privacy_state(&mut self, v: i32) {
                self.privacy_state = ::std::option::Option::Some(v);
            }

            // optional int32 profile_state = 4;

            pub fn profile_state(&self) -> i32 {
                self.profile_state.unwrap_or(0)
            }

            pub fn clear_profile_state(&mut self) {
                self.profile_state = ::std::option::Option::None;
            }

            pub fn has_profile_state(&self) -> bool {
                self.profile_state.is_some()
            }

            // Param is passed by value, moved
            pub fn set_profile_state(&mut self, v: i32) {
                self.profile_state = ::std::option::Option::Some(v);
            }

            // optional uint32 ban_expires_time = 7;

            pub fn ban_expires_time(&self) -> u32 {
                self.ban_expires_time.unwrap_or(0)
            }

            pub fn clear_ban_expires_time(&mut self) {
                self.ban_expires_time = ::std::option::Option::None;
            }

            pub fn has_ban_expires_time(&self) -> bool {
                self.ban_expires_time.is_some()
            }

            // Param is passed by value, moved
            pub fn set_ban_expires_time(&mut self, v: u32) {
                self.ban_expires_time = ::std::option::Option::Some(v);
            }

            // optional uint32 account_flags = 8;

            pub fn account_flags(&self) -> u32 {
                self.account_flags.unwrap_or(0)
            }

            pub fn clear_account_flags(&mut self) {
                self.account_flags = ::std::option::Option::None;
            }

            pub fn has_account_flags(&self) -> bool {
                self.account_flags.is_some()
            }

            // Param is passed by value, moved
            pub fn set_account_flags(&mut self, v: u32) {
                self.account_flags = ::std::option::Option::Some(v);
            }

            // optional bytes sha_digest_avatar = 9;

            pub fn sha_digest_avatar(&self) -> &[u8] {
                match self.sha_digest_avatar.as_ref() {
                    Some(v) => v,
                    None => &[],
                }
            }

            pub fn clear_sha_digest_avatar(&mut self) {
                self.sha_digest_avatar = ::std::option::Option::None;
            }

            pub fn has_sha_digest_avatar(&self) -> bool {
                self.sha_digest_avatar.is_some()
            }

            // Param is passed by value, moved
            pub fn set_sha_digest_avatar(&mut self, v: ::bytes::Bytes) {
                self.sha_digest_avatar = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_sha_digest_avatar(&mut self) -> &mut ::bytes::Bytes {
                if self.sha_digest_avatar.is_none() {
                    self.sha_digest_avatar = ::std::option::Option::Some(::bytes::Bytes::new());
                }
                self.sha_digest_avatar.as_mut().unwrap()
            }

            // Take field
            pub fn take_sha_digest_avatar(&mut self) -> ::bytes::Bytes {
                self.sha_digest_avatar.take().unwrap_or_else(|| ::bytes::Bytes::new())
            }

            // optional string persona_name = 10;

            pub fn persona_name(&self) -> &str {
                match self.persona_name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_persona_name(&mut self) {
                self.persona_name = ::std::option::Option::None;
            }

            pub fn has_persona_name(&self) -> bool {
                self.persona_name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_persona_name(&mut self, v: ::std::string::String) {
                self.persona_name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_persona_name(&mut self) -> &mut ::std::string::String {
                if self.persona_name.is_none() {
                    self.persona_name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.persona_name.as_mut().unwrap()
            }

            // Take field
            pub fn take_persona_name(&mut self) -> ::std::string::String {
                self.persona_name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string profile_url = 11;

            pub fn profile_url(&self) -> &str {
                match self.profile_url.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_profile_url(&mut self) {
                self.profile_url = ::std::option::Option::None;
            }

            pub fn has_profile_url(&self) -> bool {
                self.profile_url.is_some()
            }

            // Param is passed by value, moved
            pub fn set_profile_url(&mut self, v: ::std::string::String) {
                self.profile_url = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_profile_url(&mut self) -> &mut ::std::string::String {
                if self.profile_url.is_none() {
                    self.profile_url = ::std::option::Option::Some(::std::string::String::new());
                }
                self.profile_url.as_mut().unwrap()
            }

            // Take field
            pub fn take_profile_url(&mut self) -> ::std::string::String {
                self.profile_url.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional bool content_country_restricted = 12;

            pub fn content_country_restricted(&self) -> bool {
                self.content_country_restricted.unwrap_or(false)
            }

            pub fn clear_content_country_restricted(&mut self) {
                self.content_country_restricted = ::std::option::Option::None;
            }

            pub fn has_content_country_restricted(&self) -> bool {
                self.content_country_restricted.is_some()
            }

            // Param is passed by value, moved
            pub fn set_content_country_restricted(&mut self, v: bool) {
                self.content_country_restricted = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(10);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "steamid",
                    |m: &AccountPublicData| { &m.steamid },
                    |m: &mut AccountPublicData| { &mut m.steamid },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "visibility_state",
                    |m: &AccountPublicData| { &m.visibility_state },
                    |m: &mut AccountPublicData| { &mut m.visibility_state },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "privacy_state",
                    |m: &AccountPublicData| { &m.privacy_state },
                    |m: &mut AccountPublicData| { &mut m.privacy_state },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "profile_state",
                    |m: &AccountPublicData| { &m.profile_state },
                    |m: &mut AccountPublicData| { &mut m.profile_state },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "ban_expires_time",
                    |m: &AccountPublicData| { &m.ban_expires_time },
                    |m: &mut AccountPublicData| { &mut m.ban_expires_time },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "account_flags",
                    |m: &AccountPublicData| { &m.account_flags },
                    |m: &mut AccountPublicData| { &mut m.account_flags },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "sha_digest_avatar",
                    |m: &AccountPublicData| { &m.sha_digest_avatar },
                    |m: &mut AccountPublicData| { &mut m.sha_digest_avatar },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "persona_name",
                    |m: &AccountPublicData| { &m.persona_name },
                    |m: &mut AccountPublicData| { &mut m.persona_name },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "profile_url",
                    |m: &AccountPublicData| { &m.profile_url },
                    |m: &mut AccountPublicData| { &mut m.profile_url },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "content_country_restricted",
                    |m: &AccountPublicData| { &m.content_country_restricted },
                    |m: &mut AccountPublicData| { &mut m.content_country_restricted },
                ));
                crate::reflect::GeneratedMessageDescriptorData::new_2::<AccountPublicData>(
                    "CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData",
                    fields,
                    oneofs,
                )
            }
        }

        impl crate::Message for AccountPublicData {
            const NAME: &'static str = "AccountPublicData";

            fn is_initialized(&self) -> bool {
                if self.steamid.is_none() {
                    return false;
                }
                true
            }

            fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        9 => {
                            self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                        },
                        16 => {
                            self.visibility_state = ::std::option::Option::Some(is.read_int32()?);
                        },
                        24 => {
                            self.privacy_state = ::std::option::Option::Some(is.read_int32()?);
                        },
                        32 => {
                            self.profile_state = ::std::option::Option::Some(is.read_int32()?);
                        },
                        56 => {
                            self.ban_expires_time = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        64 => {
                            self.account_flags = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        74 => {
                            self.sha_digest_avatar = ::std::option::Option::Some(is.read_tokio_bytes()?);
                        },
                        82 => {
                            self.persona_name = ::std::option::Option::Some(is.read_string()?);
                        },
                        90 => {
                            self.profile_url = ::std::option::Option::Some(is.read_string()?);
                        },
                        96 => {
                            self.content_country_restricted = ::std::option::Option::Some(is.read_bool()?);
                        },
                        tag => {
                            crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.steamid {
                    my_size += 1 + 8;
                }
                if let Some(v) = self.visibility_state {
                    my_size += crate::rt::int32_size(2, v);
                }
                if let Some(v) = self.privacy_state {
                    my_size += crate::rt::int32_size(3, v);
                }
                if let Some(v) = self.profile_state {
                    my_size += crate::rt::int32_size(4, v);
                }
                if let Some(v) = self.ban_expires_time {
                    my_size += crate::rt::uint32_size(7, v);
                }
                if let Some(v) = self.account_flags {
                    my_size += crate::rt::uint32_size(8, v);
                }
                if let Some(v) = self.sha_digest_avatar.as_ref() {
                    my_size += crate::rt::bytes_size(9, &v);
                }
                if let Some(v) = self.persona_name.as_ref() {
                    my_size += crate::rt::string_size(10, &v);
                }
                if let Some(v) = self.profile_url.as_ref() {
                    my_size += crate::rt::string_size(11, &v);
                }
                if let Some(v) = self.content_country_restricted {
                    my_size += 1 + 1;
                }
                my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
                if let Some(v) = self.steamid {
                    os.write_fixed64(1, v)?;
                }
                if let Some(v) = self.visibility_state {
                    os.write_int32(2, v)?;
                }
                if let Some(v) = self.privacy_state {
                    os.write_int32(3, v)?;
                }
                if let Some(v) = self.profile_state {
                    os.write_int32(4, v)?;
                }
                if let Some(v) = self.ban_expires_time {
                    os.write_uint32(7, v)?;
                }
                if let Some(v) = self.account_flags {
                    os.write_uint32(8, v)?;
                }
                if let Some(v) = self.sha_digest_avatar.as_ref() {
                    os.write_bytes(9, v)?;
                }
                if let Some(v) = self.persona_name.as_ref() {
                    os.write_string(10, v)?;
                }
                if let Some(v) = self.profile_url.as_ref() {
                    os.write_string(11, v)?;
                }
                if let Some(v) = self.content_country_restricted {
                    os.write_bool(12, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &crate::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> AccountPublicData {
                AccountPublicData::new()
            }

            fn clear(&mut self) {
                self.steamid = ::std::option::Option::None;
                self.visibility_state = ::std::option::Option::None;
                self.privacy_state = ::std::option::Option::None;
                self.profile_state = ::std::option::Option::None;
                self.ban_expires_time = ::std::option::Option::None;
                self.account_flags = ::std::option::Option::None;
                self.sha_digest_avatar = ::std::option::Option::None;
                self.persona_name = ::std::option::Option::None;
                self.profile_url = ::std::option::Option::None;
                self.content_country_restricted = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static AccountPublicData {
                static instance: AccountPublicData = AccountPublicData {
                    steamid: ::std::option::Option::None,
                    visibility_state: ::std::option::Option::None,
                    privacy_state: ::std::option::Option::None,
                    profile_state: ::std::option::Option::None,
                    ban_expires_time: ::std::option::Option::None,
                    account_flags: ::std::option::Option::None,
                    sha_digest_avatar: ::std::option::Option::None,
                    persona_name: ::std::option::Option::None,
                    profile_url: ::std::option::Option::None,
                    content_country_restricted: ::std::option::Option::None,
                    special_fields: crate::SpecialFields::new(),
                };
                &instance
            }
        }

        impl crate::MessageFull for AccountPublicData {
            fn descriptor() -> crate::reflect::MessageDescriptor {
                static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPublicData").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for AccountPublicData {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                crate::text_format::fmt(self, f)
            }
        }

        impl crate::reflect::ProtobufValue for AccountPublicData {
            type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct AccountPrivateData {
            // message fields
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.persona_state)
            pub persona_state: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.persona_state_flags)
            pub persona_state_flags: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.time_created)
            pub time_created: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_id)
            pub game_id: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_server_steam_id)
            pub game_server_steam_id: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_server_ip_address)
            pub game_server_ip_address: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_server_port)
            pub game_server_port: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_extra_info)
            pub game_extra_info: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.account_name)
            pub account_name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.lobby_steam_id)
            pub lobby_steam_id: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.rich_presence_kv)
            pub rich_presence_kv: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.broadcast_session_id)
            pub broadcast_session_id: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.watching_broadcast_accountid)
            pub watching_broadcast_accountid: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.watching_broadcast_appid)
            pub watching_broadcast_appid: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.watching_broadcast_viewers)
            pub watching_broadcast_viewers: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.watching_broadcast_title)
            pub watching_broadcast_title: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.last_logoff_time)
            pub last_logoff_time: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.last_seen_online)
            pub last_seen_online: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_os_type)
            pub game_os_type: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_device_type)
            pub game_device_type: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.game_device_name)
            pub game_device_name: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData.special_fields)
            pub special_fields: crate::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a AccountPrivateData {
            fn default() -> &'a AccountPrivateData {
                <AccountPrivateData as crate::Message>::default_instance()
            }
        }

        impl AccountPrivateData {
            pub fn new() -> AccountPrivateData {
                ::std::default::Default::default()
            }

            // optional int32 persona_state = 1;

            pub fn persona_state(&self) -> i32 {
                self.persona_state.unwrap_or(0)
            }

            pub fn clear_persona_state(&mut self) {
                self.persona_state = ::std::option::Option::None;
            }

            pub fn has_persona_state(&self) -> bool {
                self.persona_state.is_some()
            }

            // Param is passed by value, moved
            pub fn set_persona_state(&mut self, v: i32) {
                self.persona_state = ::std::option::Option::Some(v);
            }

            // optional uint32 persona_state_flags = 2;

            pub fn persona_state_flags(&self) -> u32 {
                self.persona_state_flags.unwrap_or(0)
            }

            pub fn clear_persona_state_flags(&mut self) {
                self.persona_state_flags = ::std::option::Option::None;
            }

            pub fn has_persona_state_flags(&self) -> bool {
                self.persona_state_flags.is_some()
            }

            // Param is passed by value, moved
            pub fn set_persona_state_flags(&mut self, v: u32) {
                self.persona_state_flags = ::std::option::Option::Some(v);
            }

            // optional uint32 time_created = 3;

            pub fn time_created(&self) -> u32 {
                self.time_created.unwrap_or(0)
            }

            pub fn clear_time_created(&mut self) {
                self.time_created = ::std::option::Option::None;
            }

            pub fn has_time_created(&self) -> bool {
                self.time_created.is_some()
            }

            // Param is passed by value, moved
            pub fn set_time_created(&mut self, v: u32) {
                self.time_created = ::std::option::Option::Some(v);
            }

            // optional fixed64 game_id = 4;

            pub fn game_id(&self) -> u64 {
                self.game_id.unwrap_or(0)
            }

            pub fn clear_game_id(&mut self) {
                self.game_id = ::std::option::Option::None;
            }

            pub fn has_game_id(&self) -> bool {
                self.game_id.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_id(&mut self, v: u64) {
                self.game_id = ::std::option::Option::Some(v);
            }

            // optional fixed64 game_server_steam_id = 5;

            pub fn game_server_steam_id(&self) -> u64 {
                self.game_server_steam_id.unwrap_or(0)
            }

            pub fn clear_game_server_steam_id(&mut self) {
                self.game_server_steam_id = ::std::option::Option::None;
            }

            pub fn has_game_server_steam_id(&self) -> bool {
                self.game_server_steam_id.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_server_steam_id(&mut self, v: u64) {
                self.game_server_steam_id = ::std::option::Option::Some(v);
            }

            // optional uint32 game_server_ip_address = 6;

            pub fn game_server_ip_address(&self) -> u32 {
                self.game_server_ip_address.unwrap_or(0)
            }

            pub fn clear_game_server_ip_address(&mut self) {
                self.game_server_ip_address = ::std::option::Option::None;
            }

            pub fn has_game_server_ip_address(&self) -> bool {
                self.game_server_ip_address.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_server_ip_address(&mut self, v: u32) {
                self.game_server_ip_address = ::std::option::Option::Some(v);
            }

            // optional uint32 game_server_port = 7;

            pub fn game_server_port(&self) -> u32 {
                self.game_server_port.unwrap_or(0)
            }

            pub fn clear_game_server_port(&mut self) {
                self.game_server_port = ::std::option::Option::None;
            }

            pub fn has_game_server_port(&self) -> bool {
                self.game_server_port.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_server_port(&mut self, v: u32) {
                self.game_server_port = ::std::option::Option::Some(v);
            }

            // optional string game_extra_info = 8;

            pub fn game_extra_info(&self) -> &str {
                match self.game_extra_info.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_game_extra_info(&mut self) {
                self.game_extra_info = ::std::option::Option::None;
            }

            pub fn has_game_extra_info(&self) -> bool {
                self.game_extra_info.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_extra_info(&mut self, v: ::std::string::String) {
                self.game_extra_info = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_game_extra_info(&mut self) -> &mut ::std::string::String {
                if self.game_extra_info.is_none() {
                    self.game_extra_info = ::std::option::Option::Some(::std::string::String::new());
                }
                self.game_extra_info.as_mut().unwrap()
            }

            // Take field
            pub fn take_game_extra_info(&mut self) -> ::std::string::String {
                self.game_extra_info.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string account_name = 9;

            pub fn account_name(&self) -> &str {
                match self.account_name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_account_name(&mut self) {
                self.account_name = ::std::option::Option::None;
            }

            pub fn has_account_name(&self) -> bool {
                self.account_name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_account_name(&mut self, v: ::std::string::String) {
                self.account_name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
                if self.account_name.is_none() {
                    self.account_name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.account_name.as_mut().unwrap()
            }

            // Take field
            pub fn take_account_name(&mut self) -> ::std::string::String {
                self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional fixed64 lobby_steam_id = 10;

            pub fn lobby_steam_id(&self) -> u64 {
                self.lobby_steam_id.unwrap_or(0)
            }

            pub fn clear_lobby_steam_id(&mut self) {
                self.lobby_steam_id = ::std::option::Option::None;
            }

            pub fn has_lobby_steam_id(&self) -> bool {
                self.lobby_steam_id.is_some()
            }

            // Param is passed by value, moved
            pub fn set_lobby_steam_id(&mut self, v: u64) {
                self.lobby_steam_id = ::std::option::Option::Some(v);
            }

            // optional string rich_presence_kv = 11;

            pub fn rich_presence_kv(&self) -> &str {
                match self.rich_presence_kv.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_rich_presence_kv(&mut self) {
                self.rich_presence_kv = ::std::option::Option::None;
            }

            pub fn has_rich_presence_kv(&self) -> bool {
                self.rich_presence_kv.is_some()
            }

            // Param is passed by value, moved
            pub fn set_rich_presence_kv(&mut self, v: ::std::string::String) {
                self.rich_presence_kv = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_rich_presence_kv(&mut self) -> &mut ::std::string::String {
                if self.rich_presence_kv.is_none() {
                    self.rich_presence_kv = ::std::option::Option::Some(::std::string::String::new());
                }
                self.rich_presence_kv.as_mut().unwrap()
            }

            // Take field
            pub fn take_rich_presence_kv(&mut self) -> ::std::string::String {
                self.rich_presence_kv.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional fixed64 broadcast_session_id = 12;

            pub fn broadcast_session_id(&self) -> u64 {
                self.broadcast_session_id.unwrap_or(0)
            }

            pub fn clear_broadcast_session_id(&mut self) {
                self.broadcast_session_id = ::std::option::Option::None;
            }

            pub fn has_broadcast_session_id(&self) -> bool {
                self.broadcast_session_id.is_some()
            }

            // Param is passed by value, moved
            pub fn set_broadcast_session_id(&mut self, v: u64) {
                self.broadcast_session_id = ::std::option::Option::Some(v);
            }

            // optional uint32 watching_broadcast_accountid = 13;

            pub fn watching_broadcast_accountid(&self) -> u32 {
                self.watching_broadcast_accountid.unwrap_or(0)
            }

            pub fn clear_watching_broadcast_accountid(&mut self) {
                self.watching_broadcast_accountid = ::std::option::Option::None;
            }

            pub fn has_watching_broadcast_accountid(&self) -> bool {
                self.watching_broadcast_accountid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_watching_broadcast_accountid(&mut self, v: u32) {
                self.watching_broadcast_accountid = ::std::option::Option::Some(v);
            }

            // optional uint32 watching_broadcast_appid = 14;

            pub fn watching_broadcast_appid(&self) -> u32 {
                self.watching_broadcast_appid.unwrap_or(0)
            }

            pub fn clear_watching_broadcast_appid(&mut self) {
                self.watching_broadcast_appid = ::std::option::Option::None;
            }

            pub fn has_watching_broadcast_appid(&self) -> bool {
                self.watching_broadcast_appid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_watching_broadcast_appid(&mut self, v: u32) {
                self.watching_broadcast_appid = ::std::option::Option::Some(v);
            }

            // optional uint32 watching_broadcast_viewers = 15;

            pub fn watching_broadcast_viewers(&self) -> u32 {
                self.watching_broadcast_viewers.unwrap_or(0)
            }

            pub fn clear_watching_broadcast_viewers(&mut self) {
                self.watching_broadcast_viewers = ::std::option::Option::None;
            }

            pub fn has_watching_broadcast_viewers(&self) -> bool {
                self.watching_broadcast_viewers.is_some()
            }

            // Param is passed by value, moved
            pub fn set_watching_broadcast_viewers(&mut self, v: u32) {
                self.watching_broadcast_viewers = ::std::option::Option::Some(v);
            }

            // optional string watching_broadcast_title = 16;

            pub fn watching_broadcast_title(&self) -> &str {
                match self.watching_broadcast_title.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_watching_broadcast_title(&mut self) {
                self.watching_broadcast_title = ::std::option::Option::None;
            }

            pub fn has_watching_broadcast_title(&self) -> bool {
                self.watching_broadcast_title.is_some()
            }

            // Param is passed by value, moved
            pub fn set_watching_broadcast_title(&mut self, v: ::std::string::String) {
                self.watching_broadcast_title = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_watching_broadcast_title(&mut self) -> &mut ::std::string::String {
                if self.watching_broadcast_title.is_none() {
                    self.watching_broadcast_title = ::std::option::Option::Some(::std::string::String::new());
                }
                self.watching_broadcast_title.as_mut().unwrap()
            }

            // Take field
            pub fn take_watching_broadcast_title(&mut self) -> ::std::string::String {
                self.watching_broadcast_title.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional uint32 last_logoff_time = 17;

            pub fn last_logoff_time(&self) -> u32 {
                self.last_logoff_time.unwrap_or(0)
            }

            pub fn clear_last_logoff_time(&mut self) {
                self.last_logoff_time = ::std::option::Option::None;
            }

            pub fn has_last_logoff_time(&self) -> bool {
                self.last_logoff_time.is_some()
            }

            // Param is passed by value, moved
            pub fn set_last_logoff_time(&mut self, v: u32) {
                self.last_logoff_time = ::std::option::Option::Some(v);
            }

            // optional uint32 last_seen_online = 18;

            pub fn last_seen_online(&self) -> u32 {
                self.last_seen_online.unwrap_or(0)
            }

            pub fn clear_last_seen_online(&mut self) {
                self.last_seen_online = ::std::option::Option::None;
            }

            pub fn has_last_seen_online(&self) -> bool {
                self.last_seen_online.is_some()
            }

            // Param is passed by value, moved
            pub fn set_last_seen_online(&mut self, v: u32) {
                self.last_seen_online = ::std::option::Option::Some(v);
            }

            // optional int32 game_os_type = 19;

            pub fn game_os_type(&self) -> i32 {
                self.game_os_type.unwrap_or(0)
            }

            pub fn clear_game_os_type(&mut self) {
                self.game_os_type = ::std::option::Option::None;
            }

            pub fn has_game_os_type(&self) -> bool {
                self.game_os_type.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_os_type(&mut self, v: i32) {
                self.game_os_type = ::std::option::Option::Some(v);
            }

            // optional int32 game_device_type = 20;

            pub fn game_device_type(&self) -> i32 {
                self.game_device_type.unwrap_or(0)
            }

            pub fn clear_game_device_type(&mut self) {
                self.game_device_type = ::std::option::Option::None;
            }

            pub fn has_game_device_type(&self) -> bool {
                self.game_device_type.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_device_type(&mut self, v: i32) {
                self.game_device_type = ::std::option::Option::Some(v);
            }

            // optional string game_device_name = 21;

            pub fn game_device_name(&self) -> &str {
                match self.game_device_name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_game_device_name(&mut self) {
                self.game_device_name = ::std::option::Option::None;
            }

            pub fn has_game_device_name(&self) -> bool {
                self.game_device_name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_game_device_name(&mut self, v: ::std::string::String) {
                self.game_device_name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_game_device_name(&mut self) -> &mut ::std::string::String {
                if self.game_device_name.is_none() {
                    self.game_device_name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.game_device_name.as_mut().unwrap()
            }

            // Take field
            pub fn take_game_device_name(&mut self) -> ::std::string::String {
                self.game_device_name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(21);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "persona_state",
                    |m: &AccountPrivateData| { &m.persona_state },
                    |m: &mut AccountPrivateData| { &mut m.persona_state },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "persona_state_flags",
                    |m: &AccountPrivateData| { &m.persona_state_flags },
                    |m: &mut AccountPrivateData| { &mut m.persona_state_flags },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "time_created",
                    |m: &AccountPrivateData| { &m.time_created },
                    |m: &mut AccountPrivateData| { &mut m.time_created },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_id",
                    |m: &AccountPrivateData| { &m.game_id },
                    |m: &mut AccountPrivateData| { &mut m.game_id },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_server_steam_id",
                    |m: &AccountPrivateData| { &m.game_server_steam_id },
                    |m: &mut AccountPrivateData| { &mut m.game_server_steam_id },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_server_ip_address",
                    |m: &AccountPrivateData| { &m.game_server_ip_address },
                    |m: &mut AccountPrivateData| { &mut m.game_server_ip_address },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_server_port",
                    |m: &AccountPrivateData| { &m.game_server_port },
                    |m: &mut AccountPrivateData| { &mut m.game_server_port },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_extra_info",
                    |m: &AccountPrivateData| { &m.game_extra_info },
                    |m: &mut AccountPrivateData| { &mut m.game_extra_info },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "account_name",
                    |m: &AccountPrivateData| { &m.account_name },
                    |m: &mut AccountPrivateData| { &mut m.account_name },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "lobby_steam_id",
                    |m: &AccountPrivateData| { &m.lobby_steam_id },
                    |m: &mut AccountPrivateData| { &mut m.lobby_steam_id },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "rich_presence_kv",
                    |m: &AccountPrivateData| { &m.rich_presence_kv },
                    |m: &mut AccountPrivateData| { &mut m.rich_presence_kv },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "broadcast_session_id",
                    |m: &AccountPrivateData| { &m.broadcast_session_id },
                    |m: &mut AccountPrivateData| { &mut m.broadcast_session_id },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "watching_broadcast_accountid",
                    |m: &AccountPrivateData| { &m.watching_broadcast_accountid },
                    |m: &mut AccountPrivateData| { &mut m.watching_broadcast_accountid },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "watching_broadcast_appid",
                    |m: &AccountPrivateData| { &m.watching_broadcast_appid },
                    |m: &mut AccountPrivateData| { &mut m.watching_broadcast_appid },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "watching_broadcast_viewers",
                    |m: &AccountPrivateData| { &m.watching_broadcast_viewers },
                    |m: &mut AccountPrivateData| { &mut m.watching_broadcast_viewers },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "watching_broadcast_title",
                    |m: &AccountPrivateData| { &m.watching_broadcast_title },
                    |m: &mut AccountPrivateData| { &mut m.watching_broadcast_title },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "last_logoff_time",
                    |m: &AccountPrivateData| { &m.last_logoff_time },
                    |m: &mut AccountPrivateData| { &mut m.last_logoff_time },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "last_seen_online",
                    |m: &AccountPrivateData| { &m.last_seen_online },
                    |m: &mut AccountPrivateData| { &mut m.last_seen_online },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_os_type",
                    |m: &AccountPrivateData| { &m.game_os_type },
                    |m: &mut AccountPrivateData| { &mut m.game_os_type },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_device_type",
                    |m: &AccountPrivateData| { &m.game_device_type },
                    |m: &mut AccountPrivateData| { &mut m.game_device_type },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "game_device_name",
                    |m: &AccountPrivateData| { &m.game_device_name },
                    |m: &mut AccountPrivateData| { &mut m.game_device_name },
                ));
                crate::reflect::GeneratedMessageDescriptorData::new_2::<AccountPrivateData>(
                    "CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData",
                    fields,
                    oneofs,
                )
            }
        }

        impl crate::Message for AccountPrivateData {
            const NAME: &'static str = "AccountPrivateData";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.persona_state = ::std::option::Option::Some(is.read_int32()?);
                        },
                        16 => {
                            self.persona_state_flags = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        24 => {
                            self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        33 => {
                            self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                        },
                        41 => {
                            self.game_server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                        },
                        48 => {
                            self.game_server_ip_address = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        56 => {
                            self.game_server_port = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        66 => {
                            self.game_extra_info = ::std::option::Option::Some(is.read_string()?);
                        },
                        74 => {
                            self.account_name = ::std::option::Option::Some(is.read_string()?);
                        },
                        81 => {
                            self.lobby_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                        },
                        90 => {
                            self.rich_presence_kv = ::std::option::Option::Some(is.read_string()?);
                        },
                        97 => {
                            self.broadcast_session_id = ::std::option::Option::Some(is.read_fixed64()?);
                        },
                        104 => {
                            self.watching_broadcast_accountid = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        112 => {
                            self.watching_broadcast_appid = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        120 => {
                            self.watching_broadcast_viewers = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        130 => {
                            self.watching_broadcast_title = ::std::option::Option::Some(is.read_string()?);
                        },
                        136 => {
                            self.last_logoff_time = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        144 => {
                            self.last_seen_online = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        152 => {
                            self.game_os_type = ::std::option::Option::Some(is.read_int32()?);
                        },
                        160 => {
                            self.game_device_type = ::std::option::Option::Some(is.read_int32()?);
                        },
                        170 => {
                            self.game_device_name = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.persona_state {
                    my_size += crate::rt::int32_size(1, v);
                }
                if let Some(v) = self.persona_state_flags {
                    my_size += crate::rt::uint32_size(2, v);
                }
                if let Some(v) = self.time_created {
                    my_size += crate::rt::uint32_size(3, v);
                }
                if let Some(v) = self.game_id {
                    my_size += 1 + 8;
                }
                if let Some(v) = self.game_server_steam_id {
                    my_size += 1 + 8;
                }
                if let Some(v) = self.game_server_ip_address {
                    my_size += crate::rt::uint32_size(6, v);
                }
                if let Some(v) = self.game_server_port {
                    my_size += crate::rt::uint32_size(7, v);
                }
                if let Some(v) = self.game_extra_info.as_ref() {
                    my_size += crate::rt::string_size(8, &v);
                }
                if let Some(v) = self.account_name.as_ref() {
                    my_size += crate::rt::string_size(9, &v);
                }
                if let Some(v) = self.lobby_steam_id {
                    my_size += 1 + 8;
                }
                if let Some(v) = self.rich_presence_kv.as_ref() {
                    my_size += crate::rt::string_size(11, &v);
                }
                if let Some(v) = self.broadcast_session_id {
                    my_size += 1 + 8;
                }
                if let Some(v) = self.watching_broadcast_accountid {
                    my_size += crate::rt::uint32_size(13, v);
                }
                if let Some(v) = self.watching_broadcast_appid {
                    my_size += crate::rt::uint32_size(14, v);
                }
                if let Some(v) = self.watching_broadcast_viewers {
                    my_size += crate::rt::uint32_size(15, v);
                }
                if let Some(v) = self.watching_broadcast_title.as_ref() {
                    my_size += crate::rt::string_size(16, &v);
                }
                if let Some(v) = self.last_logoff_time {
                    my_size += crate::rt::uint32_size(17, v);
                }
                if let Some(v) = self.last_seen_online {
                    my_size += crate::rt::uint32_size(18, v);
                }
                if let Some(v) = self.game_os_type {
                    my_size += crate::rt::int32_size(19, v);
                }
                if let Some(v) = self.game_device_type {
                    my_size += crate::rt::int32_size(20, v);
                }
                if let Some(v) = self.game_device_name.as_ref() {
                    my_size += crate::rt::string_size(21, &v);
                }
                my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
                if let Some(v) = self.persona_state {
                    os.write_int32(1, v)?;
                }
                if let Some(v) = self.persona_state_flags {
                    os.write_uint32(2, v)?;
                }
                if let Some(v) = self.time_created {
                    os.write_uint32(3, v)?;
                }
                if let Some(v) = self.game_id {
                    os.write_fixed64(4, v)?;
                }
                if let Some(v) = self.game_server_steam_id {
                    os.write_fixed64(5, v)?;
                }
                if let Some(v) = self.game_server_ip_address {
                    os.write_uint32(6, v)?;
                }
                if let Some(v) = self.game_server_port {
                    os.write_uint32(7, v)?;
                }
                if let Some(v) = self.game_extra_info.as_ref() {
                    os.write_string(8, v)?;
                }
                if let Some(v) = self.account_name.as_ref() {
                    os.write_string(9, v)?;
                }
                if let Some(v) = self.lobby_steam_id {
                    os.write_fixed64(10, v)?;
                }
                if let Some(v) = self.rich_presence_kv.as_ref() {
                    os.write_string(11, v)?;
                }
                if let Some(v) = self.broadcast_session_id {
                    os.write_fixed64(12, v)?;
                }
                if let Some(v) = self.watching_broadcast_accountid {
                    os.write_uint32(13, v)?;
                }
                if let Some(v) = self.watching_broadcast_appid {
                    os.write_uint32(14, v)?;
                }
                if let Some(v) = self.watching_broadcast_viewers {
                    os.write_uint32(15, v)?;
                }
                if let Some(v) = self.watching_broadcast_title.as_ref() {
                    os.write_string(16, v)?;
                }
                if let Some(v) = self.last_logoff_time {
                    os.write_uint32(17, v)?;
                }
                if let Some(v) = self.last_seen_online {
                    os.write_uint32(18, v)?;
                }
                if let Some(v) = self.game_os_type {
                    os.write_int32(19, v)?;
                }
                if let Some(v) = self.game_device_type {
                    os.write_int32(20, v)?;
                }
                if let Some(v) = self.game_device_name.as_ref() {
                    os.write_string(21, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &crate::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> AccountPrivateData {
                AccountPrivateData::new()
            }

            fn clear(&mut self) {
                self.persona_state = ::std::option::Option::None;
                self.persona_state_flags = ::std::option::Option::None;
                self.time_created = ::std::option::Option::None;
                self.game_id = ::std::option::Option::None;
                self.game_server_steam_id = ::std::option::Option::None;
                self.game_server_ip_address = ::std::option::Option::None;
                self.game_server_port = ::std::option::Option::None;
                self.game_extra_info = ::std::option::Option::None;
                self.account_name = ::std::option::Option::None;
                self.lobby_steam_id = ::std::option::Option::None;
                self.rich_presence_kv = ::std::option::Option::None;
                self.broadcast_session_id = ::std::option::Option::None;
                self.watching_broadcast_accountid = ::std::option::Option::None;
                self.watching_broadcast_appid = ::std::option::Option::None;
                self.watching_broadcast_viewers = ::std::option::Option::None;
                self.watching_broadcast_title = ::std::option::Option::None;
                self.last_logoff_time = ::std::option::Option::None;
                self.last_seen_online = ::std::option::Option::None;
                self.game_os_type = ::std::option::Option::None;
                self.game_device_type = ::std::option::Option::None;
                self.game_device_name = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static AccountPrivateData {
                static instance: AccountPrivateData = AccountPrivateData {
                    persona_state: ::std::option::Option::None,
                    persona_state_flags: ::std::option::Option::None,
                    time_created: ::std::option::Option::None,
                    game_id: ::std::option::Option::None,
                    game_server_steam_id: ::std::option::Option::None,
                    game_server_ip_address: ::std::option::Option::None,
                    game_server_port: ::std::option::Option::None,
                    game_extra_info: ::std::option::Option::None,
                    account_name: ::std::option::Option::None,
                    lobby_steam_id: ::std::option::Option::None,
                    rich_presence_kv: ::std::option::Option::None,
                    broadcast_session_id: ::std::option::Option::None,
                    watching_broadcast_accountid: ::std::option::Option::None,
                    watching_broadcast_appid: ::std::option::Option::None,
                    watching_broadcast_viewers: ::std::option::Option::None,
                    watching_broadcast_title: ::std::option::Option::None,
                    last_logoff_time: ::std::option::Option::None,
                    last_seen_online: ::std::option::Option::None,
                    game_os_type: ::std::option::Option::None,
                    game_device_type: ::std::option::Option::None,
                    game_device_name: ::std::option::Option::None,
                    special_fields: crate::SpecialFields::new(),
                };
                &instance
            }
        }

        impl crate::MessageFull for AccountPrivateData {
            fn descriptor() -> crate::reflect::MessageDescriptor {
                static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("CPlayer_GetPlayerLinkDetails_Response.PlayerLinkDetails.AccountPrivateData").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for AccountPrivateData {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                crate::text_format::fmt(self, f)
            }
        }

        impl crate::reflect::ProtobufValue for AccountPrivateData {
            type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

// @@protoc_insertion_point(message:CPlayer_GetMutualFriendsForIncomingInvites_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetMutualFriendsForIncomingInvites_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetMutualFriendsForIncomingInvites_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetMutualFriendsForIncomingInvites_Request {
    fn default() -> &'a CPlayer_GetMutualFriendsForIncomingInvites_Request {
        <CPlayer_GetMutualFriendsForIncomingInvites_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetMutualFriendsForIncomingInvites_Request {
    pub fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetMutualFriendsForIncomingInvites_Request>(
            "CPlayer_GetMutualFriendsForIncomingInvites_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    const NAME: &'static str = "CPlayer_GetMutualFriendsForIncomingInvites_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Request {
        CPlayer_GetMutualFriendsForIncomingInvites_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetMutualFriendsForIncomingInvites_Request {
        static instance: CPlayer_GetMutualFriendsForIncomingInvites_Request = CPlayer_GetMutualFriendsForIncomingInvites_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetMutualFriendsForIncomingInvites_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_IncomingInviteMutualFriendList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_IncomingInviteMutualFriendList {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_IncomingInviteMutualFriendList.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
    pub mutual_friend_account_ids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_IncomingInviteMutualFriendList.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_IncomingInviteMutualFriendList {
    fn default() -> &'a CPlayer_IncomingInviteMutualFriendList {
        <CPlayer_IncomingInviteMutualFriendList as crate::Message>::default_instance()
    }
}

impl CPlayer_IncomingInviteMutualFriendList {
    pub fn new() -> CPlayer_IncomingInviteMutualFriendList {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // repeated uint32 mutual_friend_account_ids = 2;

    pub fn mutual_friend_account_ids(&self) -> &[u32] {
        &self.mutual_friend_account_ids
    }

    pub fn clear_mutual_friend_account_ids(&mut self) {
        self.mutual_friend_account_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutual_friend_account_ids(&mut self, v: ::std::vec::Vec<u32>) {
        self.mutual_friend_account_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mutual_friend_account_ids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.mutual_friend_account_ids
    }

    // Take field
    pub fn take_mutual_friend_account_ids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.mutual_friend_account_ids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_IncomingInviteMutualFriendList| { &m.steamid },
            |m: &mut CPlayer_IncomingInviteMutualFriendList| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mutual_friend_account_ids",
            |m: &CPlayer_IncomingInviteMutualFriendList| { &m.mutual_friend_account_ids },
            |m: &mut CPlayer_IncomingInviteMutualFriendList| { &mut m.mutual_friend_account_ids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_IncomingInviteMutualFriendList>(
            "CPlayer_IncomingInviteMutualFriendList",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_IncomingInviteMutualFriendList {
    const NAME: &'static str = "CPlayer_IncomingInviteMutualFriendList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.mutual_friend_account_ids)?;
                },
                16 => {
                    self.mutual_friend_account_ids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        for value in &self.mutual_friend_account_ids {
            my_size += crate::rt::uint32_size(2, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        for v in &self.mutual_friend_account_ids {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_IncomingInviteMutualFriendList {
        CPlayer_IncomingInviteMutualFriendList::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.mutual_friend_account_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_IncomingInviteMutualFriendList {
        static instance: CPlayer_IncomingInviteMutualFriendList = CPlayer_IncomingInviteMutualFriendList {
            steamid: ::std::option::Option::None,
            mutual_friend_account_ids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_IncomingInviteMutualFriendList {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_IncomingInviteMutualFriendList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_IncomingInviteMutualFriendList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_IncomingInviteMutualFriendList {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetMutualFriendsForIncomingInvites_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetMutualFriendsForIncomingInvites_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
    pub incoming_invite_mutual_friends_lists: ::std::vec::Vec<CPlayer_IncomingInviteMutualFriendList>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetMutualFriendsForIncomingInvites_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetMutualFriendsForIncomingInvites_Response {
    fn default() -> &'a CPlayer_GetMutualFriendsForIncomingInvites_Response {
        <CPlayer_GetMutualFriendsForIncomingInvites_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetMutualFriendsForIncomingInvites_Response {
    pub fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;

    pub fn incoming_invite_mutual_friends_lists(&self) -> &[CPlayer_IncomingInviteMutualFriendList] {
        &self.incoming_invite_mutual_friends_lists
    }

    pub fn clear_incoming_invite_mutual_friends_lists(&mut self) {
        self.incoming_invite_mutual_friends_lists.clear();
    }

    // Param is passed by value, moved
    pub fn set_incoming_invite_mutual_friends_lists(&mut self, v: ::std::vec::Vec<CPlayer_IncomingInviteMutualFriendList>) {
        self.incoming_invite_mutual_friends_lists = v;
    }

    // Mutable pointer to the field.
    pub fn mut_incoming_invite_mutual_friends_lists(&mut self) -> &mut ::std::vec::Vec<CPlayer_IncomingInviteMutualFriendList> {
        &mut self.incoming_invite_mutual_friends_lists
    }

    // Take field
    pub fn take_incoming_invite_mutual_friends_lists(&mut self) -> ::std::vec::Vec<CPlayer_IncomingInviteMutualFriendList> {
        ::std::mem::replace(&mut self.incoming_invite_mutual_friends_lists, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "incoming_invite_mutual_friends_lists",
            |m: &CPlayer_GetMutualFriendsForIncomingInvites_Response| { &m.incoming_invite_mutual_friends_lists },
            |m: &mut CPlayer_GetMutualFriendsForIncomingInvites_Response| { &mut m.incoming_invite_mutual_friends_lists },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetMutualFriendsForIncomingInvites_Response>(
            "CPlayer_GetMutualFriendsForIncomingInvites_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    const NAME: &'static str = "CPlayer_GetMutualFriendsForIncomingInvites_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.incoming_invite_mutual_friends_lists.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.incoming_invite_mutual_friends_lists {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.incoming_invite_mutual_friends_lists {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Response {
        CPlayer_GetMutualFriendsForIncomingInvites_Response::new()
    }

    fn clear(&mut self) {
        self.incoming_invite_mutual_friends_lists.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetMutualFriendsForIncomingInvites_Response {
        static instance: CPlayer_GetMutualFriendsForIncomingInvites_Response = CPlayer_GetMutualFriendsForIncomingInvites_Response {
            incoming_invite_mutual_friends_lists: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetMutualFriendsForIncomingInvites_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetOwnedGames_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetOwnedGames_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.include_appinfo)
    pub include_appinfo: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.include_played_free_games)
    pub include_played_free_games: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.appids_filter)
    pub appids_filter: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.include_free_sub)
    pub include_free_sub: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.skip_unvetted_apps)
    pub skip_unvetted_apps: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Request.include_extended_appinfo)
    pub include_extended_appinfo: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetOwnedGames_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetOwnedGames_Request {
    fn default() -> &'a CPlayer_GetOwnedGames_Request {
        <CPlayer_GetOwnedGames_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetOwnedGames_Request {
    pub fn new() -> CPlayer_GetOwnedGames_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_appinfo = 2;

    pub fn include_appinfo(&self) -> bool {
        self.include_appinfo.unwrap_or(false)
    }

    pub fn clear_include_appinfo(&mut self) {
        self.include_appinfo = ::std::option::Option::None;
    }

    pub fn has_include_appinfo(&self) -> bool {
        self.include_appinfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_appinfo(&mut self, v: bool) {
        self.include_appinfo = ::std::option::Option::Some(v);
    }

    // optional bool include_played_free_games = 3;

    pub fn include_played_free_games(&self) -> bool {
        self.include_played_free_games.unwrap_or(false)
    }

    pub fn clear_include_played_free_games(&mut self) {
        self.include_played_free_games = ::std::option::Option::None;
    }

    pub fn has_include_played_free_games(&self) -> bool {
        self.include_played_free_games.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_played_free_games(&mut self, v: bool) {
        self.include_played_free_games = ::std::option::Option::Some(v);
    }

    // repeated uint32 appids_filter = 4;

    pub fn appids_filter(&self) -> &[u32] {
        &self.appids_filter
    }

    pub fn clear_appids_filter(&mut self) {
        self.appids_filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids_filter(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids_filter = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids_filter(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids_filter
    }

    // Take field
    pub fn take_appids_filter(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids_filter, ::std::vec::Vec::new())
    }

    // optional bool include_free_sub = 5;

    pub fn include_free_sub(&self) -> bool {
        self.include_free_sub.unwrap_or(false)
    }

    pub fn clear_include_free_sub(&mut self) {
        self.include_free_sub = ::std::option::Option::None;
    }

    pub fn has_include_free_sub(&self) -> bool {
        self.include_free_sub.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_free_sub(&mut self, v: bool) {
        self.include_free_sub = ::std::option::Option::Some(v);
    }

    // optional bool skip_unvetted_apps = 6;

    pub fn skip_unvetted_apps(&self) -> bool {
        self.skip_unvetted_apps.unwrap_or(true)
    }

    pub fn clear_skip_unvetted_apps(&mut self) {
        self.skip_unvetted_apps = ::std::option::Option::None;
    }

    pub fn has_skip_unvetted_apps(&self) -> bool {
        self.skip_unvetted_apps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skip_unvetted_apps(&mut self, v: bool) {
        self.skip_unvetted_apps = ::std::option::Option::Some(v);
    }

    // optional string language = 7;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool include_extended_appinfo = 8;

    pub fn include_extended_appinfo(&self) -> bool {
        self.include_extended_appinfo.unwrap_or(false)
    }

    pub fn clear_include_extended_appinfo(&mut self) {
        self.include_extended_appinfo = ::std::option::Option::None;
    }

    pub fn has_include_extended_appinfo(&self) -> bool {
        self.include_extended_appinfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_extended_appinfo(&mut self, v: bool) {
        self.include_extended_appinfo = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetOwnedGames_Request| { &m.steamid },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_appinfo",
            |m: &CPlayer_GetOwnedGames_Request| { &m.include_appinfo },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.include_appinfo },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_played_free_games",
            |m: &CPlayer_GetOwnedGames_Request| { &m.include_played_free_games },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.include_played_free_games },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids_filter",
            |m: &CPlayer_GetOwnedGames_Request| { &m.appids_filter },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.appids_filter },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_free_sub",
            |m: &CPlayer_GetOwnedGames_Request| { &m.include_free_sub },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.include_free_sub },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "skip_unvetted_apps",
            |m: &CPlayer_GetOwnedGames_Request| { &m.skip_unvetted_apps },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.skip_unvetted_apps },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetOwnedGames_Request| { &m.language },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_extended_appinfo",
            |m: &CPlayer_GetOwnedGames_Request| { &m.include_extended_appinfo },
            |m: &mut CPlayer_GetOwnedGames_Request| { &mut m.include_extended_appinfo },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetOwnedGames_Request>(
            "CPlayer_GetOwnedGames_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetOwnedGames_Request {
    const NAME: &'static str = "CPlayer_GetOwnedGames_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.include_appinfo = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.include_played_free_games = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids_filter)?;
                },
                32 => {
                    self.appids_filter.push(is.read_uint32()?);
                },
                40 => {
                    self.include_free_sub = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.skip_unvetted_apps = ::std::option::Option::Some(is.read_bool()?);
                },
                58 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.include_extended_appinfo = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.include_appinfo {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_played_free_games {
            my_size += 1 + 1;
        }
        for value in &self.appids_filter {
            my_size += crate::rt::uint32_size(4, *value);
        };
        if let Some(v) = self.include_free_sub {
            my_size += 1 + 1;
        }
        if let Some(v) = self.skip_unvetted_apps {
            my_size += 1 + 1;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        if let Some(v) = self.include_extended_appinfo {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.include_appinfo {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.include_played_free_games {
            os.write_bool(3, v)?;
        }
        for v in &self.appids_filter {
            os.write_uint32(4, *v)?;
        };
        if let Some(v) = self.include_free_sub {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.skip_unvetted_apps {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.include_extended_appinfo {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetOwnedGames_Request {
        CPlayer_GetOwnedGames_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_appinfo = ::std::option::Option::None;
        self.include_played_free_games = ::std::option::Option::None;
        self.appids_filter.clear();
        self.include_free_sub = ::std::option::Option::None;
        self.skip_unvetted_apps = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.include_extended_appinfo = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetOwnedGames_Request {
        static instance: CPlayer_GetOwnedGames_Request = CPlayer_GetOwnedGames_Request {
            steamid: ::std::option::Option::None,
            include_appinfo: ::std::option::Option::None,
            include_played_free_games: ::std::option::Option::None,
            appids_filter: ::std::vec::Vec::new(),
            include_free_sub: ::std::option::Option::None,
            skip_unvetted_apps: ::std::option::Option::None,
            language: ::std::option::Option::None,
            include_extended_appinfo: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetOwnedGames_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetOwnedGames_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetOwnedGames_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetOwnedGames_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetOwnedGames_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetOwnedGames_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.game_count)
    pub game_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.games)
    pub games: ::std::vec::Vec<cplayer_get_owned_games_response::Game>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetOwnedGames_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetOwnedGames_Response {
    fn default() -> &'a CPlayer_GetOwnedGames_Response {
        <CPlayer_GetOwnedGames_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetOwnedGames_Response {
    pub fn new() -> CPlayer_GetOwnedGames_Response {
        ::std::default::Default::default()
    }

    // optional uint32 game_count = 1;

    pub fn game_count(&self) -> u32 {
        self.game_count.unwrap_or(0)
    }

    pub fn clear_game_count(&mut self) {
        self.game_count = ::std::option::Option::None;
    }

    pub fn has_game_count(&self) -> bool {
        self.game_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_count(&mut self, v: u32) {
        self.game_count = ::std::option::Option::Some(v);
    }

    // repeated .CPlayer_GetOwnedGames_Response.Game games = 2;

    pub fn games(&self) -> &[cplayer_get_owned_games_response::Game] {
        &self.games
    }

    pub fn clear_games(&mut self) {
        self.games.clear();
    }

    // Param is passed by value, moved
    pub fn set_games(&mut self, v: ::std::vec::Vec<cplayer_get_owned_games_response::Game>) {
        self.games = v;
    }

    // Mutable pointer to the field.
    pub fn mut_games(&mut self) -> &mut ::std::vec::Vec<cplayer_get_owned_games_response::Game> {
        &mut self.games
    }

    // Take field
    pub fn take_games(&mut self) -> ::std::vec::Vec<cplayer_get_owned_games_response::Game> {
        ::std::mem::replace(&mut self.games, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_count",
            |m: &CPlayer_GetOwnedGames_Response| { &m.game_count },
            |m: &mut CPlayer_GetOwnedGames_Response| { &mut m.game_count },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "games",
            |m: &CPlayer_GetOwnedGames_Response| { &m.games },
            |m: &mut CPlayer_GetOwnedGames_Response| { &mut m.games },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetOwnedGames_Response>(
            "CPlayer_GetOwnedGames_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetOwnedGames_Response {
    const NAME: &'static str = "CPlayer_GetOwnedGames_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.game_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.games.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_count {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.game_count {
            os.write_uint32(1, v)?;
        }
        for v in &self.games {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetOwnedGames_Response {
        CPlayer_GetOwnedGames_Response::new()
    }

    fn clear(&mut self) {
        self.game_count = ::std::option::Option::None;
        self.games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetOwnedGames_Response {
        static instance: CPlayer_GetOwnedGames_Response = CPlayer_GetOwnedGames_Response {
            game_count: ::std::option::Option::None,
            games: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetOwnedGames_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetOwnedGames_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetOwnedGames_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetOwnedGames_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetOwnedGames_Response`
pub mod cplayer_get_owned_games_response {
    // @@protoc_insertion_point(message:CPlayer_GetOwnedGames_Response.Game)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Game {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.appid)
        pub appid: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.playtime_2weeks)
        pub playtime_2weeks: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.playtime_forever)
        pub playtime_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.img_icon_url)
        pub img_icon_url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.has_community_visible_stats)
        pub has_community_visible_stats: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.playtime_windows_forever)
        pub playtime_windows_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.playtime_mac_forever)
        pub playtime_mac_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.playtime_linux_forever)
        pub playtime_linux_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.rtime_last_played)
        pub rtime_last_played: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.capsule_filename)
        pub capsule_filename: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.sort_as)
        pub sort_as: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.has_workshop)
        pub has_workshop: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.has_market)
        pub has_market: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.has_dlc)
        pub has_dlc: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.has_leaderboards)
        pub has_leaderboards: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.content_descriptorids)
        pub content_descriptorids: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetOwnedGames_Response.Game.playtime_disconnected)
        pub playtime_disconnected: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetOwnedGames_Response.Game.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Game {
        fn default() -> &'a Game {
            <Game as crate::Message>::default_instance()
        }
    }

    impl Game {
        pub fn new() -> Game {
            ::std::default::Default::default()
        }

        // optional int32 appid = 1;

        pub fn appid(&self) -> i32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: i32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 playtime_2weeks = 3;

        pub fn playtime_2weeks(&self) -> i32 {
            self.playtime_2weeks.unwrap_or(0)
        }

        pub fn clear_playtime_2weeks(&mut self) {
            self.playtime_2weeks = ::std::option::Option::None;
        }

        pub fn has_playtime_2weeks(&self) -> bool {
            self.playtime_2weeks.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_2weeks(&mut self, v: i32) {
            self.playtime_2weeks = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_forever = 4;

        pub fn playtime_forever(&self) -> i32 {
            self.playtime_forever.unwrap_or(0)
        }

        pub fn clear_playtime_forever(&mut self) {
            self.playtime_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_forever(&self) -> bool {
            self.playtime_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_forever(&mut self, v: i32) {
            self.playtime_forever = ::std::option::Option::Some(v);
        }

        // optional string img_icon_url = 5;

        pub fn img_icon_url(&self) -> &str {
            match self.img_icon_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_img_icon_url(&mut self) {
            self.img_icon_url = ::std::option::Option::None;
        }

        pub fn has_img_icon_url(&self) -> bool {
            self.img_icon_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_img_icon_url(&mut self, v: ::std::string::String) {
            self.img_icon_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_img_icon_url(&mut self) -> &mut ::std::string::String {
            if self.img_icon_url.is_none() {
                self.img_icon_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.img_icon_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_img_icon_url(&mut self) -> ::std::string::String {
            self.img_icon_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool has_community_visible_stats = 7;

        pub fn has_community_visible_stats(&self) -> bool {
            self.has_community_visible_stats.unwrap_or(false)
        }

        pub fn clear_has_community_visible_stats(&mut self) {
            self.has_community_visible_stats = ::std::option::Option::None;
        }

        pub fn has_has_community_visible_stats(&self) -> bool {
            self.has_community_visible_stats.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_community_visible_stats(&mut self, v: bool) {
            self.has_community_visible_stats = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_windows_forever = 8;

        pub fn playtime_windows_forever(&self) -> i32 {
            self.playtime_windows_forever.unwrap_or(0)
        }

        pub fn clear_playtime_windows_forever(&mut self) {
            self.playtime_windows_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_windows_forever(&self) -> bool {
            self.playtime_windows_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_windows_forever(&mut self, v: i32) {
            self.playtime_windows_forever = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_mac_forever = 9;

        pub fn playtime_mac_forever(&self) -> i32 {
            self.playtime_mac_forever.unwrap_or(0)
        }

        pub fn clear_playtime_mac_forever(&mut self) {
            self.playtime_mac_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_mac_forever(&self) -> bool {
            self.playtime_mac_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_mac_forever(&mut self, v: i32) {
            self.playtime_mac_forever = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_linux_forever = 10;

        pub fn playtime_linux_forever(&self) -> i32 {
            self.playtime_linux_forever.unwrap_or(0)
        }

        pub fn clear_playtime_linux_forever(&mut self) {
            self.playtime_linux_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_linux_forever(&self) -> bool {
            self.playtime_linux_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_linux_forever(&mut self, v: i32) {
            self.playtime_linux_forever = ::std::option::Option::Some(v);
        }

        // optional uint32 rtime_last_played = 11;

        pub fn rtime_last_played(&self) -> u32 {
            self.rtime_last_played.unwrap_or(0)
        }

        pub fn clear_rtime_last_played(&mut self) {
            self.rtime_last_played = ::std::option::Option::None;
        }

        pub fn has_rtime_last_played(&self) -> bool {
            self.rtime_last_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_rtime_last_played(&mut self, v: u32) {
            self.rtime_last_played = ::std::option::Option::Some(v);
        }

        // optional string capsule_filename = 12;

        pub fn capsule_filename(&self) -> &str {
            match self.capsule_filename.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_capsule_filename(&mut self) {
            self.capsule_filename = ::std::option::Option::None;
        }

        pub fn has_capsule_filename(&self) -> bool {
            self.capsule_filename.is_some()
        }

        // Param is passed by value, moved
        pub fn set_capsule_filename(&mut self, v: ::std::string::String) {
            self.capsule_filename = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_capsule_filename(&mut self) -> &mut ::std::string::String {
            if self.capsule_filename.is_none() {
                self.capsule_filename = ::std::option::Option::Some(::std::string::String::new());
            }
            self.capsule_filename.as_mut().unwrap()
        }

        // Take field
        pub fn take_capsule_filename(&mut self) -> ::std::string::String {
            self.capsule_filename.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string sort_as = 13;

        pub fn sort_as(&self) -> &str {
            match self.sort_as.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_sort_as(&mut self) {
            self.sort_as = ::std::option::Option::None;
        }

        pub fn has_sort_as(&self) -> bool {
            self.sort_as.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sort_as(&mut self, v: ::std::string::String) {
            self.sort_as = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sort_as(&mut self) -> &mut ::std::string::String {
            if self.sort_as.is_none() {
                self.sort_as = ::std::option::Option::Some(::std::string::String::new());
            }
            self.sort_as.as_mut().unwrap()
        }

        // Take field
        pub fn take_sort_as(&mut self) -> ::std::string::String {
            self.sort_as.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool has_workshop = 14;

        pub fn has_workshop(&self) -> bool {
            self.has_workshop.unwrap_or(false)
        }

        pub fn clear_has_workshop(&mut self) {
            self.has_workshop = ::std::option::Option::None;
        }

        pub fn has_has_workshop(&self) -> bool {
            self.has_workshop.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_workshop(&mut self, v: bool) {
            self.has_workshop = ::std::option::Option::Some(v);
        }

        // optional bool has_market = 15;

        pub fn has_market(&self) -> bool {
            self.has_market.unwrap_or(false)
        }

        pub fn clear_has_market(&mut self) {
            self.has_market = ::std::option::Option::None;
        }

        pub fn has_has_market(&self) -> bool {
            self.has_market.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_market(&mut self, v: bool) {
            self.has_market = ::std::option::Option::Some(v);
        }

        // optional bool has_dlc = 16;

        pub fn has_dlc(&self) -> bool {
            self.has_dlc.unwrap_or(false)
        }

        pub fn clear_has_dlc(&mut self) {
            self.has_dlc = ::std::option::Option::None;
        }

        pub fn has_has_dlc(&self) -> bool {
            self.has_dlc.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_dlc(&mut self, v: bool) {
            self.has_dlc = ::std::option::Option::Some(v);
        }

        // optional bool has_leaderboards = 17;

        pub fn has_leaderboards(&self) -> bool {
            self.has_leaderboards.unwrap_or(false)
        }

        pub fn clear_has_leaderboards(&mut self) {
            self.has_leaderboards = ::std::option::Option::None;
        }

        pub fn has_has_leaderboards(&self) -> bool {
            self.has_leaderboards.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_leaderboards(&mut self, v: bool) {
            self.has_leaderboards = ::std::option::Option::Some(v);
        }

        // repeated uint32 content_descriptorids = 18;

        pub fn content_descriptorids(&self) -> &[u32] {
            &self.content_descriptorids
        }

        pub fn clear_content_descriptorids(&mut self) {
            self.content_descriptorids.clear();
        }

        // Param is passed by value, moved
        pub fn set_content_descriptorids(&mut self, v: ::std::vec::Vec<u32>) {
            self.content_descriptorids = v;
        }

        // Mutable pointer to the field.
        pub fn mut_content_descriptorids(&mut self) -> &mut ::std::vec::Vec<u32> {
            &mut self.content_descriptorids
        }

        // Take field
        pub fn take_content_descriptorids(&mut self) -> ::std::vec::Vec<u32> {
            ::std::mem::replace(&mut self.content_descriptorids, ::std::vec::Vec::new())
        }

        // optional int32 playtime_disconnected = 19;

        pub fn playtime_disconnected(&self) -> i32 {
            self.playtime_disconnected.unwrap_or(0)
        }

        pub fn clear_playtime_disconnected(&mut self) {
            self.playtime_disconnected = ::std::option::Option::None;
        }

        pub fn has_playtime_disconnected(&self) -> bool {
            self.playtime_disconnected.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_disconnected(&mut self, v: i32) {
            self.playtime_disconnected = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(18);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Game| { &m.appid },
                |m: &mut Game| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Game| { &m.name },
                |m: &mut Game| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_2weeks",
                |m: &Game| { &m.playtime_2weeks },
                |m: &mut Game| { &mut m.playtime_2weeks },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_forever",
                |m: &Game| { &m.playtime_forever },
                |m: &mut Game| { &mut m.playtime_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "img_icon_url",
                |m: &Game| { &m.img_icon_url },
                |m: &mut Game| { &mut m.img_icon_url },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "has_community_visible_stats",
                |m: &Game| { &m.has_community_visible_stats },
                |m: &mut Game| { &mut m.has_community_visible_stats },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_windows_forever",
                |m: &Game| { &m.playtime_windows_forever },
                |m: &mut Game| { &mut m.playtime_windows_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_mac_forever",
                |m: &Game| { &m.playtime_mac_forever },
                |m: &mut Game| { &mut m.playtime_mac_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_linux_forever",
                |m: &Game| { &m.playtime_linux_forever },
                |m: &mut Game| { &mut m.playtime_linux_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "rtime_last_played",
                |m: &Game| { &m.rtime_last_played },
                |m: &mut Game| { &mut m.rtime_last_played },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "capsule_filename",
                |m: &Game| { &m.capsule_filename },
                |m: &mut Game| { &mut m.capsule_filename },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sort_as",
                |m: &Game| { &m.sort_as },
                |m: &mut Game| { &mut m.sort_as },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "has_workshop",
                |m: &Game| { &m.has_workshop },
                |m: &mut Game| { &mut m.has_workshop },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "has_market",
                |m: &Game| { &m.has_market },
                |m: &mut Game| { &mut m.has_market },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "has_dlc",
                |m: &Game| { &m.has_dlc },
                |m: &mut Game| { &mut m.has_dlc },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "has_leaderboards",
                |m: &Game| { &m.has_leaderboards },
                |m: &mut Game| { &mut m.has_leaderboards },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "content_descriptorids",
                |m: &Game| { &m.content_descriptorids },
                |m: &mut Game| { &mut m.content_descriptorids },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_disconnected",
                |m: &Game| { &m.playtime_disconnected },
                |m: &mut Game| { &mut m.playtime_disconnected },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Game>(
                "CPlayer_GetOwnedGames_Response.Game",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Game {
        const NAME: &'static str = "Game";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_int32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.playtime_2weeks = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.playtime_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    42 => {
                        self.img_icon_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.has_community_visible_stats = ::std::option::Option::Some(is.read_bool()?);
                    },
                    64 => {
                        self.playtime_windows_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    72 => {
                        self.playtime_mac_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    80 => {
                        self.playtime_linux_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    88 => {
                        self.rtime_last_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    98 => {
                        self.capsule_filename = ::std::option::Option::Some(is.read_string()?);
                    },
                    106 => {
                        self.sort_as = ::std::option::Option::Some(is.read_string()?);
                    },
                    112 => {
                        self.has_workshop = ::std::option::Option::Some(is.read_bool()?);
                    },
                    120 => {
                        self.has_market = ::std::option::Option::Some(is.read_bool()?);
                    },
                    128 => {
                        self.has_dlc = ::std::option::Option::Some(is.read_bool()?);
                    },
                    136 => {
                        self.has_leaderboards = ::std::option::Option::Some(is.read_bool()?);
                    },
                    146 => {
                        is.read_repeated_packed_uint32_into(&mut self.content_descriptorids)?;
                    },
                    144 => {
                        self.content_descriptorids.push(is.read_uint32()?);
                    },
                    152 => {
                        self.playtime_disconnected = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::int32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.playtime_2weeks {
                my_size += crate::rt::int32_size(3, v);
            }
            if let Some(v) = self.playtime_forever {
                my_size += crate::rt::int32_size(4, v);
            }
            if let Some(v) = self.img_icon_url.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.has_community_visible_stats {
                my_size += 1 + 1;
            }
            if let Some(v) = self.playtime_windows_forever {
                my_size += crate::rt::int32_size(8, v);
            }
            if let Some(v) = self.playtime_mac_forever {
                my_size += crate::rt::int32_size(9, v);
            }
            if let Some(v) = self.playtime_linux_forever {
                my_size += crate::rt::int32_size(10, v);
            }
            if let Some(v) = self.rtime_last_played {
                my_size += crate::rt::uint32_size(11, v);
            }
            if let Some(v) = self.capsule_filename.as_ref() {
                my_size += crate::rt::string_size(12, &v);
            }
            if let Some(v) = self.sort_as.as_ref() {
                my_size += crate::rt::string_size(13, &v);
            }
            if let Some(v) = self.has_workshop {
                my_size += 1 + 1;
            }
            if let Some(v) = self.has_market {
                my_size += 1 + 1;
            }
            if let Some(v) = self.has_dlc {
                my_size += 2 + 1;
            }
            if let Some(v) = self.has_leaderboards {
                my_size += 2 + 1;
            }
            for value in &self.content_descriptorids {
                my_size += crate::rt::uint32_size(18, *value);
            };
            if let Some(v) = self.playtime_disconnected {
                my_size += crate::rt::int32_size(19, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.playtime_2weeks {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.playtime_forever {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.img_icon_url.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.has_community_visible_stats {
                os.write_bool(7, v)?;
            }
            if let Some(v) = self.playtime_windows_forever {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.playtime_mac_forever {
                os.write_int32(9, v)?;
            }
            if let Some(v) = self.playtime_linux_forever {
                os.write_int32(10, v)?;
            }
            if let Some(v) = self.rtime_last_played {
                os.write_uint32(11, v)?;
            }
            if let Some(v) = self.capsule_filename.as_ref() {
                os.write_string(12, v)?;
            }
            if let Some(v) = self.sort_as.as_ref() {
                os.write_string(13, v)?;
            }
            if let Some(v) = self.has_workshop {
                os.write_bool(14, v)?;
            }
            if let Some(v) = self.has_market {
                os.write_bool(15, v)?;
            }
            if let Some(v) = self.has_dlc {
                os.write_bool(16, v)?;
            }
            if let Some(v) = self.has_leaderboards {
                os.write_bool(17, v)?;
            }
            for v in &self.content_descriptorids {
                os.write_uint32(18, *v)?;
            };
            if let Some(v) = self.playtime_disconnected {
                os.write_int32(19, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Game {
            Game::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.playtime_2weeks = ::std::option::Option::None;
            self.playtime_forever = ::std::option::Option::None;
            self.img_icon_url = ::std::option::Option::None;
            self.has_community_visible_stats = ::std::option::Option::None;
            self.playtime_windows_forever = ::std::option::Option::None;
            self.playtime_mac_forever = ::std::option::Option::None;
            self.playtime_linux_forever = ::std::option::Option::None;
            self.rtime_last_played = ::std::option::Option::None;
            self.capsule_filename = ::std::option::Option::None;
            self.sort_as = ::std::option::Option::None;
            self.has_workshop = ::std::option::Option::None;
            self.has_market = ::std::option::Option::None;
            self.has_dlc = ::std::option::Option::None;
            self.has_leaderboards = ::std::option::Option::None;
            self.content_descriptorids.clear();
            self.playtime_disconnected = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Game {
            static instance: Game = Game {
                appid: ::std::option::Option::None,
                name: ::std::option::Option::None,
                playtime_2weeks: ::std::option::Option::None,
                playtime_forever: ::std::option::Option::None,
                img_icon_url: ::std::option::Option::None,
                has_community_visible_stats: ::std::option::Option::None,
                playtime_windows_forever: ::std::option::Option::None,
                playtime_mac_forever: ::std::option::Option::None,
                playtime_linux_forever: ::std::option::Option::None,
                rtime_last_played: ::std::option::Option::None,
                capsule_filename: ::std::option::Option::None,
                sort_as: ::std::option::Option::None,
                has_workshop: ::std::option::Option::None,
                has_market: ::std::option::Option::None,
                has_dlc: ::std::option::Option::None,
                has_leaderboards: ::std::option::Option::None,
                content_descriptorids: ::std::vec::Vec::new(),
                playtime_disconnected: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Game {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetOwnedGames_Response.Game").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Game {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Game {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetPlayNext_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPlayNext_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPlayNext_Request.max_age_seconds)
    pub max_age_seconds: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetPlayNext_Request.ignore_appids)
    pub ignore_appids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPlayNext_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPlayNext_Request {
    fn default() -> &'a CPlayer_GetPlayNext_Request {
        <CPlayer_GetPlayNext_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPlayNext_Request {
    pub fn new() -> CPlayer_GetPlayNext_Request {
        ::std::default::Default::default()
    }

    // optional uint32 max_age_seconds = 1;

    pub fn max_age_seconds(&self) -> u32 {
        self.max_age_seconds.unwrap_or(0)
    }

    pub fn clear_max_age_seconds(&mut self) {
        self.max_age_seconds = ::std::option::Option::None;
    }

    pub fn has_max_age_seconds(&self) -> bool {
        self.max_age_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_age_seconds(&mut self, v: u32) {
        self.max_age_seconds = ::std::option::Option::Some(v);
    }

    // repeated uint32 ignore_appids = 2;

    pub fn ignore_appids(&self) -> &[u32] {
        &self.ignore_appids
    }

    pub fn clear_ignore_appids(&mut self) {
        self.ignore_appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_ignore_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.ignore_appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ignore_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.ignore_appids
    }

    // Take field
    pub fn take_ignore_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.ignore_appids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_age_seconds",
            |m: &CPlayer_GetPlayNext_Request| { &m.max_age_seconds },
            |m: &mut CPlayer_GetPlayNext_Request| { &mut m.max_age_seconds },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ignore_appids",
            |m: &CPlayer_GetPlayNext_Request| { &m.ignore_appids },
            |m: &mut CPlayer_GetPlayNext_Request| { &mut m.ignore_appids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPlayNext_Request>(
            "CPlayer_GetPlayNext_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPlayNext_Request {
    const NAME: &'static str = "CPlayer_GetPlayNext_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.max_age_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.ignore_appids)?;
                },
                16 => {
                    self.ignore_appids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.max_age_seconds {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.ignore_appids {
            my_size += crate::rt::uint32_size(2, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.max_age_seconds {
            os.write_uint32(1, v)?;
        }
        for v in &self.ignore_appids {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPlayNext_Request {
        CPlayer_GetPlayNext_Request::new()
    }

    fn clear(&mut self) {
        self.max_age_seconds = ::std::option::Option::None;
        self.ignore_appids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPlayNext_Request {
        static instance: CPlayer_GetPlayNext_Request = CPlayer_GetPlayNext_Request {
            max_age_seconds: ::std::option::Option::None,
            ignore_appids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPlayNext_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPlayNext_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPlayNext_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPlayNext_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPlayNext_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPlayNext_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPlayNext_Response.last_update_time)
    pub last_update_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetPlayNext_Response.appids)
    pub appids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPlayNext_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPlayNext_Response {
    fn default() -> &'a CPlayer_GetPlayNext_Response {
        <CPlayer_GetPlayNext_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPlayNext_Response {
    pub fn new() -> CPlayer_GetPlayNext_Response {
        ::std::default::Default::default()
    }

    // optional uint32 last_update_time = 1;

    pub fn last_update_time(&self) -> u32 {
        self.last_update_time.unwrap_or(0)
    }

    pub fn clear_last_update_time(&mut self) {
        self.last_update_time = ::std::option::Option::None;
    }

    pub fn has_last_update_time(&self) -> bool {
        self.last_update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_update_time(&mut self, v: u32) {
        self.last_update_time = ::std::option::Option::Some(v);
    }

    // repeated uint32 appids = 2;

    pub fn appids(&self) -> &[u32] {
        &self.appids
    }

    pub fn clear_appids(&mut self) {
        self.appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids
    }

    // Take field
    pub fn take_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_update_time",
            |m: &CPlayer_GetPlayNext_Response| { &m.last_update_time },
            |m: &mut CPlayer_GetPlayNext_Response| { &mut m.last_update_time },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids",
            |m: &CPlayer_GetPlayNext_Response| { &m.appids },
            |m: &mut CPlayer_GetPlayNext_Response| { &mut m.appids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPlayNext_Response>(
            "CPlayer_GetPlayNext_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPlayNext_Response {
    const NAME: &'static str = "CPlayer_GetPlayNext_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.last_update_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids)?;
                },
                16 => {
                    self.appids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.last_update_time {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.appids {
            my_size += crate::rt::uint32_size(2, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.last_update_time {
            os.write_uint32(1, v)?;
        }
        for v in &self.appids {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPlayNext_Response {
        CPlayer_GetPlayNext_Response::new()
    }

    fn clear(&mut self) {
        self.last_update_time = ::std::option::Option::None;
        self.appids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPlayNext_Response {
        static instance: CPlayer_GetPlayNext_Response = CPlayer_GetPlayNext_Response {
            last_update_time: ::std::option::Option::None,
            appids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPlayNext_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPlayNext_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPlayNext_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPlayNext_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetFriendsGameplayInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetFriendsGameplayInfo_Request {
    fn default() -> &'a CPlayer_GetFriendsGameplayInfo_Request {
        <CPlayer_GetFriendsGameplayInfo_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetFriendsGameplayInfo_Request {
    pub fn new() -> CPlayer_GetFriendsGameplayInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetFriendsGameplayInfo_Request| { &m.appid },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetFriendsGameplayInfo_Request>(
            "CPlayer_GetFriendsGameplayInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetFriendsGameplayInfo_Request {
    const NAME: &'static str = "CPlayer_GetFriendsGameplayInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetFriendsGameplayInfo_Request {
        CPlayer_GetFriendsGameplayInfo_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetFriendsGameplayInfo_Request {
        static instance: CPlayer_GetFriendsGameplayInfo_Request = CPlayer_GetFriendsGameplayInfo_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetFriendsGameplayInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetFriendsGameplayInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetFriendsGameplayInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetFriendsGameplayInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.your_info)
    pub your_info: crate::MessageField<cplayer_get_friends_gameplay_info_response::OwnGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.in_game)
    pub in_game: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
    pub played_recently: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
    pub played_ever: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.owns)
    pub owns: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
    pub in_wishlist: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetFriendsGameplayInfo_Response {
    fn default() -> &'a CPlayer_GetFriendsGameplayInfo_Response {
        <CPlayer_GetFriendsGameplayInfo_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetFriendsGameplayInfo_Response {
    pub fn new() -> CPlayer_GetFriendsGameplayInfo_Response {
        ::std::default::Default::default()
    }

    // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;

    pub fn your_info(&self) -> &cplayer_get_friends_gameplay_info_response::OwnGameplayInfo {
        self.your_info.as_ref().unwrap_or_else(|| <cplayer_get_friends_gameplay_info_response::OwnGameplayInfo as crate::Message>::default_instance())
    }

    pub fn clear_your_info(&mut self) {
        self.your_info.clear();
    }

    pub fn has_your_info(&self) -> bool {
        self.your_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_info(&mut self, v: cplayer_get_friends_gameplay_info_response::OwnGameplayInfo) {
        self.your_info = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_your_info(&mut self) -> &mut cplayer_get_friends_gameplay_info_response::OwnGameplayInfo {
        self.your_info.mut_or_insert_default()
    }

    // Take field
    pub fn take_your_info(&mut self) -> cplayer_get_friends_gameplay_info_response::OwnGameplayInfo {
        self.your_info.take().unwrap_or_else(|| cplayer_get_friends_gameplay_info_response::OwnGameplayInfo::new())
    }

    // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;

    pub fn in_game(&self) -> &[cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo] {
        &self.in_game
    }

    pub fn clear_in_game(&mut self) {
        self.in_game.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_game(&mut self, v: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>) {
        self.in_game = v;
    }

    // Mutable pointer to the field.
    pub fn mut_in_game(&mut self) -> &mut ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        &mut self.in_game
    }

    // Take field
    pub fn take_in_game(&mut self) -> ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        ::std::mem::replace(&mut self.in_game, ::std::vec::Vec::new())
    }

    // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;

    pub fn played_recently(&self) -> &[cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo] {
        &self.played_recently
    }

    pub fn clear_played_recently(&mut self) {
        self.played_recently.clear();
    }

    // Param is passed by value, moved
    pub fn set_played_recently(&mut self, v: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>) {
        self.played_recently = v;
    }

    // Mutable pointer to the field.
    pub fn mut_played_recently(&mut self) -> &mut ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        &mut self.played_recently
    }

    // Take field
    pub fn take_played_recently(&mut self) -> ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        ::std::mem::replace(&mut self.played_recently, ::std::vec::Vec::new())
    }

    // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;

    pub fn played_ever(&self) -> &[cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo] {
        &self.played_ever
    }

    pub fn clear_played_ever(&mut self) {
        self.played_ever.clear();
    }

    // Param is passed by value, moved
    pub fn set_played_ever(&mut self, v: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>) {
        self.played_ever = v;
    }

    // Mutable pointer to the field.
    pub fn mut_played_ever(&mut self) -> &mut ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        &mut self.played_ever
    }

    // Take field
    pub fn take_played_ever(&mut self) -> ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        ::std::mem::replace(&mut self.played_ever, ::std::vec::Vec::new())
    }

    // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;

    pub fn owns(&self) -> &[cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo] {
        &self.owns
    }

    pub fn clear_owns(&mut self) {
        self.owns.clear();
    }

    // Param is passed by value, moved
    pub fn set_owns(&mut self, v: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>) {
        self.owns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_owns(&mut self) -> &mut ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        &mut self.owns
    }

    // Take field
    pub fn take_owns(&mut self) -> ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        ::std::mem::replace(&mut self.owns, ::std::vec::Vec::new())
    }

    // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;

    pub fn in_wishlist(&self) -> &[cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo] {
        &self.in_wishlist
    }

    pub fn clear_in_wishlist(&mut self) {
        self.in_wishlist.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_wishlist(&mut self, v: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>) {
        self.in_wishlist = v;
    }

    // Mutable pointer to the field.
    pub fn mut_in_wishlist(&mut self) -> &mut ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        &mut self.in_wishlist
    }

    // Take field
    pub fn take_in_wishlist(&mut self) -> ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo> {
        ::std::mem::replace(&mut self.in_wishlist, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, cplayer_get_friends_gameplay_info_response::OwnGameplayInfo>(
            "your_info",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.your_info },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.your_info },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in_game",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.in_game },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.in_game },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "played_recently",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.played_recently },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.played_recently },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "played_ever",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.played_ever },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.played_ever },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owns",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.owns },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.owns },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in_wishlist",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.in_wishlist },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.in_wishlist },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetFriendsGameplayInfo_Response>(
            "CPlayer_GetFriendsGameplayInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetFriendsGameplayInfo_Response {
    const NAME: &'static str = "CPlayer_GetFriendsGameplayInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.your_info)?;
                },
                18 => {
                    self.in_game.push(is.read_message()?);
                },
                26 => {
                    self.played_recently.push(is.read_message()?);
                },
                34 => {
                    self.played_ever.push(is.read_message()?);
                },
                42 => {
                    self.owns.push(is.read_message()?);
                },
                50 => {
                    self.in_wishlist.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.your_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.in_game {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.played_recently {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.played_ever {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.owns {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.in_wishlist {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.your_info.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.in_game {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.played_recently {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.played_ever {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.owns {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.in_wishlist {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetFriendsGameplayInfo_Response {
        CPlayer_GetFriendsGameplayInfo_Response::new()
    }

    fn clear(&mut self) {
        self.your_info.clear();
        self.in_game.clear();
        self.played_recently.clear();
        self.played_ever.clear();
        self.owns.clear();
        self.in_wishlist.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetFriendsGameplayInfo_Response {
        static instance: CPlayer_GetFriendsGameplayInfo_Response = CPlayer_GetFriendsGameplayInfo_Response {
            your_info: crate::MessageField::none(),
            in_game: ::std::vec::Vec::new(),
            played_recently: ::std::vec::Vec::new(),
            played_ever: ::std::vec::Vec::new(),
            owns: ::std::vec::Vec::new(),
            in_wishlist: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetFriendsGameplayInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetFriendsGameplayInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetFriendsGameplayInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetFriendsGameplayInfo_Response`
pub mod cplayer_get_friends_gameplay_info_response {
    // @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FriendsGameplayInfo {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played)
        pub minutes_played: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played_forever)
        pub minutes_played_forever: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FriendsGameplayInfo {
        fn default() -> &'a FriendsGameplayInfo {
            <FriendsGameplayInfo as crate::Message>::default_instance()
        }
    }

    impl FriendsGameplayInfo {
        pub fn new() -> FriendsGameplayInfo {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played = 2;

        pub fn minutes_played(&self) -> u32 {
            self.minutes_played.unwrap_or(0)
        }

        pub fn clear_minutes_played(&mut self) {
            self.minutes_played = ::std::option::Option::None;
        }

        pub fn has_minutes_played(&self) -> bool {
            self.minutes_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played(&mut self, v: u32) {
            self.minutes_played = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played_forever = 3;

        pub fn minutes_played_forever(&self) -> u32 {
            self.minutes_played_forever.unwrap_or(0)
        }

        pub fn clear_minutes_played_forever(&mut self) {
            self.minutes_played_forever = ::std::option::Option::None;
        }

        pub fn has_minutes_played_forever(&self) -> bool {
            self.minutes_played_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played_forever(&mut self, v: u32) {
            self.minutes_played_forever = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &FriendsGameplayInfo| { &m.steamid },
                |m: &mut FriendsGameplayInfo| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played",
                |m: &FriendsGameplayInfo| { &m.minutes_played },
                |m: &mut FriendsGameplayInfo| { &mut m.minutes_played },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played_forever",
                |m: &FriendsGameplayInfo| { &m.minutes_played_forever },
                |m: &mut FriendsGameplayInfo| { &mut m.minutes_played_forever },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<FriendsGameplayInfo>(
                "CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for FriendsGameplayInfo {
        const NAME: &'static str = "FriendsGameplayInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.minutes_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.minutes_played_forever = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.minutes_played {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.minutes_played_forever {
                my_size += crate::rt::uint32_size(3, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.minutes_played {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.minutes_played_forever {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FriendsGameplayInfo {
            FriendsGameplayInfo::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.minutes_played = ::std::option::Option::None;
            self.minutes_played_forever = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FriendsGameplayInfo {
            static instance: FriendsGameplayInfo = FriendsGameplayInfo {
                steamid: ::std::option::Option::None,
                minutes_played: ::std::option::Option::None,
                minutes_played_forever: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for FriendsGameplayInfo {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for FriendsGameplayInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for FriendsGameplayInfo {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct OwnGameplayInfo {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played)
        pub minutes_played: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played_forever)
        pub minutes_played_forever: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.in_wishlist)
        pub in_wishlist: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.owned)
        pub owned: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OwnGameplayInfo {
        fn default() -> &'a OwnGameplayInfo {
            <OwnGameplayInfo as crate::Message>::default_instance()
        }
    }

    impl OwnGameplayInfo {
        pub fn new() -> OwnGameplayInfo {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played = 2;

        pub fn minutes_played(&self) -> u32 {
            self.minutes_played.unwrap_or(0)
        }

        pub fn clear_minutes_played(&mut self) {
            self.minutes_played = ::std::option::Option::None;
        }

        pub fn has_minutes_played(&self) -> bool {
            self.minutes_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played(&mut self, v: u32) {
            self.minutes_played = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played_forever = 3;

        pub fn minutes_played_forever(&self) -> u32 {
            self.minutes_played_forever.unwrap_or(0)
        }

        pub fn clear_minutes_played_forever(&mut self) {
            self.minutes_played_forever = ::std::option::Option::None;
        }

        pub fn has_minutes_played_forever(&self) -> bool {
            self.minutes_played_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played_forever(&mut self, v: u32) {
            self.minutes_played_forever = ::std::option::Option::Some(v);
        }

        // optional bool in_wishlist = 4;

        pub fn in_wishlist(&self) -> bool {
            self.in_wishlist.unwrap_or(false)
        }

        pub fn clear_in_wishlist(&mut self) {
            self.in_wishlist = ::std::option::Option::None;
        }

        pub fn has_in_wishlist(&self) -> bool {
            self.in_wishlist.is_some()
        }

        // Param is passed by value, moved
        pub fn set_in_wishlist(&mut self, v: bool) {
            self.in_wishlist = ::std::option::Option::Some(v);
        }

        // optional bool owned = 5;

        pub fn owned(&self) -> bool {
            self.owned.unwrap_or(false)
        }

        pub fn clear_owned(&mut self) {
            self.owned = ::std::option::Option::None;
        }

        pub fn has_owned(&self) -> bool {
            self.owned.is_some()
        }

        // Param is passed by value, moved
        pub fn set_owned(&mut self, v: bool) {
            self.owned = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &OwnGameplayInfo| { &m.steamid },
                |m: &mut OwnGameplayInfo| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played",
                |m: &OwnGameplayInfo| { &m.minutes_played },
                |m: &mut OwnGameplayInfo| { &mut m.minutes_played },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played_forever",
                |m: &OwnGameplayInfo| { &m.minutes_played_forever },
                |m: &mut OwnGameplayInfo| { &mut m.minutes_played_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "in_wishlist",
                |m: &OwnGameplayInfo| { &m.in_wishlist },
                |m: &mut OwnGameplayInfo| { &mut m.in_wishlist },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "owned",
                |m: &OwnGameplayInfo| { &m.owned },
                |m: &mut OwnGameplayInfo| { &mut m.owned },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<OwnGameplayInfo>(
                "CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for OwnGameplayInfo {
        const NAME: &'static str = "OwnGameplayInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.minutes_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.minutes_played_forever = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.in_wishlist = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.owned = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.minutes_played {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.minutes_played_forever {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.in_wishlist {
                my_size += 1 + 1;
            }
            if let Some(v) = self.owned {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.minutes_played {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.minutes_played_forever {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.in_wishlist {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.owned {
                os.write_bool(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OwnGameplayInfo {
            OwnGameplayInfo::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.minutes_played = ::std::option::Option::None;
            self.minutes_played_forever = ::std::option::Option::None;
            self.in_wishlist = ::std::option::Option::None;
            self.owned = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OwnGameplayInfo {
            static instance: OwnGameplayInfo = OwnGameplayInfo {
                steamid: ::std::option::Option::None,
                minutes_played: ::std::option::Option::None,
                minutes_played_forever: ::std::option::Option::None,
                in_wishlist: ::std::option::Option::None,
                owned: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for OwnGameplayInfo {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OwnGameplayInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for OwnGameplayInfo {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetGameBadgeLevels_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetGameBadgeLevels_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetGameBadgeLevels_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetGameBadgeLevels_Request {
    fn default() -> &'a CPlayer_GetGameBadgeLevels_Request {
        <CPlayer_GetGameBadgeLevels_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetGameBadgeLevels_Request {
    pub fn new() -> CPlayer_GetGameBadgeLevels_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetGameBadgeLevels_Request| { &m.appid },
            |m: &mut CPlayer_GetGameBadgeLevels_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetGameBadgeLevels_Request>(
            "CPlayer_GetGameBadgeLevels_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetGameBadgeLevels_Request {
    const NAME: &'static str = "CPlayer_GetGameBadgeLevels_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetGameBadgeLevels_Request {
        CPlayer_GetGameBadgeLevels_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetGameBadgeLevels_Request {
        static instance: CPlayer_GetGameBadgeLevels_Request = CPlayer_GetGameBadgeLevels_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetGameBadgeLevels_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetGameBadgeLevels_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetGameBadgeLevels_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetGameBadgeLevels_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetGameBadgeLevels_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetGameBadgeLevels_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.player_level)
    pub player_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.badges)
    pub badges: ::std::vec::Vec<cplayer_get_game_badge_levels_response::Badge>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetGameBadgeLevels_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetGameBadgeLevels_Response {
    fn default() -> &'a CPlayer_GetGameBadgeLevels_Response {
        <CPlayer_GetGameBadgeLevels_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetGameBadgeLevels_Response {
    pub fn new() -> CPlayer_GetGameBadgeLevels_Response {
        ::std::default::Default::default()
    }

    // optional uint32 player_level = 1;

    pub fn player_level(&self) -> u32 {
        self.player_level.unwrap_or(0)
    }

    pub fn clear_player_level(&mut self) {
        self.player_level = ::std::option::Option::None;
    }

    pub fn has_player_level(&self) -> bool {
        self.player_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_level(&mut self, v: u32) {
        self.player_level = ::std::option::Option::Some(v);
    }

    // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;

    pub fn badges(&self) -> &[cplayer_get_game_badge_levels_response::Badge] {
        &self.badges
    }

    pub fn clear_badges(&mut self) {
        self.badges.clear();
    }

    // Param is passed by value, moved
    pub fn set_badges(&mut self, v: ::std::vec::Vec<cplayer_get_game_badge_levels_response::Badge>) {
        self.badges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_badges(&mut self) -> &mut ::std::vec::Vec<cplayer_get_game_badge_levels_response::Badge> {
        &mut self.badges
    }

    // Take field
    pub fn take_badges(&mut self) -> ::std::vec::Vec<cplayer_get_game_badge_levels_response::Badge> {
        ::std::mem::replace(&mut self.badges, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_level",
            |m: &CPlayer_GetGameBadgeLevels_Response| { &m.player_level },
            |m: &mut CPlayer_GetGameBadgeLevels_Response| { &mut m.player_level },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "badges",
            |m: &CPlayer_GetGameBadgeLevels_Response| { &m.badges },
            |m: &mut CPlayer_GetGameBadgeLevels_Response| { &mut m.badges },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetGameBadgeLevels_Response>(
            "CPlayer_GetGameBadgeLevels_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetGameBadgeLevels_Response {
    const NAME: &'static str = "CPlayer_GetGameBadgeLevels_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.player_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.badges.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player_level {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.badges {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.player_level {
            os.write_uint32(1, v)?;
        }
        for v in &self.badges {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetGameBadgeLevels_Response {
        CPlayer_GetGameBadgeLevels_Response::new()
    }

    fn clear(&mut self) {
        self.player_level = ::std::option::Option::None;
        self.badges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetGameBadgeLevels_Response {
        static instance: CPlayer_GetGameBadgeLevels_Response = CPlayer_GetGameBadgeLevels_Response {
            player_level: ::std::option::Option::None,
            badges: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetGameBadgeLevels_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetGameBadgeLevels_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetGameBadgeLevels_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetGameBadgeLevels_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetGameBadgeLevels_Response`
pub mod cplayer_get_game_badge_levels_response {
    // @@protoc_insertion_point(message:CPlayer_GetGameBadgeLevels_Response.Badge)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Badge {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.Badge.level)
        pub level: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.Badge.series)
        pub series: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
        pub border_color: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetGameBadgeLevels_Response.Badge.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Badge {
        fn default() -> &'a Badge {
            <Badge as crate::Message>::default_instance()
        }
    }

    impl Badge {
        pub fn new() -> Badge {
            ::std::default::Default::default()
        }

        // optional int32 level = 1;

        pub fn level(&self) -> i32 {
            self.level.unwrap_or(0)
        }

        pub fn clear_level(&mut self) {
            self.level = ::std::option::Option::None;
        }

        pub fn has_level(&self) -> bool {
            self.level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_level(&mut self, v: i32) {
            self.level = ::std::option::Option::Some(v);
        }

        // optional int32 series = 2;

        pub fn series(&self) -> i32 {
            self.series.unwrap_or(0)
        }

        pub fn clear_series(&mut self) {
            self.series = ::std::option::Option::None;
        }

        pub fn has_series(&self) -> bool {
            self.series.is_some()
        }

        // Param is passed by value, moved
        pub fn set_series(&mut self, v: i32) {
            self.series = ::std::option::Option::Some(v);
        }

        // optional uint32 border_color = 3;

        pub fn border_color(&self) -> u32 {
            self.border_color.unwrap_or(0)
        }

        pub fn clear_border_color(&mut self) {
            self.border_color = ::std::option::Option::None;
        }

        pub fn has_border_color(&self) -> bool {
            self.border_color.is_some()
        }

        // Param is passed by value, moved
        pub fn set_border_color(&mut self, v: u32) {
            self.border_color = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "level",
                |m: &Badge| { &m.level },
                |m: &mut Badge| { &mut m.level },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "series",
                |m: &Badge| { &m.series },
                |m: &mut Badge| { &mut m.series },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "border_color",
                |m: &Badge| { &m.border_color },
                |m: &mut Badge| { &mut m.border_color },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Badge>(
                "CPlayer_GetGameBadgeLevels_Response.Badge",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Badge {
        const NAME: &'static str = "Badge";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.level = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.series = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.border_color = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.level {
                my_size += crate::rt::int32_size(1, v);
            }
            if let Some(v) = self.series {
                my_size += crate::rt::int32_size(2, v);
            }
            if let Some(v) = self.border_color {
                my_size += crate::rt::uint32_size(3, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.level {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.series {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.border_color {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Badge {
            Badge::new()
        }

        fn clear(&mut self) {
            self.level = ::std::option::Option::None;
            self.series = ::std::option::Option::None;
            self.border_color = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Badge {
            static instance: Badge = Badge {
                level: ::std::option::Option::None,
                series: ::std::option::Option::None,
                border_color: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Badge {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetGameBadgeLevels_Response.Badge").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Badge {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Badge {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetProfileBackground_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileBackground_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileBackground_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileBackground_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileBackground_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileBackground_Request {
    fn default() -> &'a CPlayer_GetProfileBackground_Request {
        <CPlayer_GetProfileBackground_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileBackground_Request {
    pub fn new() -> CPlayer_GetProfileBackground_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetProfileBackground_Request| { &m.steamid },
            |m: &mut CPlayer_GetProfileBackground_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetProfileBackground_Request| { &m.language },
            |m: &mut CPlayer_GetProfileBackground_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileBackground_Request>(
            "CPlayer_GetProfileBackground_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileBackground_Request {
    const NAME: &'static str = "CPlayer_GetProfileBackground_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileBackground_Request {
        CPlayer_GetProfileBackground_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileBackground_Request {
        static instance: CPlayer_GetProfileBackground_Request = CPlayer_GetProfileBackground_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileBackground_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileBackground_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileBackground_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileBackground_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ProfileItem)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProfileItem {
    // message fields
    // @@protoc_insertion_point(field:ProfileItem.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileItem.image_small)
    pub image_small: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.image_large)
    pub image_large: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.item_title)
    pub item_title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.item_description)
    pub item_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileItem.item_type)
    pub item_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileItem.item_class)
    pub item_class: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileItem.movie_webm)
    pub movie_webm: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.movie_mp4)
    pub movie_mp4: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.movie_webm_small)
    pub movie_webm_small: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.movie_mp4_small)
    pub movie_mp4_small: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileItem.equipped_flags)
    pub equipped_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileItem.profile_colors)
    pub profile_colors: ::std::vec::Vec<profile_item::ProfileColor>,
    // special fields
    // @@protoc_insertion_point(special_field:ProfileItem.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileItem {
    fn default() -> &'a ProfileItem {
        <ProfileItem as crate::Message>::default_instance()
    }
}

impl ProfileItem {
    pub fn new() -> ProfileItem {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    // optional string image_small = 2;

    pub fn image_small(&self) -> &str {
        match self.image_small.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_image_small(&mut self) {
        self.image_small = ::std::option::Option::None;
    }

    pub fn has_image_small(&self) -> bool {
        self.image_small.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_small(&mut self, v: ::std::string::String) {
        self.image_small = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_small(&mut self) -> &mut ::std::string::String {
        if self.image_small.is_none() {
            self.image_small = ::std::option::Option::Some(::std::string::String::new());
        }
        self.image_small.as_mut().unwrap()
    }

    // Take field
    pub fn take_image_small(&mut self) -> ::std::string::String {
        self.image_small.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string image_large = 3;

    pub fn image_large(&self) -> &str {
        match self.image_large.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_image_large(&mut self) {
        self.image_large = ::std::option::Option::None;
    }

    pub fn has_image_large(&self) -> bool {
        self.image_large.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_large(&mut self, v: ::std::string::String) {
        self.image_large = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_large(&mut self) -> &mut ::std::string::String {
        if self.image_large.is_none() {
            self.image_large = ::std::option::Option::Some(::std::string::String::new());
        }
        self.image_large.as_mut().unwrap()
    }

    // Take field
    pub fn take_image_large(&mut self) -> ::std::string::String {
        self.image_large.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 4;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string item_title = 5;

    pub fn item_title(&self) -> &str {
        match self.item_title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_item_title(&mut self) {
        self.item_title = ::std::option::Option::None;
    }

    pub fn has_item_title(&self) -> bool {
        self.item_title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_title(&mut self, v: ::std::string::String) {
        self.item_title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_title(&mut self) -> &mut ::std::string::String {
        if self.item_title.is_none() {
            self.item_title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.item_title.as_mut().unwrap()
    }

    // Take field
    pub fn take_item_title(&mut self) -> ::std::string::String {
        self.item_title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string item_description = 6;

    pub fn item_description(&self) -> &str {
        match self.item_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_item_description(&mut self) {
        self.item_description = ::std::option::Option::None;
    }

    pub fn has_item_description(&self) -> bool {
        self.item_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_description(&mut self, v: ::std::string::String) {
        self.item_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_description(&mut self) -> &mut ::std::string::String {
        if self.item_description.is_none() {
            self.item_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.item_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_item_description(&mut self) -> ::std::string::String {
        self.item_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 7;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 item_type = 8;

    pub fn item_type(&self) -> u32 {
        self.item_type.unwrap_or(0)
    }

    pub fn clear_item_type(&mut self) {
        self.item_type = ::std::option::Option::None;
    }

    pub fn has_item_type(&self) -> bool {
        self.item_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_type(&mut self, v: u32) {
        self.item_type = ::std::option::Option::Some(v);
    }

    // optional uint32 item_class = 9;

    pub fn item_class(&self) -> u32 {
        self.item_class.unwrap_or(0)
    }

    pub fn clear_item_class(&mut self) {
        self.item_class = ::std::option::Option::None;
    }

    pub fn has_item_class(&self) -> bool {
        self.item_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_class(&mut self, v: u32) {
        self.item_class = ::std::option::Option::Some(v);
    }

    // optional string movie_webm = 10;

    pub fn movie_webm(&self) -> &str {
        match self.movie_webm.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_movie_webm(&mut self) {
        self.movie_webm = ::std::option::Option::None;
    }

    pub fn has_movie_webm(&self) -> bool {
        self.movie_webm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movie_webm(&mut self, v: ::std::string::String) {
        self.movie_webm = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_movie_webm(&mut self) -> &mut ::std::string::String {
        if self.movie_webm.is_none() {
            self.movie_webm = ::std::option::Option::Some(::std::string::String::new());
        }
        self.movie_webm.as_mut().unwrap()
    }

    // Take field
    pub fn take_movie_webm(&mut self) -> ::std::string::String {
        self.movie_webm.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string movie_mp4 = 11;

    pub fn movie_mp4(&self) -> &str {
        match self.movie_mp4.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_movie_mp4(&mut self) {
        self.movie_mp4 = ::std::option::Option::None;
    }

    pub fn has_movie_mp4(&self) -> bool {
        self.movie_mp4.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movie_mp4(&mut self, v: ::std::string::String) {
        self.movie_mp4 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_movie_mp4(&mut self) -> &mut ::std::string::String {
        if self.movie_mp4.is_none() {
            self.movie_mp4 = ::std::option::Option::Some(::std::string::String::new());
        }
        self.movie_mp4.as_mut().unwrap()
    }

    // Take field
    pub fn take_movie_mp4(&mut self) -> ::std::string::String {
        self.movie_mp4.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string movie_webm_small = 13;

    pub fn movie_webm_small(&self) -> &str {
        match self.movie_webm_small.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_movie_webm_small(&mut self) {
        self.movie_webm_small = ::std::option::Option::None;
    }

    pub fn has_movie_webm_small(&self) -> bool {
        self.movie_webm_small.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movie_webm_small(&mut self, v: ::std::string::String) {
        self.movie_webm_small = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_movie_webm_small(&mut self) -> &mut ::std::string::String {
        if self.movie_webm_small.is_none() {
            self.movie_webm_small = ::std::option::Option::Some(::std::string::String::new());
        }
        self.movie_webm_small.as_mut().unwrap()
    }

    // Take field
    pub fn take_movie_webm_small(&mut self) -> ::std::string::String {
        self.movie_webm_small.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string movie_mp4_small = 14;

    pub fn movie_mp4_small(&self) -> &str {
        match self.movie_mp4_small.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_movie_mp4_small(&mut self) {
        self.movie_mp4_small = ::std::option::Option::None;
    }

    pub fn has_movie_mp4_small(&self) -> bool {
        self.movie_mp4_small.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movie_mp4_small(&mut self, v: ::std::string::String) {
        self.movie_mp4_small = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_movie_mp4_small(&mut self) -> &mut ::std::string::String {
        if self.movie_mp4_small.is_none() {
            self.movie_mp4_small = ::std::option::Option::Some(::std::string::String::new());
        }
        self.movie_mp4_small.as_mut().unwrap()
    }

    // Take field
    pub fn take_movie_mp4_small(&mut self) -> ::std::string::String {
        self.movie_mp4_small.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 equipped_flags = 12;

    pub fn equipped_flags(&self) -> u32 {
        self.equipped_flags.unwrap_or(0)
    }

    pub fn clear_equipped_flags(&mut self) {
        self.equipped_flags = ::std::option::Option::None;
    }

    pub fn has_equipped_flags(&self) -> bool {
        self.equipped_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_equipped_flags(&mut self, v: u32) {
        self.equipped_flags = ::std::option::Option::Some(v);
    }

    // repeated .ProfileItem.ProfileColor profile_colors = 15;

    pub fn profile_colors(&self) -> &[profile_item::ProfileColor] {
        &self.profile_colors
    }

    pub fn clear_profile_colors(&mut self) {
        self.profile_colors.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_colors(&mut self, v: ::std::vec::Vec<profile_item::ProfileColor>) {
        self.profile_colors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_profile_colors(&mut self) -> &mut ::std::vec::Vec<profile_item::ProfileColor> {
        &mut self.profile_colors
    }

    // Take field
    pub fn take_profile_colors(&mut self) -> ::std::vec::Vec<profile_item::ProfileColor> {
        ::std::mem::replace(&mut self.profile_colors, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &ProfileItem| { &m.communityitemid },
            |m: &mut ProfileItem| { &mut m.communityitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "image_small",
            |m: &ProfileItem| { &m.image_small },
            |m: &mut ProfileItem| { &mut m.image_small },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "image_large",
            |m: &ProfileItem| { &m.image_large },
            |m: &mut ProfileItem| { &mut m.image_large },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ProfileItem| { &m.name },
            |m: &mut ProfileItem| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_title",
            |m: &ProfileItem| { &m.item_title },
            |m: &mut ProfileItem| { &mut m.item_title },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_description",
            |m: &ProfileItem| { &m.item_description },
            |m: &mut ProfileItem| { &mut m.item_description },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &ProfileItem| { &m.appid },
            |m: &mut ProfileItem| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_type",
            |m: &ProfileItem| { &m.item_type },
            |m: &mut ProfileItem| { &mut m.item_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_class",
            |m: &ProfileItem| { &m.item_class },
            |m: &mut ProfileItem| { &mut m.item_class },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie_webm",
            |m: &ProfileItem| { &m.movie_webm },
            |m: &mut ProfileItem| { &mut m.movie_webm },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie_mp4",
            |m: &ProfileItem| { &m.movie_mp4 },
            |m: &mut ProfileItem| { &mut m.movie_mp4 },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie_webm_small",
            |m: &ProfileItem| { &m.movie_webm_small },
            |m: &mut ProfileItem| { &mut m.movie_webm_small },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie_mp4_small",
            |m: &ProfileItem| { &m.movie_mp4_small },
            |m: &mut ProfileItem| { &mut m.movie_mp4_small },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "equipped_flags",
            |m: &ProfileItem| { &m.equipped_flags },
            |m: &mut ProfileItem| { &mut m.equipped_flags },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "profile_colors",
            |m: &ProfileItem| { &m.profile_colors },
            |m: &mut ProfileItem| { &mut m.profile_colors },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ProfileItem>(
            "ProfileItem",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ProfileItem {
    const NAME: &'static str = "ProfileItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.image_small = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.image_large = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.item_title = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.item_description = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.item_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.item_class = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.movie_webm = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.movie_mp4 = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    self.movie_webm_small = ::std::option::Option::Some(is.read_string()?);
                },
                114 => {
                    self.movie_mp4_small = ::std::option::Option::Some(is.read_string()?);
                },
                96 => {
                    self.equipped_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                122 => {
                    self.profile_colors.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.image_small.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.image_large.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.item_title.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.item_description.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(7, v);
        }
        if let Some(v) = self.item_type {
            my_size += crate::rt::uint32_size(8, v);
        }
        if let Some(v) = self.item_class {
            my_size += crate::rt::uint32_size(9, v);
        }
        if let Some(v) = self.movie_webm.as_ref() {
            my_size += crate::rt::string_size(10, &v);
        }
        if let Some(v) = self.movie_mp4.as_ref() {
            my_size += crate::rt::string_size(11, &v);
        }
        if let Some(v) = self.movie_webm_small.as_ref() {
            my_size += crate::rt::string_size(13, &v);
        }
        if let Some(v) = self.movie_mp4_small.as_ref() {
            my_size += crate::rt::string_size(14, &v);
        }
        if let Some(v) = self.equipped_flags {
            my_size += crate::rt::uint32_size(12, v);
        }
        for value in &self.profile_colors {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.image_small.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.image_large.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.item_title.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.item_description.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.item_type {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.item_class {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.movie_webm.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.movie_mp4.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.movie_webm_small.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.movie_mp4_small.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.equipped_flags {
            os.write_uint32(12, v)?;
        }
        for v in &self.profile_colors {
            crate::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileItem {
        ProfileItem::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.image_small = ::std::option::Option::None;
        self.image_large = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.item_title = ::std::option::Option::None;
        self.item_description = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.item_type = ::std::option::Option::None;
        self.item_class = ::std::option::Option::None;
        self.movie_webm = ::std::option::Option::None;
        self.movie_mp4 = ::std::option::Option::None;
        self.movie_webm_small = ::std::option::Option::None;
        self.movie_mp4_small = ::std::option::Option::None;
        self.equipped_flags = ::std::option::Option::None;
        self.profile_colors.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileItem {
        static instance: ProfileItem = ProfileItem {
            communityitemid: ::std::option::Option::None,
            image_small: ::std::option::Option::None,
            image_large: ::std::option::Option::None,
            name: ::std::option::Option::None,
            item_title: ::std::option::Option::None,
            item_description: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            item_type: ::std::option::Option::None,
            item_class: ::std::option::Option::None,
            movie_webm: ::std::option::Option::None,
            movie_mp4: ::std::option::Option::None,
            movie_webm_small: ::std::option::Option::None,
            movie_mp4_small: ::std::option::Option::None,
            equipped_flags: ::std::option::Option::None,
            profile_colors: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ProfileItem {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ProfileItem {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ProfileItem`
pub mod profile_item {
    // @@protoc_insertion_point(message:ProfileItem.ProfileColor)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ProfileColor {
        // message fields
        // @@protoc_insertion_point(field:ProfileItem.ProfileColor.style_name)
        pub style_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:ProfileItem.ProfileColor.color)
        pub color: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:ProfileItem.ProfileColor.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ProfileColor {
        fn default() -> &'a ProfileColor {
            <ProfileColor as crate::Message>::default_instance()
        }
    }

    impl ProfileColor {
        pub fn new() -> ProfileColor {
            ::std::default::Default::default()
        }

        // optional string style_name = 1;

        pub fn style_name(&self) -> &str {
            match self.style_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_style_name(&mut self) {
            self.style_name = ::std::option::Option::None;
        }

        pub fn has_style_name(&self) -> bool {
            self.style_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_style_name(&mut self, v: ::std::string::String) {
            self.style_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_style_name(&mut self) -> &mut ::std::string::String {
            if self.style_name.is_none() {
                self.style_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.style_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_style_name(&mut self) -> ::std::string::String {
            self.style_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string color = 2;

        pub fn color(&self) -> &str {
            match self.color.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_color(&mut self) {
            self.color = ::std::option::Option::None;
        }

        pub fn has_color(&self) -> bool {
            self.color.is_some()
        }

        // Param is passed by value, moved
        pub fn set_color(&mut self, v: ::std::string::String) {
            self.color = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_color(&mut self) -> &mut ::std::string::String {
            if self.color.is_none() {
                self.color = ::std::option::Option::Some(::std::string::String::new());
            }
            self.color.as_mut().unwrap()
        }

        // Take field
        pub fn take_color(&mut self) -> ::std::string::String {
            self.color.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "style_name",
                |m: &ProfileColor| { &m.style_name },
                |m: &mut ProfileColor| { &mut m.style_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "color",
                |m: &ProfileColor| { &m.color },
                |m: &mut ProfileColor| { &mut m.color },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ProfileColor>(
                "ProfileItem.ProfileColor",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ProfileColor {
        const NAME: &'static str = "ProfileColor";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.style_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.color = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.style_name.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.color.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.style_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.color.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ProfileColor {
            ProfileColor::new()
        }

        fn clear(&mut self) {
            self.style_name = ::std::option::Option::None;
            self.color = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ProfileColor {
            static instance: ProfileColor = ProfileColor {
                style_name: ::std::option::Option::None,
                color: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ProfileColor {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ProfileItem.ProfileColor").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ProfileColor {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ProfileColor {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetProfileBackground_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileBackground_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileBackground_Response.profile_background)
    pub profile_background: crate::MessageField<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileBackground_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileBackground_Response {
    fn default() -> &'a CPlayer_GetProfileBackground_Response {
        <CPlayer_GetProfileBackground_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileBackground_Response {
    pub fn new() -> CPlayer_GetProfileBackground_Response {
        ::std::default::Default::default()
    }

    // optional .ProfileItem profile_background = 1;

    pub fn profile_background(&self) -> &ProfileItem {
        self.profile_background.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_profile_background(&mut self) {
        self.profile_background.clear();
    }

    pub fn has_profile_background(&self) -> bool {
        self.profile_background.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_background(&mut self, v: ProfileItem) {
        self.profile_background = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_background(&mut self) -> &mut ProfileItem {
        self.profile_background.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_background(&mut self) -> ProfileItem {
        self.profile_background.take().unwrap_or_else(|| ProfileItem::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "profile_background",
            |m: &CPlayer_GetProfileBackground_Response| { &m.profile_background },
            |m: &mut CPlayer_GetProfileBackground_Response| { &mut m.profile_background },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileBackground_Response>(
            "CPlayer_GetProfileBackground_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileBackground_Response {
    const NAME: &'static str = "CPlayer_GetProfileBackground_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_background)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.profile_background.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.profile_background.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileBackground_Response {
        CPlayer_GetProfileBackground_Response::new()
    }

    fn clear(&mut self) {
        self.profile_background.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileBackground_Response {
        static instance: CPlayer_GetProfileBackground_Response = CPlayer_GetProfileBackground_Response {
            profile_background: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileBackground_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileBackground_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileBackground_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileBackground_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetProfileBackground_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetProfileBackground_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetProfileBackground_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetProfileBackground_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetProfileBackground_Request {
    fn default() -> &'a CPlayer_SetProfileBackground_Request {
        <CPlayer_SetProfileBackground_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetProfileBackground_Request {
    pub fn new() -> CPlayer_SetProfileBackground_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetProfileBackground_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetProfileBackground_Request| { &mut m.communityitemid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetProfileBackground_Request>(
            "CPlayer_SetProfileBackground_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetProfileBackground_Request {
    const NAME: &'static str = "CPlayer_SetProfileBackground_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetProfileBackground_Request {
        CPlayer_SetProfileBackground_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetProfileBackground_Request {
        static instance: CPlayer_SetProfileBackground_Request = CPlayer_SetProfileBackground_Request {
            communityitemid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetProfileBackground_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetProfileBackground_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetProfileBackground_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetProfileBackground_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetProfileBackground_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetProfileBackground_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetProfileBackground_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetProfileBackground_Response {
    fn default() -> &'a CPlayer_SetProfileBackground_Response {
        <CPlayer_SetProfileBackground_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetProfileBackground_Response {
    pub fn new() -> CPlayer_SetProfileBackground_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetProfileBackground_Response>(
            "CPlayer_SetProfileBackground_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetProfileBackground_Response {
    const NAME: &'static str = "CPlayer_SetProfileBackground_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetProfileBackground_Response {
        CPlayer_SetProfileBackground_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetProfileBackground_Response {
        static instance: CPlayer_SetProfileBackground_Response = CPlayer_SetProfileBackground_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetProfileBackground_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetProfileBackground_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetProfileBackground_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetProfileBackground_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetMiniProfileBackground_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetMiniProfileBackground_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetMiniProfileBackground_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetMiniProfileBackground_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetMiniProfileBackground_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetMiniProfileBackground_Request {
    fn default() -> &'a CPlayer_GetMiniProfileBackground_Request {
        <CPlayer_GetMiniProfileBackground_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetMiniProfileBackground_Request {
    pub fn new() -> CPlayer_GetMiniProfileBackground_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetMiniProfileBackground_Request| { &m.steamid },
            |m: &mut CPlayer_GetMiniProfileBackground_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetMiniProfileBackground_Request| { &m.language },
            |m: &mut CPlayer_GetMiniProfileBackground_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetMiniProfileBackground_Request>(
            "CPlayer_GetMiniProfileBackground_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetMiniProfileBackground_Request {
    const NAME: &'static str = "CPlayer_GetMiniProfileBackground_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetMiniProfileBackground_Request {
        CPlayer_GetMiniProfileBackground_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetMiniProfileBackground_Request {
        static instance: CPlayer_GetMiniProfileBackground_Request = CPlayer_GetMiniProfileBackground_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetMiniProfileBackground_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetMiniProfileBackground_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetMiniProfileBackground_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetMiniProfileBackground_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetMiniProfileBackground_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetMiniProfileBackground_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetMiniProfileBackground_Response.profile_background)
    pub profile_background: crate::MessageField<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetMiniProfileBackground_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetMiniProfileBackground_Response {
    fn default() -> &'a CPlayer_GetMiniProfileBackground_Response {
        <CPlayer_GetMiniProfileBackground_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetMiniProfileBackground_Response {
    pub fn new() -> CPlayer_GetMiniProfileBackground_Response {
        ::std::default::Default::default()
    }

    // optional .ProfileItem profile_background = 1;

    pub fn profile_background(&self) -> &ProfileItem {
        self.profile_background.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_profile_background(&mut self) {
        self.profile_background.clear();
    }

    pub fn has_profile_background(&self) -> bool {
        self.profile_background.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_background(&mut self, v: ProfileItem) {
        self.profile_background = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_background(&mut self) -> &mut ProfileItem {
        self.profile_background.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_background(&mut self) -> ProfileItem {
        self.profile_background.take().unwrap_or_else(|| ProfileItem::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "profile_background",
            |m: &CPlayer_GetMiniProfileBackground_Response| { &m.profile_background },
            |m: &mut CPlayer_GetMiniProfileBackground_Response| { &mut m.profile_background },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetMiniProfileBackground_Response>(
            "CPlayer_GetMiniProfileBackground_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetMiniProfileBackground_Response {
    const NAME: &'static str = "CPlayer_GetMiniProfileBackground_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_background)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.profile_background.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.profile_background.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetMiniProfileBackground_Response {
        CPlayer_GetMiniProfileBackground_Response::new()
    }

    fn clear(&mut self) {
        self.profile_background.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetMiniProfileBackground_Response {
        static instance: CPlayer_GetMiniProfileBackground_Response = CPlayer_GetMiniProfileBackground_Response {
            profile_background: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetMiniProfileBackground_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetMiniProfileBackground_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetMiniProfileBackground_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetMiniProfileBackground_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetMiniProfileBackground_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetMiniProfileBackground_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetMiniProfileBackground_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetMiniProfileBackground_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetMiniProfileBackground_Request {
    fn default() -> &'a CPlayer_SetMiniProfileBackground_Request {
        <CPlayer_SetMiniProfileBackground_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetMiniProfileBackground_Request {
    pub fn new() -> CPlayer_SetMiniProfileBackground_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetMiniProfileBackground_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetMiniProfileBackground_Request| { &mut m.communityitemid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetMiniProfileBackground_Request>(
            "CPlayer_SetMiniProfileBackground_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetMiniProfileBackground_Request {
    const NAME: &'static str = "CPlayer_SetMiniProfileBackground_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetMiniProfileBackground_Request {
        CPlayer_SetMiniProfileBackground_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetMiniProfileBackground_Request {
        static instance: CPlayer_SetMiniProfileBackground_Request = CPlayer_SetMiniProfileBackground_Request {
            communityitemid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetMiniProfileBackground_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetMiniProfileBackground_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetMiniProfileBackground_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetMiniProfileBackground_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetMiniProfileBackground_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetMiniProfileBackground_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetMiniProfileBackground_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetMiniProfileBackground_Response {
    fn default() -> &'a CPlayer_SetMiniProfileBackground_Response {
        <CPlayer_SetMiniProfileBackground_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetMiniProfileBackground_Response {
    pub fn new() -> CPlayer_SetMiniProfileBackground_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetMiniProfileBackground_Response>(
            "CPlayer_SetMiniProfileBackground_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetMiniProfileBackground_Response {
    const NAME: &'static str = "CPlayer_SetMiniProfileBackground_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetMiniProfileBackground_Response {
        CPlayer_SetMiniProfileBackground_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetMiniProfileBackground_Response {
        static instance: CPlayer_SetMiniProfileBackground_Response = CPlayer_SetMiniProfileBackground_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetMiniProfileBackground_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetMiniProfileBackground_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetMiniProfileBackground_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetMiniProfileBackground_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetAvatarFrame_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetAvatarFrame_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetAvatarFrame_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetAvatarFrame_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetAvatarFrame_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetAvatarFrame_Request {
    fn default() -> &'a CPlayer_GetAvatarFrame_Request {
        <CPlayer_GetAvatarFrame_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetAvatarFrame_Request {
    pub fn new() -> CPlayer_GetAvatarFrame_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetAvatarFrame_Request| { &m.steamid },
            |m: &mut CPlayer_GetAvatarFrame_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetAvatarFrame_Request| { &m.language },
            |m: &mut CPlayer_GetAvatarFrame_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetAvatarFrame_Request>(
            "CPlayer_GetAvatarFrame_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetAvatarFrame_Request {
    const NAME: &'static str = "CPlayer_GetAvatarFrame_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetAvatarFrame_Request {
        CPlayer_GetAvatarFrame_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetAvatarFrame_Request {
        static instance: CPlayer_GetAvatarFrame_Request = CPlayer_GetAvatarFrame_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetAvatarFrame_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetAvatarFrame_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetAvatarFrame_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetAvatarFrame_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetAvatarFrame_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetAvatarFrame_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetAvatarFrame_Response.avatar_frame)
    pub avatar_frame: crate::MessageField<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetAvatarFrame_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetAvatarFrame_Response {
    fn default() -> &'a CPlayer_GetAvatarFrame_Response {
        <CPlayer_GetAvatarFrame_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetAvatarFrame_Response {
    pub fn new() -> CPlayer_GetAvatarFrame_Response {
        ::std::default::Default::default()
    }

    // optional .ProfileItem avatar_frame = 1;

    pub fn avatar_frame(&self) -> &ProfileItem {
        self.avatar_frame.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_avatar_frame(&mut self) {
        self.avatar_frame.clear();
    }

    pub fn has_avatar_frame(&self) -> bool {
        self.avatar_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_avatar_frame(&mut self, v: ProfileItem) {
        self.avatar_frame = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar_frame(&mut self) -> &mut ProfileItem {
        self.avatar_frame.mut_or_insert_default()
    }

    // Take field
    pub fn take_avatar_frame(&mut self) -> ProfileItem {
        self.avatar_frame.take().unwrap_or_else(|| ProfileItem::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "avatar_frame",
            |m: &CPlayer_GetAvatarFrame_Response| { &m.avatar_frame },
            |m: &mut CPlayer_GetAvatarFrame_Response| { &mut m.avatar_frame },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetAvatarFrame_Response>(
            "CPlayer_GetAvatarFrame_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetAvatarFrame_Response {
    const NAME: &'static str = "CPlayer_GetAvatarFrame_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.avatar_frame)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.avatar_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.avatar_frame.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetAvatarFrame_Response {
        CPlayer_GetAvatarFrame_Response::new()
    }

    fn clear(&mut self) {
        self.avatar_frame.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetAvatarFrame_Response {
        static instance: CPlayer_GetAvatarFrame_Response = CPlayer_GetAvatarFrame_Response {
            avatar_frame: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetAvatarFrame_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetAvatarFrame_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetAvatarFrame_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetAvatarFrame_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetAvatarFrame_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetAvatarFrame_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetAvatarFrame_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetAvatarFrame_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetAvatarFrame_Request {
    fn default() -> &'a CPlayer_SetAvatarFrame_Request {
        <CPlayer_SetAvatarFrame_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetAvatarFrame_Request {
    pub fn new() -> CPlayer_SetAvatarFrame_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetAvatarFrame_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetAvatarFrame_Request| { &mut m.communityitemid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetAvatarFrame_Request>(
            "CPlayer_SetAvatarFrame_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetAvatarFrame_Request {
    const NAME: &'static str = "CPlayer_SetAvatarFrame_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetAvatarFrame_Request {
        CPlayer_SetAvatarFrame_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetAvatarFrame_Request {
        static instance: CPlayer_SetAvatarFrame_Request = CPlayer_SetAvatarFrame_Request {
            communityitemid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetAvatarFrame_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetAvatarFrame_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetAvatarFrame_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetAvatarFrame_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetAvatarFrame_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetAvatarFrame_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetAvatarFrame_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetAvatarFrame_Response {
    fn default() -> &'a CPlayer_SetAvatarFrame_Response {
        <CPlayer_SetAvatarFrame_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetAvatarFrame_Response {
    pub fn new() -> CPlayer_SetAvatarFrame_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetAvatarFrame_Response>(
            "CPlayer_SetAvatarFrame_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetAvatarFrame_Response {
    const NAME: &'static str = "CPlayer_SetAvatarFrame_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetAvatarFrame_Response {
        CPlayer_SetAvatarFrame_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetAvatarFrame_Response {
        static instance: CPlayer_SetAvatarFrame_Response = CPlayer_SetAvatarFrame_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetAvatarFrame_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetAvatarFrame_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetAvatarFrame_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetAvatarFrame_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetAnimatedAvatar_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetAnimatedAvatar_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetAnimatedAvatar_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetAnimatedAvatar_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetAnimatedAvatar_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetAnimatedAvatar_Request {
    fn default() -> &'a CPlayer_GetAnimatedAvatar_Request {
        <CPlayer_GetAnimatedAvatar_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetAnimatedAvatar_Request {
    pub fn new() -> CPlayer_GetAnimatedAvatar_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetAnimatedAvatar_Request| { &m.steamid },
            |m: &mut CPlayer_GetAnimatedAvatar_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetAnimatedAvatar_Request| { &m.language },
            |m: &mut CPlayer_GetAnimatedAvatar_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetAnimatedAvatar_Request>(
            "CPlayer_GetAnimatedAvatar_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetAnimatedAvatar_Request {
    const NAME: &'static str = "CPlayer_GetAnimatedAvatar_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetAnimatedAvatar_Request {
        CPlayer_GetAnimatedAvatar_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetAnimatedAvatar_Request {
        static instance: CPlayer_GetAnimatedAvatar_Request = CPlayer_GetAnimatedAvatar_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetAnimatedAvatar_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetAnimatedAvatar_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetAnimatedAvatar_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetAnimatedAvatar_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetAnimatedAvatar_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetAnimatedAvatar_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetAnimatedAvatar_Response.avatar)
    pub avatar: crate::MessageField<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetAnimatedAvatar_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetAnimatedAvatar_Response {
    fn default() -> &'a CPlayer_GetAnimatedAvatar_Response {
        <CPlayer_GetAnimatedAvatar_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetAnimatedAvatar_Response {
    pub fn new() -> CPlayer_GetAnimatedAvatar_Response {
        ::std::default::Default::default()
    }

    // optional .ProfileItem avatar = 1;

    pub fn avatar(&self) -> &ProfileItem {
        self.avatar.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    pub fn has_avatar(&self) -> bool {
        self.avatar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: ProfileItem) {
        self.avatar = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut ProfileItem {
        self.avatar.mut_or_insert_default()
    }

    // Take field
    pub fn take_avatar(&mut self) -> ProfileItem {
        self.avatar.take().unwrap_or_else(|| ProfileItem::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "avatar",
            |m: &CPlayer_GetAnimatedAvatar_Response| { &m.avatar },
            |m: &mut CPlayer_GetAnimatedAvatar_Response| { &mut m.avatar },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetAnimatedAvatar_Response>(
            "CPlayer_GetAnimatedAvatar_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetAnimatedAvatar_Response {
    const NAME: &'static str = "CPlayer_GetAnimatedAvatar_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.avatar)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.avatar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.avatar.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetAnimatedAvatar_Response {
        CPlayer_GetAnimatedAvatar_Response::new()
    }

    fn clear(&mut self) {
        self.avatar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetAnimatedAvatar_Response {
        static instance: CPlayer_GetAnimatedAvatar_Response = CPlayer_GetAnimatedAvatar_Response {
            avatar: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetAnimatedAvatar_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetAnimatedAvatar_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetAnimatedAvatar_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetAnimatedAvatar_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetAnimatedAvatar_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetAnimatedAvatar_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetAnimatedAvatar_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetAnimatedAvatar_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetAnimatedAvatar_Request {
    fn default() -> &'a CPlayer_SetAnimatedAvatar_Request {
        <CPlayer_SetAnimatedAvatar_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetAnimatedAvatar_Request {
    pub fn new() -> CPlayer_SetAnimatedAvatar_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetAnimatedAvatar_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetAnimatedAvatar_Request| { &mut m.communityitemid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetAnimatedAvatar_Request>(
            "CPlayer_SetAnimatedAvatar_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetAnimatedAvatar_Request {
    const NAME: &'static str = "CPlayer_SetAnimatedAvatar_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetAnimatedAvatar_Request {
        CPlayer_SetAnimatedAvatar_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetAnimatedAvatar_Request {
        static instance: CPlayer_SetAnimatedAvatar_Request = CPlayer_SetAnimatedAvatar_Request {
            communityitemid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetAnimatedAvatar_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetAnimatedAvatar_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetAnimatedAvatar_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetAnimatedAvatar_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetAnimatedAvatar_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetAnimatedAvatar_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetAnimatedAvatar_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetAnimatedAvatar_Response {
    fn default() -> &'a CPlayer_SetAnimatedAvatar_Response {
        <CPlayer_SetAnimatedAvatar_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetAnimatedAvatar_Response {
    pub fn new() -> CPlayer_SetAnimatedAvatar_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetAnimatedAvatar_Response>(
            "CPlayer_SetAnimatedAvatar_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetAnimatedAvatar_Response {
    const NAME: &'static str = "CPlayer_SetAnimatedAvatar_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetAnimatedAvatar_Response {
        CPlayer_SetAnimatedAvatar_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetAnimatedAvatar_Response {
        static instance: CPlayer_SetAnimatedAvatar_Response = CPlayer_SetAnimatedAvatar_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetAnimatedAvatar_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetAnimatedAvatar_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetAnimatedAvatar_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetAnimatedAvatar_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetSteamDeckKeyboardSkin_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetSteamDeckKeyboardSkin_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetSteamDeckKeyboardSkin_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetSteamDeckKeyboardSkin_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetSteamDeckKeyboardSkin_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetSteamDeckKeyboardSkin_Request {
    fn default() -> &'a CPlayer_GetSteamDeckKeyboardSkin_Request {
        <CPlayer_GetSteamDeckKeyboardSkin_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetSteamDeckKeyboardSkin_Request {
    pub fn new() -> CPlayer_GetSteamDeckKeyboardSkin_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetSteamDeckKeyboardSkin_Request| { &m.steamid },
            |m: &mut CPlayer_GetSteamDeckKeyboardSkin_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetSteamDeckKeyboardSkin_Request| { &m.language },
            |m: &mut CPlayer_GetSteamDeckKeyboardSkin_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetSteamDeckKeyboardSkin_Request>(
            "CPlayer_GetSteamDeckKeyboardSkin_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetSteamDeckKeyboardSkin_Request {
    const NAME: &'static str = "CPlayer_GetSteamDeckKeyboardSkin_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetSteamDeckKeyboardSkin_Request {
        CPlayer_GetSteamDeckKeyboardSkin_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetSteamDeckKeyboardSkin_Request {
        static instance: CPlayer_GetSteamDeckKeyboardSkin_Request = CPlayer_GetSteamDeckKeyboardSkin_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetSteamDeckKeyboardSkin_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetSteamDeckKeyboardSkin_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetSteamDeckKeyboardSkin_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetSteamDeckKeyboardSkin_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetSteamDeckKeyboardSkin_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetSteamDeckKeyboardSkin_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetSteamDeckKeyboardSkin_Response.steam_deck_keyboard_skin)
    pub steam_deck_keyboard_skin: crate::MessageField<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetSteamDeckKeyboardSkin_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetSteamDeckKeyboardSkin_Response {
    fn default() -> &'a CPlayer_GetSteamDeckKeyboardSkin_Response {
        <CPlayer_GetSteamDeckKeyboardSkin_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetSteamDeckKeyboardSkin_Response {
    pub fn new() -> CPlayer_GetSteamDeckKeyboardSkin_Response {
        ::std::default::Default::default()
    }

    // optional .ProfileItem steam_deck_keyboard_skin = 1;

    pub fn steam_deck_keyboard_skin(&self) -> &ProfileItem {
        self.steam_deck_keyboard_skin.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_steam_deck_keyboard_skin(&mut self) {
        self.steam_deck_keyboard_skin.clear();
    }

    pub fn has_steam_deck_keyboard_skin(&self) -> bool {
        self.steam_deck_keyboard_skin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_deck_keyboard_skin(&mut self, v: ProfileItem) {
        self.steam_deck_keyboard_skin = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steam_deck_keyboard_skin(&mut self) -> &mut ProfileItem {
        self.steam_deck_keyboard_skin.mut_or_insert_default()
    }

    // Take field
    pub fn take_steam_deck_keyboard_skin(&mut self) -> ProfileItem {
        self.steam_deck_keyboard_skin.take().unwrap_or_else(|| ProfileItem::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "steam_deck_keyboard_skin",
            |m: &CPlayer_GetSteamDeckKeyboardSkin_Response| { &m.steam_deck_keyboard_skin },
            |m: &mut CPlayer_GetSteamDeckKeyboardSkin_Response| { &mut m.steam_deck_keyboard_skin },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetSteamDeckKeyboardSkin_Response>(
            "CPlayer_GetSteamDeckKeyboardSkin_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetSteamDeckKeyboardSkin_Response {
    const NAME: &'static str = "CPlayer_GetSteamDeckKeyboardSkin_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.steam_deck_keyboard_skin)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_deck_keyboard_skin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steam_deck_keyboard_skin.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetSteamDeckKeyboardSkin_Response {
        CPlayer_GetSteamDeckKeyboardSkin_Response::new()
    }

    fn clear(&mut self) {
        self.steam_deck_keyboard_skin.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetSteamDeckKeyboardSkin_Response {
        static instance: CPlayer_GetSteamDeckKeyboardSkin_Response = CPlayer_GetSteamDeckKeyboardSkin_Response {
            steam_deck_keyboard_skin: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetSteamDeckKeyboardSkin_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetSteamDeckKeyboardSkin_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetSteamDeckKeyboardSkin_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetSteamDeckKeyboardSkin_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetSteamDeckKeyboardSkin_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetSteamDeckKeyboardSkin_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetSteamDeckKeyboardSkin_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetSteamDeckKeyboardSkin_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetSteamDeckKeyboardSkin_Request {
    fn default() -> &'a CPlayer_SetSteamDeckKeyboardSkin_Request {
        <CPlayer_SetSteamDeckKeyboardSkin_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetSteamDeckKeyboardSkin_Request {
    pub fn new() -> CPlayer_SetSteamDeckKeyboardSkin_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetSteamDeckKeyboardSkin_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetSteamDeckKeyboardSkin_Request| { &mut m.communityitemid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetSteamDeckKeyboardSkin_Request>(
            "CPlayer_SetSteamDeckKeyboardSkin_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetSteamDeckKeyboardSkin_Request {
    const NAME: &'static str = "CPlayer_SetSteamDeckKeyboardSkin_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetSteamDeckKeyboardSkin_Request {
        CPlayer_SetSteamDeckKeyboardSkin_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetSteamDeckKeyboardSkin_Request {
        static instance: CPlayer_SetSteamDeckKeyboardSkin_Request = CPlayer_SetSteamDeckKeyboardSkin_Request {
            communityitemid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetSteamDeckKeyboardSkin_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetSteamDeckKeyboardSkin_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetSteamDeckKeyboardSkin_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetSteamDeckKeyboardSkin_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetSteamDeckKeyboardSkin_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetSteamDeckKeyboardSkin_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetSteamDeckKeyboardSkin_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetSteamDeckKeyboardSkin_Response {
    fn default() -> &'a CPlayer_SetSteamDeckKeyboardSkin_Response {
        <CPlayer_SetSteamDeckKeyboardSkin_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetSteamDeckKeyboardSkin_Response {
    pub fn new() -> CPlayer_SetSteamDeckKeyboardSkin_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetSteamDeckKeyboardSkin_Response>(
            "CPlayer_SetSteamDeckKeyboardSkin_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetSteamDeckKeyboardSkin_Response {
    const NAME: &'static str = "CPlayer_SetSteamDeckKeyboardSkin_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetSteamDeckKeyboardSkin_Response {
        CPlayer_SetSteamDeckKeyboardSkin_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetSteamDeckKeyboardSkin_Response {
        static instance: CPlayer_SetSteamDeckKeyboardSkin_Response = CPlayer_SetSteamDeckKeyboardSkin_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetSteamDeckKeyboardSkin_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetSteamDeckKeyboardSkin_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetSteamDeckKeyboardSkin_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetSteamDeckKeyboardSkin_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileItemsOwned_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileItemsOwned_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Request.filters)
    pub filters: ::std::vec::Vec<crate::EnumOrUnknown<super::enums::ECommunityItemClass>>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileItemsOwned_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileItemsOwned_Request {
    fn default() -> &'a CPlayer_GetProfileItemsOwned_Request {
        <CPlayer_GetProfileItemsOwned_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileItemsOwned_Request {
    pub fn new() -> CPlayer_GetProfileItemsOwned_Request {
        ::std::default::Default::default()
    }

    // optional string language = 1;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .ECommunityItemClass filters = 2;

    pub fn filters(&self) -> &[crate::EnumOrUnknown<super::enums::ECommunityItemClass>] {
        &self.filters
    }

    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::std::vec::Vec<crate::EnumOrUnknown<super::enums::ECommunityItemClass>>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::std::vec::Vec<crate::EnumOrUnknown<super::enums::ECommunityItemClass>> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::std::vec::Vec<crate::EnumOrUnknown<super::enums::ECommunityItemClass>> {
        ::std::mem::replace(&mut self.filters, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetProfileItemsOwned_Request| { &m.language },
            |m: &mut CPlayer_GetProfileItemsOwned_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "filters",
            |m: &CPlayer_GetProfileItemsOwned_Request| { &m.filters },
            |m: &mut CPlayer_GetProfileItemsOwned_Request| { &mut m.filters },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileItemsOwned_Request>(
            "CPlayer_GetProfileItemsOwned_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileItemsOwned_Request {
    const NAME: &'static str = "CPlayer_GetProfileItemsOwned_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.filters.push(is.read_enum_or_unknown()?);
                },
                18 => {
                    crate::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.filters)?
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        for value in &self.filters {
            my_size += crate::rt::int32_size(2, value.value());
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.language.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.filters {
            os.write_enum(2, crate::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileItemsOwned_Request {
        CPlayer_GetProfileItemsOwned_Request::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.filters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileItemsOwned_Request {
        static instance: CPlayer_GetProfileItemsOwned_Request = CPlayer_GetProfileItemsOwned_Request {
            language: ::std::option::Option::None,
            filters: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileItemsOwned_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileItemsOwned_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileItemsOwned_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileItemsOwned_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileItemsOwned_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileItemsOwned_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.profile_backgrounds)
    pub profile_backgrounds: ::std::vec::Vec<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds)
    pub mini_profile_backgrounds: ::std::vec::Vec<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.avatar_frames)
    pub avatar_frames: ::std::vec::Vec<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.animated_avatars)
    pub animated_avatars: ::std::vec::Vec<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.profile_modifiers)
    pub profile_modifiers: ::std::vec::Vec<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.steam_deck_keyboard_skins)
    pub steam_deck_keyboard_skins: ::std::vec::Vec<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsOwned_Response.steam_deck_startup_movies)
    pub steam_deck_startup_movies: ::std::vec::Vec<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileItemsOwned_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileItemsOwned_Response {
    fn default() -> &'a CPlayer_GetProfileItemsOwned_Response {
        <CPlayer_GetProfileItemsOwned_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileItemsOwned_Response {
    pub fn new() -> CPlayer_GetProfileItemsOwned_Response {
        ::std::default::Default::default()
    }

    // repeated .ProfileItem profile_backgrounds = 1;

    pub fn profile_backgrounds(&self) -> &[ProfileItem] {
        &self.profile_backgrounds
    }

    pub fn clear_profile_backgrounds(&mut self) {
        self.profile_backgrounds.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_backgrounds(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.profile_backgrounds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_profile_backgrounds(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.profile_backgrounds
    }

    // Take field
    pub fn take_profile_backgrounds(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.profile_backgrounds, ::std::vec::Vec::new())
    }

    // repeated .ProfileItem mini_profile_backgrounds = 2;

    pub fn mini_profile_backgrounds(&self) -> &[ProfileItem] {
        &self.mini_profile_backgrounds
    }

    pub fn clear_mini_profile_backgrounds(&mut self) {
        self.mini_profile_backgrounds.clear();
    }

    // Param is passed by value, moved
    pub fn set_mini_profile_backgrounds(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.mini_profile_backgrounds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mini_profile_backgrounds(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.mini_profile_backgrounds
    }

    // Take field
    pub fn take_mini_profile_backgrounds(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.mini_profile_backgrounds, ::std::vec::Vec::new())
    }

    // repeated .ProfileItem avatar_frames = 3;

    pub fn avatar_frames(&self) -> &[ProfileItem] {
        &self.avatar_frames
    }

    pub fn clear_avatar_frames(&mut self) {
        self.avatar_frames.clear();
    }

    // Param is passed by value, moved
    pub fn set_avatar_frames(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.avatar_frames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_avatar_frames(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.avatar_frames
    }

    // Take field
    pub fn take_avatar_frames(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.avatar_frames, ::std::vec::Vec::new())
    }

    // repeated .ProfileItem animated_avatars = 4;

    pub fn animated_avatars(&self) -> &[ProfileItem] {
        &self.animated_avatars
    }

    pub fn clear_animated_avatars(&mut self) {
        self.animated_avatars.clear();
    }

    // Param is passed by value, moved
    pub fn set_animated_avatars(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.animated_avatars = v;
    }

    // Mutable pointer to the field.
    pub fn mut_animated_avatars(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.animated_avatars
    }

    // Take field
    pub fn take_animated_avatars(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.animated_avatars, ::std::vec::Vec::new())
    }

    // repeated .ProfileItem profile_modifiers = 5;

    pub fn profile_modifiers(&self) -> &[ProfileItem] {
        &self.profile_modifiers
    }

    pub fn clear_profile_modifiers(&mut self) {
        self.profile_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_modifiers(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.profile_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_profile_modifiers(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.profile_modifiers
    }

    // Take field
    pub fn take_profile_modifiers(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.profile_modifiers, ::std::vec::Vec::new())
    }

    // repeated .ProfileItem steam_deck_keyboard_skins = 6;

    pub fn steam_deck_keyboard_skins(&self) -> &[ProfileItem] {
        &self.steam_deck_keyboard_skins
    }

    pub fn clear_steam_deck_keyboard_skins(&mut self) {
        self.steam_deck_keyboard_skins.clear();
    }

    // Param is passed by value, moved
    pub fn set_steam_deck_keyboard_skins(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.steam_deck_keyboard_skins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_steam_deck_keyboard_skins(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.steam_deck_keyboard_skins
    }

    // Take field
    pub fn take_steam_deck_keyboard_skins(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.steam_deck_keyboard_skins, ::std::vec::Vec::new())
    }

    // repeated .ProfileItem steam_deck_startup_movies = 7;

    pub fn steam_deck_startup_movies(&self) -> &[ProfileItem] {
        &self.steam_deck_startup_movies
    }

    pub fn clear_steam_deck_startup_movies(&mut self) {
        self.steam_deck_startup_movies.clear();
    }

    // Param is passed by value, moved
    pub fn set_steam_deck_startup_movies(&mut self, v: ::std::vec::Vec<ProfileItem>) {
        self.steam_deck_startup_movies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_steam_deck_startup_movies(&mut self) -> &mut ::std::vec::Vec<ProfileItem> {
        &mut self.steam_deck_startup_movies
    }

    // Take field
    pub fn take_steam_deck_startup_movies(&mut self) -> ::std::vec::Vec<ProfileItem> {
        ::std::mem::replace(&mut self.steam_deck_startup_movies, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "profile_backgrounds",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.profile_backgrounds },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.profile_backgrounds },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mini_profile_backgrounds",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.mini_profile_backgrounds },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.mini_profile_backgrounds },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "avatar_frames",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.avatar_frames },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.avatar_frames },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "animated_avatars",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.animated_avatars },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.animated_avatars },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "profile_modifiers",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.profile_modifiers },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.profile_modifiers },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steam_deck_keyboard_skins",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.steam_deck_keyboard_skins },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.steam_deck_keyboard_skins },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steam_deck_startup_movies",
            |m: &CPlayer_GetProfileItemsOwned_Response| { &m.steam_deck_startup_movies },
            |m: &mut CPlayer_GetProfileItemsOwned_Response| { &mut m.steam_deck_startup_movies },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileItemsOwned_Response>(
            "CPlayer_GetProfileItemsOwned_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileItemsOwned_Response {
    const NAME: &'static str = "CPlayer_GetProfileItemsOwned_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.profile_backgrounds.push(is.read_message()?);
                },
                18 => {
                    self.mini_profile_backgrounds.push(is.read_message()?);
                },
                26 => {
                    self.avatar_frames.push(is.read_message()?);
                },
                34 => {
                    self.animated_avatars.push(is.read_message()?);
                },
                42 => {
                    self.profile_modifiers.push(is.read_message()?);
                },
                50 => {
                    self.steam_deck_keyboard_skins.push(is.read_message()?);
                },
                58 => {
                    self.steam_deck_startup_movies.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.profile_backgrounds {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.mini_profile_backgrounds {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.avatar_frames {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.animated_avatars {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.profile_modifiers {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.steam_deck_keyboard_skins {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.steam_deck_startup_movies {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.profile_backgrounds {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.mini_profile_backgrounds {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.avatar_frames {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.animated_avatars {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.profile_modifiers {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.steam_deck_keyboard_skins {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.steam_deck_startup_movies {
            crate::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileItemsOwned_Response {
        CPlayer_GetProfileItemsOwned_Response::new()
    }

    fn clear(&mut self) {
        self.profile_backgrounds.clear();
        self.mini_profile_backgrounds.clear();
        self.avatar_frames.clear();
        self.animated_avatars.clear();
        self.profile_modifiers.clear();
        self.steam_deck_keyboard_skins.clear();
        self.steam_deck_startup_movies.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileItemsOwned_Response {
        static instance: CPlayer_GetProfileItemsOwned_Response = CPlayer_GetProfileItemsOwned_Response {
            profile_backgrounds: ::std::vec::Vec::new(),
            mini_profile_backgrounds: ::std::vec::Vec::new(),
            avatar_frames: ::std::vec::Vec::new(),
            animated_avatars: ::std::vec::Vec::new(),
            profile_modifiers: ::std::vec::Vec::new(),
            steam_deck_keyboard_skins: ::std::vec::Vec::new(),
            steam_deck_startup_movies: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileItemsOwned_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileItemsOwned_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileItemsOwned_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileItemsOwned_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileItemsEquipped_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileItemsEquipped_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileItemsEquipped_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileItemsEquipped_Request {
    fn default() -> &'a CPlayer_GetProfileItemsEquipped_Request {
        <CPlayer_GetProfileItemsEquipped_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileItemsEquipped_Request {
    pub fn new() -> CPlayer_GetProfileItemsEquipped_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetProfileItemsEquipped_Request| { &m.steamid },
            |m: &mut CPlayer_GetProfileItemsEquipped_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetProfileItemsEquipped_Request| { &m.language },
            |m: &mut CPlayer_GetProfileItemsEquipped_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileItemsEquipped_Request>(
            "CPlayer_GetProfileItemsEquipped_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileItemsEquipped_Request {
    const NAME: &'static str = "CPlayer_GetProfileItemsEquipped_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileItemsEquipped_Request {
        CPlayer_GetProfileItemsEquipped_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileItemsEquipped_Request {
        static instance: CPlayer_GetProfileItemsEquipped_Request = CPlayer_GetProfileItemsEquipped_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileItemsEquipped_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileItemsEquipped_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileItemsEquipped_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileItemsEquipped_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileItemsEquipped_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileItemsEquipped_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Response.profile_background)
    pub profile_background: crate::MessageField<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Response.mini_profile_background)
    pub mini_profile_background: crate::MessageField<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Response.avatar_frame)
    pub avatar_frame: crate::MessageField<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Response.animated_avatar)
    pub animated_avatar: crate::MessageField<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Response.profile_modifier)
    pub profile_modifier: crate::MessageField<ProfileItem>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileItemsEquipped_Response.steam_deck_keyboard_skin)
    pub steam_deck_keyboard_skin: crate::MessageField<ProfileItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileItemsEquipped_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileItemsEquipped_Response {
    fn default() -> &'a CPlayer_GetProfileItemsEquipped_Response {
        <CPlayer_GetProfileItemsEquipped_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileItemsEquipped_Response {
    pub fn new() -> CPlayer_GetProfileItemsEquipped_Response {
        ::std::default::Default::default()
    }

    // optional .ProfileItem profile_background = 1;

    pub fn profile_background(&self) -> &ProfileItem {
        self.profile_background.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_profile_background(&mut self) {
        self.profile_background.clear();
    }

    pub fn has_profile_background(&self) -> bool {
        self.profile_background.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_background(&mut self, v: ProfileItem) {
        self.profile_background = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_background(&mut self) -> &mut ProfileItem {
        self.profile_background.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_background(&mut self) -> ProfileItem {
        self.profile_background.take().unwrap_or_else(|| ProfileItem::new())
    }

    // optional .ProfileItem mini_profile_background = 2;

    pub fn mini_profile_background(&self) -> &ProfileItem {
        self.mini_profile_background.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_mini_profile_background(&mut self) {
        self.mini_profile_background.clear();
    }

    pub fn has_mini_profile_background(&self) -> bool {
        self.mini_profile_background.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mini_profile_background(&mut self, v: ProfileItem) {
        self.mini_profile_background = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mini_profile_background(&mut self) -> &mut ProfileItem {
        self.mini_profile_background.mut_or_insert_default()
    }

    // Take field
    pub fn take_mini_profile_background(&mut self) -> ProfileItem {
        self.mini_profile_background.take().unwrap_or_else(|| ProfileItem::new())
    }

    // optional .ProfileItem avatar_frame = 3;

    pub fn avatar_frame(&self) -> &ProfileItem {
        self.avatar_frame.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_avatar_frame(&mut self) {
        self.avatar_frame.clear();
    }

    pub fn has_avatar_frame(&self) -> bool {
        self.avatar_frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_avatar_frame(&mut self, v: ProfileItem) {
        self.avatar_frame = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar_frame(&mut self) -> &mut ProfileItem {
        self.avatar_frame.mut_or_insert_default()
    }

    // Take field
    pub fn take_avatar_frame(&mut self) -> ProfileItem {
        self.avatar_frame.take().unwrap_or_else(|| ProfileItem::new())
    }

    // optional .ProfileItem animated_avatar = 4;

    pub fn animated_avatar(&self) -> &ProfileItem {
        self.animated_avatar.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_animated_avatar(&mut self) {
        self.animated_avatar.clear();
    }

    pub fn has_animated_avatar(&self) -> bool {
        self.animated_avatar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_animated_avatar(&mut self, v: ProfileItem) {
        self.animated_avatar = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_animated_avatar(&mut self) -> &mut ProfileItem {
        self.animated_avatar.mut_or_insert_default()
    }

    // Take field
    pub fn take_animated_avatar(&mut self) -> ProfileItem {
        self.animated_avatar.take().unwrap_or_else(|| ProfileItem::new())
    }

    // optional .ProfileItem profile_modifier = 5;

    pub fn profile_modifier(&self) -> &ProfileItem {
        self.profile_modifier.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_profile_modifier(&mut self) {
        self.profile_modifier.clear();
    }

    pub fn has_profile_modifier(&self) -> bool {
        self.profile_modifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_modifier(&mut self, v: ProfileItem) {
        self.profile_modifier = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_modifier(&mut self) -> &mut ProfileItem {
        self.profile_modifier.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_modifier(&mut self) -> ProfileItem {
        self.profile_modifier.take().unwrap_or_else(|| ProfileItem::new())
    }

    // optional .ProfileItem steam_deck_keyboard_skin = 6;

    pub fn steam_deck_keyboard_skin(&self) -> &ProfileItem {
        self.steam_deck_keyboard_skin.as_ref().unwrap_or_else(|| <ProfileItem as crate::Message>::default_instance())
    }

    pub fn clear_steam_deck_keyboard_skin(&mut self) {
        self.steam_deck_keyboard_skin.clear();
    }

    pub fn has_steam_deck_keyboard_skin(&self) -> bool {
        self.steam_deck_keyboard_skin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_deck_keyboard_skin(&mut self, v: ProfileItem) {
        self.steam_deck_keyboard_skin = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steam_deck_keyboard_skin(&mut self) -> &mut ProfileItem {
        self.steam_deck_keyboard_skin.mut_or_insert_default()
    }

    // Take field
    pub fn take_steam_deck_keyboard_skin(&mut self) -> ProfileItem {
        self.steam_deck_keyboard_skin.take().unwrap_or_else(|| ProfileItem::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "profile_background",
            |m: &CPlayer_GetProfileItemsEquipped_Response| { &m.profile_background },
            |m: &mut CPlayer_GetProfileItemsEquipped_Response| { &mut m.profile_background },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "mini_profile_background",
            |m: &CPlayer_GetProfileItemsEquipped_Response| { &m.mini_profile_background },
            |m: &mut CPlayer_GetProfileItemsEquipped_Response| { &mut m.mini_profile_background },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "avatar_frame",
            |m: &CPlayer_GetProfileItemsEquipped_Response| { &m.avatar_frame },
            |m: &mut CPlayer_GetProfileItemsEquipped_Response| { &mut m.avatar_frame },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "animated_avatar",
            |m: &CPlayer_GetProfileItemsEquipped_Response| { &m.animated_avatar },
            |m: &mut CPlayer_GetProfileItemsEquipped_Response| { &mut m.animated_avatar },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "profile_modifier",
            |m: &CPlayer_GetProfileItemsEquipped_Response| { &m.profile_modifier },
            |m: &mut CPlayer_GetProfileItemsEquipped_Response| { &mut m.profile_modifier },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileItem>(
            "steam_deck_keyboard_skin",
            |m: &CPlayer_GetProfileItemsEquipped_Response| { &m.steam_deck_keyboard_skin },
            |m: &mut CPlayer_GetProfileItemsEquipped_Response| { &mut m.steam_deck_keyboard_skin },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileItemsEquipped_Response>(
            "CPlayer_GetProfileItemsEquipped_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileItemsEquipped_Response {
    const NAME: &'static str = "CPlayer_GetProfileItemsEquipped_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_background)?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.mini_profile_background)?;
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.avatar_frame)?;
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.animated_avatar)?;
                },
                42 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_modifier)?;
                },
                50 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.steam_deck_keyboard_skin)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.profile_background.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mini_profile_background.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.avatar_frame.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.animated_avatar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.profile_modifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.steam_deck_keyboard_skin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.profile_background.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.mini_profile_background.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.avatar_frame.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.animated_avatar.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.profile_modifier.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.steam_deck_keyboard_skin.as_ref() {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileItemsEquipped_Response {
        CPlayer_GetProfileItemsEquipped_Response::new()
    }

    fn clear(&mut self) {
        self.profile_background.clear();
        self.mini_profile_background.clear();
        self.avatar_frame.clear();
        self.animated_avatar.clear();
        self.profile_modifier.clear();
        self.steam_deck_keyboard_skin.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileItemsEquipped_Response {
        static instance: CPlayer_GetProfileItemsEquipped_Response = CPlayer_GetProfileItemsEquipped_Response {
            profile_background: crate::MessageField::none(),
            mini_profile_background: crate::MessageField::none(),
            avatar_frame: crate::MessageField::none(),
            animated_avatar: crate::MessageField::none(),
            profile_modifier: crate::MessageField::none(),
            steam_deck_keyboard_skin: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileItemsEquipped_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileItemsEquipped_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileItemsEquipped_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileItemsEquipped_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetEquippedProfileItemFlags_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetEquippedProfileItemFlags_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetEquippedProfileItemFlags_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_SetEquippedProfileItemFlags_Request.flags)
    pub flags: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetEquippedProfileItemFlags_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetEquippedProfileItemFlags_Request {
    fn default() -> &'a CPlayer_SetEquippedProfileItemFlags_Request {
        <CPlayer_SetEquippedProfileItemFlags_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetEquippedProfileItemFlags_Request {
    pub fn new() -> CPlayer_SetEquippedProfileItemFlags_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 2;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetEquippedProfileItemFlags_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetEquippedProfileItemFlags_Request| { &mut m.communityitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CPlayer_SetEquippedProfileItemFlags_Request| { &m.flags },
            |m: &mut CPlayer_SetEquippedProfileItemFlags_Request| { &mut m.flags },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetEquippedProfileItemFlags_Request>(
            "CPlayer_SetEquippedProfileItemFlags_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetEquippedProfileItemFlags_Request {
    const NAME: &'static str = "CPlayer_SetEquippedProfileItemFlags_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.flags {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetEquippedProfileItemFlags_Request {
        CPlayer_SetEquippedProfileItemFlags_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetEquippedProfileItemFlags_Request {
        static instance: CPlayer_SetEquippedProfileItemFlags_Request = CPlayer_SetEquippedProfileItemFlags_Request {
            communityitemid: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetEquippedProfileItemFlags_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetEquippedProfileItemFlags_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetEquippedProfileItemFlags_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetEquippedProfileItemFlags_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetEquippedProfileItemFlags_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetEquippedProfileItemFlags_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetEquippedProfileItemFlags_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetEquippedProfileItemFlags_Response {
    fn default() -> &'a CPlayer_SetEquippedProfileItemFlags_Response {
        <CPlayer_SetEquippedProfileItemFlags_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetEquippedProfileItemFlags_Response {
    pub fn new() -> CPlayer_SetEquippedProfileItemFlags_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetEquippedProfileItemFlags_Response>(
            "CPlayer_SetEquippedProfileItemFlags_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetEquippedProfileItemFlags_Response {
    const NAME: &'static str = "CPlayer_SetEquippedProfileItemFlags_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetEquippedProfileItemFlags_Response {
        CPlayer_SetEquippedProfileItemFlags_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetEquippedProfileItemFlags_Response {
        static instance: CPlayer_SetEquippedProfileItemFlags_Response = CPlayer_SetEquippedProfileItemFlags_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetEquippedProfileItemFlags_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetEquippedProfileItemFlags_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetEquippedProfileItemFlags_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetEquippedProfileItemFlags_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetEmoticonList_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetEmoticonList_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetEmoticonList_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetEmoticonList_Request {
    fn default() -> &'a CPlayer_GetEmoticonList_Request {
        <CPlayer_GetEmoticonList_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetEmoticonList_Request {
    pub fn new() -> CPlayer_GetEmoticonList_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetEmoticonList_Request>(
            "CPlayer_GetEmoticonList_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetEmoticonList_Request {
    const NAME: &'static str = "CPlayer_GetEmoticonList_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetEmoticonList_Request {
        CPlayer_GetEmoticonList_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetEmoticonList_Request {
        static instance: CPlayer_GetEmoticonList_Request = CPlayer_GetEmoticonList_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetEmoticonList_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetEmoticonList_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetEmoticonList_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetEmoticonList_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetEmoticonList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetEmoticonList_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.emoticons)
    pub emoticons: ::std::vec::Vec<cplayer_get_emoticon_list_response::Emoticon>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetEmoticonList_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetEmoticonList_Response {
    fn default() -> &'a CPlayer_GetEmoticonList_Response {
        <CPlayer_GetEmoticonList_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetEmoticonList_Response {
    pub fn new() -> CPlayer_GetEmoticonList_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetEmoticonList_Response.Emoticon emoticons = 1;

    pub fn emoticons(&self) -> &[cplayer_get_emoticon_list_response::Emoticon] {
        &self.emoticons
    }

    pub fn clear_emoticons(&mut self) {
        self.emoticons.clear();
    }

    // Param is passed by value, moved
    pub fn set_emoticons(&mut self, v: ::std::vec::Vec<cplayer_get_emoticon_list_response::Emoticon>) {
        self.emoticons = v;
    }

    // Mutable pointer to the field.
    pub fn mut_emoticons(&mut self) -> &mut ::std::vec::Vec<cplayer_get_emoticon_list_response::Emoticon> {
        &mut self.emoticons
    }

    // Take field
    pub fn take_emoticons(&mut self) -> ::std::vec::Vec<cplayer_get_emoticon_list_response::Emoticon> {
        ::std::mem::replace(&mut self.emoticons, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "emoticons",
            |m: &CPlayer_GetEmoticonList_Response| { &m.emoticons },
            |m: &mut CPlayer_GetEmoticonList_Response| { &mut m.emoticons },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetEmoticonList_Response>(
            "CPlayer_GetEmoticonList_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetEmoticonList_Response {
    const NAME: &'static str = "CPlayer_GetEmoticonList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.emoticons.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.emoticons {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.emoticons {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetEmoticonList_Response {
        CPlayer_GetEmoticonList_Response::new()
    }

    fn clear(&mut self) {
        self.emoticons.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetEmoticonList_Response {
        static instance: CPlayer_GetEmoticonList_Response = CPlayer_GetEmoticonList_Response {
            emoticons: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetEmoticonList_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetEmoticonList_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetEmoticonList_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetEmoticonList_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetEmoticonList_Response`
pub mod cplayer_get_emoticon_list_response {
    // @@protoc_insertion_point(message:CPlayer_GetEmoticonList_Response.Emoticon)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Emoticon {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.Emoticon.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.Emoticon.count)
        pub count: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.Emoticon.time_last_used)
        pub time_last_used: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.Emoticon.use_count)
        pub use_count: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.Emoticon.time_received)
        pub time_received: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetEmoticonList_Response.Emoticon.appid)
        pub appid: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetEmoticonList_Response.Emoticon.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Emoticon {
        fn default() -> &'a Emoticon {
            <Emoticon as crate::Message>::default_instance()
        }
    }

    impl Emoticon {
        pub fn new() -> Emoticon {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 count = 2;

        pub fn count(&self) -> i32 {
            self.count.unwrap_or(0)
        }

        pub fn clear_count(&mut self) {
            self.count = ::std::option::Option::None;
        }

        pub fn has_count(&self) -> bool {
            self.count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_count(&mut self, v: i32) {
            self.count = ::std::option::Option::Some(v);
        }

        // optional uint32 time_last_used = 3;

        pub fn time_last_used(&self) -> u32 {
            self.time_last_used.unwrap_or(0)
        }

        pub fn clear_time_last_used(&mut self) {
            self.time_last_used = ::std::option::Option::None;
        }

        pub fn has_time_last_used(&self) -> bool {
            self.time_last_used.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_last_used(&mut self, v: u32) {
            self.time_last_used = ::std::option::Option::Some(v);
        }

        // optional uint32 use_count = 4;

        pub fn use_count(&self) -> u32 {
            self.use_count.unwrap_or(0)
        }

        pub fn clear_use_count(&mut self) {
            self.use_count = ::std::option::Option::None;
        }

        pub fn has_use_count(&self) -> bool {
            self.use_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_use_count(&mut self, v: u32) {
            self.use_count = ::std::option::Option::Some(v);
        }

        // optional uint32 time_received = 5;

        pub fn time_received(&self) -> u32 {
            self.time_received.unwrap_or(0)
        }

        pub fn clear_time_received(&mut self) {
            self.time_received = ::std::option::Option::None;
        }

        pub fn has_time_received(&self) -> bool {
            self.time_received.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_received(&mut self, v: u32) {
            self.time_received = ::std::option::Option::Some(v);
        }

        // optional uint32 appid = 6;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Emoticon| { &m.name },
                |m: &mut Emoticon| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "count",
                |m: &Emoticon| { &m.count },
                |m: &mut Emoticon| { &mut m.count },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_last_used",
                |m: &Emoticon| { &m.time_last_used },
                |m: &mut Emoticon| { &mut m.time_last_used },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "use_count",
                |m: &Emoticon| { &m.use_count },
                |m: &mut Emoticon| { &mut m.use_count },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_received",
                |m: &Emoticon| { &m.time_received },
                |m: &mut Emoticon| { &mut m.time_received },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Emoticon| { &m.appid },
                |m: &mut Emoticon| { &mut m.appid },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Emoticon>(
                "CPlayer_GetEmoticonList_Response.Emoticon",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Emoticon {
        const NAME: &'static str = "Emoticon";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.count = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.time_last_used = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.use_count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.time_received = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.count {
                my_size += crate::rt::int32_size(2, v);
            }
            if let Some(v) = self.time_last_used {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.use_count {
                my_size += crate::rt::uint32_size(4, v);
            }
            if let Some(v) = self.time_received {
                my_size += crate::rt::uint32_size(5, v);
            }
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(6, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.count {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.time_last_used {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.use_count {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.time_received {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.appid {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Emoticon {
            Emoticon::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.count = ::std::option::Option::None;
            self.time_last_used = ::std::option::Option::None;
            self.use_count = ::std::option::Option::None;
            self.time_received = ::std::option::Option::None;
            self.appid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Emoticon {
            static instance: Emoticon = Emoticon {
                name: ::std::option::Option::None,
                count: ::std::option::Option::None,
                time_last_used: ::std::option::Option::None,
                use_count: ::std::option::Option::None,
                time_received: ::std::option::Option::None,
                appid: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Emoticon {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetEmoticonList_Response.Emoticon").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Emoticon {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Emoticon {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetCommunityBadgeProgress_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetCommunityBadgeProgress_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetCommunityBadgeProgress_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetCommunityBadgeProgress_Request.badgeid)
    pub badgeid: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetCommunityBadgeProgress_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetCommunityBadgeProgress_Request {
    fn default() -> &'a CPlayer_GetCommunityBadgeProgress_Request {
        <CPlayer_GetCommunityBadgeProgress_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetCommunityBadgeProgress_Request {
    pub fn new() -> CPlayer_GetCommunityBadgeProgress_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional int32 badgeid = 2;

    pub fn badgeid(&self) -> i32 {
        self.badgeid.unwrap_or(0)
    }

    pub fn clear_badgeid(&mut self) {
        self.badgeid = ::std::option::Option::None;
    }

    pub fn has_badgeid(&self) -> bool {
        self.badgeid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badgeid(&mut self, v: i32) {
        self.badgeid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetCommunityBadgeProgress_Request| { &m.steamid },
            |m: &mut CPlayer_GetCommunityBadgeProgress_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "badgeid",
            |m: &CPlayer_GetCommunityBadgeProgress_Request| { &m.badgeid },
            |m: &mut CPlayer_GetCommunityBadgeProgress_Request| { &mut m.badgeid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetCommunityBadgeProgress_Request>(
            "CPlayer_GetCommunityBadgeProgress_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetCommunityBadgeProgress_Request {
    const NAME: &'static str = "CPlayer_GetCommunityBadgeProgress_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.badgeid = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.badgeid {
            my_size += crate::rt::int32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.badgeid {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetCommunityBadgeProgress_Request {
        CPlayer_GetCommunityBadgeProgress_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.badgeid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetCommunityBadgeProgress_Request {
        static instance: CPlayer_GetCommunityBadgeProgress_Request = CPlayer_GetCommunityBadgeProgress_Request {
            steamid: ::std::option::Option::None,
            badgeid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetCommunityBadgeProgress_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityBadgeProgress_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetCommunityBadgeProgress_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetCommunityBadgeProgress_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetCommunityBadgeProgress_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetCommunityBadgeProgress_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetCommunityBadgeProgress_Response.quests)
    pub quests: ::std::vec::Vec<cplayer_get_community_badge_progress_response::Quest>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetCommunityBadgeProgress_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetCommunityBadgeProgress_Response {
    fn default() -> &'a CPlayer_GetCommunityBadgeProgress_Response {
        <CPlayer_GetCommunityBadgeProgress_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetCommunityBadgeProgress_Response {
    pub fn new() -> CPlayer_GetCommunityBadgeProgress_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetCommunityBadgeProgress_Response.Quest quests = 1;

    pub fn quests(&self) -> &[cplayer_get_community_badge_progress_response::Quest] {
        &self.quests
    }

    pub fn clear_quests(&mut self) {
        self.quests.clear();
    }

    // Param is passed by value, moved
    pub fn set_quests(&mut self, v: ::std::vec::Vec<cplayer_get_community_badge_progress_response::Quest>) {
        self.quests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_quests(&mut self) -> &mut ::std::vec::Vec<cplayer_get_community_badge_progress_response::Quest> {
        &mut self.quests
    }

    // Take field
    pub fn take_quests(&mut self) -> ::std::vec::Vec<cplayer_get_community_badge_progress_response::Quest> {
        ::std::mem::replace(&mut self.quests, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quests",
            |m: &CPlayer_GetCommunityBadgeProgress_Response| { &m.quests },
            |m: &mut CPlayer_GetCommunityBadgeProgress_Response| { &mut m.quests },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetCommunityBadgeProgress_Response>(
            "CPlayer_GetCommunityBadgeProgress_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetCommunityBadgeProgress_Response {
    const NAME: &'static str = "CPlayer_GetCommunityBadgeProgress_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.quests.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.quests {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.quests {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetCommunityBadgeProgress_Response {
        CPlayer_GetCommunityBadgeProgress_Response::new()
    }

    fn clear(&mut self) {
        self.quests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetCommunityBadgeProgress_Response {
        static instance: CPlayer_GetCommunityBadgeProgress_Response = CPlayer_GetCommunityBadgeProgress_Response {
            quests: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetCommunityBadgeProgress_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityBadgeProgress_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetCommunityBadgeProgress_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetCommunityBadgeProgress_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetCommunityBadgeProgress_Response`
pub mod cplayer_get_community_badge_progress_response {
    // @@protoc_insertion_point(message:CPlayer_GetCommunityBadgeProgress_Response.Quest)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Quest {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetCommunityBadgeProgress_Response.Quest.questid)
        pub questid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetCommunityBadgeProgress_Response.Quest.completed)
        pub completed: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetCommunityBadgeProgress_Response.Quest.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Quest {
        fn default() -> &'a Quest {
            <Quest as crate::Message>::default_instance()
        }
    }

    impl Quest {
        pub fn new() -> Quest {
            ::std::default::Default::default()
        }

        // optional uint32 questid = 1;

        pub fn questid(&self) -> u32 {
            self.questid.unwrap_or(0)
        }

        pub fn clear_questid(&mut self) {
            self.questid = ::std::option::Option::None;
        }

        pub fn has_questid(&self) -> bool {
            self.questid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_questid(&mut self, v: u32) {
            self.questid = ::std::option::Option::Some(v);
        }

        // optional bool completed = 2;

        pub fn completed(&self) -> bool {
            self.completed.unwrap_or(false)
        }

        pub fn clear_completed(&mut self) {
            self.completed = ::std::option::Option::None;
        }

        pub fn has_completed(&self) -> bool {
            self.completed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_completed(&mut self, v: bool) {
            self.completed = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "questid",
                |m: &Quest| { &m.questid },
                |m: &mut Quest| { &mut m.questid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "completed",
                |m: &Quest| { &m.completed },
                |m: &mut Quest| { &mut m.completed },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Quest>(
                "CPlayer_GetCommunityBadgeProgress_Response.Quest",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Quest {
        const NAME: &'static str = "Quest";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.questid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.completed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.questid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.completed {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.questid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.completed {
                os.write_bool(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Quest {
            Quest::new()
        }

        fn clear(&mut self) {
            self.questid = ::std::option::Option::None;
            self.completed = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Quest {
            static instance: Quest = Quest {
                questid: ::std::option::Option::None,
                completed: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Quest {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityBadgeProgress_Response.Quest").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Quest {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Quest {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetTopAchievementsForGames_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetTopAchievementsForGames_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Request.max_achievements)
    pub max_achievements: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Request.appids)
    pub appids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetTopAchievementsForGames_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetTopAchievementsForGames_Request {
    fn default() -> &'a CPlayer_GetTopAchievementsForGames_Request {
        <CPlayer_GetTopAchievementsForGames_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetTopAchievementsForGames_Request {
    pub fn new() -> CPlayer_GetTopAchievementsForGames_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 max_achievements = 3;

    pub fn max_achievements(&self) -> u32 {
        self.max_achievements.unwrap_or(0)
    }

    pub fn clear_max_achievements(&mut self) {
        self.max_achievements = ::std::option::Option::None;
    }

    pub fn has_max_achievements(&self) -> bool {
        self.max_achievements.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_achievements(&mut self, v: u32) {
        self.max_achievements = ::std::option::Option::Some(v);
    }

    // repeated uint32 appids = 4;

    pub fn appids(&self) -> &[u32] {
        &self.appids
    }

    pub fn clear_appids(&mut self) {
        self.appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids
    }

    // Take field
    pub fn take_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetTopAchievementsForGames_Request| { &m.steamid },
            |m: &mut CPlayer_GetTopAchievementsForGames_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetTopAchievementsForGames_Request| { &m.language },
            |m: &mut CPlayer_GetTopAchievementsForGames_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_achievements",
            |m: &CPlayer_GetTopAchievementsForGames_Request| { &m.max_achievements },
            |m: &mut CPlayer_GetTopAchievementsForGames_Request| { &mut m.max_achievements },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids",
            |m: &CPlayer_GetTopAchievementsForGames_Request| { &m.appids },
            |m: &mut CPlayer_GetTopAchievementsForGames_Request| { &mut m.appids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetTopAchievementsForGames_Request>(
            "CPlayer_GetTopAchievementsForGames_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetTopAchievementsForGames_Request {
    const NAME: &'static str = "CPlayer_GetTopAchievementsForGames_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.max_achievements = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids)?;
                },
                32 => {
                    self.appids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.max_achievements {
            my_size += crate::rt::uint32_size(3, v);
        }
        for value in &self.appids {
            my_size += crate::rt::uint32_size(4, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.max_achievements {
            os.write_uint32(3, v)?;
        }
        for v in &self.appids {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetTopAchievementsForGames_Request {
        CPlayer_GetTopAchievementsForGames_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.max_achievements = ::std::option::Option::None;
        self.appids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetTopAchievementsForGames_Request {
        static instance: CPlayer_GetTopAchievementsForGames_Request = CPlayer_GetTopAchievementsForGames_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            max_achievements: ::std::option::Option::None,
            appids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetTopAchievementsForGames_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetTopAchievementsForGames_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetTopAchievementsForGames_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetTopAchievementsForGames_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetTopAchievementsForGames_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetTopAchievementsForGames_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.games)
    pub games: ::std::vec::Vec<cplayer_get_top_achievements_for_games_response::Game>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetTopAchievementsForGames_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetTopAchievementsForGames_Response {
    fn default() -> &'a CPlayer_GetTopAchievementsForGames_Response {
        <CPlayer_GetTopAchievementsForGames_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetTopAchievementsForGames_Response {
    pub fn new() -> CPlayer_GetTopAchievementsForGames_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetTopAchievementsForGames_Response.Game games = 1;

    pub fn games(&self) -> &[cplayer_get_top_achievements_for_games_response::Game] {
        &self.games
    }

    pub fn clear_games(&mut self) {
        self.games.clear();
    }

    // Param is passed by value, moved
    pub fn set_games(&mut self, v: ::std::vec::Vec<cplayer_get_top_achievements_for_games_response::Game>) {
        self.games = v;
    }

    // Mutable pointer to the field.
    pub fn mut_games(&mut self) -> &mut ::std::vec::Vec<cplayer_get_top_achievements_for_games_response::Game> {
        &mut self.games
    }

    // Take field
    pub fn take_games(&mut self) -> ::std::vec::Vec<cplayer_get_top_achievements_for_games_response::Game> {
        ::std::mem::replace(&mut self.games, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "games",
            |m: &CPlayer_GetTopAchievementsForGames_Response| { &m.games },
            |m: &mut CPlayer_GetTopAchievementsForGames_Response| { &mut m.games },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetTopAchievementsForGames_Response>(
            "CPlayer_GetTopAchievementsForGames_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetTopAchievementsForGames_Response {
    const NAME: &'static str = "CPlayer_GetTopAchievementsForGames_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.games.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.games {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetTopAchievementsForGames_Response {
        CPlayer_GetTopAchievementsForGames_Response::new()
    }

    fn clear(&mut self) {
        self.games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetTopAchievementsForGames_Response {
        static instance: CPlayer_GetTopAchievementsForGames_Response = CPlayer_GetTopAchievementsForGames_Response {
            games: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetTopAchievementsForGames_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetTopAchievementsForGames_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetTopAchievementsForGames_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetTopAchievementsForGames_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetTopAchievementsForGames_Response`
pub mod cplayer_get_top_achievements_for_games_response {
    // @@protoc_insertion_point(message:CPlayer_GetTopAchievementsForGames_Response.Achievement)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Achievement {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.statid)
        pub statid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.bit)
        pub bit: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.desc)
        pub desc: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon)
        pub icon: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray)
        pub icon_gray: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.hidden)
        pub hidden: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked)
        pub player_percent_unlocked: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetTopAchievementsForGames_Response.Achievement.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Achievement {
        fn default() -> &'a Achievement {
            <Achievement as crate::Message>::default_instance()
        }
    }

    impl Achievement {
        pub fn new() -> Achievement {
            ::std::default::Default::default()
        }

        // optional uint32 statid = 1;

        pub fn statid(&self) -> u32 {
            self.statid.unwrap_or(0)
        }

        pub fn clear_statid(&mut self) {
            self.statid = ::std::option::Option::None;
        }

        pub fn has_statid(&self) -> bool {
            self.statid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_statid(&mut self, v: u32) {
            self.statid = ::std::option::Option::Some(v);
        }

        // optional uint32 bit = 2;

        pub fn bit(&self) -> u32 {
            self.bit.unwrap_or(0)
        }

        pub fn clear_bit(&mut self) {
            self.bit = ::std::option::Option::None;
        }

        pub fn has_bit(&self) -> bool {
            self.bit.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bit(&mut self, v: u32) {
            self.bit = ::std::option::Option::Some(v);
        }

        // optional string name = 3;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string desc = 4;

        pub fn desc(&self) -> &str {
            match self.desc.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_desc(&mut self) {
            self.desc = ::std::option::Option::None;
        }

        pub fn has_desc(&self) -> bool {
            self.desc.is_some()
        }

        // Param is passed by value, moved
        pub fn set_desc(&mut self, v: ::std::string::String) {
            self.desc = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_desc(&mut self) -> &mut ::std::string::String {
            if self.desc.is_none() {
                self.desc = ::std::option::Option::Some(::std::string::String::new());
            }
            self.desc.as_mut().unwrap()
        }

        // Take field
        pub fn take_desc(&mut self) -> ::std::string::String {
            self.desc.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon = 5;

        pub fn icon(&self) -> &str {
            match self.icon.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon(&mut self) {
            self.icon = ::std::option::Option::None;
        }

        pub fn has_icon(&self) -> bool {
            self.icon.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon(&mut self, v: ::std::string::String) {
            self.icon = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon(&mut self) -> &mut ::std::string::String {
            if self.icon.is_none() {
                self.icon = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon(&mut self) -> ::std::string::String {
            self.icon.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon_gray = 6;

        pub fn icon_gray(&self) -> &str {
            match self.icon_gray.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon_gray(&mut self) {
            self.icon_gray = ::std::option::Option::None;
        }

        pub fn has_icon_gray(&self) -> bool {
            self.icon_gray.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon_gray(&mut self, v: ::std::string::String) {
            self.icon_gray = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon_gray(&mut self) -> &mut ::std::string::String {
            if self.icon_gray.is_none() {
                self.icon_gray = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon_gray.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon_gray(&mut self) -> ::std::string::String {
            self.icon_gray.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool hidden = 7;

        pub fn hidden(&self) -> bool {
            self.hidden.unwrap_or(false)
        }

        pub fn clear_hidden(&mut self) {
            self.hidden = ::std::option::Option::None;
        }

        pub fn has_hidden(&self) -> bool {
            self.hidden.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hidden(&mut self, v: bool) {
            self.hidden = ::std::option::Option::Some(v);
        }

        // optional string player_percent_unlocked = 8;

        pub fn player_percent_unlocked(&self) -> &str {
            match self.player_percent_unlocked.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_player_percent_unlocked(&mut self) {
            self.player_percent_unlocked = ::std::option::Option::None;
        }

        pub fn has_player_percent_unlocked(&self) -> bool {
            self.player_percent_unlocked.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_percent_unlocked(&mut self, v: ::std::string::String) {
            self.player_percent_unlocked = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_player_percent_unlocked(&mut self) -> &mut ::std::string::String {
            if self.player_percent_unlocked.is_none() {
                self.player_percent_unlocked = ::std::option::Option::Some(::std::string::String::new());
            }
            self.player_percent_unlocked.as_mut().unwrap()
        }

        // Take field
        pub fn take_player_percent_unlocked(&mut self) -> ::std::string::String {
            self.player_percent_unlocked.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(8);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "statid",
                |m: &Achievement| { &m.statid },
                |m: &mut Achievement| { &mut m.statid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "bit",
                |m: &Achievement| { &m.bit },
                |m: &mut Achievement| { &mut m.bit },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Achievement| { &m.name },
                |m: &mut Achievement| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "desc",
                |m: &Achievement| { &m.desc },
                |m: &mut Achievement| { &mut m.desc },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon",
                |m: &Achievement| { &m.icon },
                |m: &mut Achievement| { &mut m.icon },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon_gray",
                |m: &Achievement| { &m.icon_gray },
                |m: &mut Achievement| { &mut m.icon_gray },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "hidden",
                |m: &Achievement| { &m.hidden },
                |m: &mut Achievement| { &mut m.hidden },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "player_percent_unlocked",
                |m: &Achievement| { &m.player_percent_unlocked },
                |m: &mut Achievement| { &mut m.player_percent_unlocked },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Achievement>(
                "CPlayer_GetTopAchievementsForGames_Response.Achievement",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Achievement {
        const NAME: &'static str = "Achievement";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.statid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.bit = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.desc = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.icon = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.icon_gray = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.hidden = ::std::option::Option::Some(is.read_bool()?);
                    },
                    66 => {
                        self.player_percent_unlocked = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.statid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.bit {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.desc.as_ref() {
                my_size += crate::rt::string_size(4, &v);
            }
            if let Some(v) = self.icon.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.icon_gray.as_ref() {
                my_size += crate::rt::string_size(6, &v);
            }
            if let Some(v) = self.hidden {
                my_size += 1 + 1;
            }
            if let Some(v) = self.player_percent_unlocked.as_ref() {
                my_size += crate::rt::string_size(8, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.statid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.bit {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.desc.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.icon.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.icon_gray.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.hidden {
                os.write_bool(7, v)?;
            }
            if let Some(v) = self.player_percent_unlocked.as_ref() {
                os.write_string(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Achievement {
            Achievement::new()
        }

        fn clear(&mut self) {
            self.statid = ::std::option::Option::None;
            self.bit = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.desc = ::std::option::Option::None;
            self.icon = ::std::option::Option::None;
            self.icon_gray = ::std::option::Option::None;
            self.hidden = ::std::option::Option::None;
            self.player_percent_unlocked = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Achievement {
            static instance: Achievement = Achievement {
                statid: ::std::option::Option::None,
                bit: ::std::option::Option::None,
                name: ::std::option::Option::None,
                desc: ::std::option::Option::None,
                icon: ::std::option::Option::None,
                icon_gray: ::std::option::Option::None,
                hidden: ::std::option::Option::None,
                player_percent_unlocked: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Achievement {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetTopAchievementsForGames_Response.Achievement").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Achievement {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Achievement {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CPlayer_GetTopAchievementsForGames_Response.Game)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Game {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Game.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Game.total_achievements)
        pub total_achievements: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetTopAchievementsForGames_Response.Game.achievements)
        pub achievements: ::std::vec::Vec<Achievement>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetTopAchievementsForGames_Response.Game.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Game {
        fn default() -> &'a Game {
            <Game as crate::Message>::default_instance()
        }
    }

    impl Game {
        pub fn new() -> Game {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 total_achievements = 2;

        pub fn total_achievements(&self) -> u32 {
            self.total_achievements.unwrap_or(0)
        }

        pub fn clear_total_achievements(&mut self) {
            self.total_achievements = ::std::option::Option::None;
        }

        pub fn has_total_achievements(&self) -> bool {
            self.total_achievements.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total_achievements(&mut self, v: u32) {
            self.total_achievements = ::std::option::Option::Some(v);
        }

        // repeated .CPlayer_GetTopAchievementsForGames_Response.Achievement achievements = 3;

        pub fn achievements(&self) -> &[Achievement] {
            &self.achievements
        }

        pub fn clear_achievements(&mut self) {
            self.achievements.clear();
        }

        // Param is passed by value, moved
        pub fn set_achievements(&mut self, v: ::std::vec::Vec<Achievement>) {
            self.achievements = v;
        }

        // Mutable pointer to the field.
        pub fn mut_achievements(&mut self) -> &mut ::std::vec::Vec<Achievement> {
            &mut self.achievements
        }

        // Take field
        pub fn take_achievements(&mut self) -> ::std::vec::Vec<Achievement> {
            ::std::mem::replace(&mut self.achievements, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Game| { &m.appid },
                |m: &mut Game| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "total_achievements",
                |m: &Game| { &m.total_achievements },
                |m: &mut Game| { &mut m.total_achievements },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "achievements",
                |m: &Game| { &m.achievements },
                |m: &mut Game| { &mut m.achievements },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Game>(
                "CPlayer_GetTopAchievementsForGames_Response.Game",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Game {
        const NAME: &'static str = "Game";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.total_achievements = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.achievements.push(is.read_message()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.total_achievements {
                my_size += crate::rt::uint32_size(2, v);
            }
            for value in &self.achievements {
                let len = value.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.total_achievements {
                os.write_uint32(2, v)?;
            }
            for v in &self.achievements {
                crate::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Game {
            Game::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.total_achievements = ::std::option::Option::None;
            self.achievements.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Game {
            static instance: Game = Game {
                appid: ::std::option::Option::None,
                total_achievements: ::std::option::Option::None,
                achievements: ::std::vec::Vec::new(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Game {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetTopAchievementsForGames_Response.Game").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Game {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Game {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetAchievementsProgress_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetAchievementsProgress_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Request.appids)
    pub appids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetAchievementsProgress_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetAchievementsProgress_Request {
    fn default() -> &'a CPlayer_GetAchievementsProgress_Request {
        <CPlayer_GetAchievementsProgress_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetAchievementsProgress_Request {
    pub fn new() -> CPlayer_GetAchievementsProgress_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 appids = 3;

    pub fn appids(&self) -> &[u32] {
        &self.appids
    }

    pub fn clear_appids(&mut self) {
        self.appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids
    }

    // Take field
    pub fn take_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetAchievementsProgress_Request| { &m.steamid },
            |m: &mut CPlayer_GetAchievementsProgress_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetAchievementsProgress_Request| { &m.language },
            |m: &mut CPlayer_GetAchievementsProgress_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids",
            |m: &CPlayer_GetAchievementsProgress_Request| { &m.appids },
            |m: &mut CPlayer_GetAchievementsProgress_Request| { &mut m.appids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetAchievementsProgress_Request>(
            "CPlayer_GetAchievementsProgress_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetAchievementsProgress_Request {
    const NAME: &'static str = "CPlayer_GetAchievementsProgress_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids)?;
                },
                24 => {
                    self.appids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        for value in &self.appids {
            my_size += crate::rt::uint32_size(3, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.appids {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetAchievementsProgress_Request {
        CPlayer_GetAchievementsProgress_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.appids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetAchievementsProgress_Request {
        static instance: CPlayer_GetAchievementsProgress_Request = CPlayer_GetAchievementsProgress_Request {
            steamid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            appids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetAchievementsProgress_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetAchievementsProgress_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetAchievementsProgress_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetAchievementsProgress_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetAchievementsProgress_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetAchievementsProgress_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.achievement_progress)
    pub achievement_progress: ::std::vec::Vec<cplayer_get_achievements_progress_response::AchievementProgress>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetAchievementsProgress_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetAchievementsProgress_Response {
    fn default() -> &'a CPlayer_GetAchievementsProgress_Response {
        <CPlayer_GetAchievementsProgress_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetAchievementsProgress_Response {
    pub fn new() -> CPlayer_GetAchievementsProgress_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetAchievementsProgress_Response.AchievementProgress achievement_progress = 1;

    pub fn achievement_progress(&self) -> &[cplayer_get_achievements_progress_response::AchievementProgress] {
        &self.achievement_progress
    }

    pub fn clear_achievement_progress(&mut self) {
        self.achievement_progress.clear();
    }

    // Param is passed by value, moved
    pub fn set_achievement_progress(&mut self, v: ::std::vec::Vec<cplayer_get_achievements_progress_response::AchievementProgress>) {
        self.achievement_progress = v;
    }

    // Mutable pointer to the field.
    pub fn mut_achievement_progress(&mut self) -> &mut ::std::vec::Vec<cplayer_get_achievements_progress_response::AchievementProgress> {
        &mut self.achievement_progress
    }

    // Take field
    pub fn take_achievement_progress(&mut self) -> ::std::vec::Vec<cplayer_get_achievements_progress_response::AchievementProgress> {
        ::std::mem::replace(&mut self.achievement_progress, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "achievement_progress",
            |m: &CPlayer_GetAchievementsProgress_Response| { &m.achievement_progress },
            |m: &mut CPlayer_GetAchievementsProgress_Response| { &mut m.achievement_progress },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetAchievementsProgress_Response>(
            "CPlayer_GetAchievementsProgress_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetAchievementsProgress_Response {
    const NAME: &'static str = "CPlayer_GetAchievementsProgress_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.achievement_progress.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.achievement_progress {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.achievement_progress {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetAchievementsProgress_Response {
        CPlayer_GetAchievementsProgress_Response::new()
    }

    fn clear(&mut self) {
        self.achievement_progress.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetAchievementsProgress_Response {
        static instance: CPlayer_GetAchievementsProgress_Response = CPlayer_GetAchievementsProgress_Response {
            achievement_progress: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetAchievementsProgress_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetAchievementsProgress_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetAchievementsProgress_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetAchievementsProgress_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetAchievementsProgress_Response`
pub mod cplayer_get_achievements_progress_response {
    // @@protoc_insertion_point(message:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AchievementProgress {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.unlocked)
        pub unlocked: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.total)
        pub total: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.percentage)
        pub percentage: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.all_unlocked)
        pub all_unlocked: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.cache_time)
        pub cache_time: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetAchievementsProgress_Response.AchievementProgress.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AchievementProgress {
        fn default() -> &'a AchievementProgress {
            <AchievementProgress as crate::Message>::default_instance()
        }
    }

    impl AchievementProgress {
        pub fn new() -> AchievementProgress {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 unlocked = 2;

        pub fn unlocked(&self) -> u32 {
            self.unlocked.unwrap_or(0)
        }

        pub fn clear_unlocked(&mut self) {
            self.unlocked = ::std::option::Option::None;
        }

        pub fn has_unlocked(&self) -> bool {
            self.unlocked.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unlocked(&mut self, v: u32) {
            self.unlocked = ::std::option::Option::Some(v);
        }

        // optional uint32 total = 3;

        pub fn total(&self) -> u32 {
            self.total.unwrap_or(0)
        }

        pub fn clear_total(&mut self) {
            self.total = ::std::option::Option::None;
        }

        pub fn has_total(&self) -> bool {
            self.total.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total(&mut self, v: u32) {
            self.total = ::std::option::Option::Some(v);
        }

        // optional float percentage = 4;

        pub fn percentage(&self) -> f32 {
            self.percentage.unwrap_or(0.)
        }

        pub fn clear_percentage(&mut self) {
            self.percentage = ::std::option::Option::None;
        }

        pub fn has_percentage(&self) -> bool {
            self.percentage.is_some()
        }

        // Param is passed by value, moved
        pub fn set_percentage(&mut self, v: f32) {
            self.percentage = ::std::option::Option::Some(v);
        }

        // optional bool all_unlocked = 5;

        pub fn all_unlocked(&self) -> bool {
            self.all_unlocked.unwrap_or(false)
        }

        pub fn clear_all_unlocked(&mut self) {
            self.all_unlocked = ::std::option::Option::None;
        }

        pub fn has_all_unlocked(&self) -> bool {
            self.all_unlocked.is_some()
        }

        // Param is passed by value, moved
        pub fn set_all_unlocked(&mut self, v: bool) {
            self.all_unlocked = ::std::option::Option::Some(v);
        }

        // optional uint32 cache_time = 6;

        pub fn cache_time(&self) -> u32 {
            self.cache_time.unwrap_or(0)
        }

        pub fn clear_cache_time(&mut self) {
            self.cache_time = ::std::option::Option::None;
        }

        pub fn has_cache_time(&self) -> bool {
            self.cache_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cache_time(&mut self, v: u32) {
            self.cache_time = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &AchievementProgress| { &m.appid },
                |m: &mut AchievementProgress| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "unlocked",
                |m: &AchievementProgress| { &m.unlocked },
                |m: &mut AchievementProgress| { &mut m.unlocked },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "total",
                |m: &AchievementProgress| { &m.total },
                |m: &mut AchievementProgress| { &mut m.total },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "percentage",
                |m: &AchievementProgress| { &m.percentage },
                |m: &mut AchievementProgress| { &mut m.percentage },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "all_unlocked",
                |m: &AchievementProgress| { &m.all_unlocked },
                |m: &mut AchievementProgress| { &mut m.all_unlocked },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "cache_time",
                |m: &AchievementProgress| { &m.cache_time },
                |m: &mut AchievementProgress| { &mut m.cache_time },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<AchievementProgress>(
                "CPlayer_GetAchievementsProgress_Response.AchievementProgress",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for AchievementProgress {
        const NAME: &'static str = "AchievementProgress";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.unlocked = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.total = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    37 => {
                        self.percentage = ::std::option::Option::Some(is.read_float()?);
                    },
                    40 => {
                        self.all_unlocked = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.cache_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.unlocked {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.total {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.percentage {
                my_size += 1 + 4;
            }
            if let Some(v) = self.all_unlocked {
                my_size += 1 + 1;
            }
            if let Some(v) = self.cache_time {
                my_size += crate::rt::uint32_size(6, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.unlocked {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.total {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.percentage {
                os.write_float(4, v)?;
            }
            if let Some(v) = self.all_unlocked {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.cache_time {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AchievementProgress {
            AchievementProgress::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.unlocked = ::std::option::Option::None;
            self.total = ::std::option::Option::None;
            self.percentage = ::std::option::Option::None;
            self.all_unlocked = ::std::option::Option::None;
            self.cache_time = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AchievementProgress {
            static instance: AchievementProgress = AchievementProgress {
                appid: ::std::option::Option::None,
                unlocked: ::std::option::Option::None,
                total: ::std::option::Option::None,
                percentage: ::std::option::Option::None,
                all_unlocked: ::std::option::Option::None,
                cache_time: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for AchievementProgress {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetAchievementsProgress_Response.AchievementProgress").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AchievementProgress {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for AchievementProgress {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetGameAchievements_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetGameAchievements_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetGameAchievements_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetGameAchievements_Request {
    fn default() -> &'a CPlayer_GetGameAchievements_Request {
        <CPlayer_GetGameAchievements_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetGameAchievements_Request {
    pub fn new() -> CPlayer_GetGameAchievements_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string language = 2;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetGameAchievements_Request| { &m.appid },
            |m: &mut CPlayer_GetGameAchievements_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetGameAchievements_Request| { &m.language },
            |m: &mut CPlayer_GetGameAchievements_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetGameAchievements_Request>(
            "CPlayer_GetGameAchievements_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetGameAchievements_Request {
    const NAME: &'static str = "CPlayer_GetGameAchievements_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetGameAchievements_Request {
        CPlayer_GetGameAchievements_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetGameAchievements_Request {
        static instance: CPlayer_GetGameAchievements_Request = CPlayer_GetGameAchievements_Request {
            appid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetGameAchievements_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetGameAchievements_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetGameAchievements_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetGameAchievements_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetGameAchievements_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetGameAchievements_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.achievements)
    pub achievements: ::std::vec::Vec<cplayer_get_game_achievements_response::Achievement>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetGameAchievements_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetGameAchievements_Response {
    fn default() -> &'a CPlayer_GetGameAchievements_Response {
        <CPlayer_GetGameAchievements_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetGameAchievements_Response {
    pub fn new() -> CPlayer_GetGameAchievements_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetGameAchievements_Response.Achievement achievements = 1;

    pub fn achievements(&self) -> &[cplayer_get_game_achievements_response::Achievement] {
        &self.achievements
    }

    pub fn clear_achievements(&mut self) {
        self.achievements.clear();
    }

    // Param is passed by value, moved
    pub fn set_achievements(&mut self, v: ::std::vec::Vec<cplayer_get_game_achievements_response::Achievement>) {
        self.achievements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_achievements(&mut self) -> &mut ::std::vec::Vec<cplayer_get_game_achievements_response::Achievement> {
        &mut self.achievements
    }

    // Take field
    pub fn take_achievements(&mut self) -> ::std::vec::Vec<cplayer_get_game_achievements_response::Achievement> {
        ::std::mem::replace(&mut self.achievements, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "achievements",
            |m: &CPlayer_GetGameAchievements_Response| { &m.achievements },
            |m: &mut CPlayer_GetGameAchievements_Response| { &mut m.achievements },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetGameAchievements_Response>(
            "CPlayer_GetGameAchievements_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetGameAchievements_Response {
    const NAME: &'static str = "CPlayer_GetGameAchievements_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.achievements.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.achievements {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.achievements {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetGameAchievements_Response {
        CPlayer_GetGameAchievements_Response::new()
    }

    fn clear(&mut self) {
        self.achievements.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetGameAchievements_Response {
        static instance: CPlayer_GetGameAchievements_Response = CPlayer_GetGameAchievements_Response {
            achievements: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetGameAchievements_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetGameAchievements_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetGameAchievements_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetGameAchievements_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetGameAchievements_Response`
pub mod cplayer_get_game_achievements_response {
    // @@protoc_insertion_point(message:CPlayer_GetGameAchievements_Response.Achievement)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Achievement {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.internal_name)
        pub internal_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.localized_name)
        pub localized_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.localized_desc)
        pub localized_desc: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.icon)
        pub icon: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.icon_gray)
        pub icon_gray: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.hidden)
        pub hidden: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked)
        pub player_percent_unlocked: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetGameAchievements_Response.Achievement.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Achievement {
        fn default() -> &'a Achievement {
            <Achievement as crate::Message>::default_instance()
        }
    }

    impl Achievement {
        pub fn new() -> Achievement {
            ::std::default::Default::default()
        }

        // optional string internal_name = 1;

        pub fn internal_name(&self) -> &str {
            match self.internal_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_internal_name(&mut self) {
            self.internal_name = ::std::option::Option::None;
        }

        pub fn has_internal_name(&self) -> bool {
            self.internal_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_internal_name(&mut self, v: ::std::string::String) {
            self.internal_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_internal_name(&mut self) -> &mut ::std::string::String {
            if self.internal_name.is_none() {
                self.internal_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.internal_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_internal_name(&mut self) -> ::std::string::String {
            self.internal_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string localized_name = 2;

        pub fn localized_name(&self) -> &str {
            match self.localized_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_localized_name(&mut self) {
            self.localized_name = ::std::option::Option::None;
        }

        pub fn has_localized_name(&self) -> bool {
            self.localized_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_localized_name(&mut self, v: ::std::string::String) {
            self.localized_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_localized_name(&mut self) -> &mut ::std::string::String {
            if self.localized_name.is_none() {
                self.localized_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.localized_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_localized_name(&mut self) -> ::std::string::String {
            self.localized_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string localized_desc = 3;

        pub fn localized_desc(&self) -> &str {
            match self.localized_desc.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_localized_desc(&mut self) {
            self.localized_desc = ::std::option::Option::None;
        }

        pub fn has_localized_desc(&self) -> bool {
            self.localized_desc.is_some()
        }

        // Param is passed by value, moved
        pub fn set_localized_desc(&mut self, v: ::std::string::String) {
            self.localized_desc = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_localized_desc(&mut self) -> &mut ::std::string::String {
            if self.localized_desc.is_none() {
                self.localized_desc = ::std::option::Option::Some(::std::string::String::new());
            }
            self.localized_desc.as_mut().unwrap()
        }

        // Take field
        pub fn take_localized_desc(&mut self) -> ::std::string::String {
            self.localized_desc.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon = 4;

        pub fn icon(&self) -> &str {
            match self.icon.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon(&mut self) {
            self.icon = ::std::option::Option::None;
        }

        pub fn has_icon(&self) -> bool {
            self.icon.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon(&mut self, v: ::std::string::String) {
            self.icon = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon(&mut self) -> &mut ::std::string::String {
            if self.icon.is_none() {
                self.icon = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon(&mut self) -> ::std::string::String {
            self.icon.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon_gray = 5;

        pub fn icon_gray(&self) -> &str {
            match self.icon_gray.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon_gray(&mut self) {
            self.icon_gray = ::std::option::Option::None;
        }

        pub fn has_icon_gray(&self) -> bool {
            self.icon_gray.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon_gray(&mut self, v: ::std::string::String) {
            self.icon_gray = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon_gray(&mut self) -> &mut ::std::string::String {
            if self.icon_gray.is_none() {
                self.icon_gray = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon_gray.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon_gray(&mut self) -> ::std::string::String {
            self.icon_gray.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool hidden = 6;

        pub fn hidden(&self) -> bool {
            self.hidden.unwrap_or(false)
        }

        pub fn clear_hidden(&mut self) {
            self.hidden = ::std::option::Option::None;
        }

        pub fn has_hidden(&self) -> bool {
            self.hidden.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hidden(&mut self, v: bool) {
            self.hidden = ::std::option::Option::Some(v);
        }

        // optional string player_percent_unlocked = 7;

        pub fn player_percent_unlocked(&self) -> &str {
            match self.player_percent_unlocked.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_player_percent_unlocked(&mut self) {
            self.player_percent_unlocked = ::std::option::Option::None;
        }

        pub fn has_player_percent_unlocked(&self) -> bool {
            self.player_percent_unlocked.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player_percent_unlocked(&mut self, v: ::std::string::String) {
            self.player_percent_unlocked = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_player_percent_unlocked(&mut self) -> &mut ::std::string::String {
            if self.player_percent_unlocked.is_none() {
                self.player_percent_unlocked = ::std::option::Option::Some(::std::string::String::new());
            }
            self.player_percent_unlocked.as_mut().unwrap()
        }

        // Take field
        pub fn take_player_percent_unlocked(&mut self) -> ::std::string::String {
            self.player_percent_unlocked.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "internal_name",
                |m: &Achievement| { &m.internal_name },
                |m: &mut Achievement| { &mut m.internal_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "localized_name",
                |m: &Achievement| { &m.localized_name },
                |m: &mut Achievement| { &mut m.localized_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "localized_desc",
                |m: &Achievement| { &m.localized_desc },
                |m: &mut Achievement| { &mut m.localized_desc },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon",
                |m: &Achievement| { &m.icon },
                |m: &mut Achievement| { &mut m.icon },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon_gray",
                |m: &Achievement| { &m.icon_gray },
                |m: &mut Achievement| { &mut m.icon_gray },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "hidden",
                |m: &Achievement| { &m.hidden },
                |m: &mut Achievement| { &mut m.hidden },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "player_percent_unlocked",
                |m: &Achievement| { &m.player_percent_unlocked },
                |m: &mut Achievement| { &mut m.player_percent_unlocked },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Achievement>(
                "CPlayer_GetGameAchievements_Response.Achievement",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Achievement {
        const NAME: &'static str = "Achievement";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.internal_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.localized_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.localized_desc = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.icon = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.icon_gray = ::std::option::Option::Some(is.read_string()?);
                    },
                    48 => {
                        self.hidden = ::std::option::Option::Some(is.read_bool()?);
                    },
                    58 => {
                        self.player_percent_unlocked = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.internal_name.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.localized_name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.localized_desc.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.icon.as_ref() {
                my_size += crate::rt::string_size(4, &v);
            }
            if let Some(v) = self.icon_gray.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.hidden {
                my_size += 1 + 1;
            }
            if let Some(v) = self.player_percent_unlocked.as_ref() {
                my_size += crate::rt::string_size(7, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.internal_name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.localized_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.localized_desc.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.icon.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.icon_gray.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.hidden {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.player_percent_unlocked.as_ref() {
                os.write_string(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Achievement {
            Achievement::new()
        }

        fn clear(&mut self) {
            self.internal_name = ::std::option::Option::None;
            self.localized_name = ::std::option::Option::None;
            self.localized_desc = ::std::option::Option::None;
            self.icon = ::std::option::Option::None;
            self.icon_gray = ::std::option::Option::None;
            self.hidden = ::std::option::Option::None;
            self.player_percent_unlocked = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Achievement {
            static instance: Achievement = Achievement {
                internal_name: ::std::option::Option::None,
                localized_name: ::std::option::Option::None,
                localized_desc: ::std::option::Option::None,
                icon: ::std::option::Option::None,
                icon_gray: ::std::option::Option::None,
                hidden: ::std::option::Option::None,
                player_percent_unlocked: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Achievement {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetGameAchievements_Response.Achievement").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Achievement {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Achievement {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetFavoriteBadge_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetFavoriteBadge_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetFavoriteBadge_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetFavoriteBadge_Request {
    fn default() -> &'a CPlayer_GetFavoriteBadge_Request {
        <CPlayer_GetFavoriteBadge_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetFavoriteBadge_Request {
    pub fn new() -> CPlayer_GetFavoriteBadge_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetFavoriteBadge_Request| { &m.steamid },
            |m: &mut CPlayer_GetFavoriteBadge_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetFavoriteBadge_Request>(
            "CPlayer_GetFavoriteBadge_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetFavoriteBadge_Request {
    const NAME: &'static str = "CPlayer_GetFavoriteBadge_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetFavoriteBadge_Request {
        CPlayer_GetFavoriteBadge_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetFavoriteBadge_Request {
        static instance: CPlayer_GetFavoriteBadge_Request = CPlayer_GetFavoriteBadge_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetFavoriteBadge_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetFavoriteBadge_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetFavoriteBadge_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetFavoriteBadge_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetFavoriteBadge_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetFavoriteBadge_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.has_favorite_badge)
    pub has_favorite_badge: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.badgeid)
    pub badgeid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.item_type)
    pub item_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.border_color)
    pub border_color: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetFavoriteBadge_Response.level)
    pub level: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetFavoriteBadge_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetFavoriteBadge_Response {
    fn default() -> &'a CPlayer_GetFavoriteBadge_Response {
        <CPlayer_GetFavoriteBadge_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetFavoriteBadge_Response {
    pub fn new() -> CPlayer_GetFavoriteBadge_Response {
        ::std::default::Default::default()
    }

    // optional bool has_favorite_badge = 1;

    pub fn has_favorite_badge(&self) -> bool {
        self.has_favorite_badge.unwrap_or(false)
    }

    pub fn clear_has_favorite_badge(&mut self) {
        self.has_favorite_badge = ::std::option::Option::None;
    }

    pub fn has_has_favorite_badge(&self) -> bool {
        self.has_favorite_badge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_favorite_badge(&mut self, v: bool) {
        self.has_favorite_badge = ::std::option::Option::Some(v);
    }

    // optional uint32 badgeid = 2;

    pub fn badgeid(&self) -> u32 {
        self.badgeid.unwrap_or(0)
    }

    pub fn clear_badgeid(&mut self) {
        self.badgeid = ::std::option::Option::None;
    }

    pub fn has_badgeid(&self) -> bool {
        self.badgeid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badgeid(&mut self, v: u32) {
        self.badgeid = ::std::option::Option::Some(v);
    }

    // optional uint64 communityitemid = 3;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    // optional uint32 item_type = 4;

    pub fn item_type(&self) -> u32 {
        self.item_type.unwrap_or(0)
    }

    pub fn clear_item_type(&mut self) {
        self.item_type = ::std::option::Option::None;
    }

    pub fn has_item_type(&self) -> bool {
        self.item_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_type(&mut self, v: u32) {
        self.item_type = ::std::option::Option::Some(v);
    }

    // optional uint32 border_color = 5;

    pub fn border_color(&self) -> u32 {
        self.border_color.unwrap_or(0)
    }

    pub fn clear_border_color(&mut self) {
        self.border_color = ::std::option::Option::None;
    }

    pub fn has_border_color(&self) -> bool {
        self.border_color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_border_color(&mut self, v: u32) {
        self.border_color = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 6;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 level = 7;

    pub fn level(&self) -> u32 {
        self.level.unwrap_or(0)
    }

    pub fn clear_level(&mut self) {
        self.level = ::std::option::Option::None;
    }

    pub fn has_level(&self) -> bool {
        self.level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: u32) {
        self.level = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_favorite_badge",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.has_favorite_badge },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.has_favorite_badge },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "badgeid",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.badgeid },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.badgeid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.communityitemid },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.communityitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_type",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.item_type },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.item_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "border_color",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.border_color },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.border_color },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.appid },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "level",
            |m: &CPlayer_GetFavoriteBadge_Response| { &m.level },
            |m: &mut CPlayer_GetFavoriteBadge_Response| { &mut m.level },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetFavoriteBadge_Response>(
            "CPlayer_GetFavoriteBadge_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetFavoriteBadge_Response {
    const NAME: &'static str = "CPlayer_GetFavoriteBadge_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_favorite_badge = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.badgeid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.item_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.border_color = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.level = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.has_favorite_badge {
            my_size += 1 + 1;
        }
        if let Some(v) = self.badgeid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.item_type {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.border_color {
            my_size += crate::rt::uint32_size(5, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.level {
            my_size += crate::rt::uint32_size(7, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.has_favorite_badge {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.badgeid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.communityitemid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.item_type {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.border_color {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.level {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetFavoriteBadge_Response {
        CPlayer_GetFavoriteBadge_Response::new()
    }

    fn clear(&mut self) {
        self.has_favorite_badge = ::std::option::Option::None;
        self.badgeid = ::std::option::Option::None;
        self.communityitemid = ::std::option::Option::None;
        self.item_type = ::std::option::Option::None;
        self.border_color = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.level = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetFavoriteBadge_Response {
        static instance: CPlayer_GetFavoriteBadge_Response = CPlayer_GetFavoriteBadge_Response {
            has_favorite_badge: ::std::option::Option::None,
            badgeid: ::std::option::Option::None,
            communityitemid: ::std::option::Option::None,
            item_type: ::std::option::Option::None,
            border_color: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            level: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetFavoriteBadge_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetFavoriteBadge_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetFavoriteBadge_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetFavoriteBadge_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetFavoriteBadge_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetFavoriteBadge_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetFavoriteBadge_Request.communityitemid)
    pub communityitemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_SetFavoriteBadge_Request.badgeid)
    pub badgeid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetFavoriteBadge_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetFavoriteBadge_Request {
    fn default() -> &'a CPlayer_SetFavoriteBadge_Request {
        <CPlayer_SetFavoriteBadge_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetFavoriteBadge_Request {
    pub fn new() -> CPlayer_SetFavoriteBadge_Request {
        ::std::default::Default::default()
    }

    // optional uint64 communityitemid = 1;

    pub fn communityitemid(&self) -> u64 {
        self.communityitemid.unwrap_or(0)
    }

    pub fn clear_communityitemid(&mut self) {
        self.communityitemid = ::std::option::Option::None;
    }

    pub fn has_communityitemid(&self) -> bool {
        self.communityitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_communityitemid(&mut self, v: u64) {
        self.communityitemid = ::std::option::Option::Some(v);
    }

    // optional uint32 badgeid = 2;

    pub fn badgeid(&self) -> u32 {
        self.badgeid.unwrap_or(0)
    }

    pub fn clear_badgeid(&mut self) {
        self.badgeid = ::std::option::Option::None;
    }

    pub fn has_badgeid(&self) -> bool {
        self.badgeid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badgeid(&mut self, v: u32) {
        self.badgeid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "communityitemid",
            |m: &CPlayer_SetFavoriteBadge_Request| { &m.communityitemid },
            |m: &mut CPlayer_SetFavoriteBadge_Request| { &mut m.communityitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "badgeid",
            |m: &CPlayer_SetFavoriteBadge_Request| { &m.badgeid },
            |m: &mut CPlayer_SetFavoriteBadge_Request| { &mut m.badgeid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetFavoriteBadge_Request>(
            "CPlayer_SetFavoriteBadge_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetFavoriteBadge_Request {
    const NAME: &'static str = "CPlayer_SetFavoriteBadge_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.communityitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.badgeid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.communityitemid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.badgeid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.communityitemid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.badgeid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetFavoriteBadge_Request {
        CPlayer_SetFavoriteBadge_Request::new()
    }

    fn clear(&mut self) {
        self.communityitemid = ::std::option::Option::None;
        self.badgeid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetFavoriteBadge_Request {
        static instance: CPlayer_SetFavoriteBadge_Request = CPlayer_SetFavoriteBadge_Request {
            communityitemid: ::std::option::Option::None,
            badgeid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetFavoriteBadge_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetFavoriteBadge_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetFavoriteBadge_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetFavoriteBadge_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetFavoriteBadge_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetFavoriteBadge_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetFavoriteBadge_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetFavoriteBadge_Response {
    fn default() -> &'a CPlayer_SetFavoriteBadge_Response {
        <CPlayer_SetFavoriteBadge_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetFavoriteBadge_Response {
    pub fn new() -> CPlayer_SetFavoriteBadge_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetFavoriteBadge_Response>(
            "CPlayer_SetFavoriteBadge_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetFavoriteBadge_Response {
    const NAME: &'static str = "CPlayer_SetFavoriteBadge_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetFavoriteBadge_Response {
        CPlayer_SetFavoriteBadge_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetFavoriteBadge_Response {
        static instance: CPlayer_SetFavoriteBadge_Response = CPlayer_SetFavoriteBadge_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetFavoriteBadge_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetFavoriteBadge_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetFavoriteBadge_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetFavoriteBadge_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileCustomization_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileCustomization_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Request.include_inactive_customizations)
    pub include_inactive_customizations: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Request.include_purchased_customizations)
    pub include_purchased_customizations: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileCustomization_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileCustomization_Request {
    fn default() -> &'a CPlayer_GetProfileCustomization_Request {
        <CPlayer_GetProfileCustomization_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileCustomization_Request {
    pub fn new() -> CPlayer_GetProfileCustomization_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_inactive_customizations = 2;

    pub fn include_inactive_customizations(&self) -> bool {
        self.include_inactive_customizations.unwrap_or(false)
    }

    pub fn clear_include_inactive_customizations(&mut self) {
        self.include_inactive_customizations = ::std::option::Option::None;
    }

    pub fn has_include_inactive_customizations(&self) -> bool {
        self.include_inactive_customizations.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_inactive_customizations(&mut self, v: bool) {
        self.include_inactive_customizations = ::std::option::Option::Some(v);
    }

    // optional bool include_purchased_customizations = 3;

    pub fn include_purchased_customizations(&self) -> bool {
        self.include_purchased_customizations.unwrap_or(false)
    }

    pub fn clear_include_purchased_customizations(&mut self) {
        self.include_purchased_customizations = ::std::option::Option::None;
    }

    pub fn has_include_purchased_customizations(&self) -> bool {
        self.include_purchased_customizations.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_purchased_customizations(&mut self, v: bool) {
        self.include_purchased_customizations = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetProfileCustomization_Request| { &m.steamid },
            |m: &mut CPlayer_GetProfileCustomization_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_inactive_customizations",
            |m: &CPlayer_GetProfileCustomization_Request| { &m.include_inactive_customizations },
            |m: &mut CPlayer_GetProfileCustomization_Request| { &mut m.include_inactive_customizations },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_purchased_customizations",
            |m: &CPlayer_GetProfileCustomization_Request| { &m.include_purchased_customizations },
            |m: &mut CPlayer_GetProfileCustomization_Request| { &mut m.include_purchased_customizations },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileCustomization_Request>(
            "CPlayer_GetProfileCustomization_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileCustomization_Request {
    const NAME: &'static str = "CPlayer_GetProfileCustomization_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_inactive_customizations = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.include_purchased_customizations = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_inactive_customizations {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_purchased_customizations {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_inactive_customizations {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.include_purchased_customizations {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileCustomization_Request {
        CPlayer_GetProfileCustomization_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_inactive_customizations = ::std::option::Option::None;
        self.include_purchased_customizations = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileCustomization_Request {
        static instance: CPlayer_GetProfileCustomization_Request = CPlayer_GetProfileCustomization_Request {
            steamid: ::std::option::Option::None,
            include_inactive_customizations: ::std::option::Option::None,
            include_purchased_customizations: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileCustomization_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileCustomization_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileCustomization_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileCustomization_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ProfileCustomizationSlot)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProfileCustomizationSlot {
    // message fields
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.slot)
    pub slot: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.item_assetid)
    pub item_assetid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.item_contextid)
    pub item_contextid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.notes)
    pub notes: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.title)
    pub title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.badgeid)
    pub badgeid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.border_color)
    pub border_color: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.item_classid)
    pub item_classid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.item_instanceid)
    pub item_instanceid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.ban_check_result)
    pub ban_check_result: ::std::option::Option<crate::EnumOrUnknown<super::steammessages_base::EBanContentCheckResult>>,
    // @@protoc_insertion_point(field:ProfileCustomizationSlot.replay_year)
    pub replay_year: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ProfileCustomizationSlot.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileCustomizationSlot {
    fn default() -> &'a ProfileCustomizationSlot {
        <ProfileCustomizationSlot as crate::Message>::default_instance()
    }
}

impl ProfileCustomizationSlot {
    pub fn new() -> ProfileCustomizationSlot {
        ::std::default::Default::default()
    }

    // optional uint32 slot = 1;

    pub fn slot(&self) -> u32 {
        self.slot.unwrap_or(0)
    }

    pub fn clear_slot(&mut self) {
        self.slot = ::std::option::Option::None;
    }

    pub fn has_slot(&self) -> bool {
        self.slot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slot(&mut self, v: u32) {
        self.slot = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 publishedfileid = 3;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional uint64 item_assetid = 4;

    pub fn item_assetid(&self) -> u64 {
        self.item_assetid.unwrap_or(0)
    }

    pub fn clear_item_assetid(&mut self) {
        self.item_assetid = ::std::option::Option::None;
    }

    pub fn has_item_assetid(&self) -> bool {
        self.item_assetid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_assetid(&mut self, v: u64) {
        self.item_assetid = ::std::option::Option::Some(v);
    }

    // optional uint64 item_contextid = 5;

    pub fn item_contextid(&self) -> u64 {
        self.item_contextid.unwrap_or(0)
    }

    pub fn clear_item_contextid(&mut self) {
        self.item_contextid = ::std::option::Option::None;
    }

    pub fn has_item_contextid(&self) -> bool {
        self.item_contextid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_contextid(&mut self, v: u64) {
        self.item_contextid = ::std::option::Option::Some(v);
    }

    // optional string notes = 6;

    pub fn notes(&self) -> &str {
        match self.notes.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_notes(&mut self) {
        self.notes = ::std::option::Option::None;
    }

    pub fn has_notes(&self) -> bool {
        self.notes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notes(&mut self, v: ::std::string::String) {
        self.notes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notes(&mut self) -> &mut ::std::string::String {
        if self.notes.is_none() {
            self.notes = ::std::option::Option::Some(::std::string::String::new());
        }
        self.notes.as_mut().unwrap()
    }

    // Take field
    pub fn take_notes(&mut self) -> ::std::string::String {
        self.notes.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string title = 7;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 8;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional uint32 badgeid = 9;

    pub fn badgeid(&self) -> u32 {
        self.badgeid.unwrap_or(0)
    }

    pub fn clear_badgeid(&mut self) {
        self.badgeid = ::std::option::Option::None;
    }

    pub fn has_badgeid(&self) -> bool {
        self.badgeid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_badgeid(&mut self, v: u32) {
        self.badgeid = ::std::option::Option::Some(v);
    }

    // optional uint32 border_color = 10;

    pub fn border_color(&self) -> u32 {
        self.border_color.unwrap_or(0)
    }

    pub fn clear_border_color(&mut self) {
        self.border_color = ::std::option::Option::None;
    }

    pub fn has_border_color(&self) -> bool {
        self.border_color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_border_color(&mut self, v: u32) {
        self.border_color = ::std::option::Option::Some(v);
    }

    // optional uint64 item_classid = 11;

    pub fn item_classid(&self) -> u64 {
        self.item_classid.unwrap_or(0)
    }

    pub fn clear_item_classid(&mut self) {
        self.item_classid = ::std::option::Option::None;
    }

    pub fn has_item_classid(&self) -> bool {
        self.item_classid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_classid(&mut self, v: u64) {
        self.item_classid = ::std::option::Option::Some(v);
    }

    // optional uint64 item_instanceid = 12;

    pub fn item_instanceid(&self) -> u64 {
        self.item_instanceid.unwrap_or(0)
    }

    pub fn clear_item_instanceid(&mut self) {
        self.item_instanceid = ::std::option::Option::None;
    }

    pub fn has_item_instanceid(&self) -> bool {
        self.item_instanceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_instanceid(&mut self, v: u64) {
        self.item_instanceid = ::std::option::Option::Some(v);
    }

    // optional .EBanContentCheckResult ban_check_result = 13;

    pub fn ban_check_result(&self) -> super::steammessages_base::EBanContentCheckResult {
        match self.ban_check_result {
            Some(e) => e.enum_value_or(super::steammessages_base::EBanContentCheckResult::k_EBanContentCheckResult_NotScanned),
            None => super::steammessages_base::EBanContentCheckResult::k_EBanContentCheckResult_NotScanned,
        }
    }

    pub fn clear_ban_check_result(&mut self) {
        self.ban_check_result = ::std::option::Option::None;
    }

    pub fn has_ban_check_result(&self) -> bool {
        self.ban_check_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ban_check_result(&mut self, v: super::steammessages_base::EBanContentCheckResult) {
        self.ban_check_result = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint32 replay_year = 14;

    pub fn replay_year(&self) -> u32 {
        self.replay_year.unwrap_or(0)
    }

    pub fn clear_replay_year(&mut self) {
        self.replay_year = ::std::option::Option::None;
    }

    pub fn has_replay_year(&self) -> bool {
        self.replay_year.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replay_year(&mut self, v: u32) {
        self.replay_year = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "slot",
            |m: &ProfileCustomizationSlot| { &m.slot },
            |m: &mut ProfileCustomizationSlot| { &mut m.slot },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &ProfileCustomizationSlot| { &m.appid },
            |m: &mut ProfileCustomizationSlot| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &ProfileCustomizationSlot| { &m.publishedfileid },
            |m: &mut ProfileCustomizationSlot| { &mut m.publishedfileid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_assetid",
            |m: &ProfileCustomizationSlot| { &m.item_assetid },
            |m: &mut ProfileCustomizationSlot| { &mut m.item_assetid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_contextid",
            |m: &ProfileCustomizationSlot| { &m.item_contextid },
            |m: &mut ProfileCustomizationSlot| { &mut m.item_contextid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "notes",
            |m: &ProfileCustomizationSlot| { &m.notes },
            |m: &mut ProfileCustomizationSlot| { &mut m.notes },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "title",
            |m: &ProfileCustomizationSlot| { &m.title },
            |m: &mut ProfileCustomizationSlot| { &mut m.title },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &ProfileCustomizationSlot| { &m.accountid },
            |m: &mut ProfileCustomizationSlot| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "badgeid",
            |m: &ProfileCustomizationSlot| { &m.badgeid },
            |m: &mut ProfileCustomizationSlot| { &mut m.badgeid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "border_color",
            |m: &ProfileCustomizationSlot| { &m.border_color },
            |m: &mut ProfileCustomizationSlot| { &mut m.border_color },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_classid",
            |m: &ProfileCustomizationSlot| { &m.item_classid },
            |m: &mut ProfileCustomizationSlot| { &mut m.item_classid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_instanceid",
            |m: &ProfileCustomizationSlot| { &m.item_instanceid },
            |m: &mut ProfileCustomizationSlot| { &mut m.item_instanceid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ban_check_result",
            |m: &ProfileCustomizationSlot| { &m.ban_check_result },
            |m: &mut ProfileCustomizationSlot| { &mut m.ban_check_result },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "replay_year",
            |m: &ProfileCustomizationSlot| { &m.replay_year },
            |m: &mut ProfileCustomizationSlot| { &mut m.replay_year },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ProfileCustomizationSlot>(
            "ProfileCustomizationSlot",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ProfileCustomizationSlot {
    const NAME: &'static str = "ProfileCustomizationSlot";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.slot = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.item_assetid = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.item_contextid = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.notes = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.badgeid = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.border_color = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.item_classid = ::std::option::Option::Some(is.read_uint64()?);
                },
                96 => {
                    self.item_instanceid = ::std::option::Option::Some(is.read_uint64()?);
                },
                104 => {
                    self.ban_check_result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                112 => {
                    self.replay_year = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.slot {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.item_assetid {
            my_size += crate::rt::uint64_size(4, v);
        }
        if let Some(v) = self.item_contextid {
            my_size += crate::rt::uint64_size(5, v);
        }
        if let Some(v) = self.notes.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(8, v);
        }
        if let Some(v) = self.badgeid {
            my_size += crate::rt::uint32_size(9, v);
        }
        if let Some(v) = self.border_color {
            my_size += crate::rt::uint32_size(10, v);
        }
        if let Some(v) = self.item_classid {
            my_size += crate::rt::uint64_size(11, v);
        }
        if let Some(v) = self.item_instanceid {
            my_size += crate::rt::uint64_size(12, v);
        }
        if let Some(v) = self.ban_check_result {
            my_size += crate::rt::int32_size(13, v.value());
        }
        if let Some(v) = self.replay_year {
            my_size += crate::rt::uint32_size(14, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.slot {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.item_assetid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.item_contextid {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.notes.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.badgeid {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.border_color {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.item_classid {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.item_instanceid {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.ban_check_result {
            os.write_enum(13, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.replay_year {
            os.write_uint32(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileCustomizationSlot {
        ProfileCustomizationSlot::new()
    }

    fn clear(&mut self) {
        self.slot = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.item_assetid = ::std::option::Option::None;
        self.item_contextid = ::std::option::Option::None;
        self.notes = ::std::option::Option::None;
        self.title = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.badgeid = ::std::option::Option::None;
        self.border_color = ::std::option::Option::None;
        self.item_classid = ::std::option::Option::None;
        self.item_instanceid = ::std::option::Option::None;
        self.ban_check_result = ::std::option::Option::None;
        self.replay_year = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileCustomizationSlot {
        static instance: ProfileCustomizationSlot = ProfileCustomizationSlot {
            slot: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            item_assetid: ::std::option::Option::None,
            item_contextid: ::std::option::Option::None,
            notes: ::std::option::Option::None,
            title: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            badgeid: ::std::option::Option::None,
            border_color: ::std::option::Option::None,
            item_classid: ::std::option::Option::None,
            item_instanceid: ::std::option::Option::None,
            ban_check_result: ::std::option::Option::None,
            replay_year: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ProfileCustomizationSlot {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileCustomizationSlot").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileCustomizationSlot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ProfileCustomizationSlot {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ProfileCustomization)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProfileCustomization {
    // message fields
    // @@protoc_insertion_point(field:ProfileCustomization.customization_type)
    pub customization_type: ::std::option::Option<crate::EnumOrUnknown<super::enums::EProfileCustomizationType>>,
    // @@protoc_insertion_point(field:ProfileCustomization.large)
    pub large: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ProfileCustomization.slots)
    pub slots: ::std::vec::Vec<ProfileCustomizationSlot>,
    // @@protoc_insertion_point(field:ProfileCustomization.active)
    pub active: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ProfileCustomization.customization_style)
    pub customization_style: ::std::option::Option<crate::EnumOrUnknown<EProfileCustomizationStyle>>,
    // @@protoc_insertion_point(field:ProfileCustomization.purchaseid)
    pub purchaseid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ProfileCustomization.level)
    pub level: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ProfileCustomization.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileCustomization {
    fn default() -> &'a ProfileCustomization {
        <ProfileCustomization as crate::Message>::default_instance()
    }
}

impl ProfileCustomization {
    pub fn new() -> ProfileCustomization {
        ::std::default::Default::default()
    }

    // optional .EProfileCustomizationType customization_type = 1;

    pub fn customization_type(&self) -> super::enums::EProfileCustomizationType {
        match self.customization_type {
            Some(e) => e.enum_value_or(super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid),
            None => super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid,
        }
    }

    pub fn clear_customization_type(&mut self) {
        self.customization_type = ::std::option::Option::None;
    }

    pub fn has_customization_type(&self) -> bool {
        self.customization_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_customization_type(&mut self, v: super::enums::EProfileCustomizationType) {
        self.customization_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool large = 2;

    pub fn large(&self) -> bool {
        self.large.unwrap_or(false)
    }

    pub fn clear_large(&mut self) {
        self.large = ::std::option::Option::None;
    }

    pub fn has_large(&self) -> bool {
        self.large.is_some()
    }

    // Param is passed by value, moved
    pub fn set_large(&mut self, v: bool) {
        self.large = ::std::option::Option::Some(v);
    }

    // repeated .ProfileCustomizationSlot slots = 3;

    pub fn slots(&self) -> &[ProfileCustomizationSlot] {
        &self.slots
    }

    pub fn clear_slots(&mut self) {
        self.slots.clear();
    }

    // Param is passed by value, moved
    pub fn set_slots(&mut self, v: ::std::vec::Vec<ProfileCustomizationSlot>) {
        self.slots = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slots(&mut self) -> &mut ::std::vec::Vec<ProfileCustomizationSlot> {
        &mut self.slots
    }

    // Take field
    pub fn take_slots(&mut self) -> ::std::vec::Vec<ProfileCustomizationSlot> {
        ::std::mem::replace(&mut self.slots, ::std::vec::Vec::new())
    }

    // optional bool active = 4;

    pub fn active(&self) -> bool {
        self.active.unwrap_or(false)
    }

    pub fn clear_active(&mut self) {
        self.active = ::std::option::Option::None;
    }

    pub fn has_active(&self) -> bool {
        self.active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = ::std::option::Option::Some(v);
    }

    // optional .EProfileCustomizationStyle customization_style = 5;

    pub fn customization_style(&self) -> EProfileCustomizationStyle {
        match self.customization_style {
            Some(e) => e.enum_value_or(EProfileCustomizationStyle::k_EProfileCustomizationStyleDefault),
            None => EProfileCustomizationStyle::k_EProfileCustomizationStyleDefault,
        }
    }

    pub fn clear_customization_style(&mut self) {
        self.customization_style = ::std::option::Option::None;
    }

    pub fn has_customization_style(&self) -> bool {
        self.customization_style.is_some()
    }

    // Param is passed by value, moved
    pub fn set_customization_style(&mut self, v: EProfileCustomizationStyle) {
        self.customization_style = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint64 purchaseid = 6;

    pub fn purchaseid(&self) -> u64 {
        self.purchaseid.unwrap_or(0)
    }

    pub fn clear_purchaseid(&mut self) {
        self.purchaseid = ::std::option::Option::None;
    }

    pub fn has_purchaseid(&self) -> bool {
        self.purchaseid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_purchaseid(&mut self, v: u64) {
        self.purchaseid = ::std::option::Option::Some(v);
    }

    // optional uint32 level = 7;

    pub fn level(&self) -> u32 {
        self.level.unwrap_or(0)
    }

    pub fn clear_level(&mut self) {
        self.level = ::std::option::Option::None;
    }

    pub fn has_level(&self) -> bool {
        self.level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: u32) {
        self.level = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "customization_type",
            |m: &ProfileCustomization| { &m.customization_type },
            |m: &mut ProfileCustomization| { &mut m.customization_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "large",
            |m: &ProfileCustomization| { &m.large },
            |m: &mut ProfileCustomization| { &mut m.large },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "slots",
            |m: &ProfileCustomization| { &m.slots },
            |m: &mut ProfileCustomization| { &mut m.slots },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "active",
            |m: &ProfileCustomization| { &m.active },
            |m: &mut ProfileCustomization| { &mut m.active },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "customization_style",
            |m: &ProfileCustomization| { &m.customization_style },
            |m: &mut ProfileCustomization| { &mut m.customization_style },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "purchaseid",
            |m: &ProfileCustomization| { &m.purchaseid },
            |m: &mut ProfileCustomization| { &mut m.purchaseid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "level",
            |m: &ProfileCustomization| { &m.level },
            |m: &mut ProfileCustomization| { &mut m.level },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ProfileCustomization>(
            "ProfileCustomization",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ProfileCustomization {
    const NAME: &'static str = "ProfileCustomization";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.customization_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.large = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.slots.push(is.read_message()?);
                },
                32 => {
                    self.active = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.customization_style = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                48 => {
                    self.purchaseid = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.level = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.customization_type {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.large {
            my_size += 1 + 1;
        }
        for value in &self.slots {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.active {
            my_size += 1 + 1;
        }
        if let Some(v) = self.customization_style {
            my_size += crate::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.purchaseid {
            my_size += crate::rt::uint64_size(6, v);
        }
        if let Some(v) = self.level {
            my_size += crate::rt::uint32_size(7, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.customization_type {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.large {
            os.write_bool(2, v)?;
        }
        for v in &self.slots {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.active {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.customization_style {
            os.write_enum(5, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.purchaseid {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.level {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileCustomization {
        ProfileCustomization::new()
    }

    fn clear(&mut self) {
        self.customization_type = ::std::option::Option::None;
        self.large = ::std::option::Option::None;
        self.slots.clear();
        self.active = ::std::option::Option::None;
        self.customization_style = ::std::option::Option::None;
        self.purchaseid = ::std::option::Option::None;
        self.level = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileCustomization {
        static instance: ProfileCustomization = ProfileCustomization {
            customization_type: ::std::option::Option::None,
            large: ::std::option::Option::None,
            slots: ::std::vec::Vec::new(),
            active: ::std::option::Option::None,
            customization_style: ::std::option::Option::None,
            purchaseid: ::std::option::Option::None,
            level: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ProfileCustomization {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileCustomization").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileCustomization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ProfileCustomization {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ProfileTheme)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProfileTheme {
    // message fields
    // @@protoc_insertion_point(field:ProfileTheme.theme_id)
    pub theme_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ProfileTheme.title)
    pub title: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ProfileTheme.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileTheme {
    fn default() -> &'a ProfileTheme {
        <ProfileTheme as crate::Message>::default_instance()
    }
}

impl ProfileTheme {
    pub fn new() -> ProfileTheme {
        ::std::default::Default::default()
    }

    // optional string theme_id = 1;

    pub fn theme_id(&self) -> &str {
        match self.theme_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_theme_id(&mut self) {
        self.theme_id = ::std::option::Option::None;
    }

    pub fn has_theme_id(&self) -> bool {
        self.theme_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_theme_id(&mut self, v: ::std::string::String) {
        self.theme_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_theme_id(&mut self) -> &mut ::std::string::String {
        if self.theme_id.is_none() {
            self.theme_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.theme_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_theme_id(&mut self) -> ::std::string::String {
        self.theme_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string title = 2;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "theme_id",
            |m: &ProfileTheme| { &m.theme_id },
            |m: &mut ProfileTheme| { &mut m.theme_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "title",
            |m: &ProfileTheme| { &m.title },
            |m: &mut ProfileTheme| { &mut m.title },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ProfileTheme>(
            "ProfileTheme",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ProfileTheme {
    const NAME: &'static str = "ProfileTheme";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.theme_id = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.theme_id.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.theme_id.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileTheme {
        ProfileTheme::new()
    }

    fn clear(&mut self) {
        self.theme_id = ::std::option::Option::None;
        self.title = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileTheme {
        static instance: ProfileTheme = ProfileTheme {
            theme_id: ::std::option::Option::None,
            title: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ProfileTheme {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileTheme").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileTheme {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ProfileTheme {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ProfilePreferences)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProfilePreferences {
    // message fields
    // @@protoc_insertion_point(field:ProfilePreferences.hide_profile_awards)
    pub hide_profile_awards: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ProfilePreferences.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfilePreferences {
    fn default() -> &'a ProfilePreferences {
        <ProfilePreferences as crate::Message>::default_instance()
    }
}

impl ProfilePreferences {
    pub fn new() -> ProfilePreferences {
        ::std::default::Default::default()
    }

    // optional bool hide_profile_awards = 1;

    pub fn hide_profile_awards(&self) -> bool {
        self.hide_profile_awards.unwrap_or(false)
    }

    pub fn clear_hide_profile_awards(&mut self) {
        self.hide_profile_awards = ::std::option::Option::None;
    }

    pub fn has_hide_profile_awards(&self) -> bool {
        self.hide_profile_awards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hide_profile_awards(&mut self, v: bool) {
        self.hide_profile_awards = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hide_profile_awards",
            |m: &ProfilePreferences| { &m.hide_profile_awards },
            |m: &mut ProfilePreferences| { &mut m.hide_profile_awards },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ProfilePreferences>(
            "ProfilePreferences",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ProfilePreferences {
    const NAME: &'static str = "ProfilePreferences";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hide_profile_awards = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hide_profile_awards {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.hide_profile_awards {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfilePreferences {
        ProfilePreferences::new()
    }

    fn clear(&mut self) {
        self.hide_profile_awards = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfilePreferences {
        static instance: ProfilePreferences = ProfilePreferences {
            hide_profile_awards: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ProfilePreferences {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfilePreferences").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfilePreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ProfilePreferences {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileCustomization_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileCustomization_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.customizations)
    pub customizations: ::std::vec::Vec<ProfileCustomization>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.slots_available)
    pub slots_available: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.profile_theme)
    pub profile_theme: crate::MessageField<ProfileTheme>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.purchased_customizations)
    pub purchased_customizations: ::std::vec::Vec<cplayer_get_profile_customization_response::PurchasedCustomization>,
    // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.profile_preferences)
    pub profile_preferences: crate::MessageField<ProfilePreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileCustomization_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileCustomization_Response {
    fn default() -> &'a CPlayer_GetProfileCustomization_Response {
        <CPlayer_GetProfileCustomization_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileCustomization_Response {
    pub fn new() -> CPlayer_GetProfileCustomization_Response {
        ::std::default::Default::default()
    }

    // repeated .ProfileCustomization customizations = 1;

    pub fn customizations(&self) -> &[ProfileCustomization] {
        &self.customizations
    }

    pub fn clear_customizations(&mut self) {
        self.customizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_customizations(&mut self, v: ::std::vec::Vec<ProfileCustomization>) {
        self.customizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_customizations(&mut self) -> &mut ::std::vec::Vec<ProfileCustomization> {
        &mut self.customizations
    }

    // Take field
    pub fn take_customizations(&mut self) -> ::std::vec::Vec<ProfileCustomization> {
        ::std::mem::replace(&mut self.customizations, ::std::vec::Vec::new())
    }

    // optional uint32 slots_available = 2;

    pub fn slots_available(&self) -> u32 {
        self.slots_available.unwrap_or(0)
    }

    pub fn clear_slots_available(&mut self) {
        self.slots_available = ::std::option::Option::None;
    }

    pub fn has_slots_available(&self) -> bool {
        self.slots_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slots_available(&mut self, v: u32) {
        self.slots_available = ::std::option::Option::Some(v);
    }

    // optional .ProfileTheme profile_theme = 3;

    pub fn profile_theme(&self) -> &ProfileTheme {
        self.profile_theme.as_ref().unwrap_or_else(|| <ProfileTheme as crate::Message>::default_instance())
    }

    pub fn clear_profile_theme(&mut self) {
        self.profile_theme.clear();
    }

    pub fn has_profile_theme(&self) -> bool {
        self.profile_theme.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_theme(&mut self, v: ProfileTheme) {
        self.profile_theme = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_theme(&mut self) -> &mut ProfileTheme {
        self.profile_theme.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_theme(&mut self) -> ProfileTheme {
        self.profile_theme.take().unwrap_or_else(|| ProfileTheme::new())
    }

    // repeated .CPlayer_GetProfileCustomization_Response.PurchasedCustomization purchased_customizations = 4;

    pub fn purchased_customizations(&self) -> &[cplayer_get_profile_customization_response::PurchasedCustomization] {
        &self.purchased_customizations
    }

    pub fn clear_purchased_customizations(&mut self) {
        self.purchased_customizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_purchased_customizations(&mut self, v: ::std::vec::Vec<cplayer_get_profile_customization_response::PurchasedCustomization>) {
        self.purchased_customizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_purchased_customizations(&mut self) -> &mut ::std::vec::Vec<cplayer_get_profile_customization_response::PurchasedCustomization> {
        &mut self.purchased_customizations
    }

    // Take field
    pub fn take_purchased_customizations(&mut self) -> ::std::vec::Vec<cplayer_get_profile_customization_response::PurchasedCustomization> {
        ::std::mem::replace(&mut self.purchased_customizations, ::std::vec::Vec::new())
    }

    // optional .ProfilePreferences profile_preferences = 5;

    pub fn profile_preferences(&self) -> &ProfilePreferences {
        self.profile_preferences.as_ref().unwrap_or_else(|| <ProfilePreferences as crate::Message>::default_instance())
    }

    pub fn clear_profile_preferences(&mut self) {
        self.profile_preferences.clear();
    }

    pub fn has_profile_preferences(&self) -> bool {
        self.profile_preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_preferences(&mut self, v: ProfilePreferences) {
        self.profile_preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_preferences(&mut self) -> &mut ProfilePreferences {
        self.profile_preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_preferences(&mut self) -> ProfilePreferences {
        self.profile_preferences.take().unwrap_or_else(|| ProfilePreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "customizations",
            |m: &CPlayer_GetProfileCustomization_Response| { &m.customizations },
            |m: &mut CPlayer_GetProfileCustomization_Response| { &mut m.customizations },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "slots_available",
            |m: &CPlayer_GetProfileCustomization_Response| { &m.slots_available },
            |m: &mut CPlayer_GetProfileCustomization_Response| { &mut m.slots_available },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfileTheme>(
            "profile_theme",
            |m: &CPlayer_GetProfileCustomization_Response| { &m.profile_theme },
            |m: &mut CPlayer_GetProfileCustomization_Response| { &mut m.profile_theme },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "purchased_customizations",
            |m: &CPlayer_GetProfileCustomization_Response| { &m.purchased_customizations },
            |m: &mut CPlayer_GetProfileCustomization_Response| { &mut m.purchased_customizations },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfilePreferences>(
            "profile_preferences",
            |m: &CPlayer_GetProfileCustomization_Response| { &m.profile_preferences },
            |m: &mut CPlayer_GetProfileCustomization_Response| { &mut m.profile_preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileCustomization_Response>(
            "CPlayer_GetProfileCustomization_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileCustomization_Response {
    const NAME: &'static str = "CPlayer_GetProfileCustomization_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.customizations.push(is.read_message()?);
                },
                16 => {
                    self.slots_available = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_theme)?;
                },
                34 => {
                    self.purchased_customizations.push(is.read_message()?);
                },
                42 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.customizations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.slots_available {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.profile_theme.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.purchased_customizations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.profile_preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.customizations {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.slots_available {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.profile_theme.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.purchased_customizations {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.profile_preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileCustomization_Response {
        CPlayer_GetProfileCustomization_Response::new()
    }

    fn clear(&mut self) {
        self.customizations.clear();
        self.slots_available = ::std::option::Option::None;
        self.profile_theme.clear();
        self.purchased_customizations.clear();
        self.profile_preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileCustomization_Response {
        static instance: CPlayer_GetProfileCustomization_Response = CPlayer_GetProfileCustomization_Response {
            customizations: ::std::vec::Vec::new(),
            slots_available: ::std::option::Option::None,
            profile_theme: crate::MessageField::none(),
            purchased_customizations: ::std::vec::Vec::new(),
            profile_preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileCustomization_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileCustomization_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileCustomization_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileCustomization_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetProfileCustomization_Response`
pub mod cplayer_get_profile_customization_response {
    // @@protoc_insertion_point(message:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PurchasedCustomization {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.purchaseid)
        pub purchaseid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.customization_type)
        pub customization_type: ::std::option::Option<crate::EnumOrUnknown<super::super::enums::EProfileCustomizationType>>,
        // @@protoc_insertion_point(field:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.level)
        pub level: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetProfileCustomization_Response.PurchasedCustomization.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PurchasedCustomization {
        fn default() -> &'a PurchasedCustomization {
            <PurchasedCustomization as crate::Message>::default_instance()
        }
    }

    impl PurchasedCustomization {
        pub fn new() -> PurchasedCustomization {
            ::std::default::Default::default()
        }

        // optional uint64 purchaseid = 1;

        pub fn purchaseid(&self) -> u64 {
            self.purchaseid.unwrap_or(0)
        }

        pub fn clear_purchaseid(&mut self) {
            self.purchaseid = ::std::option::Option::None;
        }

        pub fn has_purchaseid(&self) -> bool {
            self.purchaseid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_purchaseid(&mut self, v: u64) {
            self.purchaseid = ::std::option::Option::Some(v);
        }

        // optional .EProfileCustomizationType customization_type = 2;

        pub fn customization_type(&self) -> super::super::enums::EProfileCustomizationType {
            match self.customization_type {
                Some(e) => e.enum_value_or(super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid),
                None => super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid,
            }
        }

        pub fn clear_customization_type(&mut self) {
            self.customization_type = ::std::option::Option::None;
        }

        pub fn has_customization_type(&self) -> bool {
            self.customization_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_customization_type(&mut self, v: super::super::enums::EProfileCustomizationType) {
            self.customization_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        // optional uint32 level = 3;

        pub fn level(&self) -> u32 {
            self.level.unwrap_or(0)
        }

        pub fn clear_level(&mut self) {
            self.level = ::std::option::Option::None;
        }

        pub fn has_level(&self) -> bool {
            self.level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_level(&mut self, v: u32) {
            self.level = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "purchaseid",
                |m: &PurchasedCustomization| { &m.purchaseid },
                |m: &mut PurchasedCustomization| { &mut m.purchaseid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "customization_type",
                |m: &PurchasedCustomization| { &m.customization_type },
                |m: &mut PurchasedCustomization| { &mut m.customization_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "level",
                |m: &PurchasedCustomization| { &m.level },
                |m: &mut PurchasedCustomization| { &mut m.level },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PurchasedCustomization>(
                "CPlayer_GetProfileCustomization_Response.PurchasedCustomization",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PurchasedCustomization {
        const NAME: &'static str = "PurchasedCustomization";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.purchaseid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.customization_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    24 => {
                        self.level = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.purchaseid {
                my_size += crate::rt::uint64_size(1, v);
            }
            if let Some(v) = self.customization_type {
                my_size += crate::rt::int32_size(2, v.value());
            }
            if let Some(v) = self.level {
                my_size += crate::rt::uint32_size(3, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.purchaseid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.customization_type {
                os.write_enum(2, crate::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.level {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PurchasedCustomization {
            PurchasedCustomization::new()
        }

        fn clear(&mut self) {
            self.purchaseid = ::std::option::Option::None;
            self.customization_type = ::std::option::Option::None;
            self.level = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PurchasedCustomization {
            static instance: PurchasedCustomization = PurchasedCustomization {
                purchaseid: ::std::option::Option::None,
                customization_type: ::std::option::Option::None,
                level: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PurchasedCustomization {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetProfileCustomization_Response.PurchasedCustomization").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PurchasedCustomization {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PurchasedCustomization {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetPurchasedProfileCustomizations_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPurchasedProfileCustomizations_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPurchasedProfileCustomizations_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedProfileCustomizations_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPurchasedProfileCustomizations_Request {
    fn default() -> &'a CPlayer_GetPurchasedProfileCustomizations_Request {
        <CPlayer_GetPurchasedProfileCustomizations_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPurchasedProfileCustomizations_Request {
    pub fn new() -> CPlayer_GetPurchasedProfileCustomizations_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetPurchasedProfileCustomizations_Request| { &m.steamid },
            |m: &mut CPlayer_GetPurchasedProfileCustomizations_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPurchasedProfileCustomizations_Request>(
            "CPlayer_GetPurchasedProfileCustomizations_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPurchasedProfileCustomizations_Request {
    const NAME: &'static str = "CPlayer_GetPurchasedProfileCustomizations_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPurchasedProfileCustomizations_Request {
        CPlayer_GetPurchasedProfileCustomizations_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPurchasedProfileCustomizations_Request {
        static instance: CPlayer_GetPurchasedProfileCustomizations_Request = CPlayer_GetPurchasedProfileCustomizations_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPurchasedProfileCustomizations_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedProfileCustomizations_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPurchasedProfileCustomizations_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPurchasedProfileCustomizations_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPurchasedProfileCustomizations_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPurchasedProfileCustomizations_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPurchasedProfileCustomizations_Response.purchased_customizations)
    pub purchased_customizations: ::std::vec::Vec<cplayer_get_purchased_profile_customizations_response::PurchasedCustomization>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedProfileCustomizations_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPurchasedProfileCustomizations_Response {
    fn default() -> &'a CPlayer_GetPurchasedProfileCustomizations_Response {
        <CPlayer_GetPurchasedProfileCustomizations_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPurchasedProfileCustomizations_Response {
    pub fn new() -> CPlayer_GetPurchasedProfileCustomizations_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;

    pub fn purchased_customizations(&self) -> &[cplayer_get_purchased_profile_customizations_response::PurchasedCustomization] {
        &self.purchased_customizations
    }

    pub fn clear_purchased_customizations(&mut self) {
        self.purchased_customizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_purchased_customizations(&mut self, v: ::std::vec::Vec<cplayer_get_purchased_profile_customizations_response::PurchasedCustomization>) {
        self.purchased_customizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_purchased_customizations(&mut self) -> &mut ::std::vec::Vec<cplayer_get_purchased_profile_customizations_response::PurchasedCustomization> {
        &mut self.purchased_customizations
    }

    // Take field
    pub fn take_purchased_customizations(&mut self) -> ::std::vec::Vec<cplayer_get_purchased_profile_customizations_response::PurchasedCustomization> {
        ::std::mem::replace(&mut self.purchased_customizations, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "purchased_customizations",
            |m: &CPlayer_GetPurchasedProfileCustomizations_Response| { &m.purchased_customizations },
            |m: &mut CPlayer_GetPurchasedProfileCustomizations_Response| { &mut m.purchased_customizations },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPurchasedProfileCustomizations_Response>(
            "CPlayer_GetPurchasedProfileCustomizations_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPurchasedProfileCustomizations_Response {
    const NAME: &'static str = "CPlayer_GetPurchasedProfileCustomizations_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.purchased_customizations.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.purchased_customizations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.purchased_customizations {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPurchasedProfileCustomizations_Response {
        CPlayer_GetPurchasedProfileCustomizations_Response::new()
    }

    fn clear(&mut self) {
        self.purchased_customizations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPurchasedProfileCustomizations_Response {
        static instance: CPlayer_GetPurchasedProfileCustomizations_Response = CPlayer_GetPurchasedProfileCustomizations_Response {
            purchased_customizations: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPurchasedProfileCustomizations_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedProfileCustomizations_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPurchasedProfileCustomizations_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPurchasedProfileCustomizations_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetPurchasedProfileCustomizations_Response`
pub mod cplayer_get_purchased_profile_customizations_response {
    // @@protoc_insertion_point(message:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PurchasedCustomization {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.purchaseid)
        pub purchaseid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.customization_type)
        pub customization_type: ::std::option::Option<crate::EnumOrUnknown<super::super::enums::EProfileCustomizationType>>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PurchasedCustomization {
        fn default() -> &'a PurchasedCustomization {
            <PurchasedCustomization as crate::Message>::default_instance()
        }
    }

    impl PurchasedCustomization {
        pub fn new() -> PurchasedCustomization {
            ::std::default::Default::default()
        }

        // optional uint64 purchaseid = 1;

        pub fn purchaseid(&self) -> u64 {
            self.purchaseid.unwrap_or(0)
        }

        pub fn clear_purchaseid(&mut self) {
            self.purchaseid = ::std::option::Option::None;
        }

        pub fn has_purchaseid(&self) -> bool {
            self.purchaseid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_purchaseid(&mut self, v: u64) {
            self.purchaseid = ::std::option::Option::Some(v);
        }

        // optional .EProfileCustomizationType customization_type = 2;

        pub fn customization_type(&self) -> super::super::enums::EProfileCustomizationType {
            match self.customization_type {
                Some(e) => e.enum_value_or(super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid),
                None => super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid,
            }
        }

        pub fn clear_customization_type(&mut self) {
            self.customization_type = ::std::option::Option::None;
        }

        pub fn has_customization_type(&self) -> bool {
            self.customization_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_customization_type(&mut self, v: super::super::enums::EProfileCustomizationType) {
            self.customization_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "purchaseid",
                |m: &PurchasedCustomization| { &m.purchaseid },
                |m: &mut PurchasedCustomization| { &mut m.purchaseid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "customization_type",
                |m: &PurchasedCustomization| { &m.customization_type },
                |m: &mut PurchasedCustomization| { &mut m.customization_type },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PurchasedCustomization>(
                "CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PurchasedCustomization {
        const NAME: &'static str = "PurchasedCustomization";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.purchaseid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.customization_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.purchaseid {
                my_size += crate::rt::uint64_size(1, v);
            }
            if let Some(v) = self.customization_type {
                my_size += crate::rt::int32_size(2, v.value());
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.purchaseid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.customization_type {
                os.write_enum(2, crate::EnumOrUnknown::value(&v))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PurchasedCustomization {
            PurchasedCustomization::new()
        }

        fn clear(&mut self) {
            self.purchaseid = ::std::option::Option::None;
            self.customization_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PurchasedCustomization {
            static instance: PurchasedCustomization = PurchasedCustomization {
                purchaseid: ::std::option::Option::None,
                customization_type: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PurchasedCustomization {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PurchasedCustomization {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PurchasedCustomization {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    fn default() -> &'a CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
        <CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    pub fn new() -> CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request| { &m.steamid },
            |m: &mut CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request>(
            "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    const NAME: &'static str = "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
        CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
        static instance: CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request = CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.purchased_customizations)
    pub purchased_customizations: ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::PurchasedCustomization>,
    // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.upgraded_customizations)
    pub upgraded_customizations: ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::UpgradedCustomization>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    fn default() -> &'a CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
        <CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    pub fn new() -> CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;

    pub fn purchased_customizations(&self) -> &[cplayer_get_purchased_and_upgraded_profile_customizations_response::PurchasedCustomization] {
        &self.purchased_customizations
    }

    pub fn clear_purchased_customizations(&mut self) {
        self.purchased_customizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_purchased_customizations(&mut self, v: ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::PurchasedCustomization>) {
        self.purchased_customizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_purchased_customizations(&mut self) -> &mut ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::PurchasedCustomization> {
        &mut self.purchased_customizations
    }

    // Take field
    pub fn take_purchased_customizations(&mut self) -> ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::PurchasedCustomization> {
        ::std::mem::replace(&mut self.purchased_customizations, ::std::vec::Vec::new())
    }

    // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization upgraded_customizations = 2;

    pub fn upgraded_customizations(&self) -> &[cplayer_get_purchased_and_upgraded_profile_customizations_response::UpgradedCustomization] {
        &self.upgraded_customizations
    }

    pub fn clear_upgraded_customizations(&mut self) {
        self.upgraded_customizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_upgraded_customizations(&mut self, v: ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::UpgradedCustomization>) {
        self.upgraded_customizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upgraded_customizations(&mut self) -> &mut ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::UpgradedCustomization> {
        &mut self.upgraded_customizations
    }

    // Take field
    pub fn take_upgraded_customizations(&mut self) -> ::std::vec::Vec<cplayer_get_purchased_and_upgraded_profile_customizations_response::UpgradedCustomization> {
        ::std::mem::replace(&mut self.upgraded_customizations, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "purchased_customizations",
            |m: &CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response| { &m.purchased_customizations },
            |m: &mut CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response| { &mut m.purchased_customizations },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "upgraded_customizations",
            |m: &CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response| { &m.upgraded_customizations },
            |m: &mut CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response| { &mut m.upgraded_customizations },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response>(
            "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    const NAME: &'static str = "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.purchased_customizations.push(is.read_message()?);
                },
                18 => {
                    self.upgraded_customizations.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.purchased_customizations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.upgraded_customizations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.purchased_customizations {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.upgraded_customizations {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
        CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::new()
    }

    fn clear(&mut self) {
        self.purchased_customizations.clear();
        self.upgraded_customizations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
        static instance: CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response = CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
            purchased_customizations: ::std::vec::Vec::new(),
            upgraded_customizations: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response`
pub mod cplayer_get_purchased_and_upgraded_profile_customizations_response {
    // @@protoc_insertion_point(message:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PurchasedCustomization {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.customization_type)
        pub customization_type: ::std::option::Option<crate::EnumOrUnknown<super::super::enums::EProfileCustomizationType>>,
        // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.count)
        pub count: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PurchasedCustomization {
        fn default() -> &'a PurchasedCustomization {
            <PurchasedCustomization as crate::Message>::default_instance()
        }
    }

    impl PurchasedCustomization {
        pub fn new() -> PurchasedCustomization {
            ::std::default::Default::default()
        }

        // optional .EProfileCustomizationType customization_type = 1;

        pub fn customization_type(&self) -> super::super::enums::EProfileCustomizationType {
            match self.customization_type {
                Some(e) => e.enum_value_or(super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid),
                None => super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid,
            }
        }

        pub fn clear_customization_type(&mut self) {
            self.customization_type = ::std::option::Option::None;
        }

        pub fn has_customization_type(&self) -> bool {
            self.customization_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_customization_type(&mut self, v: super::super::enums::EProfileCustomizationType) {
            self.customization_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        // optional uint32 count = 2;

        pub fn count(&self) -> u32 {
            self.count.unwrap_or(0)
        }

        pub fn clear_count(&mut self) {
            self.count = ::std::option::Option::None;
        }

        pub fn has_count(&self) -> bool {
            self.count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_count(&mut self, v: u32) {
            self.count = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "customization_type",
                |m: &PurchasedCustomization| { &m.customization_type },
                |m: &mut PurchasedCustomization| { &mut m.customization_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "count",
                |m: &PurchasedCustomization| { &m.count },
                |m: &mut PurchasedCustomization| { &mut m.count },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PurchasedCustomization>(
                "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PurchasedCustomization {
        const NAME: &'static str = "PurchasedCustomization";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.customization_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    16 => {
                        self.count = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.customization_type {
                my_size += crate::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.count {
                my_size += crate::rt::uint32_size(2, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.customization_type {
                os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.count {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PurchasedCustomization {
            PurchasedCustomization::new()
        }

        fn clear(&mut self) {
            self.customization_type = ::std::option::Option::None;
            self.count = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PurchasedCustomization {
            static instance: PurchasedCustomization = PurchasedCustomization {
                customization_type: ::std::option::Option::None,
                count: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PurchasedCustomization {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PurchasedCustomization {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PurchasedCustomization {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct UpgradedCustomization {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.customization_type)
        pub customization_type: ::std::option::Option<crate::EnumOrUnknown<super::super::enums::EProfileCustomizationType>>,
        // @@protoc_insertion_point(field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.level)
        pub level: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a UpgradedCustomization {
        fn default() -> &'a UpgradedCustomization {
            <UpgradedCustomization as crate::Message>::default_instance()
        }
    }

    impl UpgradedCustomization {
        pub fn new() -> UpgradedCustomization {
            ::std::default::Default::default()
        }

        // optional .EProfileCustomizationType customization_type = 1;

        pub fn customization_type(&self) -> super::super::enums::EProfileCustomizationType {
            match self.customization_type {
                Some(e) => e.enum_value_or(super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid),
                None => super::super::enums::EProfileCustomizationType::k_EProfileCustomizationTypeInvalid,
            }
        }

        pub fn clear_customization_type(&mut self) {
            self.customization_type = ::std::option::Option::None;
        }

        pub fn has_customization_type(&self) -> bool {
            self.customization_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_customization_type(&mut self, v: super::super::enums::EProfileCustomizationType) {
            self.customization_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        // optional uint32 level = 2;

        pub fn level(&self) -> u32 {
            self.level.unwrap_or(0)
        }

        pub fn clear_level(&mut self) {
            self.level = ::std::option::Option::None;
        }

        pub fn has_level(&self) -> bool {
            self.level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_level(&mut self, v: u32) {
            self.level = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "customization_type",
                |m: &UpgradedCustomization| { &m.customization_type },
                |m: &mut UpgradedCustomization| { &mut m.customization_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "level",
                |m: &UpgradedCustomization| { &m.level },
                |m: &mut UpgradedCustomization| { &mut m.level },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<UpgradedCustomization>(
                "CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for UpgradedCustomization {
        const NAME: &'static str = "UpgradedCustomization";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.customization_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    16 => {
                        self.level = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.customization_type {
                my_size += crate::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.level {
                my_size += crate::rt::uint32_size(2, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.customization_type {
                os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.level {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> UpgradedCustomization {
            UpgradedCustomization::new()
        }

        fn clear(&mut self) {
            self.customization_type = ::std::option::Option::None;
            self.level = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static UpgradedCustomization {
            static instance: UpgradedCustomization = UpgradedCustomization {
                customization_type: ::std::option::Option::None,
                level: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for UpgradedCustomization {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for UpgradedCustomization {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for UpgradedCustomization {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetProfileThemesAvailable_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileThemesAvailable_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileThemesAvailable_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileThemesAvailable_Request {
    fn default() -> &'a CPlayer_GetProfileThemesAvailable_Request {
        <CPlayer_GetProfileThemesAvailable_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileThemesAvailable_Request {
    pub fn new() -> CPlayer_GetProfileThemesAvailable_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileThemesAvailable_Request>(
            "CPlayer_GetProfileThemesAvailable_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileThemesAvailable_Request {
    const NAME: &'static str = "CPlayer_GetProfileThemesAvailable_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileThemesAvailable_Request {
        CPlayer_GetProfileThemesAvailable_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileThemesAvailable_Request {
        static instance: CPlayer_GetProfileThemesAvailable_Request = CPlayer_GetProfileThemesAvailable_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileThemesAvailable_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileThemesAvailable_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileThemesAvailable_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileThemesAvailable_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetProfileThemesAvailable_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetProfileThemesAvailable_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetProfileThemesAvailable_Response.profile_themes)
    pub profile_themes: ::std::vec::Vec<ProfileTheme>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetProfileThemesAvailable_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetProfileThemesAvailable_Response {
    fn default() -> &'a CPlayer_GetProfileThemesAvailable_Response {
        <CPlayer_GetProfileThemesAvailable_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetProfileThemesAvailable_Response {
    pub fn new() -> CPlayer_GetProfileThemesAvailable_Response {
        ::std::default::Default::default()
    }

    // repeated .ProfileTheme profile_themes = 1;

    pub fn profile_themes(&self) -> &[ProfileTheme] {
        &self.profile_themes
    }

    pub fn clear_profile_themes(&mut self) {
        self.profile_themes.clear();
    }

    // Param is passed by value, moved
    pub fn set_profile_themes(&mut self, v: ::std::vec::Vec<ProfileTheme>) {
        self.profile_themes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_profile_themes(&mut self) -> &mut ::std::vec::Vec<ProfileTheme> {
        &mut self.profile_themes
    }

    // Take field
    pub fn take_profile_themes(&mut self) -> ::std::vec::Vec<ProfileTheme> {
        ::std::mem::replace(&mut self.profile_themes, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "profile_themes",
            |m: &CPlayer_GetProfileThemesAvailable_Response| { &m.profile_themes },
            |m: &mut CPlayer_GetProfileThemesAvailable_Response| { &mut m.profile_themes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetProfileThemesAvailable_Response>(
            "CPlayer_GetProfileThemesAvailable_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetProfileThemesAvailable_Response {
    const NAME: &'static str = "CPlayer_GetProfileThemesAvailable_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.profile_themes.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.profile_themes {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.profile_themes {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetProfileThemesAvailable_Response {
        CPlayer_GetProfileThemesAvailable_Response::new()
    }

    fn clear(&mut self) {
        self.profile_themes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetProfileThemesAvailable_Response {
        static instance: CPlayer_GetProfileThemesAvailable_Response = CPlayer_GetProfileThemesAvailable_Response {
            profile_themes: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetProfileThemesAvailable_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetProfileThemesAvailable_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetProfileThemesAvailable_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetProfileThemesAvailable_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetProfileTheme_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetProfileTheme_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetProfileTheme_Request.theme_id)
    pub theme_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetProfileTheme_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetProfileTheme_Request {
    fn default() -> &'a CPlayer_SetProfileTheme_Request {
        <CPlayer_SetProfileTheme_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetProfileTheme_Request {
    pub fn new() -> CPlayer_SetProfileTheme_Request {
        ::std::default::Default::default()
    }

    // optional string theme_id = 1;

    pub fn theme_id(&self) -> &str {
        match self.theme_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_theme_id(&mut self) {
        self.theme_id = ::std::option::Option::None;
    }

    pub fn has_theme_id(&self) -> bool {
        self.theme_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_theme_id(&mut self, v: ::std::string::String) {
        self.theme_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_theme_id(&mut self) -> &mut ::std::string::String {
        if self.theme_id.is_none() {
            self.theme_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.theme_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_theme_id(&mut self) -> ::std::string::String {
        self.theme_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "theme_id",
            |m: &CPlayer_SetProfileTheme_Request| { &m.theme_id },
            |m: &mut CPlayer_SetProfileTheme_Request| { &mut m.theme_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetProfileTheme_Request>(
            "CPlayer_SetProfileTheme_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetProfileTheme_Request {
    const NAME: &'static str = "CPlayer_SetProfileTheme_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.theme_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.theme_id.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.theme_id.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetProfileTheme_Request {
        CPlayer_SetProfileTheme_Request::new()
    }

    fn clear(&mut self) {
        self.theme_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetProfileTheme_Request {
        static instance: CPlayer_SetProfileTheme_Request = CPlayer_SetProfileTheme_Request {
            theme_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetProfileTheme_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetProfileTheme_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetProfileTheme_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetProfileTheme_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetProfileTheme_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetProfileTheme_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetProfileTheme_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetProfileTheme_Response {
    fn default() -> &'a CPlayer_SetProfileTheme_Response {
        <CPlayer_SetProfileTheme_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetProfileTheme_Response {
    pub fn new() -> CPlayer_SetProfileTheme_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetProfileTheme_Response>(
            "CPlayer_SetProfileTheme_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetProfileTheme_Response {
    const NAME: &'static str = "CPlayer_SetProfileTheme_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetProfileTheme_Response {
        CPlayer_SetProfileTheme_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetProfileTheme_Response {
        static instance: CPlayer_SetProfileTheme_Response = CPlayer_SetProfileTheme_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetProfileTheme_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetProfileTheme_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetProfileTheme_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetProfileTheme_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetProfilePreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetProfilePreferences_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetProfilePreferences_Request.profile_preferences)
    pub profile_preferences: crate::MessageField<ProfilePreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetProfilePreferences_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetProfilePreferences_Request {
    fn default() -> &'a CPlayer_SetProfilePreferences_Request {
        <CPlayer_SetProfilePreferences_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetProfilePreferences_Request {
    pub fn new() -> CPlayer_SetProfilePreferences_Request {
        ::std::default::Default::default()
    }

    // optional .ProfilePreferences profile_preferences = 1;

    pub fn profile_preferences(&self) -> &ProfilePreferences {
        self.profile_preferences.as_ref().unwrap_or_else(|| <ProfilePreferences as crate::Message>::default_instance())
    }

    pub fn clear_profile_preferences(&mut self) {
        self.profile_preferences.clear();
    }

    pub fn has_profile_preferences(&self) -> bool {
        self.profile_preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_profile_preferences(&mut self, v: ProfilePreferences) {
        self.profile_preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_profile_preferences(&mut self) -> &mut ProfilePreferences {
        self.profile_preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_profile_preferences(&mut self) -> ProfilePreferences {
        self.profile_preferences.take().unwrap_or_else(|| ProfilePreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ProfilePreferences>(
            "profile_preferences",
            |m: &CPlayer_SetProfilePreferences_Request| { &m.profile_preferences },
            |m: &mut CPlayer_SetProfilePreferences_Request| { &mut m.profile_preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetProfilePreferences_Request>(
            "CPlayer_SetProfilePreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetProfilePreferences_Request {
    const NAME: &'static str = "CPlayer_SetProfilePreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.profile_preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.profile_preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.profile_preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetProfilePreferences_Request {
        CPlayer_SetProfilePreferences_Request::new()
    }

    fn clear(&mut self) {
        self.profile_preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetProfilePreferences_Request {
        static instance: CPlayer_SetProfilePreferences_Request = CPlayer_SetProfilePreferences_Request {
            profile_preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetProfilePreferences_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetProfilePreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetProfilePreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetProfilePreferences_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetProfilePreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetProfilePreferences_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetProfilePreferences_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetProfilePreferences_Response {
    fn default() -> &'a CPlayer_SetProfilePreferences_Response {
        <CPlayer_SetProfilePreferences_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetProfilePreferences_Response {
    pub fn new() -> CPlayer_SetProfilePreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetProfilePreferences_Response>(
            "CPlayer_SetProfilePreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetProfilePreferences_Response {
    const NAME: &'static str = "CPlayer_SetProfilePreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetProfilePreferences_Response {
        CPlayer_SetProfilePreferences_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetProfilePreferences_Response {
        static instance: CPlayer_SetProfilePreferences_Response = CPlayer_SetProfilePreferences_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetProfilePreferences_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetProfilePreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetProfilePreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetProfilePreferences_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_PostStatusToFriends_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_PostStatusToFriends_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_PostStatusToFriends_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_PostStatusToFriends_Request.status_text)
    pub status_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_PostStatusToFriends_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_PostStatusToFriends_Request {
    fn default() -> &'a CPlayer_PostStatusToFriends_Request {
        <CPlayer_PostStatusToFriends_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_PostStatusToFriends_Request {
    pub fn new() -> CPlayer_PostStatusToFriends_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string status_text = 2;

    pub fn status_text(&self) -> &str {
        match self.status_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status_text(&mut self) {
        self.status_text = ::std::option::Option::None;
    }

    pub fn has_status_text(&self) -> bool {
        self.status_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_text(&mut self, v: ::std::string::String) {
        self.status_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_text(&mut self) -> &mut ::std::string::String {
        if self.status_text.is_none() {
            self.status_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_status_text(&mut self) -> ::std::string::String {
        self.status_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_PostStatusToFriends_Request| { &m.appid },
            |m: &mut CPlayer_PostStatusToFriends_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_text",
            |m: &CPlayer_PostStatusToFriends_Request| { &m.status_text },
            |m: &mut CPlayer_PostStatusToFriends_Request| { &mut m.status_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_PostStatusToFriends_Request>(
            "CPlayer_PostStatusToFriends_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_PostStatusToFriends_Request {
    const NAME: &'static str = "CPlayer_PostStatusToFriends_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.status_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.status_text.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.status_text.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_PostStatusToFriends_Request {
        CPlayer_PostStatusToFriends_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.status_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_PostStatusToFriends_Request {
        static instance: CPlayer_PostStatusToFriends_Request = CPlayer_PostStatusToFriends_Request {
            appid: ::std::option::Option::None,
            status_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_PostStatusToFriends_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_PostStatusToFriends_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_PostStatusToFriends_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_PostStatusToFriends_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_PostStatusToFriends_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_PostStatusToFriends_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_PostStatusToFriends_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_PostStatusToFriends_Response {
    fn default() -> &'a CPlayer_PostStatusToFriends_Response {
        <CPlayer_PostStatusToFriends_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_PostStatusToFriends_Response {
    pub fn new() -> CPlayer_PostStatusToFriends_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_PostStatusToFriends_Response>(
            "CPlayer_PostStatusToFriends_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_PostStatusToFriends_Response {
    const NAME: &'static str = "CPlayer_PostStatusToFriends_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_PostStatusToFriends_Response {
        CPlayer_PostStatusToFriends_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_PostStatusToFriends_Response {
        static instance: CPlayer_PostStatusToFriends_Response = CPlayer_PostStatusToFriends_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_PostStatusToFriends_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_PostStatusToFriends_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_PostStatusToFriends_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_PostStatusToFriends_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPostedStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPostedStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Request.postid)
    pub postid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPostedStatus_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPostedStatus_Request {
    fn default() -> &'a CPlayer_GetPostedStatus_Request {
        <CPlayer_GetPostedStatus_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPostedStatus_Request {
    pub fn new() -> CPlayer_GetPostedStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 postid = 2;

    pub fn postid(&self) -> u64 {
        self.postid.unwrap_or(0)
    }

    pub fn clear_postid(&mut self) {
        self.postid = ::std::option::Option::None;
    }

    pub fn has_postid(&self) -> bool {
        self.postid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_postid(&mut self, v: u64) {
        self.postid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_GetPostedStatus_Request| { &m.steamid },
            |m: &mut CPlayer_GetPostedStatus_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "postid",
            |m: &CPlayer_GetPostedStatus_Request| { &m.postid },
            |m: &mut CPlayer_GetPostedStatus_Request| { &mut m.postid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPostedStatus_Request>(
            "CPlayer_GetPostedStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPostedStatus_Request {
    const NAME: &'static str = "CPlayer_GetPostedStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.postid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.postid {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.postid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPostedStatus_Request {
        CPlayer_GetPostedStatus_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.postid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPostedStatus_Request {
        static instance: CPlayer_GetPostedStatus_Request = CPlayer_GetPostedStatus_Request {
            steamid: ::std::option::Option::None,
            postid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPostedStatus_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPostedStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPostedStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPostedStatus_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPostedStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPostedStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Response.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Response.postid)
    pub postid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Response.status_text)
    pub status_text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Response.deleted)
    pub deleted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetPostedStatus_Response.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPostedStatus_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPostedStatus_Response {
    fn default() -> &'a CPlayer_GetPostedStatus_Response {
        <CPlayer_GetPostedStatus_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPostedStatus_Response {
    pub fn new() -> CPlayer_GetPostedStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional uint64 postid = 2;

    pub fn postid(&self) -> u64 {
        self.postid.unwrap_or(0)
    }

    pub fn clear_postid(&mut self) {
        self.postid = ::std::option::Option::None;
    }

    pub fn has_postid(&self) -> bool {
        self.postid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_postid(&mut self, v: u64) {
        self.postid = ::std::option::Option::Some(v);
    }

    // optional string status_text = 3;

    pub fn status_text(&self) -> &str {
        match self.status_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_status_text(&mut self) {
        self.status_text = ::std::option::Option::None;
    }

    pub fn has_status_text(&self) -> bool {
        self.status_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_text(&mut self, v: ::std::string::String) {
        self.status_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_text(&mut self) -> &mut ::std::string::String {
        if self.status_text.is_none() {
            self.status_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.status_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_status_text(&mut self) -> ::std::string::String {
        self.status_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool deleted = 4;

    pub fn deleted(&self) -> bool {
        self.deleted.unwrap_or(false)
    }

    pub fn clear_deleted(&mut self) {
        self.deleted = ::std::option::Option::None;
    }

    pub fn has_deleted(&self) -> bool {
        self.deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 5;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CPlayer_GetPostedStatus_Response| { &m.accountid },
            |m: &mut CPlayer_GetPostedStatus_Response| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "postid",
            |m: &CPlayer_GetPostedStatus_Response| { &m.postid },
            |m: &mut CPlayer_GetPostedStatus_Response| { &mut m.postid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_text",
            |m: &CPlayer_GetPostedStatus_Response| { &m.status_text },
            |m: &mut CPlayer_GetPostedStatus_Response| { &mut m.status_text },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "deleted",
            |m: &CPlayer_GetPostedStatus_Response| { &m.deleted },
            |m: &mut CPlayer_GetPostedStatus_Response| { &mut m.deleted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetPostedStatus_Response| { &m.appid },
            |m: &mut CPlayer_GetPostedStatus_Response| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPostedStatus_Response>(
            "CPlayer_GetPostedStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPostedStatus_Response {
    const NAME: &'static str = "CPlayer_GetPostedStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.postid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.status_text = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.deleted = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.postid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.status_text.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.deleted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.postid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.status_text.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.deleted {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPostedStatus_Response {
        CPlayer_GetPostedStatus_Response::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.postid = ::std::option::Option::None;
        self.status_text = ::std::option::Option::None;
        self.deleted = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPostedStatus_Response {
        static instance: CPlayer_GetPostedStatus_Response = CPlayer_GetPostedStatus_Response {
            accountid: ::std::option::Option::None,
            postid: ::std::option::Option::None,
            status_text: ::std::option::Option::None,
            deleted: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPostedStatus_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPostedStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPostedStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPostedStatus_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_DeletePostedStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_DeletePostedStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_DeletePostedStatus_Request.postid)
    pub postid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_DeletePostedStatus_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_DeletePostedStatus_Request {
    fn default() -> &'a CPlayer_DeletePostedStatus_Request {
        <CPlayer_DeletePostedStatus_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_DeletePostedStatus_Request {
    pub fn new() -> CPlayer_DeletePostedStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint64 postid = 1;

    pub fn postid(&self) -> u64 {
        self.postid.unwrap_or(0)
    }

    pub fn clear_postid(&mut self) {
        self.postid = ::std::option::Option::None;
    }

    pub fn has_postid(&self) -> bool {
        self.postid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_postid(&mut self, v: u64) {
        self.postid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "postid",
            |m: &CPlayer_DeletePostedStatus_Request| { &m.postid },
            |m: &mut CPlayer_DeletePostedStatus_Request| { &mut m.postid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_DeletePostedStatus_Request>(
            "CPlayer_DeletePostedStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_DeletePostedStatus_Request {
    const NAME: &'static str = "CPlayer_DeletePostedStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.postid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.postid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.postid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_DeletePostedStatus_Request {
        CPlayer_DeletePostedStatus_Request::new()
    }

    fn clear(&mut self) {
        self.postid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_DeletePostedStatus_Request {
        static instance: CPlayer_DeletePostedStatus_Request = CPlayer_DeletePostedStatus_Request {
            postid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_DeletePostedStatus_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_DeletePostedStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_DeletePostedStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_DeletePostedStatus_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_DeletePostedStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_DeletePostedStatus_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_DeletePostedStatus_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_DeletePostedStatus_Response {
    fn default() -> &'a CPlayer_DeletePostedStatus_Response {
        <CPlayer_DeletePostedStatus_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_DeletePostedStatus_Response {
    pub fn new() -> CPlayer_DeletePostedStatus_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_DeletePostedStatus_Response>(
            "CPlayer_DeletePostedStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_DeletePostedStatus_Response {
    const NAME: &'static str = "CPlayer_DeletePostedStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_DeletePostedStatus_Response {
        CPlayer_DeletePostedStatus_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_DeletePostedStatus_Response {
        static instance: CPlayer_DeletePostedStatus_Response = CPlayer_DeletePostedStatus_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_DeletePostedStatus_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_DeletePostedStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_DeletePostedStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_DeletePostedStatus_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetLastPlayedTimes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetLastPlayedTimes_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Request.min_last_played)
    pub min_last_played: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetLastPlayedTimes_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetLastPlayedTimes_Request {
    fn default() -> &'a CPlayer_GetLastPlayedTimes_Request {
        <CPlayer_GetLastPlayedTimes_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetLastPlayedTimes_Request {
    pub fn new() -> CPlayer_GetLastPlayedTimes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 min_last_played = 1;

    pub fn min_last_played(&self) -> u32 {
        self.min_last_played.unwrap_or(0)
    }

    pub fn clear_min_last_played(&mut self) {
        self.min_last_played = ::std::option::Option::None;
    }

    pub fn has_min_last_played(&self) -> bool {
        self.min_last_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_last_played(&mut self, v: u32) {
        self.min_last_played = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_last_played",
            |m: &CPlayer_GetLastPlayedTimes_Request| { &m.min_last_played },
            |m: &mut CPlayer_GetLastPlayedTimes_Request| { &mut m.min_last_played },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetLastPlayedTimes_Request>(
            "CPlayer_GetLastPlayedTimes_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetLastPlayedTimes_Request {
    const NAME: &'static str = "CPlayer_GetLastPlayedTimes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.min_last_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.min_last_played {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.min_last_played {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetLastPlayedTimes_Request {
        CPlayer_GetLastPlayedTimes_Request::new()
    }

    fn clear(&mut self) {
        self.min_last_played = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetLastPlayedTimes_Request {
        static instance: CPlayer_GetLastPlayedTimes_Request = CPlayer_GetLastPlayedTimes_Request {
            min_last_played: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetLastPlayedTimes_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetLastPlayedTimes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetLastPlayedTimes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetLastPlayedTimes_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetLastPlayedTimes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetLastPlayedTimes_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.games)
    pub games: ::std::vec::Vec<cplayer_get_last_played_times_response::Game>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetLastPlayedTimes_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetLastPlayedTimes_Response {
    fn default() -> &'a CPlayer_GetLastPlayedTimes_Response {
        <CPlayer_GetLastPlayedTimes_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetLastPlayedTimes_Response {
    pub fn new() -> CPlayer_GetLastPlayedTimes_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;

    pub fn games(&self) -> &[cplayer_get_last_played_times_response::Game] {
        &self.games
    }

    pub fn clear_games(&mut self) {
        self.games.clear();
    }

    // Param is passed by value, moved
    pub fn set_games(&mut self, v: ::std::vec::Vec<cplayer_get_last_played_times_response::Game>) {
        self.games = v;
    }

    // Mutable pointer to the field.
    pub fn mut_games(&mut self) -> &mut ::std::vec::Vec<cplayer_get_last_played_times_response::Game> {
        &mut self.games
    }

    // Take field
    pub fn take_games(&mut self) -> ::std::vec::Vec<cplayer_get_last_played_times_response::Game> {
        ::std::mem::replace(&mut self.games, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "games",
            |m: &CPlayer_GetLastPlayedTimes_Response| { &m.games },
            |m: &mut CPlayer_GetLastPlayedTimes_Response| { &mut m.games },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetLastPlayedTimes_Response>(
            "CPlayer_GetLastPlayedTimes_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetLastPlayedTimes_Response {
    const NAME: &'static str = "CPlayer_GetLastPlayedTimes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.games.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.games {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetLastPlayedTimes_Response {
        CPlayer_GetLastPlayedTimes_Response::new()
    }

    fn clear(&mut self) {
        self.games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetLastPlayedTimes_Response {
        static instance: CPlayer_GetLastPlayedTimes_Response = CPlayer_GetLastPlayedTimes_Response {
            games: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetLastPlayedTimes_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetLastPlayedTimes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetLastPlayedTimes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetLastPlayedTimes_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetLastPlayedTimes_Response`
pub mod cplayer_get_last_played_times_response {
    // @@protoc_insertion_point(message:CPlayer_GetLastPlayedTimes_Response.Game)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Game {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.appid)
        pub appid: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
        pub last_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
        pub playtime_2weeks: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
        pub playtime_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.first_playtime)
        pub first_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_windows_forever)
        pub playtime_windows_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_mac_forever)
        pub playtime_mac_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_linux_forever)
        pub playtime_linux_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.first_windows_playtime)
        pub first_windows_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.first_mac_playtime)
        pub first_mac_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.first_linux_playtime)
        pub first_linux_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.last_windows_playtime)
        pub last_windows_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.last_mac_playtime)
        pub last_mac_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.last_linux_playtime)
        pub last_linux_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_disconnected)
        pub playtime_disconnected: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetLastPlayedTimes_Response.Game.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Game {
        fn default() -> &'a Game {
            <Game as crate::Message>::default_instance()
        }
    }

    impl Game {
        pub fn new() -> Game {
            ::std::default::Default::default()
        }

        // optional int32 appid = 1;

        pub fn appid(&self) -> i32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: i32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 last_playtime = 2;

        pub fn last_playtime(&self) -> u32 {
            self.last_playtime.unwrap_or(0)
        }

        pub fn clear_last_playtime(&mut self) {
            self.last_playtime = ::std::option::Option::None;
        }

        pub fn has_last_playtime(&self) -> bool {
            self.last_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_playtime(&mut self, v: u32) {
            self.last_playtime = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_2weeks = 3;

        pub fn playtime_2weeks(&self) -> i32 {
            self.playtime_2weeks.unwrap_or(0)
        }

        pub fn clear_playtime_2weeks(&mut self) {
            self.playtime_2weeks = ::std::option::Option::None;
        }

        pub fn has_playtime_2weeks(&self) -> bool {
            self.playtime_2weeks.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_2weeks(&mut self, v: i32) {
            self.playtime_2weeks = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_forever = 4;

        pub fn playtime_forever(&self) -> i32 {
            self.playtime_forever.unwrap_or(0)
        }

        pub fn clear_playtime_forever(&mut self) {
            self.playtime_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_forever(&self) -> bool {
            self.playtime_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_forever(&mut self, v: i32) {
            self.playtime_forever = ::std::option::Option::Some(v);
        }

        // optional uint32 first_playtime = 5;

        pub fn first_playtime(&self) -> u32 {
            self.first_playtime.unwrap_or(0)
        }

        pub fn clear_first_playtime(&mut self) {
            self.first_playtime = ::std::option::Option::None;
        }

        pub fn has_first_playtime(&self) -> bool {
            self.first_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_first_playtime(&mut self, v: u32) {
            self.first_playtime = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_windows_forever = 6;

        pub fn playtime_windows_forever(&self) -> i32 {
            self.playtime_windows_forever.unwrap_or(0)
        }

        pub fn clear_playtime_windows_forever(&mut self) {
            self.playtime_windows_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_windows_forever(&self) -> bool {
            self.playtime_windows_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_windows_forever(&mut self, v: i32) {
            self.playtime_windows_forever = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_mac_forever = 7;

        pub fn playtime_mac_forever(&self) -> i32 {
            self.playtime_mac_forever.unwrap_or(0)
        }

        pub fn clear_playtime_mac_forever(&mut self) {
            self.playtime_mac_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_mac_forever(&self) -> bool {
            self.playtime_mac_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_mac_forever(&mut self, v: i32) {
            self.playtime_mac_forever = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_linux_forever = 8;

        pub fn playtime_linux_forever(&self) -> i32 {
            self.playtime_linux_forever.unwrap_or(0)
        }

        pub fn clear_playtime_linux_forever(&mut self) {
            self.playtime_linux_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_linux_forever(&self) -> bool {
            self.playtime_linux_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_linux_forever(&mut self, v: i32) {
            self.playtime_linux_forever = ::std::option::Option::Some(v);
        }

        // optional uint32 first_windows_playtime = 9;

        pub fn first_windows_playtime(&self) -> u32 {
            self.first_windows_playtime.unwrap_or(0)
        }

        pub fn clear_first_windows_playtime(&mut self) {
            self.first_windows_playtime = ::std::option::Option::None;
        }

        pub fn has_first_windows_playtime(&self) -> bool {
            self.first_windows_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_first_windows_playtime(&mut self, v: u32) {
            self.first_windows_playtime = ::std::option::Option::Some(v);
        }

        // optional uint32 first_mac_playtime = 10;

        pub fn first_mac_playtime(&self) -> u32 {
            self.first_mac_playtime.unwrap_or(0)
        }

        pub fn clear_first_mac_playtime(&mut self) {
            self.first_mac_playtime = ::std::option::Option::None;
        }

        pub fn has_first_mac_playtime(&self) -> bool {
            self.first_mac_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_first_mac_playtime(&mut self, v: u32) {
            self.first_mac_playtime = ::std::option::Option::Some(v);
        }

        // optional uint32 first_linux_playtime = 11;

        pub fn first_linux_playtime(&self) -> u32 {
            self.first_linux_playtime.unwrap_or(0)
        }

        pub fn clear_first_linux_playtime(&mut self) {
            self.first_linux_playtime = ::std::option::Option::None;
        }

        pub fn has_first_linux_playtime(&self) -> bool {
            self.first_linux_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_first_linux_playtime(&mut self, v: u32) {
            self.first_linux_playtime = ::std::option::Option::Some(v);
        }

        // optional uint32 last_windows_playtime = 12;

        pub fn last_windows_playtime(&self) -> u32 {
            self.last_windows_playtime.unwrap_or(0)
        }

        pub fn clear_last_windows_playtime(&mut self) {
            self.last_windows_playtime = ::std::option::Option::None;
        }

        pub fn has_last_windows_playtime(&self) -> bool {
            self.last_windows_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_windows_playtime(&mut self, v: u32) {
            self.last_windows_playtime = ::std::option::Option::Some(v);
        }

        // optional uint32 last_mac_playtime = 13;

        pub fn last_mac_playtime(&self) -> u32 {
            self.last_mac_playtime.unwrap_or(0)
        }

        pub fn clear_last_mac_playtime(&mut self) {
            self.last_mac_playtime = ::std::option::Option::None;
        }

        pub fn has_last_mac_playtime(&self) -> bool {
            self.last_mac_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_mac_playtime(&mut self, v: u32) {
            self.last_mac_playtime = ::std::option::Option::Some(v);
        }

        // optional uint32 last_linux_playtime = 14;

        pub fn last_linux_playtime(&self) -> u32 {
            self.last_linux_playtime.unwrap_or(0)
        }

        pub fn clear_last_linux_playtime(&mut self) {
            self.last_linux_playtime = ::std::option::Option::None;
        }

        pub fn has_last_linux_playtime(&self) -> bool {
            self.last_linux_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_linux_playtime(&mut self, v: u32) {
            self.last_linux_playtime = ::std::option::Option::Some(v);
        }

        // optional uint32 playtime_disconnected = 15;

        pub fn playtime_disconnected(&self) -> u32 {
            self.playtime_disconnected.unwrap_or(0)
        }

        pub fn clear_playtime_disconnected(&mut self) {
            self.playtime_disconnected = ::std::option::Option::None;
        }

        pub fn has_playtime_disconnected(&self) -> bool {
            self.playtime_disconnected.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_disconnected(&mut self, v: u32) {
            self.playtime_disconnected = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(15);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Game| { &m.appid },
                |m: &mut Game| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_playtime",
                |m: &Game| { &m.last_playtime },
                |m: &mut Game| { &mut m.last_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_2weeks",
                |m: &Game| { &m.playtime_2weeks },
                |m: &mut Game| { &mut m.playtime_2weeks },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_forever",
                |m: &Game| { &m.playtime_forever },
                |m: &mut Game| { &mut m.playtime_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "first_playtime",
                |m: &Game| { &m.first_playtime },
                |m: &mut Game| { &mut m.first_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_windows_forever",
                |m: &Game| { &m.playtime_windows_forever },
                |m: &mut Game| { &mut m.playtime_windows_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_mac_forever",
                |m: &Game| { &m.playtime_mac_forever },
                |m: &mut Game| { &mut m.playtime_mac_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_linux_forever",
                |m: &Game| { &m.playtime_linux_forever },
                |m: &mut Game| { &mut m.playtime_linux_forever },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "first_windows_playtime",
                |m: &Game| { &m.first_windows_playtime },
                |m: &mut Game| { &mut m.first_windows_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "first_mac_playtime",
                |m: &Game| { &m.first_mac_playtime },
                |m: &mut Game| { &mut m.first_mac_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "first_linux_playtime",
                |m: &Game| { &m.first_linux_playtime },
                |m: &mut Game| { &mut m.first_linux_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_windows_playtime",
                |m: &Game| { &m.last_windows_playtime },
                |m: &mut Game| { &mut m.last_windows_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_mac_playtime",
                |m: &Game| { &m.last_mac_playtime },
                |m: &mut Game| { &mut m.last_mac_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_linux_playtime",
                |m: &Game| { &m.last_linux_playtime },
                |m: &mut Game| { &mut m.last_linux_playtime },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_disconnected",
                |m: &Game| { &m.playtime_disconnected },
                |m: &mut Game| { &mut m.playtime_disconnected },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Game>(
                "CPlayer_GetLastPlayedTimes_Response.Game",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Game {
        const NAME: &'static str = "Game";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.last_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.playtime_2weeks = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.playtime_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    40 => {
                        self.first_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.playtime_windows_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    56 => {
                        self.playtime_mac_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    64 => {
                        self.playtime_linux_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    72 => {
                        self.first_windows_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    80 => {
                        self.first_mac_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    88 => {
                        self.first_linux_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    96 => {
                        self.last_windows_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    104 => {
                        self.last_mac_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    112 => {
                        self.last_linux_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    120 => {
                        self.playtime_disconnected = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::int32_size(1, v);
            }
            if let Some(v) = self.last_playtime {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.playtime_2weeks {
                my_size += crate::rt::int32_size(3, v);
            }
            if let Some(v) = self.playtime_forever {
                my_size += crate::rt::int32_size(4, v);
            }
            if let Some(v) = self.first_playtime {
                my_size += crate::rt::uint32_size(5, v);
            }
            if let Some(v) = self.playtime_windows_forever {
                my_size += crate::rt::int32_size(6, v);
            }
            if let Some(v) = self.playtime_mac_forever {
                my_size += crate::rt::int32_size(7, v);
            }
            if let Some(v) = self.playtime_linux_forever {
                my_size += crate::rt::int32_size(8, v);
            }
            if let Some(v) = self.first_windows_playtime {
                my_size += crate::rt::uint32_size(9, v);
            }
            if let Some(v) = self.first_mac_playtime {
                my_size += crate::rt::uint32_size(10, v);
            }
            if let Some(v) = self.first_linux_playtime {
                my_size += crate::rt::uint32_size(11, v);
            }
            if let Some(v) = self.last_windows_playtime {
                my_size += crate::rt::uint32_size(12, v);
            }
            if let Some(v) = self.last_mac_playtime {
                my_size += crate::rt::uint32_size(13, v);
            }
            if let Some(v) = self.last_linux_playtime {
                my_size += crate::rt::uint32_size(14, v);
            }
            if let Some(v) = self.playtime_disconnected {
                my_size += crate::rt::uint32_size(15, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.last_playtime {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.playtime_2weeks {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.playtime_forever {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.first_playtime {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.playtime_windows_forever {
                os.write_int32(6, v)?;
            }
            if let Some(v) = self.playtime_mac_forever {
                os.write_int32(7, v)?;
            }
            if let Some(v) = self.playtime_linux_forever {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.first_windows_playtime {
                os.write_uint32(9, v)?;
            }
            if let Some(v) = self.first_mac_playtime {
                os.write_uint32(10, v)?;
            }
            if let Some(v) = self.first_linux_playtime {
                os.write_uint32(11, v)?;
            }
            if let Some(v) = self.last_windows_playtime {
                os.write_uint32(12, v)?;
            }
            if let Some(v) = self.last_mac_playtime {
                os.write_uint32(13, v)?;
            }
            if let Some(v) = self.last_linux_playtime {
                os.write_uint32(14, v)?;
            }
            if let Some(v) = self.playtime_disconnected {
                os.write_uint32(15, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Game {
            Game::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.last_playtime = ::std::option::Option::None;
            self.playtime_2weeks = ::std::option::Option::None;
            self.playtime_forever = ::std::option::Option::None;
            self.first_playtime = ::std::option::Option::None;
            self.playtime_windows_forever = ::std::option::Option::None;
            self.playtime_mac_forever = ::std::option::Option::None;
            self.playtime_linux_forever = ::std::option::Option::None;
            self.first_windows_playtime = ::std::option::Option::None;
            self.first_mac_playtime = ::std::option::Option::None;
            self.first_linux_playtime = ::std::option::Option::None;
            self.last_windows_playtime = ::std::option::Option::None;
            self.last_mac_playtime = ::std::option::Option::None;
            self.last_linux_playtime = ::std::option::Option::None;
            self.playtime_disconnected = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Game {
            static instance: Game = Game {
                appid: ::std::option::Option::None,
                last_playtime: ::std::option::Option::None,
                playtime_2weeks: ::std::option::Option::None,
                playtime_forever: ::std::option::Option::None,
                first_playtime: ::std::option::Option::None,
                playtime_windows_forever: ::std::option::Option::None,
                playtime_mac_forever: ::std::option::Option::None,
                playtime_linux_forever: ::std::option::Option::None,
                first_windows_playtime: ::std::option::Option::None,
                first_mac_playtime: ::std::option::Option::None,
                first_linux_playtime: ::std::option::Option::None,
                last_windows_playtime: ::std::option::Option::None,
                last_mac_playtime: ::std::option::Option::None,
                last_linux_playtime: ::std::option::Option::None,
                playtime_disconnected: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Game {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetLastPlayedTimes_Response.Game").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Game {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Game {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetTimeSSAAccepted_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetTimeSSAAccepted_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetTimeSSAAccepted_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetTimeSSAAccepted_Request {
    fn default() -> &'a CPlayer_GetTimeSSAAccepted_Request {
        <CPlayer_GetTimeSSAAccepted_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetTimeSSAAccepted_Request {
    pub fn new() -> CPlayer_GetTimeSSAAccepted_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetTimeSSAAccepted_Request>(
            "CPlayer_GetTimeSSAAccepted_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetTimeSSAAccepted_Request {
    const NAME: &'static str = "CPlayer_GetTimeSSAAccepted_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetTimeSSAAccepted_Request {
        CPlayer_GetTimeSSAAccepted_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetTimeSSAAccepted_Request {
        static instance: CPlayer_GetTimeSSAAccepted_Request = CPlayer_GetTimeSSAAccepted_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetTimeSSAAccepted_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetTimeSSAAccepted_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetTimeSSAAccepted_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetTimeSSAAccepted_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetTimeSSAAccepted_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetTimeSSAAccepted_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetTimeSSAAccepted_Response.time_ssa_accepted)
    pub time_ssa_accepted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetTimeSSAAccepted_Response.time_ssa_updated)
    pub time_ssa_updated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetTimeSSAAccepted_Response.time_chinassa_accepted)
    pub time_chinassa_accepted: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetTimeSSAAccepted_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetTimeSSAAccepted_Response {
    fn default() -> &'a CPlayer_GetTimeSSAAccepted_Response {
        <CPlayer_GetTimeSSAAccepted_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetTimeSSAAccepted_Response {
    pub fn new() -> CPlayer_GetTimeSSAAccepted_Response {
        ::std::default::Default::default()
    }

    // optional uint32 time_ssa_accepted = 1;

    pub fn time_ssa_accepted(&self) -> u32 {
        self.time_ssa_accepted.unwrap_or(0)
    }

    pub fn clear_time_ssa_accepted(&mut self) {
        self.time_ssa_accepted = ::std::option::Option::None;
    }

    pub fn has_time_ssa_accepted(&self) -> bool {
        self.time_ssa_accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_ssa_accepted(&mut self, v: u32) {
        self.time_ssa_accepted = ::std::option::Option::Some(v);
    }

    // optional uint32 time_ssa_updated = 2;

    pub fn time_ssa_updated(&self) -> u32 {
        self.time_ssa_updated.unwrap_or(0)
    }

    pub fn clear_time_ssa_updated(&mut self) {
        self.time_ssa_updated = ::std::option::Option::None;
    }

    pub fn has_time_ssa_updated(&self) -> bool {
        self.time_ssa_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_ssa_updated(&mut self, v: u32) {
        self.time_ssa_updated = ::std::option::Option::Some(v);
    }

    // optional uint32 time_chinassa_accepted = 3;

    pub fn time_chinassa_accepted(&self) -> u32 {
        self.time_chinassa_accepted.unwrap_or(0)
    }

    pub fn clear_time_chinassa_accepted(&mut self) {
        self.time_chinassa_accepted = ::std::option::Option::None;
    }

    pub fn has_time_chinassa_accepted(&self) -> bool {
        self.time_chinassa_accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_chinassa_accepted(&mut self, v: u32) {
        self.time_chinassa_accepted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_ssa_accepted",
            |m: &CPlayer_GetTimeSSAAccepted_Response| { &m.time_ssa_accepted },
            |m: &mut CPlayer_GetTimeSSAAccepted_Response| { &mut m.time_ssa_accepted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_ssa_updated",
            |m: &CPlayer_GetTimeSSAAccepted_Response| { &m.time_ssa_updated },
            |m: &mut CPlayer_GetTimeSSAAccepted_Response| { &mut m.time_ssa_updated },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_chinassa_accepted",
            |m: &CPlayer_GetTimeSSAAccepted_Response| { &m.time_chinassa_accepted },
            |m: &mut CPlayer_GetTimeSSAAccepted_Response| { &mut m.time_chinassa_accepted },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetTimeSSAAccepted_Response>(
            "CPlayer_GetTimeSSAAccepted_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetTimeSSAAccepted_Response {
    const NAME: &'static str = "CPlayer_GetTimeSSAAccepted_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.time_ssa_accepted = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.time_ssa_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.time_chinassa_accepted = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time_ssa_accepted {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.time_ssa_updated {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.time_chinassa_accepted {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.time_ssa_accepted {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.time_ssa_updated {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.time_chinassa_accepted {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetTimeSSAAccepted_Response {
        CPlayer_GetTimeSSAAccepted_Response::new()
    }

    fn clear(&mut self) {
        self.time_ssa_accepted = ::std::option::Option::None;
        self.time_ssa_updated = ::std::option::Option::None;
        self.time_chinassa_accepted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetTimeSSAAccepted_Response {
        static instance: CPlayer_GetTimeSSAAccepted_Response = CPlayer_GetTimeSSAAccepted_Response {
            time_ssa_accepted: ::std::option::Option::None,
            time_ssa_updated: ::std::option::Option::None,
            time_chinassa_accepted: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetTimeSSAAccepted_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetTimeSSAAccepted_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetTimeSSAAccepted_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetTimeSSAAccepted_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AcceptSSA_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AcceptSSA_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_AcceptSSA_Request.agreement_type)
    pub agreement_type: ::std::option::Option<crate::EnumOrUnknown<EAgreementType>>,
    // @@protoc_insertion_point(field:CPlayer_AcceptSSA_Request.time_signed_utc)
    pub time_signed_utc: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AcceptSSA_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AcceptSSA_Request {
    fn default() -> &'a CPlayer_AcceptSSA_Request {
        <CPlayer_AcceptSSA_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_AcceptSSA_Request {
    pub fn new() -> CPlayer_AcceptSSA_Request {
        ::std::default::Default::default()
    }

    // optional .EAgreementType agreement_type = 1;

    pub fn agreement_type(&self) -> EAgreementType {
        match self.agreement_type {
            Some(e) => e.enum_value_or(EAgreementType::k_EAgreementType_Invalid),
            None => EAgreementType::k_EAgreementType_Invalid,
        }
    }

    pub fn clear_agreement_type(&mut self) {
        self.agreement_type = ::std::option::Option::None;
    }

    pub fn has_agreement_type(&self) -> bool {
        self.agreement_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_type(&mut self, v: EAgreementType) {
        self.agreement_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint32 time_signed_utc = 2;

    pub fn time_signed_utc(&self) -> u32 {
        self.time_signed_utc.unwrap_or(0)
    }

    pub fn clear_time_signed_utc(&mut self) {
        self.time_signed_utc = ::std::option::Option::None;
    }

    pub fn has_time_signed_utc(&self) -> bool {
        self.time_signed_utc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_signed_utc(&mut self, v: u32) {
        self.time_signed_utc = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "agreement_type",
            |m: &CPlayer_AcceptSSA_Request| { &m.agreement_type },
            |m: &mut CPlayer_AcceptSSA_Request| { &mut m.agreement_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_signed_utc",
            |m: &CPlayer_AcceptSSA_Request| { &m.time_signed_utc },
            |m: &mut CPlayer_AcceptSSA_Request| { &mut m.time_signed_utc },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AcceptSSA_Request>(
            "CPlayer_AcceptSSA_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_AcceptSSA_Request {
    const NAME: &'static str = "CPlayer_AcceptSSA_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.agreement_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.time_signed_utc = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.agreement_type {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.time_signed_utc {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.agreement_type {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.time_signed_utc {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AcceptSSA_Request {
        CPlayer_AcceptSSA_Request::new()
    }

    fn clear(&mut self) {
        self.agreement_type = ::std::option::Option::None;
        self.time_signed_utc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AcceptSSA_Request {
        static instance: CPlayer_AcceptSSA_Request = CPlayer_AcceptSSA_Request {
            agreement_type: ::std::option::Option::None,
            time_signed_utc: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_AcceptSSA_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AcceptSSA_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AcceptSSA_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_AcceptSSA_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AcceptSSA_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AcceptSSA_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AcceptSSA_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AcceptSSA_Response {
    fn default() -> &'a CPlayer_AcceptSSA_Response {
        <CPlayer_AcceptSSA_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_AcceptSSA_Response {
    pub fn new() -> CPlayer_AcceptSSA_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AcceptSSA_Response>(
            "CPlayer_AcceptSSA_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_AcceptSSA_Response {
    const NAME: &'static str = "CPlayer_AcceptSSA_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AcceptSSA_Response {
        CPlayer_AcceptSSA_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AcceptSSA_Response {
        static instance: CPlayer_AcceptSSA_Response = CPlayer_AcceptSSA_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_AcceptSSA_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AcceptSSA_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AcceptSSA_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_AcceptSSA_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNicknameList_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNicknameList_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNicknameList_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNicknameList_Request {
    fn default() -> &'a CPlayer_GetNicknameList_Request {
        <CPlayer_GetNicknameList_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetNicknameList_Request {
    pub fn new() -> CPlayer_GetNicknameList_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNicknameList_Request>(
            "CPlayer_GetNicknameList_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetNicknameList_Request {
    const NAME: &'static str = "CPlayer_GetNicknameList_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNicknameList_Request {
        CPlayer_GetNicknameList_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNicknameList_Request {
        static instance: CPlayer_GetNicknameList_Request = CPlayer_GetNicknameList_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetNicknameList_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNicknameList_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNicknameList_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetNicknameList_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNicknameList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNicknameList_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetNicknameList_Response.nicknames)
    pub nicknames: ::std::vec::Vec<cplayer_get_nickname_list_response::PlayerNickname>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNicknameList_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNicknameList_Response {
    fn default() -> &'a CPlayer_GetNicknameList_Response {
        <CPlayer_GetNicknameList_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetNicknameList_Response {
    pub fn new() -> CPlayer_GetNicknameList_Response {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;

    pub fn nicknames(&self) -> &[cplayer_get_nickname_list_response::PlayerNickname] {
        &self.nicknames
    }

    pub fn clear_nicknames(&mut self) {
        self.nicknames.clear();
    }

    // Param is passed by value, moved
    pub fn set_nicknames(&mut self, v: ::std::vec::Vec<cplayer_get_nickname_list_response::PlayerNickname>) {
        self.nicknames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nicknames(&mut self) -> &mut ::std::vec::Vec<cplayer_get_nickname_list_response::PlayerNickname> {
        &mut self.nicknames
    }

    // Take field
    pub fn take_nicknames(&mut self) -> ::std::vec::Vec<cplayer_get_nickname_list_response::PlayerNickname> {
        ::std::mem::replace(&mut self.nicknames, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "nicknames",
            |m: &CPlayer_GetNicknameList_Response| { &m.nicknames },
            |m: &mut CPlayer_GetNicknameList_Response| { &mut m.nicknames },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNicknameList_Response>(
            "CPlayer_GetNicknameList_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetNicknameList_Response {
    const NAME: &'static str = "CPlayer_GetNicknameList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.nicknames.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.nicknames {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.nicknames {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNicknameList_Response {
        CPlayer_GetNicknameList_Response::new()
    }

    fn clear(&mut self) {
        self.nicknames.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNicknameList_Response {
        static instance: CPlayer_GetNicknameList_Response = CPlayer_GetNicknameList_Response {
            nicknames: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetNicknameList_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNicknameList_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNicknameList_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetNicknameList_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetNicknameList_Response`
pub mod cplayer_get_nickname_list_response {
    // @@protoc_insertion_point(message:CPlayer_GetNicknameList_Response.PlayerNickname)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerNickname {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
        pub accountid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
        pub nickname: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetNicknameList_Response.PlayerNickname.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerNickname {
        fn default() -> &'a PlayerNickname {
            <PlayerNickname as crate::Message>::default_instance()
        }
    }

    impl PlayerNickname {
        pub fn new() -> PlayerNickname {
            ::std::default::Default::default()
        }

        // optional fixed32 accountid = 1;

        pub fn accountid(&self) -> u32 {
            self.accountid.unwrap_or(0)
        }

        pub fn clear_accountid(&mut self) {
            self.accountid = ::std::option::Option::None;
        }

        pub fn has_accountid(&self) -> bool {
            self.accountid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_accountid(&mut self, v: u32) {
            self.accountid = ::std::option::Option::Some(v);
        }

        // optional string nickname = 2;

        pub fn nickname(&self) -> &str {
            match self.nickname.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_nickname(&mut self) {
            self.nickname = ::std::option::Option::None;
        }

        pub fn has_nickname(&self) -> bool {
            self.nickname.is_some()
        }

        // Param is passed by value, moved
        pub fn set_nickname(&mut self, v: ::std::string::String) {
            self.nickname = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
            if self.nickname.is_none() {
                self.nickname = ::std::option::Option::Some(::std::string::String::new());
            }
            self.nickname.as_mut().unwrap()
        }

        // Take field
        pub fn take_nickname(&mut self) -> ::std::string::String {
            self.nickname.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "accountid",
                |m: &PlayerNickname| { &m.accountid },
                |m: &mut PlayerNickname| { &mut m.accountid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "nickname",
                |m: &PlayerNickname| { &m.nickname },
                |m: &mut PlayerNickname| { &mut m.nickname },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PlayerNickname>(
                "CPlayer_GetNicknameList_Response.PlayerNickname",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PlayerNickname {
        const NAME: &'static str = "PlayerNickname";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    18 => {
                        self.nickname = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.accountid {
                my_size += 1 + 4;
            }
            if let Some(v) = self.nickname.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.accountid {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.nickname.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerNickname {
            PlayerNickname::new()
        }

        fn clear(&mut self) {
            self.accountid = ::std::option::Option::None;
            self.nickname = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerNickname {
            static instance: PlayerNickname = PlayerNickname {
                accountid: ::std::option::Option::None,
                nickname: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PlayerNickname {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetNicknameList_Response.PlayerNickname").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PlayerNickname {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PlayerNickname {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetPerFriendPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPerFriendPreferences_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPerFriendPreferences_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPerFriendPreferences_Request {
    fn default() -> &'a CPlayer_GetPerFriendPreferences_Request {
        <CPlayer_GetPerFriendPreferences_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPerFriendPreferences_Request {
    pub fn new() -> CPlayer_GetPerFriendPreferences_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPerFriendPreferences_Request>(
            "CPlayer_GetPerFriendPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPerFriendPreferences_Request {
    const NAME: &'static str = "CPlayer_GetPerFriendPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPerFriendPreferences_Request {
        CPlayer_GetPerFriendPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPerFriendPreferences_Request {
        static instance: CPlayer_GetPerFriendPreferences_Request = CPlayer_GetPerFriendPreferences_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPerFriendPreferences_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPerFriendPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPerFriendPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPerFriendPreferences_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PerFriendPreferences)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PerFriendPreferences {
    // message fields
    // @@protoc_insertion_point(field:PerFriendPreferences.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PerFriendPreferences.nickname)
    pub nickname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_showingame)
    pub notifications_showingame: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_showonline)
    pub notifications_showonline: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_showmessages)
    pub notifications_showmessages: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.sounds_showingame)
    pub sounds_showingame: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.sounds_showonline)
    pub sounds_showonline: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.sounds_showmessages)
    pub sounds_showmessages: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_sendmobile)
    pub notifications_sendmobile: ::std::option::Option<crate::EnumOrUnknown<ENotificationSetting>>,
    // special fields
    // @@protoc_insertion_point(special_field:PerFriendPreferences.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PerFriendPreferences {
    fn default() -> &'a PerFriendPreferences {
        <PerFriendPreferences as crate::Message>::default_instance()
    }
}

impl PerFriendPreferences {
    pub fn new() -> PerFriendPreferences {
        ::std::default::Default::default()
    }

    // optional fixed32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional string nickname = 2;

    pub fn nickname(&self) -> &str {
        match self.nickname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nickname(&mut self) {
        self.nickname = ::std::option::Option::None;
    }

    pub fn has_nickname(&self) -> bool {
        self.nickname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nickname(&mut self, v: ::std::string::String) {
        self.nickname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
        if self.nickname.is_none() {
            self.nickname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nickname.as_mut().unwrap()
    }

    // Take field
    pub fn take_nickname(&mut self) -> ::std::string::String {
        self.nickname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .ENotificationSetting notifications_showingame = 3;

    pub fn notifications_showingame(&self) -> ENotificationSetting {
        match self.notifications_showingame {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_showingame(&mut self) {
        self.notifications_showingame = ::std::option::Option::None;
    }

    pub fn has_notifications_showingame(&self) -> bool {
        self.notifications_showingame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_showingame(&mut self, v: ENotificationSetting) {
        self.notifications_showingame = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting notifications_showonline = 4;

    pub fn notifications_showonline(&self) -> ENotificationSetting {
        match self.notifications_showonline {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_showonline(&mut self) {
        self.notifications_showonline = ::std::option::Option::None;
    }

    pub fn has_notifications_showonline(&self) -> bool {
        self.notifications_showonline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_showonline(&mut self, v: ENotificationSetting) {
        self.notifications_showonline = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting notifications_showmessages = 5;

    pub fn notifications_showmessages(&self) -> ENotificationSetting {
        match self.notifications_showmessages {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_showmessages(&mut self) {
        self.notifications_showmessages = ::std::option::Option::None;
    }

    pub fn has_notifications_showmessages(&self) -> bool {
        self.notifications_showmessages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_showmessages(&mut self, v: ENotificationSetting) {
        self.notifications_showmessages = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting sounds_showingame = 6;

    pub fn sounds_showingame(&self) -> ENotificationSetting {
        match self.sounds_showingame {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_sounds_showingame(&mut self) {
        self.sounds_showingame = ::std::option::Option::None;
    }

    pub fn has_sounds_showingame(&self) -> bool {
        self.sounds_showingame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sounds_showingame(&mut self, v: ENotificationSetting) {
        self.sounds_showingame = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting sounds_showonline = 7;

    pub fn sounds_showonline(&self) -> ENotificationSetting {
        match self.sounds_showonline {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_sounds_showonline(&mut self) {
        self.sounds_showonline = ::std::option::Option::None;
    }

    pub fn has_sounds_showonline(&self) -> bool {
        self.sounds_showonline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sounds_showonline(&mut self, v: ENotificationSetting) {
        self.sounds_showonline = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting sounds_showmessages = 8;

    pub fn sounds_showmessages(&self) -> ENotificationSetting {
        match self.sounds_showmessages {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_sounds_showmessages(&mut self) {
        self.sounds_showmessages = ::std::option::Option::None;
    }

    pub fn has_sounds_showmessages(&self) -> bool {
        self.sounds_showmessages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sounds_showmessages(&mut self, v: ENotificationSetting) {
        self.sounds_showmessages = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting notifications_sendmobile = 9;

    pub fn notifications_sendmobile(&self) -> ENotificationSetting {
        match self.notifications_sendmobile {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_sendmobile(&mut self) {
        self.notifications_sendmobile = ::std::option::Option::None;
    }

    pub fn has_notifications_sendmobile(&self) -> bool {
        self.notifications_sendmobile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_sendmobile(&mut self, v: ENotificationSetting) {
        self.notifications_sendmobile = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &PerFriendPreferences| { &m.accountid },
            |m: &mut PerFriendPreferences| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "nickname",
            |m: &PerFriendPreferences| { &m.nickname },
            |m: &mut PerFriendPreferences| { &mut m.nickname },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_showingame",
            |m: &PerFriendPreferences| { &m.notifications_showingame },
            |m: &mut PerFriendPreferences| { &mut m.notifications_showingame },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_showonline",
            |m: &PerFriendPreferences| { &m.notifications_showonline },
            |m: &mut PerFriendPreferences| { &mut m.notifications_showonline },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_showmessages",
            |m: &PerFriendPreferences| { &m.notifications_showmessages },
            |m: &mut PerFriendPreferences| { &mut m.notifications_showmessages },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sounds_showingame",
            |m: &PerFriendPreferences| { &m.sounds_showingame },
            |m: &mut PerFriendPreferences| { &mut m.sounds_showingame },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sounds_showonline",
            |m: &PerFriendPreferences| { &m.sounds_showonline },
            |m: &mut PerFriendPreferences| { &mut m.sounds_showonline },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sounds_showmessages",
            |m: &PerFriendPreferences| { &m.sounds_showmessages },
            |m: &mut PerFriendPreferences| { &mut m.sounds_showmessages },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_sendmobile",
            |m: &PerFriendPreferences| { &m.notifications_sendmobile },
            |m: &mut PerFriendPreferences| { &mut m.notifications_sendmobile },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<PerFriendPreferences>(
            "PerFriendPreferences",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for PerFriendPreferences {
    const NAME: &'static str = "PerFriendPreferences";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    self.nickname = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.notifications_showingame = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.notifications_showonline = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.notifications_showmessages = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                48 => {
                    self.sounds_showingame = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.sounds_showonline = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                64 => {
                    self.sounds_showmessages = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                72 => {
                    self.notifications_sendmobile = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += 1 + 4;
        }
        if let Some(v) = self.nickname.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.notifications_showingame {
            my_size += crate::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.notifications_showonline {
            my_size += crate::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.notifications_showmessages {
            my_size += crate::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.sounds_showingame {
            my_size += crate::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.sounds_showonline {
            my_size += crate::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.sounds_showmessages {
            my_size += crate::rt::int32_size(8, v.value());
        }
        if let Some(v) = self.notifications_sendmobile {
            my_size += crate::rt::int32_size(9, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accountid {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.nickname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.notifications_showingame {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notifications_showonline {
            os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notifications_showmessages {
            os.write_enum(5, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.sounds_showingame {
            os.write_enum(6, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.sounds_showonline {
            os.write_enum(7, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.sounds_showmessages {
            os.write_enum(8, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notifications_sendmobile {
            os.write_enum(9, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PerFriendPreferences {
        PerFriendPreferences::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.nickname = ::std::option::Option::None;
        self.notifications_showingame = ::std::option::Option::None;
        self.notifications_showonline = ::std::option::Option::None;
        self.notifications_showmessages = ::std::option::Option::None;
        self.sounds_showingame = ::std::option::Option::None;
        self.sounds_showonline = ::std::option::Option::None;
        self.sounds_showmessages = ::std::option::Option::None;
        self.notifications_sendmobile = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PerFriendPreferences {
        static instance: PerFriendPreferences = PerFriendPreferences {
            accountid: ::std::option::Option::None,
            nickname: ::std::option::Option::None,
            notifications_showingame: ::std::option::Option::None,
            notifications_showonline: ::std::option::Option::None,
            notifications_showmessages: ::std::option::Option::None,
            sounds_showingame: ::std::option::Option::None,
            sounds_showonline: ::std::option::Option::None,
            sounds_showmessages: ::std::option::Option::None,
            notifications_sendmobile: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for PerFriendPreferences {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PerFriendPreferences").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PerFriendPreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for PerFriendPreferences {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPerFriendPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPerFriendPreferences_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPerFriendPreferences_Response.preferences)
    pub preferences: ::std::vec::Vec<PerFriendPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPerFriendPreferences_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPerFriendPreferences_Response {
    fn default() -> &'a CPlayer_GetPerFriendPreferences_Response {
        <CPlayer_GetPerFriendPreferences_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPerFriendPreferences_Response {
    pub fn new() -> CPlayer_GetPerFriendPreferences_Response {
        ::std::default::Default::default()
    }

    // repeated .PerFriendPreferences preferences = 1;

    pub fn preferences(&self) -> &[PerFriendPreferences] {
        &self.preferences
    }

    pub fn clear_preferences(&mut self) {
        self.preferences.clear();
    }

    // Param is passed by value, moved
    pub fn set_preferences(&mut self, v: ::std::vec::Vec<PerFriendPreferences>) {
        self.preferences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_preferences(&mut self) -> &mut ::std::vec::Vec<PerFriendPreferences> {
        &mut self.preferences
    }

    // Take field
    pub fn take_preferences(&mut self) -> ::std::vec::Vec<PerFriendPreferences> {
        ::std::mem::replace(&mut self.preferences, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "preferences",
            |m: &CPlayer_GetPerFriendPreferences_Response| { &m.preferences },
            |m: &mut CPlayer_GetPerFriendPreferences_Response| { &mut m.preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPerFriendPreferences_Response>(
            "CPlayer_GetPerFriendPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPerFriendPreferences_Response {
    const NAME: &'static str = "CPlayer_GetPerFriendPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.preferences.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.preferences {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.preferences {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPerFriendPreferences_Response {
        CPlayer_GetPerFriendPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPerFriendPreferences_Response {
        static instance: CPlayer_GetPerFriendPreferences_Response = CPlayer_GetPerFriendPreferences_Response {
            preferences: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPerFriendPreferences_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPerFriendPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPerFriendPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPerFriendPreferences_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetPerFriendPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetPerFriendPreferences_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetPerFriendPreferences_Request.preferences)
    pub preferences: crate::MessageField<PerFriendPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetPerFriendPreferences_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetPerFriendPreferences_Request {
    fn default() -> &'a CPlayer_SetPerFriendPreferences_Request {
        <CPlayer_SetPerFriendPreferences_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetPerFriendPreferences_Request {
    pub fn new() -> CPlayer_SetPerFriendPreferences_Request {
        ::std::default::Default::default()
    }

    // optional .PerFriendPreferences preferences = 1;

    pub fn preferences(&self) -> &PerFriendPreferences {
        self.preferences.as_ref().unwrap_or_else(|| <PerFriendPreferences as crate::Message>::default_instance())
    }

    pub fn clear_preferences(&mut self) {
        self.preferences.clear();
    }

    pub fn has_preferences(&self) -> bool {
        self.preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferences(&mut self, v: PerFriendPreferences) {
        self.preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preferences(&mut self) -> &mut PerFriendPreferences {
        self.preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_preferences(&mut self) -> PerFriendPreferences {
        self.preferences.take().unwrap_or_else(|| PerFriendPreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, PerFriendPreferences>(
            "preferences",
            |m: &CPlayer_SetPerFriendPreferences_Request| { &m.preferences },
            |m: &mut CPlayer_SetPerFriendPreferences_Request| { &mut m.preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetPerFriendPreferences_Request>(
            "CPlayer_SetPerFriendPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetPerFriendPreferences_Request {
    const NAME: &'static str = "CPlayer_SetPerFriendPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetPerFriendPreferences_Request {
        CPlayer_SetPerFriendPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetPerFriendPreferences_Request {
        static instance: CPlayer_SetPerFriendPreferences_Request = CPlayer_SetPerFriendPreferences_Request {
            preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetPerFriendPreferences_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetPerFriendPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetPerFriendPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetPerFriendPreferences_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetPerFriendPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetPerFriendPreferences_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetPerFriendPreferences_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetPerFriendPreferences_Response {
    fn default() -> &'a CPlayer_SetPerFriendPreferences_Response {
        <CPlayer_SetPerFriendPreferences_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetPerFriendPreferences_Response {
    pub fn new() -> CPlayer_SetPerFriendPreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetPerFriendPreferences_Response>(
            "CPlayer_SetPerFriendPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetPerFriendPreferences_Response {
    const NAME: &'static str = "CPlayer_SetPerFriendPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetPerFriendPreferences_Response {
        CPlayer_SetPerFriendPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetPerFriendPreferences_Response {
        static instance: CPlayer_SetPerFriendPreferences_Response = CPlayer_SetPerFriendPreferences_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetPerFriendPreferences_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetPerFriendPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetPerFriendPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetPerFriendPreferences_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AddFriend_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AddFriend_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AddFriend_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AddFriend_Request {
    fn default() -> &'a CPlayer_AddFriend_Request {
        <CPlayer_AddFriend_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_AddFriend_Request {
    pub fn new() -> CPlayer_AddFriend_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_AddFriend_Request| { &m.steamid },
            |m: &mut CPlayer_AddFriend_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AddFriend_Request>(
            "CPlayer_AddFriend_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_AddFriend_Request {
    const NAME: &'static str = "CPlayer_AddFriend_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AddFriend_Request {
        CPlayer_AddFriend_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AddFriend_Request {
        static instance: CPlayer_AddFriend_Request = CPlayer_AddFriend_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_AddFriend_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AddFriend_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AddFriend_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_AddFriend_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AddFriend_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AddFriend_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Response.invite_sent)
    pub invite_sent: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Response.friend_relationship)
    pub friend_relationship: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Response.result)
    pub result: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AddFriend_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AddFriend_Response {
    fn default() -> &'a CPlayer_AddFriend_Response {
        <CPlayer_AddFriend_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_AddFriend_Response {
    pub fn new() -> CPlayer_AddFriend_Response {
        ::std::default::Default::default()
    }

    // optional bool invite_sent = 1;

    pub fn invite_sent(&self) -> bool {
        self.invite_sent.unwrap_or(false)
    }

    pub fn clear_invite_sent(&mut self) {
        self.invite_sent = ::std::option::Option::None;
    }

    pub fn has_invite_sent(&self) -> bool {
        self.invite_sent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_sent(&mut self, v: bool) {
        self.invite_sent = ::std::option::Option::Some(v);
    }

    // optional uint32 friend_relationship = 2;

    pub fn friend_relationship(&self) -> u32 {
        self.friend_relationship.unwrap_or(0)
    }

    pub fn clear_friend_relationship(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
    }

    pub fn has_friend_relationship(&self) -> bool {
        self.friend_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_relationship(&mut self, v: u32) {
        self.friend_relationship = ::std::option::Option::Some(v);
    }

    // optional int32 result = 3;

    pub fn result(&self) -> i32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_sent",
            |m: &CPlayer_AddFriend_Response| { &m.invite_sent },
            |m: &mut CPlayer_AddFriend_Response| { &mut m.invite_sent },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_relationship",
            |m: &CPlayer_AddFriend_Response| { &m.friend_relationship },
            |m: &mut CPlayer_AddFriend_Response| { &mut m.friend_relationship },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CPlayer_AddFriend_Response| { &m.result },
            |m: &mut CPlayer_AddFriend_Response| { &mut m.result },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AddFriend_Response>(
            "CPlayer_AddFriend_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_AddFriend_Response {
    const NAME: &'static str = "CPlayer_AddFriend_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.invite_sent = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.friend_relationship = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.result = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_sent {
            my_size += 1 + 1;
        }
        if let Some(v) = self.friend_relationship {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.result {
            my_size += crate::rt::int32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invite_sent {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.friend_relationship {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.result {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AddFriend_Response {
        CPlayer_AddFriend_Response::new()
    }

    fn clear(&mut self) {
        self.invite_sent = ::std::option::Option::None;
        self.friend_relationship = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AddFriend_Response {
        static instance: CPlayer_AddFriend_Response = CPlayer_AddFriend_Response {
            invite_sent: ::std::option::Option::None,
            friend_relationship: ::std::option::Option::None,
            result: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_AddFriend_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AddFriend_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AddFriend_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_AddFriend_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_RemoveFriend_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_RemoveFriend_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_RemoveFriend_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_RemoveFriend_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_RemoveFriend_Request {
    fn default() -> &'a CPlayer_RemoveFriend_Request {
        <CPlayer_RemoveFriend_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_RemoveFriend_Request {
    pub fn new() -> CPlayer_RemoveFriend_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_RemoveFriend_Request| { &m.steamid },
            |m: &mut CPlayer_RemoveFriend_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_RemoveFriend_Request>(
            "CPlayer_RemoveFriend_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_RemoveFriend_Request {
    const NAME: &'static str = "CPlayer_RemoveFriend_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_RemoveFriend_Request {
        CPlayer_RemoveFriend_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_RemoveFriend_Request {
        static instance: CPlayer_RemoveFriend_Request = CPlayer_RemoveFriend_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_RemoveFriend_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_RemoveFriend_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_RemoveFriend_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_RemoveFriend_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_RemoveFriend_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_RemoveFriend_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_RemoveFriend_Response.friend_relationship)
    pub friend_relationship: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_RemoveFriend_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_RemoveFriend_Response {
    fn default() -> &'a CPlayer_RemoveFriend_Response {
        <CPlayer_RemoveFriend_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_RemoveFriend_Response {
    pub fn new() -> CPlayer_RemoveFriend_Response {
        ::std::default::Default::default()
    }

    // optional uint32 friend_relationship = 1;

    pub fn friend_relationship(&self) -> u32 {
        self.friend_relationship.unwrap_or(0)
    }

    pub fn clear_friend_relationship(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
    }

    pub fn has_friend_relationship(&self) -> bool {
        self.friend_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_relationship(&mut self, v: u32) {
        self.friend_relationship = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_relationship",
            |m: &CPlayer_RemoveFriend_Response| { &m.friend_relationship },
            |m: &mut CPlayer_RemoveFriend_Response| { &mut m.friend_relationship },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_RemoveFriend_Response>(
            "CPlayer_RemoveFriend_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_RemoveFriend_Response {
    const NAME: &'static str = "CPlayer_RemoveFriend_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.friend_relationship = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.friend_relationship {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.friend_relationship {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_RemoveFriend_Response {
        CPlayer_RemoveFriend_Response::new()
    }

    fn clear(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_RemoveFriend_Response {
        static instance: CPlayer_RemoveFriend_Response = CPlayer_RemoveFriend_Response {
            friend_relationship: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_RemoveFriend_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_RemoveFriend_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_RemoveFriend_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_RemoveFriend_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_IgnoreFriend_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_IgnoreFriend_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_IgnoreFriend_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_IgnoreFriend_Request.unignore)
    pub unignore: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_IgnoreFriend_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_IgnoreFriend_Request {
    fn default() -> &'a CPlayer_IgnoreFriend_Request {
        <CPlayer_IgnoreFriend_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_IgnoreFriend_Request {
    pub fn new() -> CPlayer_IgnoreFriend_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool unignore = 2;

    pub fn unignore(&self) -> bool {
        self.unignore.unwrap_or(false)
    }

    pub fn clear_unignore(&mut self) {
        self.unignore = ::std::option::Option::None;
    }

    pub fn has_unignore(&self) -> bool {
        self.unignore.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unignore(&mut self, v: bool) {
        self.unignore = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_IgnoreFriend_Request| { &m.steamid },
            |m: &mut CPlayer_IgnoreFriend_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "unignore",
            |m: &CPlayer_IgnoreFriend_Request| { &m.unignore },
            |m: &mut CPlayer_IgnoreFriend_Request| { &mut m.unignore },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_IgnoreFriend_Request>(
            "CPlayer_IgnoreFriend_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_IgnoreFriend_Request {
    const NAME: &'static str = "CPlayer_IgnoreFriend_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.unignore = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.unignore {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.unignore {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_IgnoreFriend_Request {
        CPlayer_IgnoreFriend_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.unignore = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_IgnoreFriend_Request {
        static instance: CPlayer_IgnoreFriend_Request = CPlayer_IgnoreFriend_Request {
            steamid: ::std::option::Option::None,
            unignore: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_IgnoreFriend_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_IgnoreFriend_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_IgnoreFriend_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_IgnoreFriend_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_IgnoreFriend_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_IgnoreFriend_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_IgnoreFriend_Response.friend_relationship)
    pub friend_relationship: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_IgnoreFriend_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_IgnoreFriend_Response {
    fn default() -> &'a CPlayer_IgnoreFriend_Response {
        <CPlayer_IgnoreFriend_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_IgnoreFriend_Response {
    pub fn new() -> CPlayer_IgnoreFriend_Response {
        ::std::default::Default::default()
    }

    // optional uint32 friend_relationship = 1;

    pub fn friend_relationship(&self) -> u32 {
        self.friend_relationship.unwrap_or(0)
    }

    pub fn clear_friend_relationship(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
    }

    pub fn has_friend_relationship(&self) -> bool {
        self.friend_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_relationship(&mut self, v: u32) {
        self.friend_relationship = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_relationship",
            |m: &CPlayer_IgnoreFriend_Response| { &m.friend_relationship },
            |m: &mut CPlayer_IgnoreFriend_Response| { &mut m.friend_relationship },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_IgnoreFriend_Response>(
            "CPlayer_IgnoreFriend_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_IgnoreFriend_Response {
    const NAME: &'static str = "CPlayer_IgnoreFriend_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.friend_relationship = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.friend_relationship {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.friend_relationship {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_IgnoreFriend_Response {
        CPlayer_IgnoreFriend_Response::new()
    }

    fn clear(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_IgnoreFriend_Response {
        static instance: CPlayer_IgnoreFriend_Response = CPlayer_IgnoreFriend_Response {
            friend_relationship: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_IgnoreFriend_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_IgnoreFriend_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_IgnoreFriend_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_IgnoreFriend_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetCommunityPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetCommunityPreferences_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetCommunityPreferences_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetCommunityPreferences_Request {
    fn default() -> &'a CPlayer_GetCommunityPreferences_Request {
        <CPlayer_GetCommunityPreferences_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetCommunityPreferences_Request {
    pub fn new() -> CPlayer_GetCommunityPreferences_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetCommunityPreferences_Request>(
            "CPlayer_GetCommunityPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetCommunityPreferences_Request {
    const NAME: &'static str = "CPlayer_GetCommunityPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetCommunityPreferences_Request {
        CPlayer_GetCommunityPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetCommunityPreferences_Request {
        static instance: CPlayer_GetCommunityPreferences_Request = CPlayer_GetCommunityPreferences_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetCommunityPreferences_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetCommunityPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetCommunityPreferences_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_CommunityPreferences)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_CommunityPreferences {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.parenthesize_nicknames)
    pub parenthesize_nicknames: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.text_filter_setting)
    pub text_filter_setting: ::std::option::Option<crate::EnumOrUnknown<ETextFilterSetting>>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.text_filter_ignore_friends)
    pub text_filter_ignore_friends: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.text_filter_words_revision)
    pub text_filter_words_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.timestamp_updated)
    pub timestamp_updated: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_CommunityPreferences.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_CommunityPreferences {
    fn default() -> &'a CPlayer_CommunityPreferences {
        <CPlayer_CommunityPreferences as crate::Message>::default_instance()
    }
}

impl CPlayer_CommunityPreferences {
    pub fn new() -> CPlayer_CommunityPreferences {
        ::std::default::Default::default()
    }

    // optional bool parenthesize_nicknames = 4;

    pub fn parenthesize_nicknames(&self) -> bool {
        self.parenthesize_nicknames.unwrap_or(false)
    }

    pub fn clear_parenthesize_nicknames(&mut self) {
        self.parenthesize_nicknames = ::std::option::Option::None;
    }

    pub fn has_parenthesize_nicknames(&self) -> bool {
        self.parenthesize_nicknames.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parenthesize_nicknames(&mut self, v: bool) {
        self.parenthesize_nicknames = ::std::option::Option::Some(v);
    }

    // optional .ETextFilterSetting text_filter_setting = 5;

    pub fn text_filter_setting(&self) -> ETextFilterSetting {
        match self.text_filter_setting {
            Some(e) => e.enum_value_or(ETextFilterSetting::k_ETextFilterSettingSteamLabOptedOut),
            None => ETextFilterSetting::k_ETextFilterSettingSteamLabOptedOut,
        }
    }

    pub fn clear_text_filter_setting(&mut self) {
        self.text_filter_setting = ::std::option::Option::None;
    }

    pub fn has_text_filter_setting(&self) -> bool {
        self.text_filter_setting.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text_filter_setting(&mut self, v: ETextFilterSetting) {
        self.text_filter_setting = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool text_filter_ignore_friends = 6;

    pub fn text_filter_ignore_friends(&self) -> bool {
        self.text_filter_ignore_friends.unwrap_or(true)
    }

    pub fn clear_text_filter_ignore_friends(&mut self) {
        self.text_filter_ignore_friends = ::std::option::Option::None;
    }

    pub fn has_text_filter_ignore_friends(&self) -> bool {
        self.text_filter_ignore_friends.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text_filter_ignore_friends(&mut self, v: bool) {
        self.text_filter_ignore_friends = ::std::option::Option::Some(v);
    }

    // optional uint32 text_filter_words_revision = 7;

    pub fn text_filter_words_revision(&self) -> u32 {
        self.text_filter_words_revision.unwrap_or(0)
    }

    pub fn clear_text_filter_words_revision(&mut self) {
        self.text_filter_words_revision = ::std::option::Option::None;
    }

    pub fn has_text_filter_words_revision(&self) -> bool {
        self.text_filter_words_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text_filter_words_revision(&mut self, v: u32) {
        self.text_filter_words_revision = ::std::option::Option::Some(v);
    }

    // optional uint32 timestamp_updated = 3;

    pub fn timestamp_updated(&self) -> u32 {
        self.timestamp_updated.unwrap_or(0)
    }

    pub fn clear_timestamp_updated(&mut self) {
        self.timestamp_updated = ::std::option::Option::None;
    }

    pub fn has_timestamp_updated(&self) -> bool {
        self.timestamp_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_updated(&mut self, v: u32) {
        self.timestamp_updated = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "parenthesize_nicknames",
            |m: &CPlayer_CommunityPreferences| { &m.parenthesize_nicknames },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.parenthesize_nicknames },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "text_filter_setting",
            |m: &CPlayer_CommunityPreferences| { &m.text_filter_setting },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.text_filter_setting },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "text_filter_ignore_friends",
            |m: &CPlayer_CommunityPreferences| { &m.text_filter_ignore_friends },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.text_filter_ignore_friends },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "text_filter_words_revision",
            |m: &CPlayer_CommunityPreferences| { &m.text_filter_words_revision },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.text_filter_words_revision },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp_updated",
            |m: &CPlayer_CommunityPreferences| { &m.timestamp_updated },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.timestamp_updated },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_CommunityPreferences>(
            "CPlayer_CommunityPreferences",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_CommunityPreferences {
    const NAME: &'static str = "CPlayer_CommunityPreferences";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                32 => {
                    self.parenthesize_nicknames = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.text_filter_setting = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                48 => {
                    self.text_filter_ignore_friends = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.text_filter_words_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.timestamp_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.parenthesize_nicknames {
            my_size += 1 + 1;
        }
        if let Some(v) = self.text_filter_setting {
            my_size += crate::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.text_filter_ignore_friends {
            my_size += 1 + 1;
        }
        if let Some(v) = self.text_filter_words_revision {
            my_size += crate::rt::uint32_size(7, v);
        }
        if let Some(v) = self.timestamp_updated {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.parenthesize_nicknames {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.text_filter_setting {
            os.write_enum(5, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.text_filter_ignore_friends {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.text_filter_words_revision {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.timestamp_updated {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_CommunityPreferences {
        CPlayer_CommunityPreferences::new()
    }

    fn clear(&mut self) {
        self.parenthesize_nicknames = ::std::option::Option::None;
        self.text_filter_setting = ::std::option::Option::None;
        self.text_filter_ignore_friends = ::std::option::Option::None;
        self.text_filter_words_revision = ::std::option::Option::None;
        self.timestamp_updated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_CommunityPreferences {
        static instance: CPlayer_CommunityPreferences = CPlayer_CommunityPreferences {
            parenthesize_nicknames: ::std::option::Option::None,
            text_filter_setting: ::std::option::Option::None,
            text_filter_ignore_friends: ::std::option::Option::None,
            text_filter_words_revision: ::std::option::Option::None,
            timestamp_updated: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_CommunityPreferences {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_CommunityPreferences").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_CommunityPreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_CommunityPreferences {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetCommunityPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetCommunityPreferences_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetCommunityPreferences_Response.preferences)
    pub preferences: crate::MessageField<CPlayer_CommunityPreferences>,
    // @@protoc_insertion_point(field:CPlayer_GetCommunityPreferences_Response.content_descriptor_preferences)
    pub content_descriptor_preferences: crate::MessageField<super::steammessages_base::UserContentDescriptorPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetCommunityPreferences_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetCommunityPreferences_Response {
    fn default() -> &'a CPlayer_GetCommunityPreferences_Response {
        <CPlayer_GetCommunityPreferences_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetCommunityPreferences_Response {
    pub fn new() -> CPlayer_GetCommunityPreferences_Response {
        ::std::default::Default::default()
    }

    // optional .CPlayer_CommunityPreferences preferences = 1;

    pub fn preferences(&self) -> &CPlayer_CommunityPreferences {
        self.preferences.as_ref().unwrap_or_else(|| <CPlayer_CommunityPreferences as crate::Message>::default_instance())
    }

    pub fn clear_preferences(&mut self) {
        self.preferences.clear();
    }

    pub fn has_preferences(&self) -> bool {
        self.preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferences(&mut self, v: CPlayer_CommunityPreferences) {
        self.preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preferences(&mut self) -> &mut CPlayer_CommunityPreferences {
        self.preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_preferences(&mut self) -> CPlayer_CommunityPreferences {
        self.preferences.take().unwrap_or_else(|| CPlayer_CommunityPreferences::new())
    }

    // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;

    pub fn content_descriptor_preferences(&self) -> &super::steammessages_base::UserContentDescriptorPreferences {
        self.content_descriptor_preferences.as_ref().unwrap_or_else(|| <super::steammessages_base::UserContentDescriptorPreferences as crate::Message>::default_instance())
    }

    pub fn clear_content_descriptor_preferences(&mut self) {
        self.content_descriptor_preferences.clear();
    }

    pub fn has_content_descriptor_preferences(&self) -> bool {
        self.content_descriptor_preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_descriptor_preferences(&mut self, v: super::steammessages_base::UserContentDescriptorPreferences) {
        self.content_descriptor_preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_descriptor_preferences(&mut self) -> &mut super::steammessages_base::UserContentDescriptorPreferences {
        self.content_descriptor_preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_content_descriptor_preferences(&mut self) -> super::steammessages_base::UserContentDescriptorPreferences {
        self.content_descriptor_preferences.take().unwrap_or_else(|| super::steammessages_base::UserContentDescriptorPreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_CommunityPreferences>(
            "preferences",
            |m: &CPlayer_GetCommunityPreferences_Response| { &m.preferences },
            |m: &mut CPlayer_GetCommunityPreferences_Response| { &mut m.preferences },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steammessages_base::UserContentDescriptorPreferences>(
            "content_descriptor_preferences",
            |m: &CPlayer_GetCommunityPreferences_Response| { &m.content_descriptor_preferences },
            |m: &mut CPlayer_GetCommunityPreferences_Response| { &mut m.content_descriptor_preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetCommunityPreferences_Response>(
            "CPlayer_GetCommunityPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetCommunityPreferences_Response {
    const NAME: &'static str = "CPlayer_GetCommunityPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.content_descriptor_preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.content_descriptor_preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.content_descriptor_preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetCommunityPreferences_Response {
        CPlayer_GetCommunityPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.content_descriptor_preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetCommunityPreferences_Response {
        static instance: CPlayer_GetCommunityPreferences_Response = CPlayer_GetCommunityPreferences_Response {
            preferences: crate::MessageField::none(),
            content_descriptor_preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetCommunityPreferences_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetCommunityPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetCommunityPreferences_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetCommunityPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetCommunityPreferences_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetCommunityPreferences_Request.preferences)
    pub preferences: crate::MessageField<CPlayer_CommunityPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetCommunityPreferences_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetCommunityPreferences_Request {
    fn default() -> &'a CPlayer_SetCommunityPreferences_Request {
        <CPlayer_SetCommunityPreferences_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_SetCommunityPreferences_Request {
    pub fn new() -> CPlayer_SetCommunityPreferences_Request {
        ::std::default::Default::default()
    }

    // optional .CPlayer_CommunityPreferences preferences = 1;

    pub fn preferences(&self) -> &CPlayer_CommunityPreferences {
        self.preferences.as_ref().unwrap_or_else(|| <CPlayer_CommunityPreferences as crate::Message>::default_instance())
    }

    pub fn clear_preferences(&mut self) {
        self.preferences.clear();
    }

    pub fn has_preferences(&self) -> bool {
        self.preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferences(&mut self, v: CPlayer_CommunityPreferences) {
        self.preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preferences(&mut self) -> &mut CPlayer_CommunityPreferences {
        self.preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_preferences(&mut self) -> CPlayer_CommunityPreferences {
        self.preferences.take().unwrap_or_else(|| CPlayer_CommunityPreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_CommunityPreferences>(
            "preferences",
            |m: &CPlayer_SetCommunityPreferences_Request| { &m.preferences },
            |m: &mut CPlayer_SetCommunityPreferences_Request| { &mut m.preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetCommunityPreferences_Request>(
            "CPlayer_SetCommunityPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetCommunityPreferences_Request {
    const NAME: &'static str = "CPlayer_SetCommunityPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetCommunityPreferences_Request {
        CPlayer_SetCommunityPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetCommunityPreferences_Request {
        static instance: CPlayer_SetCommunityPreferences_Request = CPlayer_SetCommunityPreferences_Request {
            preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetCommunityPreferences_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetCommunityPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetCommunityPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetCommunityPreferences_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetCommunityPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetCommunityPreferences_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetCommunityPreferences_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetCommunityPreferences_Response {
    fn default() -> &'a CPlayer_SetCommunityPreferences_Response {
        <CPlayer_SetCommunityPreferences_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_SetCommunityPreferences_Response {
    pub fn new() -> CPlayer_SetCommunityPreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetCommunityPreferences_Response>(
            "CPlayer_SetCommunityPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_SetCommunityPreferences_Response {
    const NAME: &'static str = "CPlayer_SetCommunityPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetCommunityPreferences_Response {
        CPlayer_SetCommunityPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetCommunityPreferences_Response {
        static instance: CPlayer_SetCommunityPreferences_Response = CPlayer_SetCommunityPreferences_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_SetCommunityPreferences_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetCommunityPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetCommunityPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_SetCommunityPreferences_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetTextFilterWords_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetTextFilterWords_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetTextFilterWords_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetTextFilterWords_Request {
    fn default() -> &'a CPlayer_GetTextFilterWords_Request {
        <CPlayer_GetTextFilterWords_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetTextFilterWords_Request {
    pub fn new() -> CPlayer_GetTextFilterWords_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetTextFilterWords_Request>(
            "CPlayer_GetTextFilterWords_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetTextFilterWords_Request {
    const NAME: &'static str = "CPlayer_GetTextFilterWords_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetTextFilterWords_Request {
        CPlayer_GetTextFilterWords_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetTextFilterWords_Request {
        static instance: CPlayer_GetTextFilterWords_Request = CPlayer_GetTextFilterWords_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetTextFilterWords_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetTextFilterWords_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetTextFilterWords_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetTextFilterWords_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_TextFilterWords)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_TextFilterWords {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_TextFilterWords.text_filter_custom_banned_words)
    pub text_filter_custom_banned_words: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_TextFilterWords.text_filter_custom_clean_words)
    pub text_filter_custom_clean_words: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_TextFilterWords.text_filter_words_revision)
    pub text_filter_words_revision: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_TextFilterWords.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_TextFilterWords {
    fn default() -> &'a CPlayer_TextFilterWords {
        <CPlayer_TextFilterWords as crate::Message>::default_instance()
    }
}

impl CPlayer_TextFilterWords {
    pub fn new() -> CPlayer_TextFilterWords {
        ::std::default::Default::default()
    }

    // repeated string text_filter_custom_banned_words = 1;

    pub fn text_filter_custom_banned_words(&self) -> &[::std::string::String] {
        &self.text_filter_custom_banned_words
    }

    pub fn clear_text_filter_custom_banned_words(&mut self) {
        self.text_filter_custom_banned_words.clear();
    }

    // Param is passed by value, moved
    pub fn set_text_filter_custom_banned_words(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.text_filter_custom_banned_words = v;
    }

    // Mutable pointer to the field.
    pub fn mut_text_filter_custom_banned_words(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.text_filter_custom_banned_words
    }

    // Take field
    pub fn take_text_filter_custom_banned_words(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.text_filter_custom_banned_words, ::std::vec::Vec::new())
    }

    // repeated string text_filter_custom_clean_words = 2;

    pub fn text_filter_custom_clean_words(&self) -> &[::std::string::String] {
        &self.text_filter_custom_clean_words
    }

    pub fn clear_text_filter_custom_clean_words(&mut self) {
        self.text_filter_custom_clean_words.clear();
    }

    // Param is passed by value, moved
    pub fn set_text_filter_custom_clean_words(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.text_filter_custom_clean_words = v;
    }

    // Mutable pointer to the field.
    pub fn mut_text_filter_custom_clean_words(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.text_filter_custom_clean_words
    }

    // Take field
    pub fn take_text_filter_custom_clean_words(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.text_filter_custom_clean_words, ::std::vec::Vec::new())
    }

    // optional uint32 text_filter_words_revision = 3;

    pub fn text_filter_words_revision(&self) -> u32 {
        self.text_filter_words_revision.unwrap_or(0)
    }

    pub fn clear_text_filter_words_revision(&mut self) {
        self.text_filter_words_revision = ::std::option::Option::None;
    }

    pub fn has_text_filter_words_revision(&self) -> bool {
        self.text_filter_words_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text_filter_words_revision(&mut self, v: u32) {
        self.text_filter_words_revision = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "text_filter_custom_banned_words",
            |m: &CPlayer_TextFilterWords| { &m.text_filter_custom_banned_words },
            |m: &mut CPlayer_TextFilterWords| { &mut m.text_filter_custom_banned_words },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "text_filter_custom_clean_words",
            |m: &CPlayer_TextFilterWords| { &m.text_filter_custom_clean_words },
            |m: &mut CPlayer_TextFilterWords| { &mut m.text_filter_custom_clean_words },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "text_filter_words_revision",
            |m: &CPlayer_TextFilterWords| { &m.text_filter_words_revision },
            |m: &mut CPlayer_TextFilterWords| { &mut m.text_filter_words_revision },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_TextFilterWords>(
            "CPlayer_TextFilterWords",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_TextFilterWords {
    const NAME: &'static str = "CPlayer_TextFilterWords";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text_filter_custom_banned_words.push(is.read_string()?);
                },
                18 => {
                    self.text_filter_custom_clean_words.push(is.read_string()?);
                },
                24 => {
                    self.text_filter_words_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.text_filter_custom_banned_words {
            my_size += crate::rt::string_size(1, &value);
        };
        for value in &self.text_filter_custom_clean_words {
            my_size += crate::rt::string_size(2, &value);
        };
        if let Some(v) = self.text_filter_words_revision {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.text_filter_custom_banned_words {
            os.write_string(1, &v)?;
        };
        for v in &self.text_filter_custom_clean_words {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.text_filter_words_revision {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_TextFilterWords {
        CPlayer_TextFilterWords::new()
    }

    fn clear(&mut self) {
        self.text_filter_custom_banned_words.clear();
        self.text_filter_custom_clean_words.clear();
        self.text_filter_words_revision = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_TextFilterWords {
        static instance: CPlayer_TextFilterWords = CPlayer_TextFilterWords {
            text_filter_custom_banned_words: ::std::vec::Vec::new(),
            text_filter_custom_clean_words: ::std::vec::Vec::new(),
            text_filter_words_revision: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_TextFilterWords {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_TextFilterWords").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_TextFilterWords {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_TextFilterWords {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetTextFilterWords_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetTextFilterWords_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetTextFilterWords_Response.words)
    pub words: crate::MessageField<CPlayer_TextFilterWords>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetTextFilterWords_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetTextFilterWords_Response {
    fn default() -> &'a CPlayer_GetTextFilterWords_Response {
        <CPlayer_GetTextFilterWords_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetTextFilterWords_Response {
    pub fn new() -> CPlayer_GetTextFilterWords_Response {
        ::std::default::Default::default()
    }

    // optional .CPlayer_TextFilterWords words = 1;

    pub fn words(&self) -> &CPlayer_TextFilterWords {
        self.words.as_ref().unwrap_or_else(|| <CPlayer_TextFilterWords as crate::Message>::default_instance())
    }

    pub fn clear_words(&mut self) {
        self.words.clear();
    }

    pub fn has_words(&self) -> bool {
        self.words.is_some()
    }

    // Param is passed by value, moved
    pub fn set_words(&mut self, v: CPlayer_TextFilterWords) {
        self.words = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_words(&mut self) -> &mut CPlayer_TextFilterWords {
        self.words.mut_or_insert_default()
    }

    // Take field
    pub fn take_words(&mut self) -> CPlayer_TextFilterWords {
        self.words.take().unwrap_or_else(|| CPlayer_TextFilterWords::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_TextFilterWords>(
            "words",
            |m: &CPlayer_GetTextFilterWords_Response| { &m.words },
            |m: &mut CPlayer_GetTextFilterWords_Response| { &mut m.words },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetTextFilterWords_Response>(
            "CPlayer_GetTextFilterWords_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetTextFilterWords_Response {
    const NAME: &'static str = "CPlayer_GetTextFilterWords_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.words)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.words.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.words.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetTextFilterWords_Response {
        CPlayer_GetTextFilterWords_Response::new()
    }

    fn clear(&mut self) {
        self.words.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetTextFilterWords_Response {
        static instance: CPlayer_GetTextFilterWords_Response = CPlayer_GetTextFilterWords_Response {
            words: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetTextFilterWords_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetTextFilterWords_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetTextFilterWords_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetTextFilterWords_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNewSteamAnnouncementState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNewSteamAnnouncementState_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Request.language)
    pub language: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNewSteamAnnouncementState_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNewSteamAnnouncementState_Request {
    fn default() -> &'a CPlayer_GetNewSteamAnnouncementState_Request {
        <CPlayer_GetNewSteamAnnouncementState_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetNewSteamAnnouncementState_Request {
    pub fn new() -> CPlayer_GetNewSteamAnnouncementState_Request {
        ::std::default::Default::default()
    }

    // optional int32 language = 1;

    pub fn language(&self) -> i32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: i32) {
        self.language = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetNewSteamAnnouncementState_Request| { &m.language },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNewSteamAnnouncementState_Request>(
            "CPlayer_GetNewSteamAnnouncementState_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetNewSteamAnnouncementState_Request {
    const NAME: &'static str = "CPlayer_GetNewSteamAnnouncementState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.language = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.language {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNewSteamAnnouncementState_Request {
        CPlayer_GetNewSteamAnnouncementState_Request::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNewSteamAnnouncementState_Request {
        static instance: CPlayer_GetNewSteamAnnouncementState_Request = CPlayer_GetNewSteamAnnouncementState_Request {
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetNewSteamAnnouncementState_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNewSteamAnnouncementState_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNewSteamAnnouncementState_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetNewSteamAnnouncementState_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNewSteamAnnouncementState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNewSteamAnnouncementState_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.state)
    pub state: ::std::option::Option<crate::EnumOrUnknown<super::enums::ENewSteamAnnouncementState>>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
    pub announcement_headline: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
    pub announcement_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.time_posted)
    pub time_posted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.announcement_gid)
    pub announcement_gid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNewSteamAnnouncementState_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNewSteamAnnouncementState_Response {
    fn default() -> &'a CPlayer_GetNewSteamAnnouncementState_Response {
        <CPlayer_GetNewSteamAnnouncementState_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetNewSteamAnnouncementState_Response {
    pub fn new() -> CPlayer_GetNewSteamAnnouncementState_Response {
        ::std::default::Default::default()
    }

    // optional .ENewSteamAnnouncementState state = 1;

    pub fn state(&self) -> super::enums::ENewSteamAnnouncementState {
        match self.state {
            Some(e) => e.enum_value_or(super::enums::ENewSteamAnnouncementState::k_ENewSteamAnnouncementState_Invalid),
            None => super::enums::ENewSteamAnnouncementState::k_ENewSteamAnnouncementState_Invalid,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::enums::ENewSteamAnnouncementState) {
        self.state = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string announcement_headline = 2;

    pub fn announcement_headline(&self) -> &str {
        match self.announcement_headline.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_announcement_headline(&mut self) {
        self.announcement_headline = ::std::option::Option::None;
    }

    pub fn has_announcement_headline(&self) -> bool {
        self.announcement_headline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_headline(&mut self, v: ::std::string::String) {
        self.announcement_headline = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_announcement_headline(&mut self) -> &mut ::std::string::String {
        if self.announcement_headline.is_none() {
            self.announcement_headline = ::std::option::Option::Some(::std::string::String::new());
        }
        self.announcement_headline.as_mut().unwrap()
    }

    // Take field
    pub fn take_announcement_headline(&mut self) -> ::std::string::String {
        self.announcement_headline.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string announcement_url = 3;

    pub fn announcement_url(&self) -> &str {
        match self.announcement_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_announcement_url(&mut self) {
        self.announcement_url = ::std::option::Option::None;
    }

    pub fn has_announcement_url(&self) -> bool {
        self.announcement_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_url(&mut self, v: ::std::string::String) {
        self.announcement_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_announcement_url(&mut self) -> &mut ::std::string::String {
        if self.announcement_url.is_none() {
            self.announcement_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.announcement_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_announcement_url(&mut self) -> ::std::string::String {
        self.announcement_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_posted = 4;

    pub fn time_posted(&self) -> u32 {
        self.time_posted.unwrap_or(0)
    }

    pub fn clear_time_posted(&mut self) {
        self.time_posted = ::std::option::Option::None;
    }

    pub fn has_time_posted(&self) -> bool {
        self.time_posted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_posted(&mut self, v: u32) {
        self.time_posted = ::std::option::Option::Some(v);
    }

    // optional uint64 announcement_gid = 5;

    pub fn announcement_gid(&self) -> u64 {
        self.announcement_gid.unwrap_or(0)
    }

    pub fn clear_announcement_gid(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
    }

    pub fn has_announcement_gid(&self) -> bool {
        self.announcement_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_gid(&mut self, v: u64) {
        self.announcement_gid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.state },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.state },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_headline",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.announcement_headline },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.announcement_headline },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_url",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.announcement_url },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.announcement_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_posted",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.time_posted },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.time_posted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_gid",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.announcement_gid },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.announcement_gid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNewSteamAnnouncementState_Response>(
            "CPlayer_GetNewSteamAnnouncementState_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetNewSteamAnnouncementState_Response {
    const NAME: &'static str = "CPlayer_GetNewSteamAnnouncementState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.announcement_headline = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.announcement_url = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.time_posted = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.announcement_gid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.announcement_headline.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.announcement_url.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.time_posted {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.announcement_gid {
            my_size += crate::rt::uint64_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.state {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.announcement_headline.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.announcement_url.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.time_posted {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.announcement_gid {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNewSteamAnnouncementState_Response {
        CPlayer_GetNewSteamAnnouncementState_Response::new()
    }

    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.announcement_headline = ::std::option::Option::None;
        self.announcement_url = ::std::option::Option::None;
        self.time_posted = ::std::option::Option::None;
        self.announcement_gid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNewSteamAnnouncementState_Response {
        static instance: CPlayer_GetNewSteamAnnouncementState_Response = CPlayer_GetNewSteamAnnouncementState_Response {
            state: ::std::option::Option::None,
            announcement_headline: ::std::option::Option::None,
            announcement_url: ::std::option::Option::None,
            time_posted: ::std::option::Option::None,
            announcement_gid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetNewSteamAnnouncementState_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNewSteamAnnouncementState_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNewSteamAnnouncementState_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetNewSteamAnnouncementState_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_UpdateSteamAnnouncementLastRead_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_UpdateSteamAnnouncementLastRead_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_UpdateSteamAnnouncementLastRead_Request.announcement_gid)
    pub announcement_gid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_UpdateSteamAnnouncementLastRead_Request.time_posted)
    pub time_posted: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_UpdateSteamAnnouncementLastRead_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_UpdateSteamAnnouncementLastRead_Request {
    fn default() -> &'a CPlayer_UpdateSteamAnnouncementLastRead_Request {
        <CPlayer_UpdateSteamAnnouncementLastRead_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_UpdateSteamAnnouncementLastRead_Request {
    pub fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Request {
        ::std::default::Default::default()
    }

    // optional uint64 announcement_gid = 1;

    pub fn announcement_gid(&self) -> u64 {
        self.announcement_gid.unwrap_or(0)
    }

    pub fn clear_announcement_gid(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
    }

    pub fn has_announcement_gid(&self) -> bool {
        self.announcement_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_gid(&mut self, v: u64) {
        self.announcement_gid = ::std::option::Option::Some(v);
    }

    // optional uint32 time_posted = 2;

    pub fn time_posted(&self) -> u32 {
        self.time_posted.unwrap_or(0)
    }

    pub fn clear_time_posted(&mut self) {
        self.time_posted = ::std::option::Option::None;
    }

    pub fn has_time_posted(&self) -> bool {
        self.time_posted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_posted(&mut self, v: u32) {
        self.time_posted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_gid",
            |m: &CPlayer_UpdateSteamAnnouncementLastRead_Request| { &m.announcement_gid },
            |m: &mut CPlayer_UpdateSteamAnnouncementLastRead_Request| { &mut m.announcement_gid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_posted",
            |m: &CPlayer_UpdateSteamAnnouncementLastRead_Request| { &m.time_posted },
            |m: &mut CPlayer_UpdateSteamAnnouncementLastRead_Request| { &mut m.time_posted },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_UpdateSteamAnnouncementLastRead_Request>(
            "CPlayer_UpdateSteamAnnouncementLastRead_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    const NAME: &'static str = "CPlayer_UpdateSteamAnnouncementLastRead_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.announcement_gid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.time_posted = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.announcement_gid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.time_posted {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.announcement_gid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.time_posted {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Request {
        CPlayer_UpdateSteamAnnouncementLastRead_Request::new()
    }

    fn clear(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
        self.time_posted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_UpdateSteamAnnouncementLastRead_Request {
        static instance: CPlayer_UpdateSteamAnnouncementLastRead_Request = CPlayer_UpdateSteamAnnouncementLastRead_Request {
            announcement_gid: ::std::option::Option::None,
            time_posted: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_UpdateSteamAnnouncementLastRead_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_UpdateSteamAnnouncementLastRead_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_UpdateSteamAnnouncementLastRead_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_UpdateSteamAnnouncementLastRead_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_UpdateSteamAnnouncementLastRead_Response {
    fn default() -> &'a CPlayer_UpdateSteamAnnouncementLastRead_Response {
        <CPlayer_UpdateSteamAnnouncementLastRead_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_UpdateSteamAnnouncementLastRead_Response {
    pub fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_UpdateSteamAnnouncementLastRead_Response>(
            "CPlayer_UpdateSteamAnnouncementLastRead_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    const NAME: &'static str = "CPlayer_UpdateSteamAnnouncementLastRead_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Response {
        CPlayer_UpdateSteamAnnouncementLastRead_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_UpdateSteamAnnouncementLastRead_Response {
        static instance: CPlayer_UpdateSteamAnnouncementLastRead_Response = CPlayer_UpdateSteamAnnouncementLastRead_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_UpdateSteamAnnouncementLastRead_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPrivacySettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPrivacySettings_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPrivacySettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPrivacySettings_Request {
    fn default() -> &'a CPlayer_GetPrivacySettings_Request {
        <CPlayer_GetPrivacySettings_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPrivacySettings_Request {
    pub fn new() -> CPlayer_GetPrivacySettings_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPrivacySettings_Request>(
            "CPlayer_GetPrivacySettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPrivacySettings_Request {
    const NAME: &'static str = "CPlayer_GetPrivacySettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPrivacySettings_Request {
        CPlayer_GetPrivacySettings_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPrivacySettings_Request {
        static instance: CPlayer_GetPrivacySettings_Request = CPlayer_GetPrivacySettings_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPrivacySettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPrivacySettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPrivacySettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPrivacySettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPrivacySettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPrivacySettings {
    // message fields
    // @@protoc_insertion_point(field:CPrivacySettings.privacy_state)
    pub privacy_state: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPrivacySettings.privacy_state_inventory)
    pub privacy_state_inventory: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPrivacySettings.privacy_state_gifts)
    pub privacy_state_gifts: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPrivacySettings.privacy_state_ownedgames)
    pub privacy_state_ownedgames: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPrivacySettings.privacy_state_playtime)
    pub privacy_state_playtime: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPrivacySettings.privacy_state_friendslist)
    pub privacy_state_friendslist: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPrivacySettings.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPrivacySettings {
    fn default() -> &'a CPrivacySettings {
        <CPrivacySettings as crate::Message>::default_instance()
    }
}

impl CPrivacySettings {
    pub fn new() -> CPrivacySettings {
        ::std::default::Default::default()
    }

    // optional int32 privacy_state = 1;

    pub fn privacy_state(&self) -> i32 {
        self.privacy_state.unwrap_or(0)
    }

    pub fn clear_privacy_state(&mut self) {
        self.privacy_state = ::std::option::Option::None;
    }

    pub fn has_privacy_state(&self) -> bool {
        self.privacy_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_state(&mut self, v: i32) {
        self.privacy_state = ::std::option::Option::Some(v);
    }

    // optional int32 privacy_state_inventory = 2;

    pub fn privacy_state_inventory(&self) -> i32 {
        self.privacy_state_inventory.unwrap_or(0)
    }

    pub fn clear_privacy_state_inventory(&mut self) {
        self.privacy_state_inventory = ::std::option::Option::None;
    }

    pub fn has_privacy_state_inventory(&self) -> bool {
        self.privacy_state_inventory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_state_inventory(&mut self, v: i32) {
        self.privacy_state_inventory = ::std::option::Option::Some(v);
    }

    // optional int32 privacy_state_gifts = 3;

    pub fn privacy_state_gifts(&self) -> i32 {
        self.privacy_state_gifts.unwrap_or(0)
    }

    pub fn clear_privacy_state_gifts(&mut self) {
        self.privacy_state_gifts = ::std::option::Option::None;
    }

    pub fn has_privacy_state_gifts(&self) -> bool {
        self.privacy_state_gifts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_state_gifts(&mut self, v: i32) {
        self.privacy_state_gifts = ::std::option::Option::Some(v);
    }

    // optional int32 privacy_state_ownedgames = 4;

    pub fn privacy_state_ownedgames(&self) -> i32 {
        self.privacy_state_ownedgames.unwrap_or(0)
    }

    pub fn clear_privacy_state_ownedgames(&mut self) {
        self.privacy_state_ownedgames = ::std::option::Option::None;
    }

    pub fn has_privacy_state_ownedgames(&self) -> bool {
        self.privacy_state_ownedgames.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_state_ownedgames(&mut self, v: i32) {
        self.privacy_state_ownedgames = ::std::option::Option::Some(v);
    }

    // optional int32 privacy_state_playtime = 5;

    pub fn privacy_state_playtime(&self) -> i32 {
        self.privacy_state_playtime.unwrap_or(0)
    }

    pub fn clear_privacy_state_playtime(&mut self) {
        self.privacy_state_playtime = ::std::option::Option::None;
    }

    pub fn has_privacy_state_playtime(&self) -> bool {
        self.privacy_state_playtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_state_playtime(&mut self, v: i32) {
        self.privacy_state_playtime = ::std::option::Option::Some(v);
    }

    // optional int32 privacy_state_friendslist = 6;

    pub fn privacy_state_friendslist(&self) -> i32 {
        self.privacy_state_friendslist.unwrap_or(0)
    }

    pub fn clear_privacy_state_friendslist(&mut self) {
        self.privacy_state_friendslist = ::std::option::Option::None;
    }

    pub fn has_privacy_state_friendslist(&self) -> bool {
        self.privacy_state_friendslist.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_state_friendslist(&mut self, v: i32) {
        self.privacy_state_friendslist = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy_state",
            |m: &CPrivacySettings| { &m.privacy_state },
            |m: &mut CPrivacySettings| { &mut m.privacy_state },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy_state_inventory",
            |m: &CPrivacySettings| { &m.privacy_state_inventory },
            |m: &mut CPrivacySettings| { &mut m.privacy_state_inventory },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy_state_gifts",
            |m: &CPrivacySettings| { &m.privacy_state_gifts },
            |m: &mut CPrivacySettings| { &mut m.privacy_state_gifts },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy_state_ownedgames",
            |m: &CPrivacySettings| { &m.privacy_state_ownedgames },
            |m: &mut CPrivacySettings| { &mut m.privacy_state_ownedgames },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy_state_playtime",
            |m: &CPrivacySettings| { &m.privacy_state_playtime },
            |m: &mut CPrivacySettings| { &mut m.privacy_state_playtime },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy_state_friendslist",
            |m: &CPrivacySettings| { &m.privacy_state_friendslist },
            |m: &mut CPrivacySettings| { &mut m.privacy_state_friendslist },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPrivacySettings>(
            "CPrivacySettings",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPrivacySettings {
    const NAME: &'static str = "CPrivacySettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.privacy_state = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.privacy_state_inventory = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.privacy_state_gifts = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.privacy_state_ownedgames = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.privacy_state_playtime = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.privacy_state_friendslist = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.privacy_state {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.privacy_state_inventory {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.privacy_state_gifts {
            my_size += crate::rt::int32_size(3, v);
        }
        if let Some(v) = self.privacy_state_ownedgames {
            my_size += crate::rt::int32_size(4, v);
        }
        if let Some(v) = self.privacy_state_playtime {
            my_size += crate::rt::int32_size(5, v);
        }
        if let Some(v) = self.privacy_state_friendslist {
            my_size += crate::rt::int32_size(6, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.privacy_state {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.privacy_state_inventory {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.privacy_state_gifts {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.privacy_state_ownedgames {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.privacy_state_playtime {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.privacy_state_friendslist {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPrivacySettings {
        CPrivacySettings::new()
    }

    fn clear(&mut self) {
        self.privacy_state = ::std::option::Option::None;
        self.privacy_state_inventory = ::std::option::Option::None;
        self.privacy_state_gifts = ::std::option::Option::None;
        self.privacy_state_ownedgames = ::std::option::Option::None;
        self.privacy_state_playtime = ::std::option::Option::None;
        self.privacy_state_friendslist = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPrivacySettings {
        static instance: CPrivacySettings = CPrivacySettings {
            privacy_state: ::std::option::Option::None,
            privacy_state_inventory: ::std::option::Option::None,
            privacy_state_gifts: ::std::option::Option::None,
            privacy_state_ownedgames: ::std::option::Option::None,
            privacy_state_playtime: ::std::option::Option::None,
            privacy_state_friendslist: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPrivacySettings {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPrivacySettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPrivacySettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPrivacySettings {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPrivacySettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPrivacySettings_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPrivacySettings_Response.privacy_settings)
    pub privacy_settings: crate::MessageField<CPrivacySettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPrivacySettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPrivacySettings_Response {
    fn default() -> &'a CPlayer_GetPrivacySettings_Response {
        <CPlayer_GetPrivacySettings_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetPrivacySettings_Response {
    pub fn new() -> CPlayer_GetPrivacySettings_Response {
        ::std::default::Default::default()
    }

    // optional .CPrivacySettings privacy_settings = 1;

    pub fn privacy_settings(&self) -> &CPrivacySettings {
        self.privacy_settings.as_ref().unwrap_or_else(|| <CPrivacySettings as crate::Message>::default_instance())
    }

    pub fn clear_privacy_settings(&mut self) {
        self.privacy_settings.clear();
    }

    pub fn has_privacy_settings(&self) -> bool {
        self.privacy_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_settings(&mut self, v: CPrivacySettings) {
        self.privacy_settings = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_privacy_settings(&mut self) -> &mut CPrivacySettings {
        self.privacy_settings.mut_or_insert_default()
    }

    // Take field
    pub fn take_privacy_settings(&mut self) -> CPrivacySettings {
        self.privacy_settings.take().unwrap_or_else(|| CPrivacySettings::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPrivacySettings>(
            "privacy_settings",
            |m: &CPlayer_GetPrivacySettings_Response| { &m.privacy_settings },
            |m: &mut CPlayer_GetPrivacySettings_Response| { &mut m.privacy_settings },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPrivacySettings_Response>(
            "CPlayer_GetPrivacySettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetPrivacySettings_Response {
    const NAME: &'static str = "CPlayer_GetPrivacySettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.privacy_settings)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.privacy_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.privacy_settings.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPrivacySettings_Response {
        CPlayer_GetPrivacySettings_Response::new()
    }

    fn clear(&mut self) {
        self.privacy_settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPrivacySettings_Response {
        static instance: CPlayer_GetPrivacySettings_Response = CPlayer_GetPrivacySettings_Response {
            privacy_settings: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetPrivacySettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPrivacySettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPrivacySettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetPrivacySettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetDurationControl_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetDurationControl_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetDurationControl_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetDurationControl_Request {
    fn default() -> &'a CPlayer_GetDurationControl_Request {
        <CPlayer_GetDurationControl_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_GetDurationControl_Request {
    pub fn new() -> CPlayer_GetDurationControl_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetDurationControl_Request| { &m.appid },
            |m: &mut CPlayer_GetDurationControl_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetDurationControl_Request>(
            "CPlayer_GetDurationControl_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetDurationControl_Request {
    const NAME: &'static str = "CPlayer_GetDurationControl_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetDurationControl_Request {
        CPlayer_GetDurationControl_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetDurationControl_Request {
        static instance: CPlayer_GetDurationControl_Request = CPlayer_GetDurationControl_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetDurationControl_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetDurationControl_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetDurationControl_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetDurationControl_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetDurationControl_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetDurationControl_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.seconds)
    pub seconds: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.seconds_today)
    pub seconds_today: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.is_steamchina_account)
    pub is_steamchina_account: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.is_age_verified)
    pub is_age_verified: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.seconds_allowed_today)
    pub seconds_allowed_today: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.age_verification_pending)
    pub age_verification_pending: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_GetDurationControl_Response.block_minors)
    pub block_minors: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetDurationControl_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetDurationControl_Response {
    fn default() -> &'a CPlayer_GetDurationControl_Response {
        <CPlayer_GetDurationControl_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_GetDurationControl_Response {
    pub fn new() -> CPlayer_GetDurationControl_Response {
        ::std::default::Default::default()
    }

    // optional bool is_enabled = 1;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // optional int32 seconds = 2;

    pub fn seconds(&self) -> i32 {
        self.seconds.unwrap_or(0)
    }

    pub fn clear_seconds(&mut self) {
        self.seconds = ::std::option::Option::None;
    }

    pub fn has_seconds(&self) -> bool {
        self.seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds(&mut self, v: i32) {
        self.seconds = ::std::option::Option::Some(v);
    }

    // optional int32 seconds_today = 3;

    pub fn seconds_today(&self) -> i32 {
        self.seconds_today.unwrap_or(0)
    }

    pub fn clear_seconds_today(&mut self) {
        self.seconds_today = ::std::option::Option::None;
    }

    pub fn has_seconds_today(&self) -> bool {
        self.seconds_today.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_today(&mut self, v: i32) {
        self.seconds_today = ::std::option::Option::Some(v);
    }

    // optional bool is_steamchina_account = 4;

    pub fn is_steamchina_account(&self) -> bool {
        self.is_steamchina_account.unwrap_or(false)
    }

    pub fn clear_is_steamchina_account(&mut self) {
        self.is_steamchina_account = ::std::option::Option::None;
    }

    pub fn has_is_steamchina_account(&self) -> bool {
        self.is_steamchina_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steamchina_account(&mut self, v: bool) {
        self.is_steamchina_account = ::std::option::Option::Some(v);
    }

    // optional bool is_age_verified = 5;

    pub fn is_age_verified(&self) -> bool {
        self.is_age_verified.unwrap_or(false)
    }

    pub fn clear_is_age_verified(&mut self) {
        self.is_age_verified = ::std::option::Option::None;
    }

    pub fn has_is_age_verified(&self) -> bool {
        self.is_age_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_age_verified(&mut self, v: bool) {
        self.is_age_verified = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed_today = 6;

    pub fn seconds_allowed_today(&self) -> u32 {
        self.seconds_allowed_today.unwrap_or(0)
    }

    pub fn clear_seconds_allowed_today(&mut self) {
        self.seconds_allowed_today = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed_today(&self) -> bool {
        self.seconds_allowed_today.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed_today(&mut self, v: u32) {
        self.seconds_allowed_today = ::std::option::Option::Some(v);
    }

    // optional bool age_verification_pending = 7;

    pub fn age_verification_pending(&self) -> bool {
        self.age_verification_pending.unwrap_or(false)
    }

    pub fn clear_age_verification_pending(&mut self) {
        self.age_verification_pending = ::std::option::Option::None;
    }

    pub fn has_age_verification_pending(&self) -> bool {
        self.age_verification_pending.is_some()
    }

    // Param is passed by value, moved
    pub fn set_age_verification_pending(&mut self, v: bool) {
        self.age_verification_pending = ::std::option::Option::Some(v);
    }

    // optional bool block_minors = 8;

    pub fn block_minors(&self) -> bool {
        self.block_minors.unwrap_or(false)
    }

    pub fn clear_block_minors(&mut self) {
        self.block_minors = ::std::option::Option::None;
    }

    pub fn has_block_minors(&self) -> bool {
        self.block_minors.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_minors(&mut self, v: bool) {
        self.block_minors = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_enabled",
            |m: &CPlayer_GetDurationControl_Response| { &m.is_enabled },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.is_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds",
            |m: &CPlayer_GetDurationControl_Response| { &m.seconds },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.seconds },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_today",
            |m: &CPlayer_GetDurationControl_Response| { &m.seconds_today },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.seconds_today },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_steamchina_account",
            |m: &CPlayer_GetDurationControl_Response| { &m.is_steamchina_account },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.is_steamchina_account },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_age_verified",
            |m: &CPlayer_GetDurationControl_Response| { &m.is_age_verified },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.is_age_verified },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_allowed_today",
            |m: &CPlayer_GetDurationControl_Response| { &m.seconds_allowed_today },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.seconds_allowed_today },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "age_verification_pending",
            |m: &CPlayer_GetDurationControl_Response| { &m.age_verification_pending },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.age_verification_pending },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "block_minors",
            |m: &CPlayer_GetDurationControl_Response| { &m.block_minors },
            |m: &mut CPlayer_GetDurationControl_Response| { &mut m.block_minors },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetDurationControl_Response>(
            "CPlayer_GetDurationControl_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_GetDurationControl_Response {
    const NAME: &'static str = "CPlayer_GetDurationControl_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.seconds = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.seconds_today = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.is_steamchina_account = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_age_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.seconds_allowed_today = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.age_verification_pending = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.block_minors = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.seconds {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.seconds_today {
            my_size += crate::rt::int32_size(3, v);
        }
        if let Some(v) = self.is_steamchina_account {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_age_verified {
            my_size += 1 + 1;
        }
        if let Some(v) = self.seconds_allowed_today {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.age_verification_pending {
            my_size += 1 + 1;
        }
        if let Some(v) = self.block_minors {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.is_enabled {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.seconds {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.seconds_today {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.is_steamchina_account {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_age_verified {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.seconds_allowed_today {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.age_verification_pending {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.block_minors {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetDurationControl_Response {
        CPlayer_GetDurationControl_Response::new()
    }

    fn clear(&mut self) {
        self.is_enabled = ::std::option::Option::None;
        self.seconds = ::std::option::Option::None;
        self.seconds_today = ::std::option::Option::None;
        self.is_steamchina_account = ::std::option::Option::None;
        self.is_age_verified = ::std::option::Option::None;
        self.seconds_allowed_today = ::std::option::Option::None;
        self.age_verification_pending = ::std::option::Option::None;
        self.block_minors = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetDurationControl_Response {
        static instance: CPlayer_GetDurationControl_Response = CPlayer_GetDurationControl_Response {
            is_enabled: ::std::option::Option::None,
            seconds: ::std::option::Option::None,
            seconds_today: ::std::option::Option::None,
            is_steamchina_account: ::std::option::Option::None,
            is_age_verified: ::std::option::Option::None,
            seconds_allowed_today: ::std::option::Option::None,
            age_verification_pending: ::std::option::Option::None,
            block_minors: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_GetDurationControl_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetDurationControl_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetDurationControl_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_GetDurationControl_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_RecordDisconnectedPlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_RecordDisconnectedPlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_RecordDisconnectedPlaytime_Request.play_sessions)
    pub play_sessions: ::std::vec::Vec<cplayer_record_disconnected_playtime_request::PlayHistory>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_RecordDisconnectedPlaytime_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_RecordDisconnectedPlaytime_Request {
    fn default() -> &'a CPlayer_RecordDisconnectedPlaytime_Request {
        <CPlayer_RecordDisconnectedPlaytime_Request as crate::Message>::default_instance()
    }
}

impl CPlayer_RecordDisconnectedPlaytime_Request {
    pub fn new() -> CPlayer_RecordDisconnectedPlaytime_Request {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory play_sessions = 3;

    pub fn play_sessions(&self) -> &[cplayer_record_disconnected_playtime_request::PlayHistory] {
        &self.play_sessions
    }

    pub fn clear_play_sessions(&mut self) {
        self.play_sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_play_sessions(&mut self, v: ::std::vec::Vec<cplayer_record_disconnected_playtime_request::PlayHistory>) {
        self.play_sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_play_sessions(&mut self) -> &mut ::std::vec::Vec<cplayer_record_disconnected_playtime_request::PlayHistory> {
        &mut self.play_sessions
    }

    // Take field
    pub fn take_play_sessions(&mut self) -> ::std::vec::Vec<cplayer_record_disconnected_playtime_request::PlayHistory> {
        ::std::mem::replace(&mut self.play_sessions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "play_sessions",
            |m: &CPlayer_RecordDisconnectedPlaytime_Request| { &m.play_sessions },
            |m: &mut CPlayer_RecordDisconnectedPlaytime_Request| { &mut m.play_sessions },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_RecordDisconnectedPlaytime_Request>(
            "CPlayer_RecordDisconnectedPlaytime_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_RecordDisconnectedPlaytime_Request {
    const NAME: &'static str = "CPlayer_RecordDisconnectedPlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.play_sessions.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.play_sessions {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.play_sessions {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_RecordDisconnectedPlaytime_Request {
        CPlayer_RecordDisconnectedPlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.play_sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_RecordDisconnectedPlaytime_Request {
        static instance: CPlayer_RecordDisconnectedPlaytime_Request = CPlayer_RecordDisconnectedPlaytime_Request {
            play_sessions: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_RecordDisconnectedPlaytime_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_RecordDisconnectedPlaytime_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_RecordDisconnectedPlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_RecordDisconnectedPlaytime_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_RecordDisconnectedPlaytime_Request`
pub mod cplayer_record_disconnected_playtime_request {
    // @@protoc_insertion_point(message:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayHistory {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.session_time_start)
        pub session_time_start: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.seconds)
        pub seconds: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.offline)
        pub offline: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.owner)
        pub owner: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayHistory {
        fn default() -> &'a PlayHistory {
            <PlayHistory as crate::Message>::default_instance()
        }
    }

    impl PlayHistory {
        pub fn new() -> PlayHistory {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 session_time_start = 2;

        pub fn session_time_start(&self) -> u32 {
            self.session_time_start.unwrap_or(0)
        }

        pub fn clear_session_time_start(&mut self) {
            self.session_time_start = ::std::option::Option::None;
        }

        pub fn has_session_time_start(&self) -> bool {
            self.session_time_start.is_some()
        }

        // Param is passed by value, moved
        pub fn set_session_time_start(&mut self, v: u32) {
            self.session_time_start = ::std::option::Option::Some(v);
        }

        // optional uint32 seconds = 3;

        pub fn seconds(&self) -> u32 {
            self.seconds.unwrap_or(0)
        }

        pub fn clear_seconds(&mut self) {
            self.seconds = ::std::option::Option::None;
        }

        pub fn has_seconds(&self) -> bool {
            self.seconds.is_some()
        }

        // Param is passed by value, moved
        pub fn set_seconds(&mut self, v: u32) {
            self.seconds = ::std::option::Option::Some(v);
        }

        // optional bool offline = 4;

        pub fn offline(&self) -> bool {
            self.offline.unwrap_or(false)
        }

        pub fn clear_offline(&mut self) {
            self.offline = ::std::option::Option::None;
        }

        pub fn has_offline(&self) -> bool {
            self.offline.is_some()
        }

        // Param is passed by value, moved
        pub fn set_offline(&mut self, v: bool) {
            self.offline = ::std::option::Option::Some(v);
        }

        // optional uint32 owner = 5;

        pub fn owner(&self) -> u32 {
            self.owner.unwrap_or(0)
        }

        pub fn clear_owner(&mut self) {
            self.owner = ::std::option::Option::None;
        }

        pub fn has_owner(&self) -> bool {
            self.owner.is_some()
        }

        // Param is passed by value, moved
        pub fn set_owner(&mut self, v: u32) {
            self.owner = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &PlayHistory| { &m.appid },
                |m: &mut PlayHistory| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "session_time_start",
                |m: &PlayHistory| { &m.session_time_start },
                |m: &mut PlayHistory| { &mut m.session_time_start },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "seconds",
                |m: &PlayHistory| { &m.seconds },
                |m: &mut PlayHistory| { &mut m.seconds },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "offline",
                |m: &PlayHistory| { &m.offline },
                |m: &mut PlayHistory| { &mut m.offline },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "owner",
                |m: &PlayHistory| { &m.owner },
                |m: &mut PlayHistory| { &mut m.owner },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PlayHistory>(
                "CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PlayHistory {
        const NAME: &'static str = "PlayHistory";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.session_time_start = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.seconds = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.offline = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.owner = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.session_time_start {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.seconds {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.offline {
                my_size += 1 + 1;
            }
            if let Some(v) = self.owner {
                my_size += crate::rt::uint32_size(5, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.session_time_start {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.seconds {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.offline {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.owner {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayHistory {
            PlayHistory::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.session_time_start = ::std::option::Option::None;
            self.seconds = ::std::option::Option::None;
            self.offline = ::std::option::Option::None;
            self.owner = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayHistory {
            static instance: PlayHistory = PlayHistory {
                appid: ::std::option::Option::None,
                session_time_start: ::std::option::Option::None,
                seconds: ::std::option::Option::None,
                offline: ::std::option::Option::None,
                owner: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PlayHistory {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PlayHistory {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PlayHistory {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_RecordDisconnectedPlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_RecordDisconnectedPlaytime_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_RecordDisconnectedPlaytime_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_RecordDisconnectedPlaytime_Response {
    fn default() -> &'a CPlayer_RecordDisconnectedPlaytime_Response {
        <CPlayer_RecordDisconnectedPlaytime_Response as crate::Message>::default_instance()
    }
}

impl CPlayer_RecordDisconnectedPlaytime_Response {
    pub fn new() -> CPlayer_RecordDisconnectedPlaytime_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_RecordDisconnectedPlaytime_Response>(
            "CPlayer_RecordDisconnectedPlaytime_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_RecordDisconnectedPlaytime_Response {
    const NAME: &'static str = "CPlayer_RecordDisconnectedPlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_RecordDisconnectedPlaytime_Response {
        CPlayer_RecordDisconnectedPlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_RecordDisconnectedPlaytime_Response {
        static instance: CPlayer_RecordDisconnectedPlaytime_Response = CPlayer_RecordDisconnectedPlaytime_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_RecordDisconnectedPlaytime_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_RecordDisconnectedPlaytime_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_RecordDisconnectedPlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_RecordDisconnectedPlaytime_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_LastPlayedTimes_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_LastPlayedTimes_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_LastPlayedTimes_Notification.games)
    pub games: ::std::vec::Vec<cplayer_get_last_played_times_response::Game>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_LastPlayedTimes_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_LastPlayedTimes_Notification {
    fn default() -> &'a CPlayer_LastPlayedTimes_Notification {
        <CPlayer_LastPlayedTimes_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_LastPlayedTimes_Notification {
    pub fn new() -> CPlayer_LastPlayedTimes_Notification {
        ::std::default::Default::default()
    }

    // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;

    pub fn games(&self) -> &[cplayer_get_last_played_times_response::Game] {
        &self.games
    }

    pub fn clear_games(&mut self) {
        self.games.clear();
    }

    // Param is passed by value, moved
    pub fn set_games(&mut self, v: ::std::vec::Vec<cplayer_get_last_played_times_response::Game>) {
        self.games = v;
    }

    // Mutable pointer to the field.
    pub fn mut_games(&mut self) -> &mut ::std::vec::Vec<cplayer_get_last_played_times_response::Game> {
        &mut self.games
    }

    // Take field
    pub fn take_games(&mut self) -> ::std::vec::Vec<cplayer_get_last_played_times_response::Game> {
        ::std::mem::replace(&mut self.games, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "games",
            |m: &CPlayer_LastPlayedTimes_Notification| { &m.games },
            |m: &mut CPlayer_LastPlayedTimes_Notification| { &mut m.games },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_LastPlayedTimes_Notification>(
            "CPlayer_LastPlayedTimes_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_LastPlayedTimes_Notification {
    const NAME: &'static str = "CPlayer_LastPlayedTimes_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.games.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.games {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_LastPlayedTimes_Notification {
        CPlayer_LastPlayedTimes_Notification::new()
    }

    fn clear(&mut self) {
        self.games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_LastPlayedTimes_Notification {
        static instance: CPlayer_LastPlayedTimes_Notification = CPlayer_LastPlayedTimes_Notification {
            games: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_LastPlayedTimes_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_LastPlayedTimes_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_LastPlayedTimes_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_LastPlayedTimes_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_FriendNicknameChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_FriendNicknameChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_FriendNicknameChanged_Notification.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_FriendNicknameChanged_Notification.nickname)
    pub nickname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_FriendNicknameChanged_Notification.is_echo_to_self)
    pub is_echo_to_self: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_FriendNicknameChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_FriendNicknameChanged_Notification {
    fn default() -> &'a CPlayer_FriendNicknameChanged_Notification {
        <CPlayer_FriendNicknameChanged_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_FriendNicknameChanged_Notification {
    pub fn new() -> CPlayer_FriendNicknameChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional string nickname = 2;

    pub fn nickname(&self) -> &str {
        match self.nickname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nickname(&mut self) {
        self.nickname = ::std::option::Option::None;
    }

    pub fn has_nickname(&self) -> bool {
        self.nickname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nickname(&mut self, v: ::std::string::String) {
        self.nickname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
        if self.nickname.is_none() {
            self.nickname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nickname.as_mut().unwrap()
    }

    // Take field
    pub fn take_nickname(&mut self) -> ::std::string::String {
        self.nickname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_echo_to_self = 3;

    pub fn is_echo_to_self(&self) -> bool {
        self.is_echo_to_self.unwrap_or(false)
    }

    pub fn clear_is_echo_to_self(&mut self) {
        self.is_echo_to_self = ::std::option::Option::None;
    }

    pub fn has_is_echo_to_self(&self) -> bool {
        self.is_echo_to_self.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_echo_to_self(&mut self, v: bool) {
        self.is_echo_to_self = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CPlayer_FriendNicknameChanged_Notification| { &m.accountid },
            |m: &mut CPlayer_FriendNicknameChanged_Notification| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "nickname",
            |m: &CPlayer_FriendNicknameChanged_Notification| { &m.nickname },
            |m: &mut CPlayer_FriendNicknameChanged_Notification| { &mut m.nickname },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_echo_to_self",
            |m: &CPlayer_FriendNicknameChanged_Notification| { &m.is_echo_to_self },
            |m: &mut CPlayer_FriendNicknameChanged_Notification| { &mut m.is_echo_to_self },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_FriendNicknameChanged_Notification>(
            "CPlayer_FriendNicknameChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_FriendNicknameChanged_Notification {
    const NAME: &'static str = "CPlayer_FriendNicknameChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    self.nickname = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.is_echo_to_self = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += 1 + 4;
        }
        if let Some(v) = self.nickname.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.is_echo_to_self {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accountid {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.nickname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.is_echo_to_self {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_FriendNicknameChanged_Notification {
        CPlayer_FriendNicknameChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.nickname = ::std::option::Option::None;
        self.is_echo_to_self = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_FriendNicknameChanged_Notification {
        static instance: CPlayer_FriendNicknameChanged_Notification = CPlayer_FriendNicknameChanged_Notification {
            accountid: ::std::option::Option::None,
            nickname: ::std::option::Option::None,
            is_echo_to_self: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_FriendNicknameChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_FriendNicknameChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_FriendNicknameChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_FriendNicknameChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_FriendEquippedProfileItemsChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_FriendEquippedProfileItemsChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_FriendEquippedProfileItemsChanged_Notification.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_FriendEquippedProfileItemsChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_FriendEquippedProfileItemsChanged_Notification {
    fn default() -> &'a CPlayer_FriendEquippedProfileItemsChanged_Notification {
        <CPlayer_FriendEquippedProfileItemsChanged_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_FriendEquippedProfileItemsChanged_Notification {
    pub fn new() -> CPlayer_FriendEquippedProfileItemsChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CPlayer_FriendEquippedProfileItemsChanged_Notification| { &m.accountid },
            |m: &mut CPlayer_FriendEquippedProfileItemsChanged_Notification| { &mut m.accountid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_FriendEquippedProfileItemsChanged_Notification>(
            "CPlayer_FriendEquippedProfileItemsChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_FriendEquippedProfileItemsChanged_Notification {
    const NAME: &'static str = "CPlayer_FriendEquippedProfileItemsChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += 1 + 4;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accountid {
            os.write_fixed32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_FriendEquippedProfileItemsChanged_Notification {
        CPlayer_FriendEquippedProfileItemsChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_FriendEquippedProfileItemsChanged_Notification {
        static instance: CPlayer_FriendEquippedProfileItemsChanged_Notification = CPlayer_FriendEquippedProfileItemsChanged_Notification {
            accountid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_FriendEquippedProfileItemsChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_FriendEquippedProfileItemsChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_FriendEquippedProfileItemsChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_FriendEquippedProfileItemsChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_NewSteamAnnouncementState_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_NewSteamAnnouncementState_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_NewSteamAnnouncementState_Notification.state)
    pub state: ::std::option::Option<crate::EnumOrUnknown<super::enums::ENewSteamAnnouncementState>>,
    // @@protoc_insertion_point(field:CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
    pub announcement_headline: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
    pub announcement_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_NewSteamAnnouncementState_Notification.time_posted)
    pub time_posted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_NewSteamAnnouncementState_Notification.announcement_gid)
    pub announcement_gid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_NewSteamAnnouncementState_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_NewSteamAnnouncementState_Notification {
    fn default() -> &'a CPlayer_NewSteamAnnouncementState_Notification {
        <CPlayer_NewSteamAnnouncementState_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_NewSteamAnnouncementState_Notification {
    pub fn new() -> CPlayer_NewSteamAnnouncementState_Notification {
        ::std::default::Default::default()
    }

    // optional .ENewSteamAnnouncementState state = 1;

    pub fn state(&self) -> super::enums::ENewSteamAnnouncementState {
        match self.state {
            Some(e) => e.enum_value_or(super::enums::ENewSteamAnnouncementState::k_ENewSteamAnnouncementState_Invalid),
            None => super::enums::ENewSteamAnnouncementState::k_ENewSteamAnnouncementState_Invalid,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::enums::ENewSteamAnnouncementState) {
        self.state = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string announcement_headline = 2;

    pub fn announcement_headline(&self) -> &str {
        match self.announcement_headline.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_announcement_headline(&mut self) {
        self.announcement_headline = ::std::option::Option::None;
    }

    pub fn has_announcement_headline(&self) -> bool {
        self.announcement_headline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_headline(&mut self, v: ::std::string::String) {
        self.announcement_headline = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_announcement_headline(&mut self) -> &mut ::std::string::String {
        if self.announcement_headline.is_none() {
            self.announcement_headline = ::std::option::Option::Some(::std::string::String::new());
        }
        self.announcement_headline.as_mut().unwrap()
    }

    // Take field
    pub fn take_announcement_headline(&mut self) -> ::std::string::String {
        self.announcement_headline.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string announcement_url = 3;

    pub fn announcement_url(&self) -> &str {
        match self.announcement_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_announcement_url(&mut self) {
        self.announcement_url = ::std::option::Option::None;
    }

    pub fn has_announcement_url(&self) -> bool {
        self.announcement_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_url(&mut self, v: ::std::string::String) {
        self.announcement_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_announcement_url(&mut self) -> &mut ::std::string::String {
        if self.announcement_url.is_none() {
            self.announcement_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.announcement_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_announcement_url(&mut self) -> ::std::string::String {
        self.announcement_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_posted = 4;

    pub fn time_posted(&self) -> u32 {
        self.time_posted.unwrap_or(0)
    }

    pub fn clear_time_posted(&mut self) {
        self.time_posted = ::std::option::Option::None;
    }

    pub fn has_time_posted(&self) -> bool {
        self.time_posted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_posted(&mut self, v: u32) {
        self.time_posted = ::std::option::Option::Some(v);
    }

    // optional uint64 announcement_gid = 5;

    pub fn announcement_gid(&self) -> u64 {
        self.announcement_gid.unwrap_or(0)
    }

    pub fn clear_announcement_gid(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
    }

    pub fn has_announcement_gid(&self) -> bool {
        self.announcement_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_gid(&mut self, v: u64) {
        self.announcement_gid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CPlayer_NewSteamAnnouncementState_Notification| { &m.state },
            |m: &mut CPlayer_NewSteamAnnouncementState_Notification| { &mut m.state },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_headline",
            |m: &CPlayer_NewSteamAnnouncementState_Notification| { &m.announcement_headline },
            |m: &mut CPlayer_NewSteamAnnouncementState_Notification| { &mut m.announcement_headline },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_url",
            |m: &CPlayer_NewSteamAnnouncementState_Notification| { &m.announcement_url },
            |m: &mut CPlayer_NewSteamAnnouncementState_Notification| { &mut m.announcement_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_posted",
            |m: &CPlayer_NewSteamAnnouncementState_Notification| { &m.time_posted },
            |m: &mut CPlayer_NewSteamAnnouncementState_Notification| { &mut m.time_posted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_gid",
            |m: &CPlayer_NewSteamAnnouncementState_Notification| { &m.announcement_gid },
            |m: &mut CPlayer_NewSteamAnnouncementState_Notification| { &mut m.announcement_gid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_NewSteamAnnouncementState_Notification>(
            "CPlayer_NewSteamAnnouncementState_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_NewSteamAnnouncementState_Notification {
    const NAME: &'static str = "CPlayer_NewSteamAnnouncementState_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.announcement_headline = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.announcement_url = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.time_posted = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.announcement_gid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.announcement_headline.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.announcement_url.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.time_posted {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.announcement_gid {
            my_size += crate::rt::uint64_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.state {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.announcement_headline.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.announcement_url.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.time_posted {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.announcement_gid {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_NewSteamAnnouncementState_Notification {
        CPlayer_NewSteamAnnouncementState_Notification::new()
    }

    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.announcement_headline = ::std::option::Option::None;
        self.announcement_url = ::std::option::Option::None;
        self.time_posted = ::std::option::Option::None;
        self.announcement_gid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_NewSteamAnnouncementState_Notification {
        static instance: CPlayer_NewSteamAnnouncementState_Notification = CPlayer_NewSteamAnnouncementState_Notification {
            state: ::std::option::Option::None,
            announcement_headline: ::std::option::Option::None,
            announcement_url: ::std::option::Option::None,
            time_posted: ::std::option::Option::None,
            announcement_gid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_NewSteamAnnouncementState_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_NewSteamAnnouncementState_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_NewSteamAnnouncementState_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_NewSteamAnnouncementState_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_CommunityPreferencesChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_CommunityPreferencesChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferencesChanged_Notification.preferences)
    pub preferences: crate::MessageField<CPlayer_CommunityPreferences>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferencesChanged_Notification.content_descriptor_preferences)
    pub content_descriptor_preferences: crate::MessageField<super::steammessages_base::UserContentDescriptorPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_CommunityPreferencesChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_CommunityPreferencesChanged_Notification {
    fn default() -> &'a CPlayer_CommunityPreferencesChanged_Notification {
        <CPlayer_CommunityPreferencesChanged_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_CommunityPreferencesChanged_Notification {
    pub fn new() -> CPlayer_CommunityPreferencesChanged_Notification {
        ::std::default::Default::default()
    }

    // optional .CPlayer_CommunityPreferences preferences = 1;

    pub fn preferences(&self) -> &CPlayer_CommunityPreferences {
        self.preferences.as_ref().unwrap_or_else(|| <CPlayer_CommunityPreferences as crate::Message>::default_instance())
    }

    pub fn clear_preferences(&mut self) {
        self.preferences.clear();
    }

    pub fn has_preferences(&self) -> bool {
        self.preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferences(&mut self, v: CPlayer_CommunityPreferences) {
        self.preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preferences(&mut self) -> &mut CPlayer_CommunityPreferences {
        self.preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_preferences(&mut self) -> CPlayer_CommunityPreferences {
        self.preferences.take().unwrap_or_else(|| CPlayer_CommunityPreferences::new())
    }

    // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;

    pub fn content_descriptor_preferences(&self) -> &super::steammessages_base::UserContentDescriptorPreferences {
        self.content_descriptor_preferences.as_ref().unwrap_or_else(|| <super::steammessages_base::UserContentDescriptorPreferences as crate::Message>::default_instance())
    }

    pub fn clear_content_descriptor_preferences(&mut self) {
        self.content_descriptor_preferences.clear();
    }

    pub fn has_content_descriptor_preferences(&self) -> bool {
        self.content_descriptor_preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_descriptor_preferences(&mut self, v: super::steammessages_base::UserContentDescriptorPreferences) {
        self.content_descriptor_preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_descriptor_preferences(&mut self) -> &mut super::steammessages_base::UserContentDescriptorPreferences {
        self.content_descriptor_preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_content_descriptor_preferences(&mut self) -> super::steammessages_base::UserContentDescriptorPreferences {
        self.content_descriptor_preferences.take().unwrap_or_else(|| super::steammessages_base::UserContentDescriptorPreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_CommunityPreferences>(
            "preferences",
            |m: &CPlayer_CommunityPreferencesChanged_Notification| { &m.preferences },
            |m: &mut CPlayer_CommunityPreferencesChanged_Notification| { &mut m.preferences },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steammessages_base::UserContentDescriptorPreferences>(
            "content_descriptor_preferences",
            |m: &CPlayer_CommunityPreferencesChanged_Notification| { &m.content_descriptor_preferences },
            |m: &mut CPlayer_CommunityPreferencesChanged_Notification| { &mut m.content_descriptor_preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_CommunityPreferencesChanged_Notification>(
            "CPlayer_CommunityPreferencesChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_CommunityPreferencesChanged_Notification {
    const NAME: &'static str = "CPlayer_CommunityPreferencesChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.content_descriptor_preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.content_descriptor_preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.content_descriptor_preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_CommunityPreferencesChanged_Notification {
        CPlayer_CommunityPreferencesChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.content_descriptor_preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_CommunityPreferencesChanged_Notification {
        static instance: CPlayer_CommunityPreferencesChanged_Notification = CPlayer_CommunityPreferencesChanged_Notification {
            preferences: crate::MessageField::none(),
            content_descriptor_preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_CommunityPreferencesChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_CommunityPreferencesChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_CommunityPreferencesChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_CommunityPreferencesChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_TextFilterWordsChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_TextFilterWordsChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_TextFilterWordsChanged_Notification.words)
    pub words: crate::MessageField<CPlayer_TextFilterWords>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_TextFilterWordsChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_TextFilterWordsChanged_Notification {
    fn default() -> &'a CPlayer_TextFilterWordsChanged_Notification {
        <CPlayer_TextFilterWordsChanged_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_TextFilterWordsChanged_Notification {
    pub fn new() -> CPlayer_TextFilterWordsChanged_Notification {
        ::std::default::Default::default()
    }

    // optional .CPlayer_TextFilterWords words = 1;

    pub fn words(&self) -> &CPlayer_TextFilterWords {
        self.words.as_ref().unwrap_or_else(|| <CPlayer_TextFilterWords as crate::Message>::default_instance())
    }

    pub fn clear_words(&mut self) {
        self.words.clear();
    }

    pub fn has_words(&self) -> bool {
        self.words.is_some()
    }

    // Param is passed by value, moved
    pub fn set_words(&mut self, v: CPlayer_TextFilterWords) {
        self.words = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_words(&mut self) -> &mut CPlayer_TextFilterWords {
        self.words.mut_or_insert_default()
    }

    // Take field
    pub fn take_words(&mut self) -> CPlayer_TextFilterWords {
        self.words.take().unwrap_or_else(|| CPlayer_TextFilterWords::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_TextFilterWords>(
            "words",
            |m: &CPlayer_TextFilterWordsChanged_Notification| { &m.words },
            |m: &mut CPlayer_TextFilterWordsChanged_Notification| { &mut m.words },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_TextFilterWordsChanged_Notification>(
            "CPlayer_TextFilterWordsChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_TextFilterWordsChanged_Notification {
    const NAME: &'static str = "CPlayer_TextFilterWordsChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.words)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.words.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.words.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_TextFilterWordsChanged_Notification {
        CPlayer_TextFilterWordsChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.words.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_TextFilterWordsChanged_Notification {
        static instance: CPlayer_TextFilterWordsChanged_Notification = CPlayer_TextFilterWordsChanged_Notification {
            words: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_TextFilterWordsChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_TextFilterWordsChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_TextFilterWordsChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_TextFilterWordsChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_PerFriendPreferencesChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_PerFriendPreferencesChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_PerFriendPreferencesChanged_Notification.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_PerFriendPreferencesChanged_Notification.preferences)
    pub preferences: crate::MessageField<PerFriendPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_PerFriendPreferencesChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_PerFriendPreferencesChanged_Notification {
    fn default() -> &'a CPlayer_PerFriendPreferencesChanged_Notification {
        <CPlayer_PerFriendPreferencesChanged_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_PerFriendPreferencesChanged_Notification {
    pub fn new() -> CPlayer_PerFriendPreferencesChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional .PerFriendPreferences preferences = 2;

    pub fn preferences(&self) -> &PerFriendPreferences {
        self.preferences.as_ref().unwrap_or_else(|| <PerFriendPreferences as crate::Message>::default_instance())
    }

    pub fn clear_preferences(&mut self) {
        self.preferences.clear();
    }

    pub fn has_preferences(&self) -> bool {
        self.preferences.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferences(&mut self, v: PerFriendPreferences) {
        self.preferences = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preferences(&mut self) -> &mut PerFriendPreferences {
        self.preferences.mut_or_insert_default()
    }

    // Take field
    pub fn take_preferences(&mut self) -> PerFriendPreferences {
        self.preferences.take().unwrap_or_else(|| PerFriendPreferences::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CPlayer_PerFriendPreferencesChanged_Notification| { &m.accountid },
            |m: &mut CPlayer_PerFriendPreferencesChanged_Notification| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, PerFriendPreferences>(
            "preferences",
            |m: &CPlayer_PerFriendPreferencesChanged_Notification| { &m.preferences },
            |m: &mut CPlayer_PerFriendPreferencesChanged_Notification| { &mut m.preferences },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_PerFriendPreferencesChanged_Notification>(
            "CPlayer_PerFriendPreferencesChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_PerFriendPreferencesChanged_Notification {
    const NAME: &'static str = "CPlayer_PerFriendPreferencesChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += 1 + 4;
        }
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accountid {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.preferences.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_PerFriendPreferencesChanged_Notification {
        CPlayer_PerFriendPreferencesChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_PerFriendPreferencesChanged_Notification {
        static instance: CPlayer_PerFriendPreferencesChanged_Notification = CPlayer_PerFriendPreferencesChanged_Notification {
            accountid: ::std::option::Option::None,
            preferences: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_PerFriendPreferencesChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_PerFriendPreferencesChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_PerFriendPreferencesChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_PerFriendPreferencesChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_PrivacySettingsChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_PrivacySettingsChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_PrivacySettingsChanged_Notification.privacy_settings)
    pub privacy_settings: crate::MessageField<CPrivacySettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_PrivacySettingsChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_PrivacySettingsChanged_Notification {
    fn default() -> &'a CPlayer_PrivacySettingsChanged_Notification {
        <CPlayer_PrivacySettingsChanged_Notification as crate::Message>::default_instance()
    }
}

impl CPlayer_PrivacySettingsChanged_Notification {
    pub fn new() -> CPlayer_PrivacySettingsChanged_Notification {
        ::std::default::Default::default()
    }

    // optional .CPrivacySettings privacy_settings = 1;

    pub fn privacy_settings(&self) -> &CPrivacySettings {
        self.privacy_settings.as_ref().unwrap_or_else(|| <CPrivacySettings as crate::Message>::default_instance())
    }

    pub fn clear_privacy_settings(&mut self) {
        self.privacy_settings.clear();
    }

    pub fn has_privacy_settings(&self) -> bool {
        self.privacy_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy_settings(&mut self, v: CPrivacySettings) {
        self.privacy_settings = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_privacy_settings(&mut self) -> &mut CPrivacySettings {
        self.privacy_settings.mut_or_insert_default()
    }

    // Take field
    pub fn take_privacy_settings(&mut self) -> CPrivacySettings {
        self.privacy_settings.take().unwrap_or_else(|| CPrivacySettings::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CPrivacySettings>(
            "privacy_settings",
            |m: &CPlayer_PrivacySettingsChanged_Notification| { &m.privacy_settings },
            |m: &mut CPlayer_PrivacySettingsChanged_Notification| { &mut m.privacy_settings },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_PrivacySettingsChanged_Notification>(
            "CPlayer_PrivacySettingsChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CPlayer_PrivacySettingsChanged_Notification {
    const NAME: &'static str = "CPlayer_PrivacySettingsChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.privacy_settings)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.privacy_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.privacy_settings.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_PrivacySettingsChanged_Notification {
        CPlayer_PrivacySettingsChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.privacy_settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_PrivacySettingsChanged_Notification {
        static instance: CPlayer_PrivacySettingsChanged_Notification = CPlayer_PrivacySettingsChanged_Notification {
            privacy_settings: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CPlayer_PrivacySettingsChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_PrivacySettingsChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_PrivacySettingsChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CPlayer_PrivacySettingsChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EProfileCustomizationStyle)
pub enum EProfileCustomizationStyle {
    // @@protoc_insertion_point(enum_value:EProfileCustomizationStyle.k_EProfileCustomizationStyleDefault)
    k_EProfileCustomizationStyleDefault = 0,
    // @@protoc_insertion_point(enum_value:EProfileCustomizationStyle.k_EProfileCustomizationStyleSelected)
    k_EProfileCustomizationStyleSelected = 1,
    // @@protoc_insertion_point(enum_value:EProfileCustomizationStyle.k_EProfileCustomizationStyleRarest)
    k_EProfileCustomizationStyleRarest = 2,
    // @@protoc_insertion_point(enum_value:EProfileCustomizationStyle.k_EProfileCustomizationStyleMostRecent)
    k_EProfileCustomizationStyleMostRecent = 3,
    // @@protoc_insertion_point(enum_value:EProfileCustomizationStyle.k_EProfileCustomizationStyleRandom)
    k_EProfileCustomizationStyleRandom = 4,
    // @@protoc_insertion_point(enum_value:EProfileCustomizationStyle.k_EProfileCustomizationStyleHighestRated)
    k_EProfileCustomizationStyleHighestRated = 5,
}

impl crate::Enum for EProfileCustomizationStyle {
    const NAME: &'static str = "EProfileCustomizationStyle";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EProfileCustomizationStyle> {
        match value {
            0 => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleDefault),
            1 => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleSelected),
            2 => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleRarest),
            3 => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleMostRecent),
            4 => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleRandom),
            5 => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleHighestRated),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EProfileCustomizationStyle> {
        match str {
            "k_EProfileCustomizationStyleDefault" => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleDefault),
            "k_EProfileCustomizationStyleSelected" => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleSelected),
            "k_EProfileCustomizationStyleRarest" => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleRarest),
            "k_EProfileCustomizationStyleMostRecent" => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleMostRecent),
            "k_EProfileCustomizationStyleRandom" => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleRandom),
            "k_EProfileCustomizationStyleHighestRated" => ::std::option::Option::Some(EProfileCustomizationStyle::k_EProfileCustomizationStyleHighestRated),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EProfileCustomizationStyle] = &[
        EProfileCustomizationStyle::k_EProfileCustomizationStyleDefault,
        EProfileCustomizationStyle::k_EProfileCustomizationStyleSelected,
        EProfileCustomizationStyle::k_EProfileCustomizationStyleRarest,
        EProfileCustomizationStyle::k_EProfileCustomizationStyleMostRecent,
        EProfileCustomizationStyle::k_EProfileCustomizationStyleRandom,
        EProfileCustomizationStyle::k_EProfileCustomizationStyleHighestRated,
    ];
}

impl crate::EnumFull for EProfileCustomizationStyle {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EProfileCustomizationStyle").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EProfileCustomizationStyle {
    fn default() -> Self {
        EProfileCustomizationStyle::k_EProfileCustomizationStyleDefault
    }
}

impl EProfileCustomizationStyle {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EProfileCustomizationStyle>("EProfileCustomizationStyle")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAgreementType)
pub enum EAgreementType {
    // @@protoc_insertion_point(enum_value:EAgreementType.k_EAgreementType_Invalid)
    k_EAgreementType_Invalid = -1,
    // @@protoc_insertion_point(enum_value:EAgreementType.k_EAgreementType_GlobalSSA)
    k_EAgreementType_GlobalSSA = 0,
    // @@protoc_insertion_point(enum_value:EAgreementType.k_EAgreementType_ChinaSSA)
    k_EAgreementType_ChinaSSA = 1,
}

impl crate::Enum for EAgreementType {
    const NAME: &'static str = "EAgreementType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAgreementType> {
        match value {
            -1 => ::std::option::Option::Some(EAgreementType::k_EAgreementType_Invalid),
            0 => ::std::option::Option::Some(EAgreementType::k_EAgreementType_GlobalSSA),
            1 => ::std::option::Option::Some(EAgreementType::k_EAgreementType_ChinaSSA),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAgreementType> {
        match str {
            "k_EAgreementType_Invalid" => ::std::option::Option::Some(EAgreementType::k_EAgreementType_Invalid),
            "k_EAgreementType_GlobalSSA" => ::std::option::Option::Some(EAgreementType::k_EAgreementType_GlobalSSA),
            "k_EAgreementType_ChinaSSA" => ::std::option::Option::Some(EAgreementType::k_EAgreementType_ChinaSSA),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAgreementType] = &[
        EAgreementType::k_EAgreementType_Invalid,
        EAgreementType::k_EAgreementType_GlobalSSA,
        EAgreementType::k_EAgreementType_ChinaSSA,
    ];
}

impl crate::EnumFull for EAgreementType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAgreementType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EAgreementType::k_EAgreementType_Invalid => 0,
            EAgreementType::k_EAgreementType_GlobalSSA => 1,
            EAgreementType::k_EAgreementType_ChinaSSA => 2,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EAgreementType {
    fn default() -> Self {
        EAgreementType::k_EAgreementType_Invalid
    }
}

impl EAgreementType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAgreementType>("EAgreementType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ENotificationSetting)
pub enum ENotificationSetting {
    // @@protoc_insertion_point(enum_value:ENotificationSetting.k_ENotificationSettingNotifyUseDefault)
    k_ENotificationSettingNotifyUseDefault = 0,
    // @@protoc_insertion_point(enum_value:ENotificationSetting.k_ENotificationSettingAlways)
    k_ENotificationSettingAlways = 1,
    // @@protoc_insertion_point(enum_value:ENotificationSetting.k_ENotificationSettingNever)
    k_ENotificationSettingNever = 2,
}

impl crate::Enum for ENotificationSetting {
    const NAME: &'static str = "ENotificationSetting";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ENotificationSetting> {
        match value {
            0 => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            1 => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingAlways),
            2 => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNever),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ENotificationSetting> {
        match str {
            "k_ENotificationSettingNotifyUseDefault" => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            "k_ENotificationSettingAlways" => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingAlways),
            "k_ENotificationSettingNever" => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNever),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ENotificationSetting] = &[
        ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        ENotificationSetting::k_ENotificationSettingAlways,
        ENotificationSetting::k_ENotificationSettingNever,
    ];
}

impl crate::EnumFull for ENotificationSetting {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ENotificationSetting").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ENotificationSetting {
    fn default() -> Self {
        ENotificationSetting::k_ENotificationSettingNotifyUseDefault
    }
}

impl ENotificationSetting {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<ENotificationSetting>("ENotificationSetting")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETextFilterSetting)
pub enum ETextFilterSetting {
    // @@protoc_insertion_point(enum_value:ETextFilterSetting.k_ETextFilterSettingSteamLabOptedOut)
    k_ETextFilterSettingSteamLabOptedOut = 0,
    // @@protoc_insertion_point(enum_value:ETextFilterSetting.k_ETextFilterSettingEnabled)
    k_ETextFilterSettingEnabled = 1,
    // @@protoc_insertion_point(enum_value:ETextFilterSetting.k_ETextFilterSettingEnabledAllowProfanity)
    k_ETextFilterSettingEnabledAllowProfanity = 2,
    // @@protoc_insertion_point(enum_value:ETextFilterSetting.k_ETextFilterSettingDisabled)
    k_ETextFilterSettingDisabled = 3,
}

impl crate::Enum for ETextFilterSetting {
    const NAME: &'static str = "ETextFilterSetting";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETextFilterSetting> {
        match value {
            0 => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingSteamLabOptedOut),
            1 => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingEnabled),
            2 => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingEnabledAllowProfanity),
            3 => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingDisabled),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETextFilterSetting> {
        match str {
            "k_ETextFilterSettingSteamLabOptedOut" => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingSteamLabOptedOut),
            "k_ETextFilterSettingEnabled" => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingEnabled),
            "k_ETextFilterSettingEnabledAllowProfanity" => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingEnabledAllowProfanity),
            "k_ETextFilterSettingDisabled" => ::std::option::Option::Some(ETextFilterSetting::k_ETextFilterSettingDisabled),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETextFilterSetting] = &[
        ETextFilterSetting::k_ETextFilterSettingSteamLabOptedOut,
        ETextFilterSetting::k_ETextFilterSettingEnabled,
        ETextFilterSetting::k_ETextFilterSettingEnabledAllowProfanity,
        ETextFilterSetting::k_ETextFilterSettingDisabled,
    ];
}

impl crate::EnumFull for ETextFilterSetting {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETextFilterSetting").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETextFilterSetting {
    fn default() -> Self {
        ETextFilterSetting::k_ETextFilterSettingSteamLabOptedOut
    }
}

impl ETextFilterSetting {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<ETextFilterSetting>("ETextFilterSetting")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&steammessages_player.steamclient.proto\x1a\x18steammessages_base.prot\
    o\x1a,steammessages_unified_base.steamclient.proto\x1a\x0benums.proto\"B\
    \n$CPlayer_GetPlayerLinkDetails_Request\x12\x1a\n\x08steamids\x18\x01\
    \x20\x03(\x04R\x08steamids\"\xd5\r\n%CPlayer_GetPlayerLinkDetails_Respon\
    se\x12T\n\x08accounts\x18\x01\x20\x03(\x0b28.CPlayer_GetPlayerLinkDetail\
    s_Response.PlayerLinkDetailsR\x08accounts\x1a\xd5\x0c\n\x11PlayerLinkDet\
    ails\x12k\n\x0bpublic_data\x18\x01\x20\x01(\x0b2J.CPlayer_GetPlayerLinkD\
    etails_Response.PlayerLinkDetails.AccountPublicDataR\npublicData\x12n\n\
    \x0cprivate_data\x18\x02\x20\x01(\x0b2K.CPlayer_GetPlayerLinkDetails_Res\
    ponse.PlayerLinkDetails.AccountPrivateDataR\x0bprivateData\x1a\x9f\x03\n\
    \x11AccountPublicData\x12\x18\n\x07steamid\x18\x01\x20\x02(\x06R\x07stea\
    mid\x12)\n\x10visibility_state\x18\x02\x20\x01(\x05R\x0fvisibilityState\
    \x12#\n\rprivacy_state\x18\x03\x20\x01(\x05R\x0cprivacyState\x12#\n\rpro\
    file_state\x18\x04\x20\x01(\x05R\x0cprofileState\x12(\n\x10ban_expires_t\
    ime\x18\x07\x20\x01(\rR\x0ebanExpiresTime\x12#\n\raccount_flags\x18\x08\
    \x20\x01(\rR\x0caccountFlags\x12*\n\x11sha_digest_avatar\x18\t\x20\x01(\
    \x0cR\x0fshaDigestAvatar\x12!\n\x0cpersona_name\x18\n\x20\x01(\tR\x0bper\
    sonaName\x12\x1f\n\x0bprofile_url\x18\x0b\x20\x01(\tR\nprofileUrl\x12<\n\
    \x1acontent_country_restricted\x18\x0c\x20\x01(\x08R\x18contentCountryRe\
    stricted\x1a\xc0\x07\n\x12AccountPrivateData\x12#\n\rpersona_state\x18\
    \x01\x20\x01(\x05R\x0cpersonaState\x12.\n\x13persona_state_flags\x18\x02\
    \x20\x01(\rR\x11personaStateFlags\x12!\n\x0ctime_created\x18\x03\x20\x01\
    (\rR\x0btimeCreated\x12\x17\n\x07game_id\x18\x04\x20\x01(\x06R\x06gameId\
    \x12/\n\x14game_server_steam_id\x18\x05\x20\x01(\x06R\x11gameServerSteam\
    Id\x123\n\x16game_server_ip_address\x18\x06\x20\x01(\rR\x13gameServerIpA\
    ddress\x12(\n\x10game_server_port\x18\x07\x20\x01(\rR\x0egameServerPort\
    \x12&\n\x0fgame_extra_info\x18\x08\x20\x01(\tR\rgameExtraInfo\x12!\n\x0c\
    account_name\x18\t\x20\x01(\tR\x0baccountName\x12$\n\x0elobby_steam_id\
    \x18\n\x20\x01(\x06R\x0clobbySteamId\x12(\n\x10rich_presence_kv\x18\x0b\
    \x20\x01(\tR\x0erichPresenceKv\x120\n\x14broadcast_session_id\x18\x0c\
    \x20\x01(\x06R\x12broadcastSessionId\x12@\n\x1cwatching_broadcast_accoun\
    tid\x18\r\x20\x01(\rR\x1awatchingBroadcastAccountid\x128\n\x18watching_b\
    roadcast_appid\x18\x0e\x20\x01(\rR\x16watchingBroadcastAppid\x12<\n\x1aw\
    atching_broadcast_viewers\x18\x0f\x20\x01(\rR\x18watchingBroadcastViewer\
    s\x128\n\x18watching_broadcast_title\x18\x10\x20\x01(\tR\x16watchingBroa\
    dcastTitle\x12(\n\x10last_logoff_time\x18\x11\x20\x01(\rR\x0elastLogoffT\
    ime\x12(\n\x10last_seen_online\x18\x12\x20\x01(\rR\x0elastSeenOnline\x12\
    \x20\n\x0cgame_os_type\x18\x13\x20\x01(\x05R\ngameOsType\x12(\n\x10game_\
    device_type\x18\x14\x20\x01(\x05R\x0egameDeviceType\x12(\n\x10game_devic\
    e_name\x18\x15\x20\x01(\tR\x0egameDeviceName\"4\n2CPlayer_GetMutualFrien\
    dsForIncomingInvites_Request\"}\n&CPlayer_IncomingInviteMutualFriendList\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x129\n\x19mutual_\
    friend_account_ids\x18\x02\x20\x03(\rR\x16mutualFriendAccountIds\"\xae\
    \x01\n3CPlayer_GetMutualFriendsForIncomingInvites_Response\x12w\n$incomi\
    ng_invite_mutual_friends_lists\x18\x01\x20\x03(\x0b2'.CPlayer_IncomingIn\
    viteMutualFriendListR\x20incomingInviteMutualFriendsLists\"\xf6\x02\n\
    \x1dCPlayer_GetOwnedGames_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x04R\x07steamid\x12'\n\x0finclude_appinfo\x18\x02\x20\x01(\x08R\x0eincl\
    udeAppinfo\x129\n\x19include_played_free_games\x18\x03\x20\x01(\x08R\x16\
    includePlayedFreeGames\x12#\n\rappids_filter\x18\x04\x20\x03(\rR\x0cappi\
    dsFilter\x12(\n\x10include_free_sub\x18\x05\x20\x01(\x08R\x0eincludeFree\
    Sub\x122\n\x12skip_unvetted_apps\x18\x06\x20\x01(\x08:\x04trueR\x10skipU\
    nvettedApps\x12\x1a\n\x08language\x18\x07\x20\x01(\tR\x08language\x128\n\
    \x18include_extended_appinfo\x18\x08\x20\x01(\x08R\x16includeExtendedApp\
    info\"\xe5\x06\n\x1eCPlayer_GetOwnedGames_Response\x12\x1d\n\ngame_count\
    \x18\x01\x20\x01(\rR\tgameCount\x12:\n\x05games\x18\x02\x20\x03(\x0b2$.C\
    Player_GetOwnedGames_Response.GameR\x05games\x1a\xe7\x05\n\x04Game\x12\
    \x14\n\x05appid\x18\x01\x20\x01(\x05R\x05appid\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12'\n\x0fplaytime_2weeks\x18\x03\x20\x01(\x05R\x0e\
    playtime2weeks\x12)\n\x10playtime_forever\x18\x04\x20\x01(\x05R\x0fplayt\
    imeForever\x12\x20\n\x0cimg_icon_url\x18\x05\x20\x01(\tR\nimgIconUrl\x12\
    =\n\x1bhas_community_visible_stats\x18\x07\x20\x01(\x08R\x18hasCommunity\
    VisibleStats\x128\n\x18playtime_windows_forever\x18\x08\x20\x01(\x05R\
    \x16playtimeWindowsForever\x120\n\x14playtime_mac_forever\x18\t\x20\x01(\
    \x05R\x12playtimeMacForever\x124\n\x16playtime_linux_forever\x18\n\x20\
    \x01(\x05R\x14playtimeLinuxForever\x12*\n\x11rtime_last_played\x18\x0b\
    \x20\x01(\rR\x0frtimeLastPlayed\x12)\n\x10capsule_filename\x18\x0c\x20\
    \x01(\tR\x0fcapsuleFilename\x12\x17\n\x07sort_as\x18\r\x20\x01(\tR\x06so\
    rtAs\x12!\n\x0chas_workshop\x18\x0e\x20\x01(\x08R\x0bhasWorkshop\x12\x1d\
    \n\nhas_market\x18\x0f\x20\x01(\x08R\thasMarket\x12\x17\n\x07has_dlc\x18\
    \x10\x20\x01(\x08R\x06hasDlc\x12)\n\x10has_leaderboards\x18\x11\x20\x01(\
    \x08R\x0fhasLeaderboards\x123\n\x15content_descriptorids\x18\x12\x20\x03\
    (\rR\x14contentDescriptorids\x123\n\x15playtime_disconnected\x18\x13\x20\
    \x01(\x05R\x14playtimeDisconnected\"j\n\x1bCPlayer_GetPlayNext_Request\
    \x12&\n\x0fmax_age_seconds\x18\x01\x20\x01(\rR\rmaxAgeSeconds\x12#\n\rig\
    nore_appids\x18\x02\x20\x03(\rR\x0cignoreAppids\"`\n\x1cCPlayer_GetPlayN\
    ext_Response\x12(\n\x10last_update_time\x18\x01\x20\x01(\rR\x0elastUpdat\
    eTime\x12\x16\n\x06appids\x18\x02\x20\x03(\rR\x06appids\">\n&CPlayer_Get\
    FriendsGameplayInfo_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05ap\
    pid\"\x9f\x07\n'CPlayer_GetFriendsGameplayInfo_Response\x12U\n\tyour_inf\
    o\x18\x01\x20\x01(\x0b28.CPlayer_GetFriendsGameplayInfo_Response.OwnGame\
    playInfoR\x08yourInfo\x12U\n\x07in_game\x18\x02\x20\x03(\x0b2<.CPlayer_G\
    etFriendsGameplayInfo_Response.FriendsGameplayInfoR\x06inGame\x12e\n\x0f\
    played_recently\x18\x03\x20\x03(\x0b2<.CPlayer_GetFriendsGameplayInfo_Re\
    sponse.FriendsGameplayInfoR\x0eplayedRecently\x12]\n\x0bplayed_ever\x18\
    \x04\x20\x03(\x0b2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGamep\
    layInfoR\nplayedEver\x12P\n\x04owns\x18\x05\x20\x03(\x0b2<.CPlayer_GetFr\
    iendsGameplayInfo_Response.FriendsGameplayInfoR\x04owns\x12]\n\x0bin_wis\
    hlist\x18\x06\x20\x03(\x0b2<.CPlayer_GetFriendsGameplayInfo_Response.Fri\
    endsGameplayInfoR\ninWishlist\x1a\x8c\x01\n\x13FriendsGameplayInfo\x12\
    \x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12%\n\x0eminutes_pla\
    yed\x18\x02\x20\x01(\rR\rminutesPlayed\x124\n\x16minutes_played_forever\
    \x18\x03\x20\x01(\rR\x14minutesPlayedForever\x1a\xbf\x01\n\x0fOwnGamepla\
    yInfo\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12%\n\x0emi\
    nutes_played\x18\x02\x20\x01(\rR\rminutesPlayed\x124\n\x16minutes_played\
    _forever\x18\x03\x20\x01(\rR\x14minutesPlayedForever\x12\x1f\n\x0bin_wis\
    hlist\x18\x04\x20\x01(\x08R\ninWishlist\x12\x14\n\x05owned\x18\x05\x20\
    \x01(\x08R\x05owned\":\n\"CPlayer_GetGameBadgeLevels_Request\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\rR\x05appid\"\xe6\x01\n#CPlayer_GetGameBadgeL\
    evels_Response\x12!\n\x0cplayer_level\x18\x01\x20\x01(\rR\x0bplayerLevel\
    \x12B\n\x06badges\x18\x02\x20\x03(\x0b2*.CPlayer_GetGameBadgeLevels_Resp\
    onse.BadgeR\x06badges\x1aX\n\x05Badge\x12\x14\n\x05level\x18\x01\x20\x01\
    (\x05R\x05level\x12\x16\n\x06series\x18\x02\x20\x01(\x05R\x06series\x12!\
    \n\x0cborder_color\x18\x03\x20\x01(\rR\x0bborderColor\"\\\n$CPlayer_GetP\
    rofileBackground_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07s\
    teamid\x12\x1a\n\x08language\x18\x02\x20\x01(\tR\x08language\"\xe5\x04\n\
    \x0bProfileItem\x12(\n\x0fcommunityitemid\x18\x01\x20\x01(\x04R\x0fcommu\
    nityitemid\x12\x1f\n\x0bimage_small\x18\x02\x20\x01(\tR\nimageSmall\x12\
    \x1f\n\x0bimage_large\x18\x03\x20\x01(\tR\nimageLarge\x12\x12\n\x04name\
    \x18\x04\x20\x01(\tR\x04name\x12\x1d\n\nitem_title\x18\x05\x20\x01(\tR\t\
    itemTitle\x12)\n\x10item_description\x18\x06\x20\x01(\tR\x0fitemDescript\
    ion\x12\x14\n\x05appid\x18\x07\x20\x01(\rR\x05appid\x12\x1b\n\titem_type\
    \x18\x08\x20\x01(\rR\x08itemType\x12\x1d\n\nitem_class\x18\t\x20\x01(\rR\
    \titemClass\x12\x1d\n\nmovie_webm\x18\n\x20\x01(\tR\tmovieWebm\x12\x1b\n\
    \tmovie_mp4\x18\x0b\x20\x01(\tR\x08movieMp4\x12(\n\x10movie_webm_small\
    \x18\r\x20\x01(\tR\x0emovieWebmSmall\x12&\n\x0fmovie_mp4_small\x18\x0e\
    \x20\x01(\tR\rmovieMp4Small\x12%\n\x0eequipped_flags\x18\x0c\x20\x01(\rR\
    \requippedFlags\x12@\n\x0eprofile_colors\x18\x0f\x20\x03(\x0b2\x19.Profi\
    leItem.ProfileColorR\rprofileColors\x1aC\n\x0cProfileColor\x12\x1d\n\nst\
    yle_name\x18\x01\x20\x01(\tR\tstyleName\x12\x14\n\x05color\x18\x02\x20\
    \x01(\tR\x05color\"d\n%CPlayer_GetProfileBackground_Response\x12;\n\x12p\
    rofile_background\x18\x01\x20\x01(\x0b2\x0c.ProfileItemR\x11profileBackg\
    round\"P\n$CPlayer_SetProfileBackground_Request\x12(\n\x0fcommunityitemi\
    d\x18\x01\x20\x01(\x04R\x0fcommunityitemid\"'\n%CPlayer_SetProfileBackgr\
    ound_Response\"`\n(CPlayer_GetMiniProfileBackground_Request\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1a\n\x08language\x18\
    \x02\x20\x01(\tR\x08language\"h\n)CPlayer_GetMiniProfileBackground_Respo\
    nse\x12;\n\x12profile_background\x18\x01\x20\x01(\x0b2\x0c.ProfileItemR\
    \x11profileBackground\"T\n(CPlayer_SetMiniProfileBackground_Request\x12(\
    \n\x0fcommunityitemid\x18\x01\x20\x01(\x04R\x0fcommunityitemid\"+\n)CPla\
    yer_SetMiniProfileBackground_Response\"V\n\x1eCPlayer_GetAvatarFrame_Req\
    uest\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1a\n\x08\
    language\x18\x02\x20\x01(\tR\x08language\"R\n\x1fCPlayer_GetAvatarFrame_\
    Response\x12/\n\x0cavatar_frame\x18\x01\x20\x01(\x0b2\x0c.ProfileItemR\
    \x0bavatarFrame\"J\n\x1eCPlayer_SetAvatarFrame_Request\x12(\n\x0fcommuni\
    tyitemid\x18\x01\x20\x01(\x04R\x0fcommunityitemid\"!\n\x1fCPlayer_SetAva\
    tarFrame_Response\"Y\n!CPlayer_GetAnimatedAvatar_Request\x12\x18\n\x07st\
    eamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1a\n\x08language\x18\x02\x20\
    \x01(\tR\x08language\"J\n\"CPlayer_GetAnimatedAvatar_Response\x12$\n\x06\
    avatar\x18\x01\x20\x01(\x0b2\x0c.ProfileItemR\x06avatar\"M\n!CPlayer_Set\
    AnimatedAvatar_Request\x12(\n\x0fcommunityitemid\x18\x01\x20\x01(\x04R\
    \x0fcommunityitemid\"$\n\"CPlayer_SetAnimatedAvatar_Response\"`\n(CPlaye\
    r_GetSteamDeckKeyboardSkin_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x06R\x07steamid\x12\x1a\n\x08language\x18\x02\x20\x01(\tR\x08language\"\
    r\n)CPlayer_GetSteamDeckKeyboardSkin_Response\x12E\n\x18steam_deck_keybo\
    ard_skin\x18\x01\x20\x01(\x0b2\x0c.ProfileItemR\x15steamDeckKeyboardSkin\
    \"T\n(CPlayer_SetSteamDeckKeyboardSkin_Request\x12(\n\x0fcommunityitemid\
    \x18\x01\x20\x01(\x04R\x0fcommunityitemid\"+\n)CPlayer_SetSteamDeckKeybo\
    ardSkin_Response\"r\n$CPlayer_GetProfileItemsOwned_Request\x12\x1a\n\x08\
    language\x18\x01\x20\x01(\tR\x08language\x12.\n\x07filters\x18\x02\x20\
    \x03(\x0e2\x14.ECommunityItemClassR\x07filters\"\xe7\x03\n%CPlayer_GetPr\
    ofileItemsOwned_Response\x12=\n\x13profile_backgrounds\x18\x01\x20\x03(\
    \x0b2\x0c.ProfileItemR\x12profileBackgrounds\x12F\n\x18mini_profile_back\
    grounds\x18\x02\x20\x03(\x0b2\x0c.ProfileItemR\x16miniProfileBackgrounds\
    \x121\n\ravatar_frames\x18\x03\x20\x03(\x0b2\x0c.ProfileItemR\x0cavatarF\
    rames\x127\n\x10animated_avatars\x18\x04\x20\x03(\x0b2\x0c.ProfileItemR\
    \x0fanimatedAvatars\x129\n\x11profile_modifiers\x18\x05\x20\x03(\x0b2\
    \x0c.ProfileItemR\x10profileModifiers\x12G\n\x19steam_deck_keyboard_skin\
    s\x18\x06\x20\x03(\x0b2\x0c.ProfileItemR\x16steamDeckKeyboardSkins\x12G\
    \n\x19steam_deck_startup_movies\x18\x07\x20\x03(\x0b2\x0c.ProfileItemR\
    \x16steamDeckStartupMovies\"_\n'CPlayer_GetProfileItemsEquipped_Request\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1a\n\x08lang\
    uage\x18\x02\x20\x01(\tR\x08language\"\x95\x03\n(CPlayer_GetProfileItems\
    Equipped_Response\x12;\n\x12profile_background\x18\x01\x20\x01(\x0b2\x0c\
    .ProfileItemR\x11profileBackground\x12D\n\x17mini_profile_background\x18\
    \x02\x20\x01(\x0b2\x0c.ProfileItemR\x15miniProfileBackground\x12/\n\x0ca\
    vatar_frame\x18\x03\x20\x01(\x0b2\x0c.ProfileItemR\x0bavatarFrame\x125\n\
    \x0fanimated_avatar\x18\x04\x20\x01(\x0b2\x0c.ProfileItemR\x0eanimatedAv\
    atar\x127\n\x10profile_modifier\x18\x05\x20\x01(\x0b2\x0c.ProfileItemR\
    \x0fprofileModifier\x12E\n\x18steam_deck_keyboard_skin\x18\x06\x20\x01(\
    \x0b2\x0c.ProfileItemR\x15steamDeckKeyboardSkin\"m\n+CPlayer_SetEquipped\
    ProfileItemFlags_Request\x12(\n\x0fcommunityitemid\x18\x01\x20\x01(\x04R\
    \x0fcommunityitemid\x12\x14\n\x05flags\x18\x02\x20\x01(\rR\x05flags\".\n\
    ,CPlayer_SetEquippedProfileItemFlags_Response\"!\n\x1fCPlayer_GetEmotico\
    nList_Request\"\xa1\x02\n\x20CPlayer_GetEmoticonList_Response\x12H\n\tem\
    oticons\x18\x01\x20\x03(\x0b2*.CPlayer_GetEmoticonList_Response.Emoticon\
    R\temoticons\x1a\xb2\x01\n\x08Emoticon\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12\x14\n\x05count\x18\x02\x20\x01(\x05R\x05count\x12$\n\
    \x0etime_last_used\x18\x03\x20\x01(\rR\x0ctimeLastUsed\x12\x1b\n\tuse_co\
    unt\x18\x04\x20\x01(\rR\x08useCount\x12#\n\rtime_received\x18\x05\x20\
    \x01(\rR\x0ctimeReceived\x12\x14\n\x05appid\x18\x06\x20\x01(\rR\x05appid\
    \"_\n)CPlayer_GetCommunityBadgeProgress_Request\x12\x18\n\x07steamid\x18\
    \x01\x20\x01(\x04R\x07steamid\x12\x18\n\x07badgeid\x18\x02\x20\x01(\x05R\
    \x07badgeid\"\xb8\x01\n*CPlayer_GetCommunityBadgeProgress_Response\x12I\
    \n\x06quests\x18\x01\x20\x03(\x0b21.CPlayer_GetCommunityBadgeProgress_Re\
    sponse.QuestR\x06quests\x1a?\n\x05Quest\x12\x18\n\x07questid\x18\x01\x20\
    \x01(\rR\x07questid\x12\x1c\n\tcompleted\x18\x02\x20\x01(\x08R\tcomplete\
    d\"\xa5\x01\n*CPlayer_GetTopAchievementsForGames_Request\x12\x18\n\x07st\
    eamid\x18\x01\x20\x01(\x04R\x07steamid\x12\x1a\n\x08language\x18\x02\x20\
    \x01(\tR\x08language\x12)\n\x10max_achievements\x18\x03\x20\x01(\rR\x0fm\
    axAchievements\x12\x16\n\x06appids\x18\x04\x20\x03(\rR\x06appids\"\x85\
    \x04\n+CPlayer_GetTopAchievementsForGames_Response\x12G\n\x05games\x18\
    \x01\x20\x03(\x0b21.CPlayer_GetTopAchievementsForGames_Response.GameR\
    \x05games\x1a\xe0\x01\n\x0bAchievement\x12\x16\n\x06statid\x18\x01\x20\
    \x01(\rR\x06statid\x12\x10\n\x03bit\x18\x02\x20\x01(\rR\x03bit\x12\x12\n\
    \x04name\x18\x03\x20\x01(\tR\x04name\x12\x12\n\x04desc\x18\x04\x20\x01(\
    \tR\x04desc\x12\x12\n\x04icon\x18\x05\x20\x01(\tR\x04icon\x12\x1b\n\tico\
    n_gray\x18\x06\x20\x01(\tR\x08iconGray\x12\x16\n\x06hidden\x18\x07\x20\
    \x01(\x08R\x06hidden\x126\n\x17player_percent_unlocked\x18\x08\x20\x01(\
    \tR\x15playerPercentUnlocked\x1a\xa9\x01\n\x04Game\x12\x14\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appid\x12-\n\x12total_achievements\x18\x02\x20\
    \x01(\rR\x11totalAchievements\x12\\\n\x0cachievements\x18\x03\x20\x03(\
    \x0b28.CPlayer_GetTopAchievementsForGames_Response.AchievementR\x0cachie\
    vements\"w\n'CPlayer_GetAchievementsProgress_Request\x12\x18\n\x07steami\
    d\x18\x01\x20\x01(\x04R\x07steamid\x12\x1a\n\x08language\x18\x02\x20\x01\
    (\tR\x08language\x12\x16\n\x06appids\x18\x03\x20\x03(\rR\x06appids\"\xde\
    \x02\n(CPlayer_GetAchievementsProgress_Response\x12p\n\x14achievement_pr\
    ogress\x18\x01\x20\x03(\x0b2=.CPlayer_GetAchievementsProgress_Response.A\
    chievementProgressR\x13achievementProgress\x1a\xbf\x01\n\x13AchievementP\
    rogress\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1a\n\x08unl\
    ocked\x18\x02\x20\x01(\rR\x08unlocked\x12\x14\n\x05total\x18\x03\x20\x01\
    (\rR\x05total\x12\x1e\n\npercentage\x18\x04\x20\x01(\x02R\npercentage\
    \x12!\n\x0call_unlocked\x18\x05\x20\x01(\x08R\x0ballUnlocked\x12\x1d\n\n\
    cache_time\x18\x06\x20\x01(\rR\tcacheTime\"W\n#CPlayer_GetGameAchievemen\
    ts_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1a\n\x08\
    language\x18\x02\x20\x01(\tR\x08language\"\x81\x03\n$CPlayer_GetGameAchi\
    evements_Response\x12U\n\x0cachievements\x18\x01\x20\x03(\x0b21.CPlayer_\
    GetGameAchievements_Response.AchievementR\x0cachievements\x1a\x81\x02\n\
    \x0bAchievement\x12#\n\rinternal_name\x18\x01\x20\x01(\tR\x0cinternalNam\
    e\x12%\n\x0elocalized_name\x18\x02\x20\x01(\tR\rlocalizedName\x12%\n\x0e\
    localized_desc\x18\x03\x20\x01(\tR\rlocalizedDesc\x12\x12\n\x04icon\x18\
    \x04\x20\x01(\tR\x04icon\x12\x1b\n\ticon_gray\x18\x05\x20\x01(\tR\x08ico\
    nGray\x12\x16\n\x06hidden\x18\x06\x20\x01(\x08R\x06hidden\x126\n\x17play\
    er_percent_unlocked\x18\x07\x20\x01(\tR\x15playerPercentUnlocked\"<\n\
    \x20CPlayer_GetFavoriteBadge_Request\x12\x18\n\x07steamid\x18\x01\x20\
    \x01(\x04R\x07steamid\"\x81\x02\n!CPlayer_GetFavoriteBadge_Response\x12,\
    \n\x12has_favorite_badge\x18\x01\x20\x01(\x08R\x10hasFavoriteBadge\x12\
    \x18\n\x07badgeid\x18\x02\x20\x01(\rR\x07badgeid\x12(\n\x0fcommunityitem\
    id\x18\x03\x20\x01(\x04R\x0fcommunityitemid\x12\x1b\n\titem_type\x18\x04\
    \x20\x01(\rR\x08itemType\x12!\n\x0cborder_color\x18\x05\x20\x01(\rR\x0bb\
    orderColor\x12\x14\n\x05appid\x18\x06\x20\x01(\rR\x05appid\x12\x14\n\x05\
    level\x18\x07\x20\x01(\rR\x05level\"f\n\x20CPlayer_SetFavoriteBadge_Requ\
    est\x12(\n\x0fcommunityitemid\x18\x01\x20\x01(\x04R\x0fcommunityitemid\
    \x12\x18\n\x07badgeid\x18\x02\x20\x01(\rR\x07badgeid\"#\n!CPlayer_SetFav\
    oriteBadge_Response\"\xd5\x01\n'CPlayer_GetProfileCustomization_Request\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12F\n\x1finclude\
    _inactive_customizations\x18\x02\x20\x01(\x08R\x1dincludeInactiveCustomi\
    zations\x12H\n\x20include_purchased_customizations\x18\x03\x20\x01(\x08R\
    \x1eincludePurchasedCustomizations\"\x94\x04\n\x18ProfileCustomizationSl\
    ot\x12\x12\n\x04slot\x18\x01\x20\x01(\rR\x04slot\x12\x14\n\x05appid\x18\
    \x02\x20\x01(\rR\x05appid\x12(\n\x0fpublishedfileid\x18\x03\x20\x01(\x04\
    R\x0fpublishedfileid\x12!\n\x0citem_assetid\x18\x04\x20\x01(\x04R\x0bite\
    mAssetid\x12%\n\x0eitem_contextid\x18\x05\x20\x01(\x04R\ritemContextid\
    \x12\x14\n\x05notes\x18\x06\x20\x01(\tR\x05notes\x12\x14\n\x05title\x18\
    \x07\x20\x01(\tR\x05title\x12\x1c\n\taccountid\x18\x08\x20\x01(\rR\tacco\
    untid\x12\x18\n\x07badgeid\x18\t\x20\x01(\rR\x07badgeid\x12!\n\x0cborder\
    _color\x18\n\x20\x01(\rR\x0bborderColor\x12!\n\x0citem_classid\x18\x0b\
    \x20\x01(\x04R\x0bitemClassid\x12'\n\x0fitem_instanceid\x18\x0c\x20\x01(\
    \x04R\x0eitemInstanceid\x12f\n\x10ban_check_result\x18\r\x20\x01(\x0e2\
    \x17.EBanContentCheckResult:#k_EBanContentCheckResult_NotScannedR\x0eban\
    CheckResult\x12\x1f\n\x0breplay_year\x18\x0e\x20\x01(\rR\nreplayYear\"\
    \x8d\x03\n\x14ProfileCustomization\x12m\n\x12customization_type\x18\x01\
    \x20\x01(\x0e2\x1a.EProfileCustomizationType:\"k_EProfileCustomizationTy\
    peInvalidR\x11customizationType\x12\x14\n\x05large\x18\x02\x20\x01(\x08R\
    \x05large\x12/\n\x05slots\x18\x03\x20\x03(\x0b2\x19.ProfileCustomization\
    SlotR\x05slots\x12\x16\n\x06active\x18\x04\x20\x01(\x08R\x06active\x12q\
    \n\x13customization_style\x18\x05\x20\x01(\x0e2\x1b.EProfileCustomizatio\
    nStyle:#k_EProfileCustomizationStyleDefaultR\x12customizationStyle\x12\
    \x1e\n\npurchaseid\x18\x06\x20\x01(\x04R\npurchaseid\x12\x14\n\x05level\
    \x18\x07\x20\x01(\rR\x05level\"?\n\x0cProfileTheme\x12\x19\n\x08theme_id\
    \x18\x01\x20\x01(\tR\x07themeId\x12\x14\n\x05title\x18\x02\x20\x01(\tR\
    \x05title\"D\n\x12ProfilePreferences\x12.\n\x13hide_profile_awards\x18\
    \x01\x20\x01(\x08R\x11hideProfileAwards\"\xc9\x04\n(CPlayer_GetProfileCu\
    stomization_Response\x12=\n\x0ecustomizations\x18\x01\x20\x03(\x0b2\x15.\
    ProfileCustomizationR\x0ecustomizations\x12'\n\x0fslots_available\x18\
    \x02\x20\x01(\rR\x0eslotsAvailable\x122\n\rprofile_theme\x18\x03\x20\x01\
    (\x0b2\r.ProfileThemeR\x0cprofileTheme\x12{\n\x18purchased_customization\
    s\x18\x04\x20\x03(\x0b2@.CPlayer_GetProfileCustomization_Response.Purcha\
    sedCustomizationR\x17purchasedCustomizations\x12D\n\x13profile_preferenc\
    es\x18\x05\x20\x01(\x0b2\x13.ProfilePreferencesR\x12profilePreferences\
    \x1a\xbd\x01\n\x16PurchasedCustomization\x12\x1e\n\npurchaseid\x18\x01\
    \x20\x01(\x04R\npurchaseid\x12m\n\x12customization_type\x18\x02\x20\x01(\
    \x0e2\x1a.EProfileCustomizationType:\"k_EProfileCustomizationTypeInvalid\
    R\x11customizationType\x12\x14\n\x05level\x18\x03\x20\x01(\rR\x05level\"\
    M\n1CPlayer_GetPurchasedProfileCustomizations_Request\x12\x18\n\x07steam\
    id\x18\x01\x20\x01(\x06R\x07steamid\"\xe6\x02\n2CPlayer_GetPurchasedProf\
    ileCustomizations_Response\x12\x85\x01\n\x18purchased_customizations\x18\
    \x01\x20\x03(\x0b2J.CPlayer_GetPurchasedProfileCustomizations_Response.P\
    urchasedCustomizationR\x17purchasedCustomizations\x1a\xa7\x01\n\x16Purch\
    asedCustomization\x12\x1e\n\npurchaseid\x18\x01\x20\x01(\x04R\npurchasei\
    d\x12m\n\x12customization_type\x18\x02\x20\x01(\x0e2\x1a.EProfileCustomi\
    zationType:\"k_EProfileCustomizationTypeInvalidR\x11customizationType\"X\
    \n<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request\x12\x18\
    \n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\"\xa1\x05\n=CPlayer_GetPu\
    rchasedAndUpgradedProfileCustomizations_Response\x12\x90\x01\n\x18purcha\
    sed_customizations\x18\x01\x20\x03(\x0b2U.CPlayer_GetPurchasedAndUpgrade\
    dProfileCustomizations_Response.PurchasedCustomizationR\x17purchasedCust\
    omizations\x12\x8d\x01\n\x17upgraded_customizations\x18\x02\x20\x03(\x0b\
    2T.CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.Upgrade\
    dCustomizationR\x16upgradedCustomizations\x1a\x9d\x01\n\x16PurchasedCust\
    omization\x12m\n\x12customization_type\x18\x01\x20\x01(\x0e2\x1a.EProfil\
    eCustomizationType:\"k_EProfileCustomizationTypeInvalidR\x11customizatio\
    nType\x12\x14\n\x05count\x18\x02\x20\x01(\rR\x05count\x1a\x9c\x01\n\x15U\
    pgradedCustomization\x12m\n\x12customization_type\x18\x01\x20\x01(\x0e2\
    \x1a.EProfileCustomizationType:\"k_EProfileCustomizationTypeInvalidR\x11\
    customizationType\x12\x14\n\x05level\x18\x02\x20\x01(\rR\x05level\"+\n)C\
    Player_GetProfileThemesAvailable_Request\"b\n*CPlayer_GetProfileThemesAv\
    ailable_Response\x124\n\x0eprofile_themes\x18\x01\x20\x03(\x0b2\r.Profil\
    eThemeR\rprofileThemes\"<\n\x1fCPlayer_SetProfileTheme_Request\x12\x19\n\
    \x08theme_id\x18\x01\x20\x01(\tR\x07themeId\"\"\n\x20CPlayer_SetProfileT\
    heme_Response\"m\n%CPlayer_SetProfilePreferences_Request\x12D\n\x13profi\
    le_preferences\x18\x01\x20\x01(\x0b2\x13.ProfilePreferencesR\x12profileP\
    references\"(\n&CPlayer_SetProfilePreferences_Response\"\\\n#CPlayer_Pos\
    tStatusToFriends_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \x12\x1f\n\x0bstatus_text\x18\x02\x20\x01(\tR\nstatusText\"&\n$CPlayer_P\
    ostStatusToFriends_Response\"S\n\x1fCPlayer_GetPostedStatus_Request\x12\
    \x18\n\x07steamid\x18\x01\x20\x01(\x04R\x07steamid\x12\x16\n\x06postid\
    \x18\x02\x20\x01(\x04R\x06postid\"\xa9\x01\n\x20CPlayer_GetPostedStatus_\
    Response\x12\x1c\n\taccountid\x18\x01\x20\x01(\rR\taccountid\x12\x16\n\
    \x06postid\x18\x02\x20\x01(\x04R\x06postid\x12\x1f\n\x0bstatus_text\x18\
    \x03\x20\x01(\tR\nstatusText\x12\x18\n\x07deleted\x18\x04\x20\x01(\x08R\
    \x07deleted\x12\x14\n\x05appid\x18\x05\x20\x01(\rR\x05appid\"<\n\"CPlaye\
    r_DeletePostedStatus_Request\x12\x16\n\x06postid\x18\x01\x20\x01(\x04R\
    \x06postid\"%\n#CPlayer_DeletePostedStatus_Response\"L\n\"CPlayer_GetLas\
    tPlayedTimes_Request\x12&\n\x0fmin_last_played\x18\x01\x20\x01(\rR\rminL\
    astPlayed\"\xa2\x06\n#CPlayer_GetLastPlayedTimes_Response\x12?\n\x05game\
    s\x18\x01\x20\x03(\x0b2).CPlayer_GetLastPlayedTimes_Response.GameR\x05ga\
    mes\x1a\xb9\x05\n\x04Game\x12\x14\n\x05appid\x18\x01\x20\x01(\x05R\x05ap\
    pid\x12#\n\rlast_playtime\x18\x02\x20\x01(\rR\x0clastPlaytime\x12'\n\x0f\
    playtime_2weeks\x18\x03\x20\x01(\x05R\x0eplaytime2weeks\x12)\n\x10playti\
    me_forever\x18\x04\x20\x01(\x05R\x0fplaytimeForever\x12%\n\x0efirst_play\
    time\x18\x05\x20\x01(\rR\rfirstPlaytime\x128\n\x18playtime_windows_forev\
    er\x18\x06\x20\x01(\x05R\x16playtimeWindowsForever\x120\n\x14playtime_ma\
    c_forever\x18\x07\x20\x01(\x05R\x12playtimeMacForever\x124\n\x16playtime\
    _linux_forever\x18\x08\x20\x01(\x05R\x14playtimeLinuxForever\x124\n\x16f\
    irst_windows_playtime\x18\t\x20\x01(\rR\x14firstWindowsPlaytime\x12,\n\
    \x12first_mac_playtime\x18\n\x20\x01(\rR\x10firstMacPlaytime\x120\n\x14f\
    irst_linux_playtime\x18\x0b\x20\x01(\rR\x12firstLinuxPlaytime\x122\n\x15\
    last_windows_playtime\x18\x0c\x20\x01(\rR\x13lastWindowsPlaytime\x12*\n\
    \x11last_mac_playtime\x18\r\x20\x01(\rR\x0flastMacPlaytime\x12.\n\x13las\
    t_linux_playtime\x18\x0e\x20\x01(\rR\x11lastLinuxPlaytime\x123\n\x15play\
    time_disconnected\x18\x0f\x20\x01(\rR\x14playtimeDisconnected\"$\n\"CPla\
    yer_GetTimeSSAAccepted_Request\"\xb1\x01\n#CPlayer_GetTimeSSAAccepted_Re\
    sponse\x12*\n\x11time_ssa_accepted\x18\x01\x20\x01(\rR\x0ftimeSsaAccepte\
    d\x12(\n\x10time_ssa_updated\x18\x02\x20\x01(\rR\x0etimeSsaUpdated\x124\
    \n\x16time_chinassa_accepted\x18\x03\x20\x01(\rR\x14timeChinassaAccepted\
    \"\x95\x01\n\x19CPlayer_AcceptSSA_Request\x12P\n\x0eagreement_type\x18\
    \x01\x20\x01(\x0e2\x0f.EAgreementType:\x18k_EAgreementType_InvalidR\ragr\
    eementType\x12&\n\x0ftime_signed_utc\x18\x02\x20\x01(\rR\rtimeSignedUtc\
    \"\x1c\n\x1aCPlayer_AcceptSSA_Response\"!\n\x1fCPlayer_GetNicknameList_R\
    equest\"\xbe\x01\n\x20CPlayer_GetNicknameList_Response\x12N\n\tnicknames\
    \x18\x01\x20\x03(\x0b20.CPlayer_GetNicknameList_Response.PlayerNicknameR\
    \tnicknames\x1aJ\n\x0ePlayerNickname\x12\x1c\n\taccountid\x18\x01\x20\
    \x01(\x07R\taccountid\x12\x1a\n\x08nickname\x18\x02\x20\x01(\tR\x08nickn\
    ame\")\n'CPlayer_GetPerFriendPreferences_Request\"\x84\x07\n\x14PerFrien\
    dPreferences\x12\x1c\n\taccountid\x18\x01\x20\x01(\x07R\taccountid\x12\
    \x1a\n\x08nickname\x18\x02\x20\x01(\tR\x08nickname\x12x\n\x18notificatio\
    ns_showingame\x18\x03\x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotific\
    ationSettingNotifyUseDefaultR\x17notificationsShowingame\x12x\n\x18notif\
    ications_showonline\x18\x04\x20\x01(\x0e2\x15.ENotificationSetting:&k_EN\
    otificationSettingNotifyUseDefaultR\x17notificationsShowonline\x12|\n\
    \x1anotifications_showmessages\x18\x05\x20\x01(\x0e2\x15.ENotificationSe\
    tting:&k_ENotificationSettingNotifyUseDefaultR\x19notificationsShowmessa\
    ges\x12j\n\x11sounds_showingame\x18\x06\x20\x01(\x0e2\x15.ENotificationS\
    etting:&k_ENotificationSettingNotifyUseDefaultR\x10soundsShowingame\x12j\
    \n\x11sounds_showonline\x18\x07\x20\x01(\x0e2\x15.ENotificationSetting:&\
    k_ENotificationSettingNotifyUseDefaultR\x10soundsShowonline\x12n\n\x13so\
    unds_showmessages\x18\x08\x20\x01(\x0e2\x15.ENotificationSetting:&k_ENot\
    ificationSettingNotifyUseDefaultR\x12soundsShowmessages\x12x\n\x18notifi\
    cations_sendmobile\x18\t\x20\x01(\x0e2\x15.ENotificationSetting:&k_ENoti\
    ficationSettingNotifyUseDefaultR\x17notificationsSendmobile\"c\n(CPlayer\
    _GetPerFriendPreferences_Response\x127\n\x0bpreferences\x18\x01\x20\x03(\
    \x0b2\x15.PerFriendPreferencesR\x0bpreferences\"b\n'CPlayer_SetPerFriend\
    Preferences_Request\x127\n\x0bpreferences\x18\x01\x20\x01(\x0b2\x15.PerF\
    riendPreferencesR\x0bpreferences\"*\n(CPlayer_SetPerFriendPreferences_Re\
    sponse\"5\n\x19CPlayer_AddFriend_Request\x12\x18\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamid\"\x86\x01\n\x1aCPlayer_AddFriend_Response\x12\
    \x1f\n\x0binvite_sent\x18\x01\x20\x01(\x08R\ninviteSent\x12/\n\x13friend\
    _relationship\x18\x02\x20\x01(\rR\x12friendRelationship\x12\x16\n\x06res\
    ult\x18\x03\x20\x01(\x05R\x06result\"8\n\x1cCPlayer_RemoveFriend_Request\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\"P\n\x1dCPlayer_R\
    emoveFriend_Response\x12/\n\x13friend_relationship\x18\x01\x20\x01(\rR\
    \x12friendRelationship\"T\n\x1cCPlayer_IgnoreFriend_Request\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1a\n\x08unignore\x18\
    \x02\x20\x01(\x08R\x08unignore\"P\n\x1dCPlayer_IgnoreFriend_Response\x12\
    /\n\x13friend_relationship\x18\x01\x20\x01(\rR\x12friendRelationship\")\
    \n'CPlayer_GetCommunityPreferences_Request\"\xf4\x02\n\x1cCPlayer_Commun\
    ityPreferences\x12<\n\x16parenthesize_nicknames\x18\x04\x20\x01(\x08:\
    \x05falseR\x15parenthesizeNicknames\x12i\n\x13text_filter_setting\x18\
    \x05\x20\x01(\x0e2\x13.ETextFilterSetting:$k_ETextFilterSettingSteamLabO\
    ptedOutR\x11textFilterSetting\x12A\n\x1atext_filter_ignore_friends\x18\
    \x06\x20\x01(\x08:\x04trueR\x17textFilterIgnoreFriends\x12;\n\x1atext_fi\
    lter_words_revision\x18\x07\x20\x01(\rR\x17textFilterWordsRevision\x12+\
    \n\x11timestamp_updated\x18\x03\x20\x01(\rR\x10timestampUpdated\"\xd4\
    \x01\n(CPlayer_GetCommunityPreferences_Response\x12?\n\x0bpreferences\
    \x18\x01\x20\x01(\x0b2\x1d.CPlayer_CommunityPreferencesR\x0bpreferences\
    \x12g\n\x1econtent_descriptor_preferences\x18\x02\x20\x01(\x0b2!.UserCon\
    tentDescriptorPreferencesR\x1ccontentDescriptorPreferences\"j\n'CPlayer_\
    SetCommunityPreferences_Request\x12?\n\x0bpreferences\x18\x01\x20\x01(\
    \x0b2\x1d.CPlayer_CommunityPreferencesR\x0bpreferences\"*\n(CPlayer_SetC\
    ommunityPreferences_Response\"$\n\"CPlayer_GetTextFilterWords_Request\"\
    \xe0\x01\n\x17CPlayer_TextFilterWords\x12D\n\x1ftext_filter_custom_banne\
    d_words\x18\x01\x20\x03(\tR\x1btextFilterCustomBannedWords\x12B\n\x1etex\
    t_filter_custom_clean_words\x18\x02\x20\x03(\tR\x1atextFilterCustomClean\
    Words\x12;\n\x1atext_filter_words_revision\x18\x03\x20\x01(\rR\x17textFi\
    lterWordsRevision\"U\n#CPlayer_GetTextFilterWords_Response\x12.\n\x05wor\
    ds\x18\x01\x20\x01(\x0b2\x18.CPlayer_TextFilterWordsR\x05words\"J\n,CPla\
    yer_GetNewSteamAnnouncementState_Request\x12\x1a\n\x08language\x18\x01\
    \x20\x01(\x05R\x08language\"\xb4\x02\n-CPlayer_GetNewSteamAnnouncementSt\
    ate_Response\x12W\n\x05state\x18\x01\x20\x01(\x0e2\x1b.ENewSteamAnnounce\
    mentState:$k_ENewSteamAnnouncementState_InvalidR\x05state\x123\n\x15anno\
    uncement_headline\x18\x02\x20\x01(\tR\x14announcementHeadline\x12)\n\x10\
    announcement_url\x18\x03\x20\x01(\tR\x0fannouncementUrl\x12\x1f\n\x0btim\
    e_posted\x18\x04\x20\x01(\rR\ntimePosted\x12)\n\x10announcement_gid\x18\
    \x05\x20\x01(\x04R\x0fannouncementGid\"}\n/CPlayer_UpdateSteamAnnounceme\
    ntLastRead_Request\x12)\n\x10announcement_gid\x18\x01\x20\x01(\x04R\x0fa\
    nnouncementGid\x12\x1f\n\x0btime_posted\x18\x02\x20\x01(\rR\ntimePosted\
    \"2\n0CPlayer_UpdateSteamAnnouncementLastRead_Response\"$\n\"CPlayer_Get\
    PrivacySettings_Request\"\xcb\x02\n\x10CPrivacySettings\x12#\n\rprivacy_\
    state\x18\x01\x20\x01(\x05R\x0cprivacyState\x126\n\x17privacy_state_inve\
    ntory\x18\x02\x20\x01(\x05R\x15privacyStateInventory\x12.\n\x13privacy_s\
    tate_gifts\x18\x03\x20\x01(\x05R\x11privacyStateGifts\x128\n\x18privacy_\
    state_ownedgames\x18\x04\x20\x01(\x05R\x16privacyStateOwnedgames\x124\n\
    \x16privacy_state_playtime\x18\x05\x20\x01(\x05R\x14privacyStatePlaytime\
    \x12:\n\x19privacy_state_friendslist\x18\x06\x20\x01(\x05R\x17privacySta\
    teFriendslist\"c\n#CPlayer_GetPrivacySettings_Response\x12<\n\x10privacy\
    _settings\x18\x01\x20\x01(\x0b2\x11.CPrivacySettingsR\x0fprivacySettings\
    \":\n\"CPlayer_GetDurationControl_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\"\xf0\x02\n#CPlayer_GetDurationControl_Response\x12\
    \x1d\n\nis_enabled\x18\x01\x20\x01(\x08R\tisEnabled\x12\x18\n\x07seconds\
    \x18\x02\x20\x01(\x05R\x07seconds\x12#\n\rseconds_today\x18\x03\x20\x01(\
    \x05R\x0csecondsToday\x122\n\x15is_steamchina_account\x18\x04\x20\x01(\
    \x08R\x13isSteamchinaAccount\x12&\n\x0fis_age_verified\x18\x05\x20\x01(\
    \x08R\risAgeVerified\x122\n\x15seconds_allowed_today\x18\x06\x20\x01(\rR\
    \x13secondsAllowedToday\x128\n\x18age_verification_pending\x18\x07\x20\
    \x01(\x08R\x16ageVerificationPending\x12!\n\x0cblock_minors\x18\x08\x20\
    \x01(\x08R\x0bblockMinors\"\xa8\x02\n*CPlayer_RecordDisconnectedPlaytime\
    _Request\x12\\\n\rplay_sessions\x18\x03\x20\x03(\x0b27.CPlayer_RecordDis\
    connectedPlaytime_Request.PlayHistoryR\x0cplaySessions\x1a\x9b\x01\n\x0b\
    PlayHistory\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12,\n\x12se\
    ssion_time_start\x18\x02\x20\x01(\rR\x10sessionTimeStart\x12\x18\n\x07se\
    conds\x18\x03\x20\x01(\rR\x07seconds\x12\x18\n\x07offline\x18\x04\x20\
    \x01(\x08R\x07offline\x12\x14\n\x05owner\x18\x05\x20\x01(\rR\x05owner\"-\
    \n+CPlayer_RecordDisconnectedPlaytime_Response\"g\n$CPlayer_LastPlayedTi\
    mes_Notification\x12?\n\x05games\x18\x01\x20\x03(\x0b2).CPlayer_GetLastP\
    layedTimes_Response.GameR\x05games\"\x8d\x01\n*CPlayer_FriendNicknameCha\
    nged_Notification\x12\x1c\n\taccountid\x18\x01\x20\x01(\x07R\taccountid\
    \x12\x1a\n\x08nickname\x18\x02\x20\x01(\tR\x08nickname\x12%\n\x0fis_echo\
    _to_self\x18\x03\x20\x01(\x08R\x0cisEchoToSelf\"V\n6CPlayer_FriendEquipp\
    edProfileItemsChanged_Notification\x12\x1c\n\taccountid\x18\x01\x20\x01(\
    \x07R\taccountid\"\xb5\x02\n.CPlayer_NewSteamAnnouncementState_Notificat\
    ion\x12W\n\x05state\x18\x01\x20\x01(\x0e2\x1b.ENewSteamAnnouncementState\
    :$k_ENewSteamAnnouncementState_InvalidR\x05state\x123\n\x15announcement_\
    headline\x18\x02\x20\x01(\tR\x14announcementHeadline\x12)\n\x10announcem\
    ent_url\x18\x03\x20\x01(\tR\x0fannouncementUrl\x12\x1f\n\x0btime_posted\
    \x18\x04\x20\x01(\rR\ntimePosted\x12)\n\x10announcement_gid\x18\x05\x20\
    \x01(\x04R\x0fannouncementGid\"\xdc\x01\n0CPlayer_CommunityPreferencesCh\
    anged_Notification\x12?\n\x0bpreferences\x18\x01\x20\x01(\x0b2\x1d.CPlay\
    er_CommunityPreferencesR\x0bpreferences\x12g\n\x1econtent_descriptor_pre\
    ferences\x18\x02\x20\x01(\x0b2!.UserContentDescriptorPreferencesR\x1ccon\
    tentDescriptorPreferences\"]\n+CPlayer_TextFilterWordsChanged_Notificati\
    on\x12.\n\x05words\x18\x01\x20\x01(\x0b2\x18.CPlayer_TextFilterWordsR\
    \x05words\"\x89\x01\n0CPlayer_PerFriendPreferencesChanged_Notification\
    \x12\x1c\n\taccountid\x18\x01\x20\x01(\x07R\taccountid\x127\n\x0bprefere\
    nces\x18\x02\x20\x01(\x0b2\x15.PerFriendPreferencesR\x0bpreferences\"k\n\
    +CPlayer_PrivacySettingsChanged_Notification\x12<\n\x10privacy_settings\
    \x18\x01\x20\x01(\x0b2\x11.CPrivacySettingsR\x0fprivacySettings*\x99\x02\
    \n\x1aEProfileCustomizationStyle\x12'\n#k_EProfileCustomizationStyleDefa\
    ult\x10\0\x12(\n$k_EProfileCustomizationStyleSelected\x10\x01\x12&\n\"k_\
    EProfileCustomizationStyleRarest\x10\x02\x12*\n&k_EProfileCustomizationS\
    tyleMostRecent\x10\x03\x12&\n\"k_EProfileCustomizationStyleRandom\x10\
    \x04\x12,\n(k_EProfileCustomizationStyleHighestRated\x10\x05*v\n\x0eEAgr\
    eementType\x12%\n\x18k_EAgreementType_Invalid\x10\xff\xff\xff\xff\xff\
    \xff\xff\xff\xff\x01\x12\x1e\n\x1ak_EAgreementType_GlobalSSA\x10\0\x12\
    \x1d\n\x19k_EAgreementType_ChinaSSA\x10\x01*\x85\x01\n\x14ENotificationS\
    etting\x12*\n&k_ENotificationSettingNotifyUseDefault\x10\0\x12\x20\n\x1c\
    k_ENotificationSettingAlways\x10\x01\x12\x1f\n\x1bk_ENotificationSetting\
    Never\x10\x02*\xb0\x01\n\x12ETextFilterSetting\x12(\n$k_ETextFilterSetti\
    ngSteamLabOptedOut\x10\0\x12\x1f\n\x1bk_ETextFilterSettingEnabled\x10\
    \x01\x12-\n)k_ETextFilterSettingEnabledAllowProfanity\x10\x02\x12\x20\n\
    \x1ck_ETextFilterSettingDisabled\x10\x032\xc3*\n\x06Player\x12e\n\x14Get\
    PlayerLinkDetails\x12%.CPlayer_GetPlayerLinkDetails_Request\x1a&.CPlayer\
    _GetPlayerLinkDetails_Response\x12\x8f\x01\n\"GetMutualFriendsForIncomin\
    gInvites\x123.CPlayer_GetMutualFriendsForIncomingInvites_Request\x1a4.CP\
    layer_GetMutualFriendsForIncomingInvites_Response\x12P\n\rGetOwnedGames\
    \x12\x1e.CPlayer_GetOwnedGames_Request\x1a\x1f.CPlayer_GetOwnedGames_Res\
    ponse\x12J\n\x0bGetPlayNext\x12\x1c.CPlayer_GetPlayNext_Request\x1a\x1d.\
    CPlayer_GetPlayNext_Response\x12k\n\x16GetFriendsGameplayInfo\x12'.CPlay\
    er_GetFriendsGameplayInfo_Request\x1a(.CPlayer_GetFriendsGameplayInfo_Re\
    sponse\x12_\n\x12GetGameBadgeLevels\x12#.CPlayer_GetGameBadgeLevels_Requ\
    est\x1a$.CPlayer_GetGameBadgeLevels_Response\x12e\n\x14GetProfileBackgro\
    und\x12%.CPlayer_GetProfileBackground_Request\x1a&.CPlayer_GetProfileBac\
    kground_Response\x12e\n\x14SetProfileBackground\x12%.CPlayer_SetProfileB\
    ackground_Request\x1a&.CPlayer_SetProfileBackground_Response\x12q\n\x18G\
    etMiniProfileBackground\x12).CPlayer_GetMiniProfileBackground_Request\
    \x1a*.CPlayer_GetMiniProfileBackground_Response\x12q\n\x18SetMiniProfile\
    Background\x12).CPlayer_SetMiniProfileBackground_Request\x1a*.CPlayer_Se\
    tMiniProfileBackground_Response\x12S\n\x0eGetAvatarFrame\x12\x1f.CPlayer\
    _GetAvatarFrame_Request\x1a\x20.CPlayer_GetAvatarFrame_Response\x12S\n\
    \x0eSetAvatarFrame\x12\x1f.CPlayer_SetAvatarFrame_Request\x1a\x20.CPlaye\
    r_SetAvatarFrame_Response\x12\\\n\x11GetAnimatedAvatar\x12\".CPlayer_Get\
    AnimatedAvatar_Request\x1a#.CPlayer_GetAnimatedAvatar_Response\x12\\\n\
    \x11SetAnimatedAvatar\x12\".CPlayer_SetAnimatedAvatar_Request\x1a#.CPlay\
    er_SetAnimatedAvatar_Response\x12q\n\x18GetSteamDeckKeyboardSkin\x12).CP\
    layer_GetSteamDeckKeyboardSkin_Request\x1a*.CPlayer_GetSteamDeckKeyboard\
    Skin_Response\x12q\n\x18SetSteamDeckKeyboardSkin\x12).CPlayer_SetSteamDe\
    ckKeyboardSkin_Request\x1a*.CPlayer_SetSteamDeckKeyboardSkin_Response\
    \x12e\n\x14GetProfileItemsOwned\x12%.CPlayer_GetProfileItemsOwned_Reques\
    t\x1a&.CPlayer_GetProfileItemsOwned_Response\x12n\n\x17GetProfileItemsEq\
    uipped\x12(.CPlayer_GetProfileItemsEquipped_Request\x1a).CPlayer_GetProf\
    ileItemsEquipped_Response\x12z\n\x1bSetEquippedProfileItemFlags\x12,.CPl\
    ayer_SetEquippedProfileItemFlags_Request\x1a-.CPlayer_SetEquippedProfile\
    ItemFlags_Response\x12V\n\x0fGetEmoticonList\x12\x20.CPlayer_GetEmoticon\
    List_Request\x1a!.CPlayer_GetEmoticonList_Response\x12t\n\x19GetCommunit\
    yBadgeProgress\x12*.CPlayer_GetCommunityBadgeProgress_Request\x1a+.CPlay\
    er_GetCommunityBadgeProgress_Response\x12w\n\x1aGetTopAchievementsForGam\
    es\x12+.CPlayer_GetTopAchievementsForGames_Request\x1a,.CPlayer_GetTopAc\
    hievementsForGames_Response\x12n\n\x17GetAchievementsProgress\x12(.CPlay\
    er_GetAchievementsProgress_Request\x1a).CPlayer_GetAchievementsProgress_\
    Response\x12b\n\x13GetGameAchievements\x12$.CPlayer_GetGameAchievements_\
    Request\x1a%.CPlayer_GetGameAchievements_Response\x12Y\n\x10GetFavoriteB\
    adge\x12!.CPlayer_GetFavoriteBadge_Request\x1a\".CPlayer_GetFavoriteBadg\
    e_Response\x12Y\n\x10SetFavoriteBadge\x12!.CPlayer_SetFavoriteBadge_Requ\
    est\x1a\".CPlayer_SetFavoriteBadge_Response\x12n\n\x17GetProfileCustomiz\
    ation\x12(.CPlayer_GetProfileCustomization_Request\x1a).CPlayer_GetProfi\
    leCustomization_Response\x12\x8c\x01\n!GetPurchasedProfileCustomizations\
    \x122.CPlayer_GetPurchasedProfileCustomizations_Request\x1a3.CPlayer_Get\
    PurchasedProfileCustomizations_Response\x12\xad\x01\n,GetPurchasedAndUpg\
    radedProfileCustomizations\x12=.CPlayer_GetPurchasedAndUpgradedProfileCu\
    stomizations_Request\x1a>.CPlayer_GetPurchasedAndUpgradedProfileCustomiz\
    ations_Response\x12t\n\x19GetProfileThemesAvailable\x12*.CPlayer_GetProf\
    ileThemesAvailable_Request\x1a+.CPlayer_GetProfileThemesAvailable_Respon\
    se\x12V\n\x0fSetProfileTheme\x12\x20.CPlayer_SetProfileTheme_Request\x1a\
    !.CPlayer_SetProfileTheme_Response\x12h\n\x15SetProfilePreferences\x12&.\
    CPlayer_SetProfilePreferences_Request\x1a'.CPlayer_SetProfilePreferences\
    _Response\x12b\n\x13PostStatusToFriends\x12$.CPlayer_PostStatusToFriends\
    _Request\x1a%.CPlayer_PostStatusToFriends_Response\x12V\n\x0fGetPostedSt\
    atus\x12\x20.CPlayer_GetPostedStatus_Request\x1a!.CPlayer_GetPostedStatu\
    s_Response\x12_\n\x12DeletePostedStatus\x12#.CPlayer_DeletePostedStatus_\
    Request\x1a$.CPlayer_DeletePostedStatus_Response\x12e\n\x18ClientGetLast\
    PlayedTimes\x12#.CPlayer_GetLastPlayedTimes_Request\x1a$.CPlayer_GetLast\
    PlayedTimes_Response\x12_\n\x12GetTimeSSAAccepted\x12#.CPlayer_GetTimeSS\
    AAccepted_Request\x1a$.CPlayer_GetTimeSSAAccepted_Response\x12D\n\tAccep\
    tSSA\x12\x1a.CPlayer_AcceptSSA_Request\x1a\x1b.CPlayer_AcceptSSA_Respons\
    e\x12V\n\x0fGetNicknameList\x12\x20.CPlayer_GetNicknameList_Request\x1a!\
    .CPlayer_GetNicknameList_Response\x12n\n\x17GetPerFriendPreferences\x12(\
    .CPlayer_GetPerFriendPreferences_Request\x1a).CPlayer_GetPerFriendPrefer\
    ences_Response\x12n\n\x17SetPerFriendPreferences\x12(.CPlayer_SetPerFrie\
    ndPreferences_Request\x1a).CPlayer_SetPerFriendPreferences_Response\x12D\
    \n\tAddFriend\x12\x1a.CPlayer_AddFriend_Request\x1a\x1b.CPlayer_AddFrien\
    d_Response\x12M\n\x0cRemoveFriend\x12\x1d.CPlayer_RemoveFriend_Request\
    \x1a\x1e.CPlayer_RemoveFriend_Response\x12M\n\x0cIgnoreFriend\x12\x1d.CP\
    layer_IgnoreFriend_Request\x1a\x1e.CPlayer_IgnoreFriend_Response\x12n\n\
    \x17GetCommunityPreferences\x12(.CPlayer_GetCommunityPreferences_Request\
    \x1a).CPlayer_GetCommunityPreferences_Response\x12n\n\x17SetCommunityPre\
    ferences\x12(.CPlayer_SetCommunityPreferences_Request\x1a).CPlayer_SetCo\
    mmunityPreferences_Response\x12_\n\x12GetTextFilterWords\x12#.CPlayer_Ge\
    tTextFilterWords_Request\x1a$.CPlayer_GetTextFilterWords_Response\x12}\n\
    \x1cGetNewSteamAnnouncementState\x12-.CPlayer_GetNewSteamAnnouncementSta\
    te_Request\x1a..CPlayer_GetNewSteamAnnouncementState_Response\x12\x86\
    \x01\n\x1fUpdateSteamAnnouncementLastRead\x120.CPlayer_UpdateSteamAnnoun\
    cementLastRead_Request\x1a1.CPlayer_UpdateSteamAnnouncementLastRead_Resp\
    onse\x12_\n\x12GetPrivacySettings\x12#.CPlayer_GetPrivacySettings_Reques\
    t\x1a$.CPlayer_GetPrivacySettings_Response\x12_\n\x12GetDurationControl\
    \x12#.CPlayer_GetDurationControl_Request\x1a$.CPlayer_GetDurationControl\
    _Response\x12w\n\x1aRecordDisconnectedPlaytime\x12+.CPlayer_RecordDiscon\
    nectedPlaytime_Request\x1a,.CPlayer_RecordDisconnectedPlaytime_Response2\
    \x93\x06\n\x0cPlayerClient\x12K\n\x15NotifyLastPlayedTimes\x12%.CPlayer_\
    LastPlayedTimes_Notification\x1a\x0b.NoResponse\x12W\n\x1bNotifyFriendNi\
    cknameChanged\x12+.CPlayer_FriendNicknameChanged_Notification\x1a\x0b.No\
    Response\x12o\n'NotifyFriendEquippedProfileItemsChanged\x127.CPlayer_Fri\
    endEquippedProfileItemsChanged_Notification\x1a\x0b.NoResponse\x12_\n\
    \x1fNotifyNewSteamAnnouncementState\x12/.CPlayer_NewSteamAnnouncementSta\
    te_Notification\x1a\x0b.NoResponse\x12c\n!NotifyCommunityPreferencesChan\
    ged\x121.CPlayer_CommunityPreferencesChanged_Notification\x1a\x0b.NoResp\
    onse\x12Y\n\x1cNotifyTextFilterWordsChanged\x12,.CPlayer_TextFilterWords\
    Changed_Notification\x1a\x0b.NoResponse\x12c\n!NotifyPerFriendPreference\
    sChanged\x121.CPlayer_PerFriendPreferencesChanged_Notification\x1a\x0b.N\
    oResponse\x12`\n#NotifyPrivacyPrivacySettingsChanged\x12,.CPlayer_Privac\
    ySettingsChanged_Notification\x1a\x0b.NoResponse\x1a\x04\xc0\xb5\x18\x02\
    B\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            deps.push(super::enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(143);
            messages.push(CPlayer_GetPlayerLinkDetails_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetPlayerLinkDetails_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetMutualFriendsForIncomingInvites_Request::generated_message_descriptor_data());
            messages.push(CPlayer_IncomingInviteMutualFriendList::generated_message_descriptor_data());
            messages.push(CPlayer_GetMutualFriendsForIncomingInvites_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetOwnedGames_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetOwnedGames_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPlayNext_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetPlayNext_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetFriendsGameplayInfo_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetFriendsGameplayInfo_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetGameBadgeLevels_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetGameBadgeLevels_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileBackground_Request::generated_message_descriptor_data());
            messages.push(ProfileItem::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileBackground_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetProfileBackground_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetProfileBackground_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetMiniProfileBackground_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetMiniProfileBackground_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetMiniProfileBackground_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetMiniProfileBackground_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetAvatarFrame_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetAvatarFrame_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetAvatarFrame_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetAvatarFrame_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetAnimatedAvatar_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetAnimatedAvatar_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetAnimatedAvatar_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetAnimatedAvatar_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetSteamDeckKeyboardSkin_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetSteamDeckKeyboardSkin_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetSteamDeckKeyboardSkin_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetSteamDeckKeyboardSkin_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileItemsOwned_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileItemsOwned_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileItemsEquipped_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileItemsEquipped_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetEquippedProfileItemFlags_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetEquippedProfileItemFlags_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetEmoticonList_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetEmoticonList_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetCommunityBadgeProgress_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetCommunityBadgeProgress_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetTopAchievementsForGames_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetTopAchievementsForGames_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetAchievementsProgress_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetAchievementsProgress_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetGameAchievements_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetGameAchievements_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetFavoriteBadge_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetFavoriteBadge_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetFavoriteBadge_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetFavoriteBadge_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileCustomization_Request::generated_message_descriptor_data());
            messages.push(ProfileCustomizationSlot::generated_message_descriptor_data());
            messages.push(ProfileCustomization::generated_message_descriptor_data());
            messages.push(ProfileTheme::generated_message_descriptor_data());
            messages.push(ProfilePreferences::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileCustomization_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPurchasedProfileCustomizations_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetPurchasedProfileCustomizations_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileThemesAvailable_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetProfileThemesAvailable_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetProfileTheme_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetProfileTheme_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetProfilePreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetProfilePreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_PostStatusToFriends_Request::generated_message_descriptor_data());
            messages.push(CPlayer_PostStatusToFriends_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPostedStatus_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetPostedStatus_Response::generated_message_descriptor_data());
            messages.push(CPlayer_DeletePostedStatus_Request::generated_message_descriptor_data());
            messages.push(CPlayer_DeletePostedStatus_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetLastPlayedTimes_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetLastPlayedTimes_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetTimeSSAAccepted_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetTimeSSAAccepted_Response::generated_message_descriptor_data());
            messages.push(CPlayer_AcceptSSA_Request::generated_message_descriptor_data());
            messages.push(CPlayer_AcceptSSA_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetNicknameList_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetNicknameList_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPerFriendPreferences_Request::generated_message_descriptor_data());
            messages.push(PerFriendPreferences::generated_message_descriptor_data());
            messages.push(CPlayer_GetPerFriendPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetPerFriendPreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetPerFriendPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_AddFriend_Request::generated_message_descriptor_data());
            messages.push(CPlayer_AddFriend_Response::generated_message_descriptor_data());
            messages.push(CPlayer_RemoveFriend_Request::generated_message_descriptor_data());
            messages.push(CPlayer_RemoveFriend_Response::generated_message_descriptor_data());
            messages.push(CPlayer_IgnoreFriend_Request::generated_message_descriptor_data());
            messages.push(CPlayer_IgnoreFriend_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetCommunityPreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_CommunityPreferences::generated_message_descriptor_data());
            messages.push(CPlayer_GetCommunityPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetCommunityPreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetCommunityPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetTextFilterWords_Request::generated_message_descriptor_data());
            messages.push(CPlayer_TextFilterWords::generated_message_descriptor_data());
            messages.push(CPlayer_GetTextFilterWords_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetNewSteamAnnouncementState_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetNewSteamAnnouncementState_Response::generated_message_descriptor_data());
            messages.push(CPlayer_UpdateSteamAnnouncementLastRead_Request::generated_message_descriptor_data());
            messages.push(CPlayer_UpdateSteamAnnouncementLastRead_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPrivacySettings_Request::generated_message_descriptor_data());
            messages.push(CPrivacySettings::generated_message_descriptor_data());
            messages.push(CPlayer_GetPrivacySettings_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetDurationControl_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetDurationControl_Response::generated_message_descriptor_data());
            messages.push(CPlayer_RecordDisconnectedPlaytime_Request::generated_message_descriptor_data());
            messages.push(CPlayer_RecordDisconnectedPlaytime_Response::generated_message_descriptor_data());
            messages.push(CPlayer_LastPlayedTimes_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_FriendNicknameChanged_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_FriendEquippedProfileItemsChanged_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_NewSteamAnnouncementState_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_CommunityPreferencesChanged_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_TextFilterWordsChanged_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_PerFriendPreferencesChanged_Notification::generated_message_descriptor_data());
            messages.push(CPlayer_PrivacySettingsChanged_Notification::generated_message_descriptor_data());
            messages.push(cplayer_get_player_link_details_response::PlayerLinkDetails::generated_message_descriptor_data());
            messages.push(cplayer_get_player_link_details_response::player_link_details::AccountPublicData::generated_message_descriptor_data());
            messages.push(cplayer_get_player_link_details_response::player_link_details::AccountPrivateData::generated_message_descriptor_data());
            messages.push(cplayer_get_owned_games_response::Game::generated_message_descriptor_data());
            messages.push(cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo::generated_message_descriptor_data());
            messages.push(cplayer_get_friends_gameplay_info_response::OwnGameplayInfo::generated_message_descriptor_data());
            messages.push(cplayer_get_game_badge_levels_response::Badge::generated_message_descriptor_data());
            messages.push(profile_item::ProfileColor::generated_message_descriptor_data());
            messages.push(cplayer_get_emoticon_list_response::Emoticon::generated_message_descriptor_data());
            messages.push(cplayer_get_community_badge_progress_response::Quest::generated_message_descriptor_data());
            messages.push(cplayer_get_top_achievements_for_games_response::Achievement::generated_message_descriptor_data());
            messages.push(cplayer_get_top_achievements_for_games_response::Game::generated_message_descriptor_data());
            messages.push(cplayer_get_achievements_progress_response::AchievementProgress::generated_message_descriptor_data());
            messages.push(cplayer_get_game_achievements_response::Achievement::generated_message_descriptor_data());
            messages.push(cplayer_get_profile_customization_response::PurchasedCustomization::generated_message_descriptor_data());
            messages.push(cplayer_get_purchased_profile_customizations_response::PurchasedCustomization::generated_message_descriptor_data());
            messages.push(cplayer_get_purchased_and_upgraded_profile_customizations_response::PurchasedCustomization::generated_message_descriptor_data());
            messages.push(cplayer_get_purchased_and_upgraded_profile_customizations_response::UpgradedCustomization::generated_message_descriptor_data());
            messages.push(cplayer_get_last_played_times_response::Game::generated_message_descriptor_data());
            messages.push(cplayer_get_nickname_list_response::PlayerNickname::generated_message_descriptor_data());
            messages.push(cplayer_record_disconnected_playtime_request::PlayHistory::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(EProfileCustomizationStyle::generated_enum_descriptor_data());
            enums.push(EAgreementType::generated_enum_descriptor_data());
            enums.push(ENotificationSetting::generated_enum_descriptor_data());
            enums.push(ETextFilterSetting::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
