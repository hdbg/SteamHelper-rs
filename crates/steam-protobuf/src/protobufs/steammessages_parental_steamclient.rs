// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_parental.steamclient.proto`

// @@protoc_insertion_point(message:ParentalApp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalApp {
    // message fields
    // @@protoc_insertion_point(field:ParentalApp.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalApp.is_allowed)
    pub is_allowed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalApp.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalApp {
    fn default() -> &'a ParentalApp {
        <ParentalApp as crate::Message>::default_instance()
    }
}

impl ParentalApp {
    pub fn new() -> ParentalApp {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_allowed = 2;

    pub fn is_allowed(&self) -> bool {
        self.is_allowed.unwrap_or(false)
    }

    pub fn clear_is_allowed(&mut self) {
        self.is_allowed = ::std::option::Option::None;
    }

    pub fn has_is_allowed(&self) -> bool {
        self.is_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_allowed(&mut self, v: bool) {
        self.is_allowed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &ParentalApp| { &m.appid },
            |m: &mut ParentalApp| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_allowed",
            |m: &ParentalApp| { &m.is_allowed },
            |m: &mut ParentalApp| { &mut m.is_allowed },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalApp>(
            "ParentalApp",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalApp {
    const NAME: &'static str = "ParentalApp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.is_allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.is_allowed {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.is_allowed {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalApp {
        ParentalApp::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.is_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalApp {
        static instance: ParentalApp = ParentalApp {
            appid: ::std::option::Option::None,
            is_allowed: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalApp {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalApp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalApp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalApp {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalPlaytimeDay)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalPlaytimeDay {
    // message fields
    // @@protoc_insertion_point(field:ParentalPlaytimeDay.allowed_time_windows)
    pub allowed_time_windows: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeDay.allowed_daily_minutes)
    pub allowed_daily_minutes: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalPlaytimeDay.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalPlaytimeDay {
    fn default() -> &'a ParentalPlaytimeDay {
        <ParentalPlaytimeDay as crate::Message>::default_instance()
    }
}

impl ParentalPlaytimeDay {
    pub fn new() -> ParentalPlaytimeDay {
        ::std::default::Default::default()
    }

    // optional uint64 allowed_time_windows = 1;

    pub fn allowed_time_windows(&self) -> u64 {
        self.allowed_time_windows.unwrap_or(0)
    }

    pub fn clear_allowed_time_windows(&mut self) {
        self.allowed_time_windows = ::std::option::Option::None;
    }

    pub fn has_allowed_time_windows(&self) -> bool {
        self.allowed_time_windows.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed_time_windows(&mut self, v: u64) {
        self.allowed_time_windows = ::std::option::Option::Some(v);
    }

    // optional uint32 allowed_daily_minutes = 2;

    pub fn allowed_daily_minutes(&self) -> u32 {
        self.allowed_daily_minutes.unwrap_or(0)
    }

    pub fn clear_allowed_daily_minutes(&mut self) {
        self.allowed_daily_minutes = ::std::option::Option::None;
    }

    pub fn has_allowed_daily_minutes(&self) -> bool {
        self.allowed_daily_minutes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed_daily_minutes(&mut self, v: u32) {
        self.allowed_daily_minutes = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "allowed_time_windows",
            |m: &ParentalPlaytimeDay| { &m.allowed_time_windows },
            |m: &mut ParentalPlaytimeDay| { &mut m.allowed_time_windows },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "allowed_daily_minutes",
            |m: &ParentalPlaytimeDay| { &m.allowed_daily_minutes },
            |m: &mut ParentalPlaytimeDay| { &mut m.allowed_daily_minutes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalPlaytimeDay>(
            "ParentalPlaytimeDay",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalPlaytimeDay {
    const NAME: &'static str = "ParentalPlaytimeDay";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.allowed_time_windows = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.allowed_daily_minutes = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.allowed_time_windows {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.allowed_daily_minutes {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.allowed_time_windows {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.allowed_daily_minutes {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalPlaytimeDay {
        ParentalPlaytimeDay::new()
    }

    fn clear(&mut self) {
        self.allowed_time_windows = ::std::option::Option::None;
        self.allowed_daily_minutes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalPlaytimeDay {
        static instance: ParentalPlaytimeDay = ParentalPlaytimeDay {
            allowed_time_windows: ::std::option::Option::None,
            allowed_daily_minutes: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalPlaytimeDay {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalPlaytimeDay").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalPlaytimeDay {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalPlaytimeDay {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalPlaytimeRestrictions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalPlaytimeRestrictions {
    // message fields
    // @@protoc_insertion_point(field:ParentalPlaytimeRestrictions.apply_playtime_restrictions)
    pub apply_playtime_restrictions: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRestrictions.playtime_days)
    pub playtime_days: ::std::vec::Vec<ParentalPlaytimeDay>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalPlaytimeRestrictions.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalPlaytimeRestrictions {
    fn default() -> &'a ParentalPlaytimeRestrictions {
        <ParentalPlaytimeRestrictions as crate::Message>::default_instance()
    }
}

impl ParentalPlaytimeRestrictions {
    pub fn new() -> ParentalPlaytimeRestrictions {
        ::std::default::Default::default()
    }

    // optional bool apply_playtime_restrictions = 2;

    pub fn apply_playtime_restrictions(&self) -> bool {
        self.apply_playtime_restrictions.unwrap_or(false)
    }

    pub fn clear_apply_playtime_restrictions(&mut self) {
        self.apply_playtime_restrictions = ::std::option::Option::None;
    }

    pub fn has_apply_playtime_restrictions(&self) -> bool {
        self.apply_playtime_restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apply_playtime_restrictions(&mut self, v: bool) {
        self.apply_playtime_restrictions = ::std::option::Option::Some(v);
    }

    // repeated .ParentalPlaytimeDay playtime_days = 15;

    pub fn playtime_days(&self) -> &[ParentalPlaytimeDay] {
        &self.playtime_days
    }

    pub fn clear_playtime_days(&mut self) {
        self.playtime_days.clear();
    }

    // Param is passed by value, moved
    pub fn set_playtime_days(&mut self, v: ::std::vec::Vec<ParentalPlaytimeDay>) {
        self.playtime_days = v;
    }

    // Mutable pointer to the field.
    pub fn mut_playtime_days(&mut self) -> &mut ::std::vec::Vec<ParentalPlaytimeDay> {
        &mut self.playtime_days
    }

    // Take field
    pub fn take_playtime_days(&mut self) -> ::std::vec::Vec<ParentalPlaytimeDay> {
        ::std::mem::replace(&mut self.playtime_days, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "apply_playtime_restrictions",
            |m: &ParentalPlaytimeRestrictions| { &m.apply_playtime_restrictions },
            |m: &mut ParentalPlaytimeRestrictions| { &mut m.apply_playtime_restrictions },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "playtime_days",
            |m: &ParentalPlaytimeRestrictions| { &m.playtime_days },
            |m: &mut ParentalPlaytimeRestrictions| { &mut m.playtime_days },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalPlaytimeRestrictions>(
            "ParentalPlaytimeRestrictions",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalPlaytimeRestrictions {
    const NAME: &'static str = "ParentalPlaytimeRestrictions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.apply_playtime_restrictions = ::std::option::Option::Some(is.read_bool()?);
                },
                122 => {
                    self.playtime_days.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.apply_playtime_restrictions {
            my_size += 1 + 1;
        }
        for value in &self.playtime_days {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.apply_playtime_restrictions {
            os.write_bool(2, v)?;
        }
        for v in &self.playtime_days {
            crate::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalPlaytimeRestrictions {
        ParentalPlaytimeRestrictions::new()
    }

    fn clear(&mut self) {
        self.apply_playtime_restrictions = ::std::option::Option::None;
        self.playtime_days.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalPlaytimeRestrictions {
        static instance: ParentalPlaytimeRestrictions = ParentalPlaytimeRestrictions {
            apply_playtime_restrictions: ::std::option::Option::None,
            playtime_days: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalPlaytimeRestrictions {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalPlaytimeRestrictions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalPlaytimeRestrictions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalPlaytimeRestrictions {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalTemporaryPlaytimeRestrictions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalTemporaryPlaytimeRestrictions {
    // message fields
    // @@protoc_insertion_point(field:ParentalTemporaryPlaytimeRestrictions.restrictions)
    pub restrictions: crate::MessageField<ParentalPlaytimeDay>,
    // @@protoc_insertion_point(field:ParentalTemporaryPlaytimeRestrictions.rtime_expires)
    pub rtime_expires: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalTemporaryPlaytimeRestrictions.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalTemporaryPlaytimeRestrictions {
    fn default() -> &'a ParentalTemporaryPlaytimeRestrictions {
        <ParentalTemporaryPlaytimeRestrictions as crate::Message>::default_instance()
    }
}

impl ParentalTemporaryPlaytimeRestrictions {
    pub fn new() -> ParentalTemporaryPlaytimeRestrictions {
        ::std::default::Default::default()
    }

    // optional .ParentalPlaytimeDay restrictions = 1;

    pub fn restrictions(&self) -> &ParentalPlaytimeDay {
        self.restrictions.as_ref().unwrap_or_else(|| <ParentalPlaytimeDay as crate::Message>::default_instance())
    }

    pub fn clear_restrictions(&mut self) {
        self.restrictions.clear();
    }

    pub fn has_restrictions(&self) -> bool {
        self.restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_restrictions(&mut self, v: ParentalPlaytimeDay) {
        self.restrictions = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restrictions(&mut self) -> &mut ParentalPlaytimeDay {
        self.restrictions.mut_or_insert_default()
    }

    // Take field
    pub fn take_restrictions(&mut self) -> ParentalPlaytimeDay {
        self.restrictions.take().unwrap_or_else(|| ParentalPlaytimeDay::new())
    }

    // optional uint32 rtime_expires = 2;

    pub fn rtime_expires(&self) -> u32 {
        self.rtime_expires.unwrap_or(0)
    }

    pub fn clear_rtime_expires(&mut self) {
        self.rtime_expires = ::std::option::Option::None;
    }

    pub fn has_rtime_expires(&self) -> bool {
        self.rtime_expires.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_expires(&mut self, v: u32) {
        self.rtime_expires = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalPlaytimeDay>(
            "restrictions",
            |m: &ParentalTemporaryPlaytimeRestrictions| { &m.restrictions },
            |m: &mut ParentalTemporaryPlaytimeRestrictions| { &mut m.restrictions },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_expires",
            |m: &ParentalTemporaryPlaytimeRestrictions| { &m.rtime_expires },
            |m: &mut ParentalTemporaryPlaytimeRestrictions| { &mut m.rtime_expires },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalTemporaryPlaytimeRestrictions>(
            "ParentalTemporaryPlaytimeRestrictions",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalTemporaryPlaytimeRestrictions {
    const NAME: &'static str = "ParentalTemporaryPlaytimeRestrictions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.restrictions)?;
                },
                16 => {
                    self.rtime_expires = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rtime_expires {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.restrictions.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.rtime_expires {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalTemporaryPlaytimeRestrictions {
        ParentalTemporaryPlaytimeRestrictions::new()
    }

    fn clear(&mut self) {
        self.restrictions.clear();
        self.rtime_expires = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalTemporaryPlaytimeRestrictions {
        static instance: ParentalTemporaryPlaytimeRestrictions = ParentalTemporaryPlaytimeRestrictions {
            restrictions: crate::MessageField::none(),
            rtime_expires: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalTemporaryPlaytimeRestrictions {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalTemporaryPlaytimeRestrictions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalTemporaryPlaytimeRestrictions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalTemporaryPlaytimeRestrictions {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalSettings {
    // message fields
    // @@protoc_insertion_point(field:ParentalSettings.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base_id)
    pub applist_base_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base_description)
    pub applist_base_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base)
    pub applist_base: ::std::vec::Vec<ParentalApp>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_custom)
    pub applist_custom: ::std::vec::Vec<ParentalApp>,
    // @@protoc_insertion_point(field:ParentalSettings.passwordhashtype)
    pub passwordhashtype: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.salt)
    pub salt: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:ParentalSettings.passwordhash)
    pub passwordhash: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:ParentalSettings.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalSettings.enabled_features)
    pub enabled_features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.recovery_email)
    pub recovery_email: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ParentalSettings.is_site_license_lock)
    pub is_site_license_lock: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalSettings.temporary_enabled_features)
    pub temporary_enabled_features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.rtime_temporary_feature_expiration)
    pub rtime_temporary_feature_expiration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.playtime_restrictions)
    pub playtime_restrictions: crate::MessageField<ParentalPlaytimeRestrictions>,
    // @@protoc_insertion_point(field:ParentalSettings.temporary_playtime_restrictions)
    pub temporary_playtime_restrictions: crate::MessageField<ParentalTemporaryPlaytimeRestrictions>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalSettings.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalSettings {
    fn default() -> &'a ParentalSettings {
        <ParentalSettings as crate::Message>::default_instance()
    }
}

impl ParentalSettings {
    pub fn new() -> ParentalSettings {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 applist_base_id = 2;

    pub fn applist_base_id(&self) -> u32 {
        self.applist_base_id.unwrap_or(0)
    }

    pub fn clear_applist_base_id(&mut self) {
        self.applist_base_id = ::std::option::Option::None;
    }

    pub fn has_applist_base_id(&self) -> bool {
        self.applist_base_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applist_base_id(&mut self, v: u32) {
        self.applist_base_id = ::std::option::Option::Some(v);
    }

    // optional string applist_base_description = 3;

    pub fn applist_base_description(&self) -> &str {
        match self.applist_base_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_applist_base_description(&mut self) {
        self.applist_base_description = ::std::option::Option::None;
    }

    pub fn has_applist_base_description(&self) -> bool {
        self.applist_base_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applist_base_description(&mut self, v: ::std::string::String) {
        self.applist_base_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_applist_base_description(&mut self) -> &mut ::std::string::String {
        if self.applist_base_description.is_none() {
            self.applist_base_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.applist_base_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_applist_base_description(&mut self) -> ::std::string::String {
        self.applist_base_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .ParentalApp applist_base = 4;

    pub fn applist_base(&self) -> &[ParentalApp] {
        &self.applist_base
    }

    pub fn clear_applist_base(&mut self) {
        self.applist_base.clear();
    }

    // Param is passed by value, moved
    pub fn set_applist_base(&mut self, v: ::std::vec::Vec<ParentalApp>) {
        self.applist_base = v;
    }

    // Mutable pointer to the field.
    pub fn mut_applist_base(&mut self) -> &mut ::std::vec::Vec<ParentalApp> {
        &mut self.applist_base
    }

    // Take field
    pub fn take_applist_base(&mut self) -> ::std::vec::Vec<ParentalApp> {
        ::std::mem::replace(&mut self.applist_base, ::std::vec::Vec::new())
    }

    // repeated .ParentalApp applist_custom = 5;

    pub fn applist_custom(&self) -> &[ParentalApp] {
        &self.applist_custom
    }

    pub fn clear_applist_custom(&mut self) {
        self.applist_custom.clear();
    }

    // Param is passed by value, moved
    pub fn set_applist_custom(&mut self, v: ::std::vec::Vec<ParentalApp>) {
        self.applist_custom = v;
    }

    // Mutable pointer to the field.
    pub fn mut_applist_custom(&mut self) -> &mut ::std::vec::Vec<ParentalApp> {
        &mut self.applist_custom
    }

    // Take field
    pub fn take_applist_custom(&mut self) -> ::std::vec::Vec<ParentalApp> {
        ::std::mem::replace(&mut self.applist_custom, ::std::vec::Vec::new())
    }

    // optional uint32 passwordhashtype = 6;

    pub fn passwordhashtype(&self) -> u32 {
        self.passwordhashtype.unwrap_or(0)
    }

    pub fn clear_passwordhashtype(&mut self) {
        self.passwordhashtype = ::std::option::Option::None;
    }

    pub fn has_passwordhashtype(&self) -> bool {
        self.passwordhashtype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passwordhashtype(&mut self, v: u32) {
        self.passwordhashtype = ::std::option::Option::Some(v);
    }

    // optional bytes salt = 7;

    pub fn salt(&self) -> &[u8] {
        match self.salt.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_salt(&mut self) {
        self.salt = ::std::option::Option::None;
    }

    pub fn has_salt(&self) -> bool {
        self.salt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::bytes::Bytes) {
        self.salt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::bytes::Bytes {
        if self.salt.is_none() {
            self.salt = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.salt.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt(&mut self) -> ::bytes::Bytes {
        self.salt.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bytes passwordhash = 8;

    pub fn passwordhash(&self) -> &[u8] {
        match self.passwordhash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_passwordhash(&mut self) {
        self.passwordhash = ::std::option::Option::None;
    }

    pub fn has_passwordhash(&self) -> bool {
        self.passwordhash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passwordhash(&mut self, v: ::bytes::Bytes) {
        self.passwordhash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_passwordhash(&mut self) -> &mut ::bytes::Bytes {
        if self.passwordhash.is_none() {
            self.passwordhash = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.passwordhash.as_mut().unwrap()
    }

    // Take field
    pub fn take_passwordhash(&mut self) -> ::bytes::Bytes {
        self.passwordhash.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bool is_enabled = 9;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 enabled_features = 10;

    pub fn enabled_features(&self) -> u32 {
        self.enabled_features.unwrap_or(0)
    }

    pub fn clear_enabled_features(&mut self) {
        self.enabled_features = ::std::option::Option::None;
    }

    pub fn has_enabled_features(&self) -> bool {
        self.enabled_features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled_features(&mut self, v: u32) {
        self.enabled_features = ::std::option::Option::Some(v);
    }

    // optional string recovery_email = 11;

    pub fn recovery_email(&self) -> &str {
        match self.recovery_email.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recovery_email(&mut self) {
        self.recovery_email = ::std::option::Option::None;
    }

    pub fn has_recovery_email(&self) -> bool {
        self.recovery_email.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_email(&mut self, v: ::std::string::String) {
        self.recovery_email = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_email(&mut self) -> &mut ::std::string::String {
        if self.recovery_email.is_none() {
            self.recovery_email = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recovery_email.as_mut().unwrap()
    }

    // Take field
    pub fn take_recovery_email(&mut self) -> ::std::string::String {
        self.recovery_email.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_site_license_lock = 12;

    pub fn is_site_license_lock(&self) -> bool {
        self.is_site_license_lock.unwrap_or(false)
    }

    pub fn clear_is_site_license_lock(&mut self) {
        self.is_site_license_lock = ::std::option::Option::None;
    }

    pub fn has_is_site_license_lock(&self) -> bool {
        self.is_site_license_lock.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_site_license_lock(&mut self, v: bool) {
        self.is_site_license_lock = ::std::option::Option::Some(v);
    }

    // optional uint32 temporary_enabled_features = 13;

    pub fn temporary_enabled_features(&self) -> u32 {
        self.temporary_enabled_features.unwrap_or(0)
    }

    pub fn clear_temporary_enabled_features(&mut self) {
        self.temporary_enabled_features = ::std::option::Option::None;
    }

    pub fn has_temporary_enabled_features(&self) -> bool {
        self.temporary_enabled_features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_temporary_enabled_features(&mut self, v: u32) {
        self.temporary_enabled_features = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_temporary_feature_expiration = 14;

    pub fn rtime_temporary_feature_expiration(&self) -> u32 {
        self.rtime_temporary_feature_expiration.unwrap_or(0)
    }

    pub fn clear_rtime_temporary_feature_expiration(&mut self) {
        self.rtime_temporary_feature_expiration = ::std::option::Option::None;
    }

    pub fn has_rtime_temporary_feature_expiration(&self) -> bool {
        self.rtime_temporary_feature_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_temporary_feature_expiration(&mut self, v: u32) {
        self.rtime_temporary_feature_expiration = ::std::option::Option::Some(v);
    }

    // optional .ParentalPlaytimeRestrictions playtime_restrictions = 15;

    pub fn playtime_restrictions(&self) -> &ParentalPlaytimeRestrictions {
        self.playtime_restrictions.as_ref().unwrap_or_else(|| <ParentalPlaytimeRestrictions as crate::Message>::default_instance())
    }

    pub fn clear_playtime_restrictions(&mut self) {
        self.playtime_restrictions.clear();
    }

    pub fn has_playtime_restrictions(&self) -> bool {
        self.playtime_restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playtime_restrictions(&mut self, v: ParentalPlaytimeRestrictions) {
        self.playtime_restrictions = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_playtime_restrictions(&mut self) -> &mut ParentalPlaytimeRestrictions {
        self.playtime_restrictions.mut_or_insert_default()
    }

    // Take field
    pub fn take_playtime_restrictions(&mut self) -> ParentalPlaytimeRestrictions {
        self.playtime_restrictions.take().unwrap_or_else(|| ParentalPlaytimeRestrictions::new())
    }

    // optional .ParentalTemporaryPlaytimeRestrictions temporary_playtime_restrictions = 16;

    pub fn temporary_playtime_restrictions(&self) -> &ParentalTemporaryPlaytimeRestrictions {
        self.temporary_playtime_restrictions.as_ref().unwrap_or_else(|| <ParentalTemporaryPlaytimeRestrictions as crate::Message>::default_instance())
    }

    pub fn clear_temporary_playtime_restrictions(&mut self) {
        self.temporary_playtime_restrictions.clear();
    }

    pub fn has_temporary_playtime_restrictions(&self) -> bool {
        self.temporary_playtime_restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_temporary_playtime_restrictions(&mut self, v: ParentalTemporaryPlaytimeRestrictions) {
        self.temporary_playtime_restrictions = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_temporary_playtime_restrictions(&mut self) -> &mut ParentalTemporaryPlaytimeRestrictions {
        self.temporary_playtime_restrictions.mut_or_insert_default()
    }

    // Take field
    pub fn take_temporary_playtime_restrictions(&mut self) -> ParentalTemporaryPlaytimeRestrictions {
        self.temporary_playtime_restrictions.take().unwrap_or_else(|| ParentalTemporaryPlaytimeRestrictions::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &ParentalSettings| { &m.steamid },
            |m: &mut ParentalSettings| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "applist_base_id",
            |m: &ParentalSettings| { &m.applist_base_id },
            |m: &mut ParentalSettings| { &mut m.applist_base_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "applist_base_description",
            |m: &ParentalSettings| { &m.applist_base_description },
            |m: &mut ParentalSettings| { &mut m.applist_base_description },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "applist_base",
            |m: &ParentalSettings| { &m.applist_base },
            |m: &mut ParentalSettings| { &mut m.applist_base },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "applist_custom",
            |m: &ParentalSettings| { &m.applist_custom },
            |m: &mut ParentalSettings| { &mut m.applist_custom },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "passwordhashtype",
            |m: &ParentalSettings| { &m.passwordhashtype },
            |m: &mut ParentalSettings| { &mut m.passwordhashtype },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "salt",
            |m: &ParentalSettings| { &m.salt },
            |m: &mut ParentalSettings| { &mut m.salt },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "passwordhash",
            |m: &ParentalSettings| { &m.passwordhash },
            |m: &mut ParentalSettings| { &mut m.passwordhash },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_enabled",
            |m: &ParentalSettings| { &m.is_enabled },
            |m: &mut ParentalSettings| { &mut m.is_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "enabled_features",
            |m: &ParentalSettings| { &m.enabled_features },
            |m: &mut ParentalSettings| { &mut m.enabled_features },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "recovery_email",
            |m: &ParentalSettings| { &m.recovery_email },
            |m: &mut ParentalSettings| { &mut m.recovery_email },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_site_license_lock",
            |m: &ParentalSettings| { &m.is_site_license_lock },
            |m: &mut ParentalSettings| { &mut m.is_site_license_lock },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "temporary_enabled_features",
            |m: &ParentalSettings| { &m.temporary_enabled_features },
            |m: &mut ParentalSettings| { &mut m.temporary_enabled_features },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rtime_temporary_feature_expiration",
            |m: &ParentalSettings| { &m.rtime_temporary_feature_expiration },
            |m: &mut ParentalSettings| { &mut m.rtime_temporary_feature_expiration },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalPlaytimeRestrictions>(
            "playtime_restrictions",
            |m: &ParentalSettings| { &m.playtime_restrictions },
            |m: &mut ParentalSettings| { &mut m.playtime_restrictions },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalTemporaryPlaytimeRestrictions>(
            "temporary_playtime_restrictions",
            |m: &ParentalSettings| { &m.temporary_playtime_restrictions },
            |m: &mut ParentalSettings| { &mut m.temporary_playtime_restrictions },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalSettings>(
            "ParentalSettings",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalSettings {
    const NAME: &'static str = "ParentalSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.applist_base_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.applist_base_description = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.applist_base.push(is.read_message()?);
                },
                42 => {
                    self.applist_custom.push(is.read_message()?);
                },
                48 => {
                    self.passwordhashtype = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.salt = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                66 => {
                    self.passwordhash = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                72 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.enabled_features = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    self.recovery_email = ::std::option::Option::Some(is.read_string()?);
                },
                96 => {
                    self.is_site_license_lock = ::std::option::Option::Some(is.read_bool()?);
                },
                104 => {
                    self.temporary_enabled_features = ::std::option::Option::Some(is.read_uint32()?);
                },
                112 => {
                    self.rtime_temporary_feature_expiration = ::std::option::Option::Some(is.read_uint32()?);
                },
                122 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.playtime_restrictions)?;
                },
                130 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.temporary_playtime_restrictions)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.applist_base_id {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.applist_base_description.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        for value in &self.applist_base {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.applist_custom {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.passwordhashtype {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.salt.as_ref() {
            my_size += crate::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.passwordhash.as_ref() {
            my_size += crate::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.enabled_features {
            my_size += crate::rt::uint32_size(10, v);
        }
        if let Some(v) = self.recovery_email.as_ref() {
            my_size += crate::rt::string_size(11, &v);
        }
        if let Some(v) = self.is_site_license_lock {
            my_size += 1 + 1;
        }
        if let Some(v) = self.temporary_enabled_features {
            my_size += crate::rt::uint32_size(13, v);
        }
        if let Some(v) = self.rtime_temporary_feature_expiration {
            my_size += crate::rt::uint32_size(14, v);
        }
        if let Some(v) = self.playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.temporary_playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 2 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.applist_base_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.applist_base_description.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.applist_base {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.applist_custom {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.passwordhashtype {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.salt.as_ref() {
            os.write_bytes(7, v)?;
        }
        if let Some(v) = self.passwordhash.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.enabled_features {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.recovery_email.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.is_site_license_lock {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.temporary_enabled_features {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.rtime_temporary_feature_expiration {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.playtime_restrictions.as_ref() {
            crate::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.temporary_playtime_restrictions.as_ref() {
            crate::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalSettings {
        ParentalSettings::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.applist_base_id = ::std::option::Option::None;
        self.applist_base_description = ::std::option::Option::None;
        self.applist_base.clear();
        self.applist_custom.clear();
        self.passwordhashtype = ::std::option::Option::None;
        self.salt = ::std::option::Option::None;
        self.passwordhash = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.enabled_features = ::std::option::Option::None;
        self.recovery_email = ::std::option::Option::None;
        self.is_site_license_lock = ::std::option::Option::None;
        self.temporary_enabled_features = ::std::option::Option::None;
        self.rtime_temporary_feature_expiration = ::std::option::Option::None;
        self.playtime_restrictions.clear();
        self.temporary_playtime_restrictions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalSettings {
        static instance: ParentalSettings = ParentalSettings {
            steamid: ::std::option::Option::None,
            applist_base_id: ::std::option::Option::None,
            applist_base_description: ::std::option::Option::None,
            applist_base: ::std::vec::Vec::new(),
            applist_custom: ::std::vec::Vec::new(),
            passwordhashtype: ::std::option::Option::None,
            salt: ::std::option::Option::None,
            passwordhash: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            enabled_features: ::std::option::Option::None,
            recovery_email: ::std::option::Option::None,
            is_site_license_lock: ::std::option::Option::None,
            temporary_enabled_features: ::std::option::Option::None,
            rtime_temporary_feature_expiration: ::std::option::Option::None,
            playtime_restrictions: crate::MessageField::none(),
            temporary_playtime_restrictions: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalSettings {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalSettings {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_EnableParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_EnableParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.settings)
    pub settings: crate::MessageField<ParentalSettings>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.enablecode)
    pub enablecode: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_EnableParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_EnableParentalSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_EnableParentalSettings_Request {
    fn default() -> &'a CParental_EnableParentalSettings_Request {
        <CParental_EnableParentalSettings_Request as crate::Message>::default_instance()
    }
}

impl CParental_EnableParentalSettings_Request {
    pub fn new() -> CParental_EnableParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .ParentalSettings settings = 2;

    pub fn settings(&self) -> &ParentalSettings {
        self.settings.as_ref().unwrap_or_else(|| <ParentalSettings as crate::Message>::default_instance())
    }

    pub fn clear_settings(&mut self) {
        self.settings.clear();
    }

    pub fn has_settings(&self) -> bool {
        self.settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: ParentalSettings) {
        self.settings = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_settings(&mut self) -> &mut ParentalSettings {
        self.settings.mut_or_insert_default()
    }

    // Take field
    pub fn take_settings(&mut self) -> ParentalSettings {
        self.settings.take().unwrap_or_else(|| ParentalSettings::new())
    }

    // optional string sessionid = 3;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 enablecode = 4;

    pub fn enablecode(&self) -> u32 {
        self.enablecode.unwrap_or(0)
    }

    pub fn clear_enablecode(&mut self) {
        self.enablecode = ::std::option::Option::None;
    }

    pub fn has_enablecode(&self) -> bool {
        self.enablecode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enablecode(&mut self, v: u32) {
        self.enablecode = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_EnableParentalSettings_Request| { &m.password },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalSettings>(
            "settings",
            |m: &CParental_EnableParentalSettings_Request| { &m.settings },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.settings },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_EnableParentalSettings_Request| { &m.sessionid },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.sessionid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "enablecode",
            |m: &CParental_EnableParentalSettings_Request| { &m.enablecode },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.enablecode },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_EnableParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_EnableParentalSettings_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_EnableParentalSettings_Request>(
            "CParental_EnableParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_EnableParentalSettings_Request {
    const NAME: &'static str = "CParental_EnableParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                26 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.enablecode = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.enablecode {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.settings.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.enablecode {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_EnableParentalSettings_Request {
        CParental_EnableParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.settings.clear();
        self.sessionid = ::std::option::Option::None;
        self.enablecode = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_EnableParentalSettings_Request {
        static instance: CParental_EnableParentalSettings_Request = CParental_EnableParentalSettings_Request {
            password: ::std::option::Option::None,
            settings: crate::MessageField::none(),
            sessionid: ::std::option::Option::None,
            enablecode: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_EnableParentalSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_EnableParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_EnableParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_EnableParentalSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_EnableParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_EnableParentalSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_EnableParentalSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_EnableParentalSettings_Response {
    fn default() -> &'a CParental_EnableParentalSettings_Response {
        <CParental_EnableParentalSettings_Response as crate::Message>::default_instance()
    }
}

impl CParental_EnableParentalSettings_Response {
    pub fn new() -> CParental_EnableParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_EnableParentalSettings_Response>(
            "CParental_EnableParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_EnableParentalSettings_Response {
    const NAME: &'static str = "CParental_EnableParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_EnableParentalSettings_Response {
        CParental_EnableParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_EnableParentalSettings_Response {
        static instance: CParental_EnableParentalSettings_Response = CParental_EnableParentalSettings_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_EnableParentalSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_EnableParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_EnableParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_EnableParentalSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_DisableParentalSettings_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_DisableParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableParentalSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableParentalSettings_Request {
    fn default() -> &'a CParental_DisableParentalSettings_Request {
        <CParental_DisableParentalSettings_Request as crate::Message>::default_instance()
    }
}

impl CParental_DisableParentalSettings_Request {
    pub fn new() -> CParental_DisableParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_DisableParentalSettings_Request| { &m.password },
            |m: &mut CParental_DisableParentalSettings_Request| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_DisableParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_DisableParentalSettings_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableParentalSettings_Request>(
            "CParental_DisableParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_DisableParentalSettings_Request {
    const NAME: &'static str = "CParental_DisableParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableParentalSettings_Request {
        CParental_DisableParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableParentalSettings_Request {
        static instance: CParental_DisableParentalSettings_Request = CParental_DisableParentalSettings_Request {
            password: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_DisableParentalSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_DisableParentalSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableParentalSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableParentalSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableParentalSettings_Response {
    fn default() -> &'a CParental_DisableParentalSettings_Response {
        <CParental_DisableParentalSettings_Response as crate::Message>::default_instance()
    }
}

impl CParental_DisableParentalSettings_Response {
    pub fn new() -> CParental_DisableParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableParentalSettings_Response>(
            "CParental_DisableParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_DisableParentalSettings_Response {
    const NAME: &'static str = "CParental_DisableParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableParentalSettings_Response {
        CParental_DisableParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableParentalSettings_Response {
        static instance: CParental_DisableParentalSettings_Response = CParental_DisableParentalSettings_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_DisableParentalSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_DisableParentalSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetParentalSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetParentalSettings_Request {
    fn default() -> &'a CParental_GetParentalSettings_Request {
        <CParental_GetParentalSettings_Request as crate::Message>::default_instance()
    }
}

impl CParental_GetParentalSettings_Request {
    pub fn new() -> CParental_GetParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_GetParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_GetParentalSettings_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetParentalSettings_Request>(
            "CParental_GetParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_GetParentalSettings_Request {
    const NAME: &'static str = "CParental_GetParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetParentalSettings_Request {
        CParental_GetParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetParentalSettings_Request {
        static instance: CParental_GetParentalSettings_Request = CParental_GetParentalSettings_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_GetParentalSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_GetParentalSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetParentalSettings_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetParentalSettings_Response.settings)
    pub settings: crate::MessageField<ParentalSettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetParentalSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetParentalSettings_Response {
    fn default() -> &'a CParental_GetParentalSettings_Response {
        <CParental_GetParentalSettings_Response as crate::Message>::default_instance()
    }
}

impl CParental_GetParentalSettings_Response {
    pub fn new() -> CParental_GetParentalSettings_Response {
        ::std::default::Default::default()
    }

    // optional .ParentalSettings settings = 1;

    pub fn settings(&self) -> &ParentalSettings {
        self.settings.as_ref().unwrap_or_else(|| <ParentalSettings as crate::Message>::default_instance())
    }

    pub fn clear_settings(&mut self) {
        self.settings.clear();
    }

    pub fn has_settings(&self) -> bool {
        self.settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: ParentalSettings) {
        self.settings = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_settings(&mut self) -> &mut ParentalSettings {
        self.settings.mut_or_insert_default()
    }

    // Take field
    pub fn take_settings(&mut self) -> ParentalSettings {
        self.settings.take().unwrap_or_else(|| ParentalSettings::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalSettings>(
            "settings",
            |m: &CParental_GetParentalSettings_Response| { &m.settings },
            |m: &mut CParental_GetParentalSettings_Response| { &mut m.settings },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetParentalSettings_Response>(
            "CParental_GetParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_GetParentalSettings_Response {
    const NAME: &'static str = "CParental_GetParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.settings.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetParentalSettings_Response {
        CParental_GetParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetParentalSettings_Response {
        static instance: CParental_GetParentalSettings_Response = CParental_GetParentalSettings_Response {
            settings: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_GetParentalSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_GetParentalSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetSignedParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetSignedParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetSignedParentalSettings_Request.priority)
    pub priority: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetSignedParentalSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetSignedParentalSettings_Request {
    fn default() -> &'a CParental_GetSignedParentalSettings_Request {
        <CParental_GetSignedParentalSettings_Request as crate::Message>::default_instance()
    }
}

impl CParental_GetSignedParentalSettings_Request {
    pub fn new() -> CParental_GetSignedParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional uint32 priority = 1;

    pub fn priority(&self) -> u32 {
        self.priority.unwrap_or(0)
    }

    pub fn clear_priority(&mut self) {
        self.priority = ::std::option::Option::None;
    }

    pub fn has_priority(&self) -> bool {
        self.priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "priority",
            |m: &CParental_GetSignedParentalSettings_Request| { &m.priority },
            |m: &mut CParental_GetSignedParentalSettings_Request| { &mut m.priority },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetSignedParentalSettings_Request>(
            "CParental_GetSignedParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_GetSignedParentalSettings_Request {
    const NAME: &'static str = "CParental_GetSignedParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.priority = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.priority {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.priority {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetSignedParentalSettings_Request {
        CParental_GetSignedParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.priority = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetSignedParentalSettings_Request {
        static instance: CParental_GetSignedParentalSettings_Request = CParental_GetSignedParentalSettings_Request {
            priority: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_GetSignedParentalSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetSignedParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetSignedParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_GetSignedParentalSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetSignedParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetSignedParentalSettings_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetSignedParentalSettings_Response.serialized_settings)
    pub serialized_settings: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CParental_GetSignedParentalSettings_Response.signature)
    pub signature: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetSignedParentalSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetSignedParentalSettings_Response {
    fn default() -> &'a CParental_GetSignedParentalSettings_Response {
        <CParental_GetSignedParentalSettings_Response as crate::Message>::default_instance()
    }
}

impl CParental_GetSignedParentalSettings_Response {
    pub fn new() -> CParental_GetSignedParentalSettings_Response {
        ::std::default::Default::default()
    }

    // optional bytes serialized_settings = 1;

    pub fn serialized_settings(&self) -> &[u8] {
        match self.serialized_settings.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_serialized_settings(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
    }

    pub fn has_serialized_settings(&self) -> bool {
        self.serialized_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_settings(&mut self, v: ::bytes::Bytes) {
        self.serialized_settings = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_settings(&mut self) -> &mut ::bytes::Bytes {
        if self.serialized_settings.is_none() {
            self.serialized_settings = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.serialized_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_settings(&mut self) -> ::bytes::Bytes {
        self.serialized_settings.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::bytes::Bytes) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::bytes::Bytes {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::bytes::Bytes {
        self.signature.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serialized_settings",
            |m: &CParental_GetSignedParentalSettings_Response| { &m.serialized_settings },
            |m: &mut CParental_GetSignedParentalSettings_Response| { &mut m.serialized_settings },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CParental_GetSignedParentalSettings_Response| { &m.signature },
            |m: &mut CParental_GetSignedParentalSettings_Response| { &mut m.signature },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetSignedParentalSettings_Response>(
            "CParental_GetSignedParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_GetSignedParentalSettings_Response {
    const NAME: &'static str = "CParental_GetSignedParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serialized_settings = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serialized_settings.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serialized_settings.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetSignedParentalSettings_Response {
        CParental_GetSignedParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetSignedParentalSettings_Response {
        static instance: CParental_GetSignedParentalSettings_Response = CParental_GetSignedParentalSettings_Response {
            serialized_settings: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_GetSignedParentalSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetSignedParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetSignedParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_GetSignedParentalSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_SetParentalSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_SetParentalSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.settings)
    pub settings: crate::MessageField<ParentalSettings>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.new_password)
    pub new_password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_SetParentalSettings_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_SetParentalSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_SetParentalSettings_Request {
    fn default() -> &'a CParental_SetParentalSettings_Request {
        <CParental_SetParentalSettings_Request as crate::Message>::default_instance()
    }
}

impl CParental_SetParentalSettings_Request {
    pub fn new() -> CParental_SetParentalSettings_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .ParentalSettings settings = 2;

    pub fn settings(&self) -> &ParentalSettings {
        self.settings.as_ref().unwrap_or_else(|| <ParentalSettings as crate::Message>::default_instance())
    }

    pub fn clear_settings(&mut self) {
        self.settings.clear();
    }

    pub fn has_settings(&self) -> bool {
        self.settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: ParentalSettings) {
        self.settings = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_settings(&mut self) -> &mut ParentalSettings {
        self.settings.mut_or_insert_default()
    }

    // Take field
    pub fn take_settings(&mut self) -> ParentalSettings {
        self.settings.take().unwrap_or_else(|| ParentalSettings::new())
    }

    // optional string new_password = 3;

    pub fn new_password(&self) -> &str {
        match self.new_password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_new_password(&mut self) {
        self.new_password = ::std::option::Option::None;
    }

    pub fn has_new_password(&self) -> bool {
        self.new_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_password(&mut self, v: ::std::string::String) {
        self.new_password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_password(&mut self) -> &mut ::std::string::String {
        if self.new_password.is_none() {
            self.new_password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.new_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_password(&mut self) -> ::std::string::String {
        self.new_password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 4;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_SetParentalSettings_Request| { &m.password },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalSettings>(
            "settings",
            |m: &CParental_SetParentalSettings_Request| { &m.settings },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.settings },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_password",
            |m: &CParental_SetParentalSettings_Request| { &m.new_password },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.new_password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_SetParentalSettings_Request| { &m.sessionid },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.sessionid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_SetParentalSettings_Request| { &m.steamid },
            |m: &mut CParental_SetParentalSettings_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_SetParentalSettings_Request>(
            "CParental_SetParentalSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_SetParentalSettings_Request {
    const NAME: &'static str = "CParental_SetParentalSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.settings)?;
                },
                26 => {
                    self.new_password = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.new_password.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.settings.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.new_password.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_SetParentalSettings_Request {
        CParental_SetParentalSettings_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.settings.clear();
        self.new_password = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_SetParentalSettings_Request {
        static instance: CParental_SetParentalSettings_Request = CParental_SetParentalSettings_Request {
            password: ::std::option::Option::None,
            settings: crate::MessageField::none(),
            new_password: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_SetParentalSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_SetParentalSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_SetParentalSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_SetParentalSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_SetParentalSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_SetParentalSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_SetParentalSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_SetParentalSettings_Response {
    fn default() -> &'a CParental_SetParentalSettings_Response {
        <CParental_SetParentalSettings_Response as crate::Message>::default_instance()
    }
}

impl CParental_SetParentalSettings_Response {
    pub fn new() -> CParental_SetParentalSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_SetParentalSettings_Response>(
            "CParental_SetParentalSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_SetParentalSettings_Response {
    const NAME: &'static str = "CParental_SetParentalSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_SetParentalSettings_Response {
        CParental_SetParentalSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_SetParentalSettings_Response {
        static instance: CParental_SetParentalSettings_Response = CParental_SetParentalSettings_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_SetParentalSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_SetParentalSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_SetParentalSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_SetParentalSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidateToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidateToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ValidateToken_Request.unlock_token)
    pub unlock_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidateToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidateToken_Request {
    fn default() -> &'a CParental_ValidateToken_Request {
        <CParental_ValidateToken_Request as crate::Message>::default_instance()
    }
}

impl CParental_ValidateToken_Request {
    pub fn new() -> CParental_ValidateToken_Request {
        ::std::default::Default::default()
    }

    // optional string unlock_token = 1;

    pub fn unlock_token(&self) -> &str {
        match self.unlock_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_unlock_token(&mut self) {
        self.unlock_token = ::std::option::Option::None;
    }

    pub fn has_unlock_token(&self) -> bool {
        self.unlock_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unlock_token(&mut self, v: ::std::string::String) {
        self.unlock_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unlock_token(&mut self) -> &mut ::std::string::String {
        if self.unlock_token.is_none() {
            self.unlock_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.unlock_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_unlock_token(&mut self) -> ::std::string::String {
        self.unlock_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "unlock_token",
            |m: &CParental_ValidateToken_Request| { &m.unlock_token },
            |m: &mut CParental_ValidateToken_Request| { &mut m.unlock_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidateToken_Request>(
            "CParental_ValidateToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ValidateToken_Request {
    const NAME: &'static str = "CParental_ValidateToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.unlock_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.unlock_token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.unlock_token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidateToken_Request {
        CParental_ValidateToken_Request::new()
    }

    fn clear(&mut self) {
        self.unlock_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidateToken_Request {
        static instance: CParental_ValidateToken_Request = CParental_ValidateToken_Request {
            unlock_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ValidateToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidateToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidateToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ValidateToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidateToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidateToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidateToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidateToken_Response {
    fn default() -> &'a CParental_ValidateToken_Response {
        <CParental_ValidateToken_Response as crate::Message>::default_instance()
    }
}

impl CParental_ValidateToken_Response {
    pub fn new() -> CParental_ValidateToken_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidateToken_Response>(
            "CParental_ValidateToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ValidateToken_Response {
    const NAME: &'static str = "CParental_ValidateToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidateToken_Response {
        CParental_ValidateToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidateToken_Response {
        static instance: CParental_ValidateToken_Response = CParental_ValidateToken_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ValidateToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidateToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidateToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ValidateToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidatePassword_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidatePassword_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Request.session)
    pub session: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Request.send_unlock_on_success)
    pub send_unlock_on_success: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidatePassword_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidatePassword_Request {
    fn default() -> &'a CParental_ValidatePassword_Request {
        <CParental_ValidatePassword_Request as crate::Message>::default_instance()
    }
}

impl CParental_ValidatePassword_Request {
    pub fn new() -> CParental_ValidatePassword_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string session = 2;

    pub fn session(&self) -> &str {
        match self.session.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_session(&mut self) {
        self.session = ::std::option::Option::None;
    }

    pub fn has_session(&self) -> bool {
        self.session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        if self.session.is_none() {
            self.session = ::std::option::Option::Some(::std::string::String::new());
        }
        self.session.as_mut().unwrap()
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        self.session.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool send_unlock_on_success = 3;

    pub fn send_unlock_on_success(&self) -> bool {
        self.send_unlock_on_success.unwrap_or(false)
    }

    pub fn clear_send_unlock_on_success(&mut self) {
        self.send_unlock_on_success = ::std::option::Option::None;
    }

    pub fn has_send_unlock_on_success(&self) -> bool {
        self.send_unlock_on_success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_unlock_on_success(&mut self, v: bool) {
        self.send_unlock_on_success = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_ValidatePassword_Request| { &m.password },
            |m: &mut CParental_ValidatePassword_Request| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session",
            |m: &CParental_ValidatePassword_Request| { &m.session },
            |m: &mut CParental_ValidatePassword_Request| { &mut m.session },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_unlock_on_success",
            |m: &CParental_ValidatePassword_Request| { &m.send_unlock_on_success },
            |m: &mut CParental_ValidatePassword_Request| { &mut m.send_unlock_on_success },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidatePassword_Request>(
            "CParental_ValidatePassword_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ValidatePassword_Request {
    const NAME: &'static str = "CParental_ValidatePassword_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.session = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.send_unlock_on_success = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.session.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.send_unlock_on_success {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.session.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.send_unlock_on_success {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidatePassword_Request {
        CParental_ValidatePassword_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.session = ::std::option::Option::None;
        self.send_unlock_on_success = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidatePassword_Request {
        static instance: CParental_ValidatePassword_Request = CParental_ValidatePassword_Request {
            password: ::std::option::Option::None,
            session: ::std::option::Option::None,
            send_unlock_on_success: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ValidatePassword_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidatePassword_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidatePassword_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ValidatePassword_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ValidatePassword_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ValidatePassword_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_ValidatePassword_Response.token)
    pub token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ValidatePassword_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ValidatePassword_Response {
    fn default() -> &'a CParental_ValidatePassword_Response {
        <CParental_ValidatePassword_Response as crate::Message>::default_instance()
    }
}

impl CParental_ValidatePassword_Response {
    pub fn new() -> CParental_ValidatePassword_Response {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CParental_ValidatePassword_Response| { &m.token },
            |m: &mut CParental_ValidatePassword_Response| { &mut m.token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ValidatePassword_Response>(
            "CParental_ValidatePassword_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ValidatePassword_Response {
    const NAME: &'static str = "CParental_ValidatePassword_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ValidatePassword_Response {
        CParental_ValidatePassword_Response::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ValidatePassword_Response {
        static instance: CParental_ValidatePassword_Response = CParental_ValidatePassword_Response {
            token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ValidatePassword_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ValidatePassword_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ValidatePassword_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ValidatePassword_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_LockClient_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_LockClient_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_LockClient_Request.session)
    pub session: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_LockClient_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_LockClient_Request {
    fn default() -> &'a CParental_LockClient_Request {
        <CParental_LockClient_Request as crate::Message>::default_instance()
    }
}

impl CParental_LockClient_Request {
    pub fn new() -> CParental_LockClient_Request {
        ::std::default::Default::default()
    }

    // optional string session = 1;

    pub fn session(&self) -> &str {
        match self.session.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_session(&mut self) {
        self.session = ::std::option::Option::None;
    }

    pub fn has_session(&self) -> bool {
        self.session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        if self.session.is_none() {
            self.session = ::std::option::Option::Some(::std::string::String::new());
        }
        self.session.as_mut().unwrap()
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        self.session.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session",
            |m: &CParental_LockClient_Request| { &m.session },
            |m: &mut CParental_LockClient_Request| { &mut m.session },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_LockClient_Request>(
            "CParental_LockClient_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_LockClient_Request {
    const NAME: &'static str = "CParental_LockClient_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.session = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_LockClient_Request {
        CParental_LockClient_Request::new()
    }

    fn clear(&mut self) {
        self.session = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_LockClient_Request {
        static instance: CParental_LockClient_Request = CParental_LockClient_Request {
            session: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_LockClient_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_LockClient_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_LockClient_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_LockClient_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_LockClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_LockClient_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_LockClient_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_LockClient_Response {
    fn default() -> &'a CParental_LockClient_Response {
        <CParental_LockClient_Response as crate::Message>::default_instance()
    }
}

impl CParental_LockClient_Response {
    pub fn new() -> CParental_LockClient_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_LockClient_Response>(
            "CParental_LockClient_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_LockClient_Response {
    const NAME: &'static str = "CParental_LockClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_LockClient_Response {
        CParental_LockClient_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_LockClient_Response {
        static instance: CParental_LockClient_Response = CParental_LockClient_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_LockClient_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_LockClient_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_LockClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_LockClient_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestRecoveryCode_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestRecoveryCode_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestRecoveryCode_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestRecoveryCode_Request {
    fn default() -> &'a CParental_RequestRecoveryCode_Request {
        <CParental_RequestRecoveryCode_Request as crate::Message>::default_instance()
    }
}

impl CParental_RequestRecoveryCode_Request {
    pub fn new() -> CParental_RequestRecoveryCode_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestRecoveryCode_Request>(
            "CParental_RequestRecoveryCode_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_RequestRecoveryCode_Request {
    const NAME: &'static str = "CParental_RequestRecoveryCode_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestRecoveryCode_Request {
        CParental_RequestRecoveryCode_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestRecoveryCode_Request {
        static instance: CParental_RequestRecoveryCode_Request = CParental_RequestRecoveryCode_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_RequestRecoveryCode_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestRecoveryCode_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestRecoveryCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_RequestRecoveryCode_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestRecoveryCode_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestRecoveryCode_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestRecoveryCode_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestRecoveryCode_Response {
    fn default() -> &'a CParental_RequestRecoveryCode_Response {
        <CParental_RequestRecoveryCode_Response as crate::Message>::default_instance()
    }
}

impl CParental_RequestRecoveryCode_Response {
    pub fn new() -> CParental_RequestRecoveryCode_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestRecoveryCode_Response>(
            "CParental_RequestRecoveryCode_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_RequestRecoveryCode_Response {
    const NAME: &'static str = "CParental_RequestRecoveryCode_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestRecoveryCode_Response {
        CParental_RequestRecoveryCode_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestRecoveryCode_Response {
        static instance: CParental_RequestRecoveryCode_Response = CParental_RequestRecoveryCode_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_RequestRecoveryCode_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestRecoveryCode_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestRecoveryCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_RequestRecoveryCode_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableWithRecoveryCode_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableWithRecoveryCode_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_DisableWithRecoveryCode_Request.recovery_code)
    pub recovery_code: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_DisableWithRecoveryCode_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableWithRecoveryCode_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableWithRecoveryCode_Request {
    fn default() -> &'a CParental_DisableWithRecoveryCode_Request {
        <CParental_DisableWithRecoveryCode_Request as crate::Message>::default_instance()
    }
}

impl CParental_DisableWithRecoveryCode_Request {
    pub fn new() -> CParental_DisableWithRecoveryCode_Request {
        ::std::default::Default::default()
    }

    // optional uint32 recovery_code = 1;

    pub fn recovery_code(&self) -> u32 {
        self.recovery_code.unwrap_or(0)
    }

    pub fn clear_recovery_code(&mut self) {
        self.recovery_code = ::std::option::Option::None;
    }

    pub fn has_recovery_code(&self) -> bool {
        self.recovery_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_code(&mut self, v: u32) {
        self.recovery_code = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "recovery_code",
            |m: &CParental_DisableWithRecoveryCode_Request| { &m.recovery_code },
            |m: &mut CParental_DisableWithRecoveryCode_Request| { &mut m.recovery_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_DisableWithRecoveryCode_Request| { &m.steamid },
            |m: &mut CParental_DisableWithRecoveryCode_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableWithRecoveryCode_Request>(
            "CParental_DisableWithRecoveryCode_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_DisableWithRecoveryCode_Request {
    const NAME: &'static str = "CParental_DisableWithRecoveryCode_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recovery_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recovery_code {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.recovery_code {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableWithRecoveryCode_Request {
        CParental_DisableWithRecoveryCode_Request::new()
    }

    fn clear(&mut self) {
        self.recovery_code = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableWithRecoveryCode_Request {
        static instance: CParental_DisableWithRecoveryCode_Request = CParental_DisableWithRecoveryCode_Request {
            recovery_code: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_DisableWithRecoveryCode_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableWithRecoveryCode_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableWithRecoveryCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_DisableWithRecoveryCode_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_DisableWithRecoveryCode_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_DisableWithRecoveryCode_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_DisableWithRecoveryCode_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_DisableWithRecoveryCode_Response {
    fn default() -> &'a CParental_DisableWithRecoveryCode_Response {
        <CParental_DisableWithRecoveryCode_Response as crate::Message>::default_instance()
    }
}

impl CParental_DisableWithRecoveryCode_Response {
    pub fn new() -> CParental_DisableWithRecoveryCode_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_DisableWithRecoveryCode_Response>(
            "CParental_DisableWithRecoveryCode_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_DisableWithRecoveryCode_Response {
    const NAME: &'static str = "CParental_DisableWithRecoveryCode_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_DisableWithRecoveryCode_Response {
        CParental_DisableWithRecoveryCode_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_DisableWithRecoveryCode_Response {
        static instance: CParental_DisableWithRecoveryCode_Response = CParental_DisableWithRecoveryCode_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_DisableWithRecoveryCode_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_DisableWithRecoveryCode_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_DisableWithRecoveryCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_DisableWithRecoveryCode_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestFeatureAccess_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestFeatureAccess_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_RequestFeatureAccess_Request.features)
    pub features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_RequestFeatureAccess_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestFeatureAccess_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestFeatureAccess_Request {
    fn default() -> &'a CParental_RequestFeatureAccess_Request {
        <CParental_RequestFeatureAccess_Request as crate::Message>::default_instance()
    }
}

impl CParental_RequestFeatureAccess_Request {
    pub fn new() -> CParental_RequestFeatureAccess_Request {
        ::std::default::Default::default()
    }

    // optional uint32 features = 1;

    pub fn features(&self) -> u32 {
        self.features.unwrap_or(0)
    }

    pub fn clear_features(&mut self) {
        self.features = ::std::option::Option::None;
    }

    pub fn has_features(&self) -> bool {
        self.features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: u32) {
        self.features = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "features",
            |m: &CParental_RequestFeatureAccess_Request| { &m.features },
            |m: &mut CParental_RequestFeatureAccess_Request| { &mut m.features },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_RequestFeatureAccess_Request| { &m.steamid },
            |m: &mut CParental_RequestFeatureAccess_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestFeatureAccess_Request>(
            "CParental_RequestFeatureAccess_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_RequestFeatureAccess_Request {
    const NAME: &'static str = "CParental_RequestFeatureAccess_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.features = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.features {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.features {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestFeatureAccess_Request {
        CParental_RequestFeatureAccess_Request::new()
    }

    fn clear(&mut self) {
        self.features = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestFeatureAccess_Request {
        static instance: CParental_RequestFeatureAccess_Request = CParental_RequestFeatureAccess_Request {
            features: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_RequestFeatureAccess_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestFeatureAccess_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestFeatureAccess_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_RequestFeatureAccess_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestFeatureAccess_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestFeatureAccess_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_RequestFeatureAccess_Response.requestid)
    pub requestid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestFeatureAccess_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestFeatureAccess_Response {
    fn default() -> &'a CParental_RequestFeatureAccess_Response {
        <CParental_RequestFeatureAccess_Response as crate::Message>::default_instance()
    }
}

impl CParental_RequestFeatureAccess_Response {
    pub fn new() -> CParental_RequestFeatureAccess_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 requestid = 1;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &CParental_RequestFeatureAccess_Response| { &m.requestid },
            |m: &mut CParental_RequestFeatureAccess_Response| { &mut m.requestid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestFeatureAccess_Response>(
            "CParental_RequestFeatureAccess_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_RequestFeatureAccess_Response {
    const NAME: &'static str = "CParental_RequestFeatureAccess_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.requestid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestFeatureAccess_Response {
        CParental_RequestFeatureAccess_Response::new()
    }

    fn clear(&mut self) {
        self.requestid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestFeatureAccess_Response {
        static instance: CParental_RequestFeatureAccess_Response = CParental_RequestFeatureAccess_Response {
            requestid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_RequestFeatureAccess_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestFeatureAccess_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestFeatureAccess_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_RequestFeatureAccess_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ApproveFeatureAccess_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ApproveFeatureAccess_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ApproveFeatureAccess_Request.approve)
    pub approve: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CParental_ApproveFeatureAccess_Request.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParental_ApproveFeatureAccess_Request.features)
    pub features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_ApproveFeatureAccess_Request.duration)
    pub duration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_ApproveFeatureAccess_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ApproveFeatureAccess_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ApproveFeatureAccess_Request {
    fn default() -> &'a CParental_ApproveFeatureAccess_Request {
        <CParental_ApproveFeatureAccess_Request as crate::Message>::default_instance()
    }
}

impl CParental_ApproveFeatureAccess_Request {
    pub fn new() -> CParental_ApproveFeatureAccess_Request {
        ::std::default::Default::default()
    }

    // optional bool approve = 1;

    pub fn approve(&self) -> bool {
        self.approve.unwrap_or(false)
    }

    pub fn clear_approve(&mut self) {
        self.approve = ::std::option::Option::None;
    }

    pub fn has_approve(&self) -> bool {
        self.approve.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approve(&mut self, v: bool) {
        self.approve = ::std::option::Option::Some(v);
    }

    // optional fixed64 requestid = 2;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional uint32 features = 3;

    pub fn features(&self) -> u32 {
        self.features.unwrap_or(0)
    }

    pub fn clear_features(&mut self) {
        self.features = ::std::option::Option::None;
    }

    pub fn has_features(&self) -> bool {
        self.features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: u32) {
        self.features = ::std::option::Option::Some(v);
    }

    // optional uint32 duration = 4;

    pub fn duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "approve",
            |m: &CParental_ApproveFeatureAccess_Request| { &m.approve },
            |m: &mut CParental_ApproveFeatureAccess_Request| { &mut m.approve },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &CParental_ApproveFeatureAccess_Request| { &m.requestid },
            |m: &mut CParental_ApproveFeatureAccess_Request| { &mut m.requestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "features",
            |m: &CParental_ApproveFeatureAccess_Request| { &m.features },
            |m: &mut CParental_ApproveFeatureAccess_Request| { &mut m.features },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &CParental_ApproveFeatureAccess_Request| { &m.duration },
            |m: &mut CParental_ApproveFeatureAccess_Request| { &mut m.duration },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_ApproveFeatureAccess_Request| { &m.steamid },
            |m: &mut CParental_ApproveFeatureAccess_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ApproveFeatureAccess_Request>(
            "CParental_ApproveFeatureAccess_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ApproveFeatureAccess_Request {
    const NAME: &'static str = "CParental_ApproveFeatureAccess_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.approve = ::std::option::Option::Some(is.read_bool()?);
                },
                17 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.features = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.approve {
            my_size += 1 + 1;
        }
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.features {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.duration {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.approve {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.requestid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.features {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ApproveFeatureAccess_Request {
        CParental_ApproveFeatureAccess_Request::new()
    }

    fn clear(&mut self) {
        self.approve = ::std::option::Option::None;
        self.requestid = ::std::option::Option::None;
        self.features = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ApproveFeatureAccess_Request {
        static instance: CParental_ApproveFeatureAccess_Request = CParental_ApproveFeatureAccess_Request {
            approve: ::std::option::Option::None,
            requestid: ::std::option::Option::None,
            features: ::std::option::Option::None,
            duration: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ApproveFeatureAccess_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ApproveFeatureAccess_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ApproveFeatureAccess_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ApproveFeatureAccess_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ApproveFeatureAccess_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ApproveFeatureAccess_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ApproveFeatureAccess_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ApproveFeatureAccess_Response {
    fn default() -> &'a CParental_ApproveFeatureAccess_Response {
        <CParental_ApproveFeatureAccess_Response as crate::Message>::default_instance()
    }
}

impl CParental_ApproveFeatureAccess_Response {
    pub fn new() -> CParental_ApproveFeatureAccess_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ApproveFeatureAccess_Response>(
            "CParental_ApproveFeatureAccess_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ApproveFeatureAccess_Response {
    const NAME: &'static str = "CParental_ApproveFeatureAccess_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ApproveFeatureAccess_Response {
        CParental_ApproveFeatureAccess_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ApproveFeatureAccess_Response {
        static instance: CParental_ApproveFeatureAccess_Response = CParental_ApproveFeatureAccess_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ApproveFeatureAccess_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ApproveFeatureAccess_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ApproveFeatureAccess_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ApproveFeatureAccess_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestPlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestPlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_RequestPlaytime_Request.time_expires)
    pub time_expires: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_RequestPlaytime_Request.current_playtime_restrictions)
    pub current_playtime_restrictions: crate::MessageField<ParentalPlaytimeDay>,
    // @@protoc_insertion_point(field:CParental_RequestPlaytime_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestPlaytime_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestPlaytime_Request {
    fn default() -> &'a CParental_RequestPlaytime_Request {
        <CParental_RequestPlaytime_Request as crate::Message>::default_instance()
    }
}

impl CParental_RequestPlaytime_Request {
    pub fn new() -> CParental_RequestPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 time_expires = 1;

    pub fn time_expires(&self) -> u32 {
        self.time_expires.unwrap_or(0)
    }

    pub fn clear_time_expires(&mut self) {
        self.time_expires = ::std::option::Option::None;
    }

    pub fn has_time_expires(&self) -> bool {
        self.time_expires.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_expires(&mut self, v: u32) {
        self.time_expires = ::std::option::Option::Some(v);
    }

    // optional .ParentalPlaytimeDay current_playtime_restrictions = 2;

    pub fn current_playtime_restrictions(&self) -> &ParentalPlaytimeDay {
        self.current_playtime_restrictions.as_ref().unwrap_or_else(|| <ParentalPlaytimeDay as crate::Message>::default_instance())
    }

    pub fn clear_current_playtime_restrictions(&mut self) {
        self.current_playtime_restrictions.clear();
    }

    pub fn has_current_playtime_restrictions(&self) -> bool {
        self.current_playtime_restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_playtime_restrictions(&mut self, v: ParentalPlaytimeDay) {
        self.current_playtime_restrictions = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_playtime_restrictions(&mut self) -> &mut ParentalPlaytimeDay {
        self.current_playtime_restrictions.mut_or_insert_default()
    }

    // Take field
    pub fn take_current_playtime_restrictions(&mut self) -> ParentalPlaytimeDay {
        self.current_playtime_restrictions.take().unwrap_or_else(|| ParentalPlaytimeDay::new())
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_expires",
            |m: &CParental_RequestPlaytime_Request| { &m.time_expires },
            |m: &mut CParental_RequestPlaytime_Request| { &mut m.time_expires },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalPlaytimeDay>(
            "current_playtime_restrictions",
            |m: &CParental_RequestPlaytime_Request| { &m.current_playtime_restrictions },
            |m: &mut CParental_RequestPlaytime_Request| { &mut m.current_playtime_restrictions },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_RequestPlaytime_Request| { &m.steamid },
            |m: &mut CParental_RequestPlaytime_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestPlaytime_Request>(
            "CParental_RequestPlaytime_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_RequestPlaytime_Request {
    const NAME: &'static str = "CParental_RequestPlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.time_expires = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.current_playtime_restrictions)?;
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time_expires {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.current_playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.time_expires {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.current_playtime_restrictions.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestPlaytime_Request {
        CParental_RequestPlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.time_expires = ::std::option::Option::None;
        self.current_playtime_restrictions.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestPlaytime_Request {
        static instance: CParental_RequestPlaytime_Request = CParental_RequestPlaytime_Request {
            time_expires: ::std::option::Option::None,
            current_playtime_restrictions: crate::MessageField::none(),
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_RequestPlaytime_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestPlaytime_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestPlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_RequestPlaytime_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_RequestPlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_RequestPlaytime_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_RequestPlaytime_Response.requestid)
    pub requestid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_RequestPlaytime_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_RequestPlaytime_Response {
    fn default() -> &'a CParental_RequestPlaytime_Response {
        <CParental_RequestPlaytime_Response as crate::Message>::default_instance()
    }
}

impl CParental_RequestPlaytime_Response {
    pub fn new() -> CParental_RequestPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 requestid = 1;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &CParental_RequestPlaytime_Response| { &m.requestid },
            |m: &mut CParental_RequestPlaytime_Response| { &mut m.requestid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_RequestPlaytime_Response>(
            "CParental_RequestPlaytime_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_RequestPlaytime_Response {
    const NAME: &'static str = "CParental_RequestPlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.requestid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_RequestPlaytime_Response {
        CParental_RequestPlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.requestid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_RequestPlaytime_Response {
        static instance: CParental_RequestPlaytime_Response = CParental_RequestPlaytime_Response {
            requestid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_RequestPlaytime_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_RequestPlaytime_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_RequestPlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_RequestPlaytime_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ApprovePlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ApprovePlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ApprovePlaytime_Request.approve)
    pub approve: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CParental_ApprovePlaytime_Request.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParental_ApprovePlaytime_Request.restrictions_approved)
    pub restrictions_approved: crate::MessageField<ParentalTemporaryPlaytimeRestrictions>,
    // @@protoc_insertion_point(field:CParental_ApprovePlaytime_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ApprovePlaytime_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ApprovePlaytime_Request {
    fn default() -> &'a CParental_ApprovePlaytime_Request {
        <CParental_ApprovePlaytime_Request as crate::Message>::default_instance()
    }
}

impl CParental_ApprovePlaytime_Request {
    pub fn new() -> CParental_ApprovePlaytime_Request {
        ::std::default::Default::default()
    }

    // optional bool approve = 1;

    pub fn approve(&self) -> bool {
        self.approve.unwrap_or(false)
    }

    pub fn clear_approve(&mut self) {
        self.approve = ::std::option::Option::None;
    }

    pub fn has_approve(&self) -> bool {
        self.approve.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approve(&mut self, v: bool) {
        self.approve = ::std::option::Option::Some(v);
    }

    // optional fixed64 requestid = 2;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 3;

    pub fn restrictions_approved(&self) -> &ParentalTemporaryPlaytimeRestrictions {
        self.restrictions_approved.as_ref().unwrap_or_else(|| <ParentalTemporaryPlaytimeRestrictions as crate::Message>::default_instance())
    }

    pub fn clear_restrictions_approved(&mut self) {
        self.restrictions_approved.clear();
    }

    pub fn has_restrictions_approved(&self) -> bool {
        self.restrictions_approved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_restrictions_approved(&mut self, v: ParentalTemporaryPlaytimeRestrictions) {
        self.restrictions_approved = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restrictions_approved(&mut self) -> &mut ParentalTemporaryPlaytimeRestrictions {
        self.restrictions_approved.mut_or_insert_default()
    }

    // Take field
    pub fn take_restrictions_approved(&mut self) -> ParentalTemporaryPlaytimeRestrictions {
        self.restrictions_approved.take().unwrap_or_else(|| ParentalTemporaryPlaytimeRestrictions::new())
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "approve",
            |m: &CParental_ApprovePlaytime_Request| { &m.approve },
            |m: &mut CParental_ApprovePlaytime_Request| { &mut m.approve },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &CParental_ApprovePlaytime_Request| { &m.requestid },
            |m: &mut CParental_ApprovePlaytime_Request| { &mut m.requestid },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalTemporaryPlaytimeRestrictions>(
            "restrictions_approved",
            |m: &CParental_ApprovePlaytime_Request| { &m.restrictions_approved },
            |m: &mut CParental_ApprovePlaytime_Request| { &mut m.restrictions_approved },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_ApprovePlaytime_Request| { &m.steamid },
            |m: &mut CParental_ApprovePlaytime_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ApprovePlaytime_Request>(
            "CParental_ApprovePlaytime_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ApprovePlaytime_Request {
    const NAME: &'static str = "CParental_ApprovePlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.approve = ::std::option::Option::Some(is.read_bool()?);
                },
                17 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.restrictions_approved)?;
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.approve {
            my_size += 1 + 1;
        }
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.restrictions_approved.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.approve {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.requestid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.restrictions_approved.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ApprovePlaytime_Request {
        CParental_ApprovePlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.approve = ::std::option::Option::None;
        self.requestid = ::std::option::Option::None;
        self.restrictions_approved.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ApprovePlaytime_Request {
        static instance: CParental_ApprovePlaytime_Request = CParental_ApprovePlaytime_Request {
            approve: ::std::option::Option::None,
            requestid: ::std::option::Option::None,
            restrictions_approved: crate::MessageField::none(),
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ApprovePlaytime_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ApprovePlaytime_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ApprovePlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ApprovePlaytime_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ApprovePlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ApprovePlaytime_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ApprovePlaytime_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ApprovePlaytime_Response {
    fn default() -> &'a CParental_ApprovePlaytime_Response {
        <CParental_ApprovePlaytime_Response as crate::Message>::default_instance()
    }
}

impl CParental_ApprovePlaytime_Response {
    pub fn new() -> CParental_ApprovePlaytime_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ApprovePlaytime_Response>(
            "CParental_ApprovePlaytime_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ApprovePlaytime_Response {
    const NAME: &'static str = "CParental_ApprovePlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ApprovePlaytime_Response {
        CParental_ApprovePlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ApprovePlaytime_Response {
        static instance: CParental_ApprovePlaytime_Response = CParental_ApprovePlaytime_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ApprovePlaytime_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ApprovePlaytime_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ApprovePlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ApprovePlaytime_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetRequests_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetRequests_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetRequests_Request.rt_include_completed_since)
    pub rt_include_completed_since: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_GetRequests_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetRequests_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetRequests_Request {
    fn default() -> &'a CParental_GetRequests_Request {
        <CParental_GetRequests_Request as crate::Message>::default_instance()
    }
}

impl CParental_GetRequests_Request {
    pub fn new() -> CParental_GetRequests_Request {
        ::std::default::Default::default()
    }

    // optional uint32 rt_include_completed_since = 1;

    pub fn rt_include_completed_since(&self) -> u32 {
        self.rt_include_completed_since.unwrap_or(0)
    }

    pub fn clear_rt_include_completed_since(&mut self) {
        self.rt_include_completed_since = ::std::option::Option::None;
    }

    pub fn has_rt_include_completed_since(&self) -> bool {
        self.rt_include_completed_since.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_include_completed_since(&mut self, v: u32) {
        self.rt_include_completed_since = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_include_completed_since",
            |m: &CParental_GetRequests_Request| { &m.rt_include_completed_since },
            |m: &mut CParental_GetRequests_Request| { &mut m.rt_include_completed_since },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_GetRequests_Request| { &m.steamid },
            |m: &mut CParental_GetRequests_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetRequests_Request>(
            "CParental_GetRequests_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_GetRequests_Request {
    const NAME: &'static str = "CParental_GetRequests_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rt_include_completed_since = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.rt_include_completed_since {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.rt_include_completed_since {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetRequests_Request {
        CParental_GetRequests_Request::new()
    }

    fn clear(&mut self) {
        self.rt_include_completed_since = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetRequests_Request {
        static instance: CParental_GetRequests_Request = CParental_GetRequests_Request {
            rt_include_completed_since: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_GetRequests_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetRequests_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetRequests_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_GetRequests_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalFeatureRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalFeatureRequest {
    // message fields
    // @@protoc_insertion_point(field:ParentalFeatureRequest.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.family_groupid)
    pub family_groupid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.features)
    pub features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.time_requested)
    pub time_requested: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.approved)
    pub approved: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.steamid_responder)
    pub steamid_responder: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.time_responded)
    pub time_responded: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalFeatureRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalFeatureRequest {
    fn default() -> &'a ParentalFeatureRequest {
        <ParentalFeatureRequest as crate::Message>::default_instance()
    }
}

impl ParentalFeatureRequest {
    pub fn new() -> ParentalFeatureRequest {
        ::std::default::Default::default()
    }

    // optional fixed64 requestid = 1;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional fixed64 family_groupid = 2;

    pub fn family_groupid(&self) -> u64 {
        self.family_groupid.unwrap_or(0)
    }

    pub fn clear_family_groupid(&mut self) {
        self.family_groupid = ::std::option::Option::None;
    }

    pub fn has_family_groupid(&self) -> bool {
        self.family_groupid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family_groupid(&mut self, v: u64) {
        self.family_groupid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 features = 4;

    pub fn features(&self) -> u32 {
        self.features.unwrap_or(0)
    }

    pub fn clear_features(&mut self) {
        self.features = ::std::option::Option::None;
    }

    pub fn has_features(&self) -> bool {
        self.features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: u32) {
        self.features = ::std::option::Option::Some(v);
    }

    // optional uint32 time_requested = 5;

    pub fn time_requested(&self) -> u32 {
        self.time_requested.unwrap_or(0)
    }

    pub fn clear_time_requested(&mut self) {
        self.time_requested = ::std::option::Option::None;
    }

    pub fn has_time_requested(&self) -> bool {
        self.time_requested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_requested(&mut self, v: u32) {
        self.time_requested = ::std::option::Option::Some(v);
    }

    // optional bool approved = 6;

    pub fn approved(&self) -> bool {
        self.approved.unwrap_or(false)
    }

    pub fn clear_approved(&mut self) {
        self.approved = ::std::option::Option::None;
    }

    pub fn has_approved(&self) -> bool {
        self.approved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approved(&mut self, v: bool) {
        self.approved = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_responder = 7;

    pub fn steamid_responder(&self) -> u64 {
        self.steamid_responder.unwrap_or(0)
    }

    pub fn clear_steamid_responder(&mut self) {
        self.steamid_responder = ::std::option::Option::None;
    }

    pub fn has_steamid_responder(&self) -> bool {
        self.steamid_responder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_responder(&mut self, v: u64) {
        self.steamid_responder = ::std::option::Option::Some(v);
    }

    // optional uint32 time_responded = 8;

    pub fn time_responded(&self) -> u32 {
        self.time_responded.unwrap_or(0)
    }

    pub fn clear_time_responded(&mut self) {
        self.time_responded = ::std::option::Option::None;
    }

    pub fn has_time_responded(&self) -> bool {
        self.time_responded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_responded(&mut self, v: u32) {
        self.time_responded = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &ParentalFeatureRequest| { &m.requestid },
            |m: &mut ParentalFeatureRequest| { &mut m.requestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "family_groupid",
            |m: &ParentalFeatureRequest| { &m.family_groupid },
            |m: &mut ParentalFeatureRequest| { &mut m.family_groupid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &ParentalFeatureRequest| { &m.steamid },
            |m: &mut ParentalFeatureRequest| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "features",
            |m: &ParentalFeatureRequest| { &m.features },
            |m: &mut ParentalFeatureRequest| { &mut m.features },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_requested",
            |m: &ParentalFeatureRequest| { &m.time_requested },
            |m: &mut ParentalFeatureRequest| { &mut m.time_requested },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "approved",
            |m: &ParentalFeatureRequest| { &m.approved },
            |m: &mut ParentalFeatureRequest| { &mut m.approved },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_responder",
            |m: &ParentalFeatureRequest| { &m.steamid_responder },
            |m: &mut ParentalFeatureRequest| { &mut m.steamid_responder },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_responded",
            |m: &ParentalFeatureRequest| { &m.time_responded },
            |m: &mut ParentalFeatureRequest| { &mut m.time_responded },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalFeatureRequest>(
            "ParentalFeatureRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalFeatureRequest {
    const NAME: &'static str = "ParentalFeatureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.family_groupid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.features = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.time_requested = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.approved = ::std::option::Option::Some(is.read_bool()?);
                },
                57 => {
                    self.steamid_responder = ::std::option::Option::Some(is.read_fixed64()?);
                },
                64 => {
                    self.time_responded = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.family_groupid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.features {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.time_requested {
            my_size += crate::rt::uint32_size(5, v);
        }
        if let Some(v) = self.approved {
            my_size += 1 + 1;
        }
        if let Some(v) = self.steamid_responder {
            my_size += 1 + 8;
        }
        if let Some(v) = self.time_responded {
            my_size += crate::rt::uint32_size(8, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.requestid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.family_groupid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.features {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.time_requested {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.approved {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.steamid_responder {
            os.write_fixed64(7, v)?;
        }
        if let Some(v) = self.time_responded {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalFeatureRequest {
        ParentalFeatureRequest::new()
    }

    fn clear(&mut self) {
        self.requestid = ::std::option::Option::None;
        self.family_groupid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.features = ::std::option::Option::None;
        self.time_requested = ::std::option::Option::None;
        self.approved = ::std::option::Option::None;
        self.steamid_responder = ::std::option::Option::None;
        self.time_responded = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalFeatureRequest {
        static instance: ParentalFeatureRequest = ParentalFeatureRequest {
            requestid: ::std::option::Option::None,
            family_groupid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            features: ::std::option::Option::None,
            time_requested: ::std::option::Option::None,
            approved: ::std::option::Option::None,
            steamid_responder: ::std::option::Option::None,
            time_responded: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalFeatureRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalFeatureRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalFeatureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalFeatureRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ParentalPlaytimeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalPlaytimeRequest {
    // message fields
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.family_groupid)
    pub family_groupid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.current_playtime_restrictions)
    pub current_playtime_restrictions: crate::MessageField<ParentalPlaytimeDay>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.time_expires)
    pub time_expires: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.time_requested)
    pub time_requested: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.approved)
    pub approved: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.steamid_responder)
    pub steamid_responder: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.time_responded)
    pub time_responded: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.restrictions_approved)
    pub restrictions_approved: crate::MessageField<ParentalTemporaryPlaytimeRestrictions>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalPlaytimeRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalPlaytimeRequest {
    fn default() -> &'a ParentalPlaytimeRequest {
        <ParentalPlaytimeRequest as crate::Message>::default_instance()
    }
}

impl ParentalPlaytimeRequest {
    pub fn new() -> ParentalPlaytimeRequest {
        ::std::default::Default::default()
    }

    // optional fixed64 requestid = 1;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional fixed64 family_groupid = 2;

    pub fn family_groupid(&self) -> u64 {
        self.family_groupid.unwrap_or(0)
    }

    pub fn clear_family_groupid(&mut self) {
        self.family_groupid = ::std::option::Option::None;
    }

    pub fn has_family_groupid(&self) -> bool {
        self.family_groupid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family_groupid(&mut self, v: u64) {
        self.family_groupid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .ParentalPlaytimeDay current_playtime_restrictions = 4;

    pub fn current_playtime_restrictions(&self) -> &ParentalPlaytimeDay {
        self.current_playtime_restrictions.as_ref().unwrap_or_else(|| <ParentalPlaytimeDay as crate::Message>::default_instance())
    }

    pub fn clear_current_playtime_restrictions(&mut self) {
        self.current_playtime_restrictions.clear();
    }

    pub fn has_current_playtime_restrictions(&self) -> bool {
        self.current_playtime_restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_playtime_restrictions(&mut self, v: ParentalPlaytimeDay) {
        self.current_playtime_restrictions = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_playtime_restrictions(&mut self) -> &mut ParentalPlaytimeDay {
        self.current_playtime_restrictions.mut_or_insert_default()
    }

    // Take field
    pub fn take_current_playtime_restrictions(&mut self) -> ParentalPlaytimeDay {
        self.current_playtime_restrictions.take().unwrap_or_else(|| ParentalPlaytimeDay::new())
    }

    // optional uint32 time_expires = 5;

    pub fn time_expires(&self) -> u32 {
        self.time_expires.unwrap_or(0)
    }

    pub fn clear_time_expires(&mut self) {
        self.time_expires = ::std::option::Option::None;
    }

    pub fn has_time_expires(&self) -> bool {
        self.time_expires.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_expires(&mut self, v: u32) {
        self.time_expires = ::std::option::Option::Some(v);
    }

    // optional uint32 time_requested = 6;

    pub fn time_requested(&self) -> u32 {
        self.time_requested.unwrap_or(0)
    }

    pub fn clear_time_requested(&mut self) {
        self.time_requested = ::std::option::Option::None;
    }

    pub fn has_time_requested(&self) -> bool {
        self.time_requested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_requested(&mut self, v: u32) {
        self.time_requested = ::std::option::Option::Some(v);
    }

    // optional bool approved = 7;

    pub fn approved(&self) -> bool {
        self.approved.unwrap_or(false)
    }

    pub fn clear_approved(&mut self) {
        self.approved = ::std::option::Option::None;
    }

    pub fn has_approved(&self) -> bool {
        self.approved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approved(&mut self, v: bool) {
        self.approved = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_responder = 8;

    pub fn steamid_responder(&self) -> u64 {
        self.steamid_responder.unwrap_or(0)
    }

    pub fn clear_steamid_responder(&mut self) {
        self.steamid_responder = ::std::option::Option::None;
    }

    pub fn has_steamid_responder(&self) -> bool {
        self.steamid_responder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_responder(&mut self, v: u64) {
        self.steamid_responder = ::std::option::Option::Some(v);
    }

    // optional uint32 time_responded = 9;

    pub fn time_responded(&self) -> u32 {
        self.time_responded.unwrap_or(0)
    }

    pub fn clear_time_responded(&mut self) {
        self.time_responded = ::std::option::Option::None;
    }

    pub fn has_time_responded(&self) -> bool {
        self.time_responded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_responded(&mut self, v: u32) {
        self.time_responded = ::std::option::Option::Some(v);
    }

    // optional .ParentalTemporaryPlaytimeRestrictions restrictions_approved = 10;

    pub fn restrictions_approved(&self) -> &ParentalTemporaryPlaytimeRestrictions {
        self.restrictions_approved.as_ref().unwrap_or_else(|| <ParentalTemporaryPlaytimeRestrictions as crate::Message>::default_instance())
    }

    pub fn clear_restrictions_approved(&mut self) {
        self.restrictions_approved.clear();
    }

    pub fn has_restrictions_approved(&self) -> bool {
        self.restrictions_approved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_restrictions_approved(&mut self, v: ParentalTemporaryPlaytimeRestrictions) {
        self.restrictions_approved = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restrictions_approved(&mut self) -> &mut ParentalTemporaryPlaytimeRestrictions {
        self.restrictions_approved.mut_or_insert_default()
    }

    // Take field
    pub fn take_restrictions_approved(&mut self) -> ParentalTemporaryPlaytimeRestrictions {
        self.restrictions_approved.take().unwrap_or_else(|| ParentalTemporaryPlaytimeRestrictions::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &ParentalPlaytimeRequest| { &m.requestid },
            |m: &mut ParentalPlaytimeRequest| { &mut m.requestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "family_groupid",
            |m: &ParentalPlaytimeRequest| { &m.family_groupid },
            |m: &mut ParentalPlaytimeRequest| { &mut m.family_groupid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &ParentalPlaytimeRequest| { &m.steamid },
            |m: &mut ParentalPlaytimeRequest| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalPlaytimeDay>(
            "current_playtime_restrictions",
            |m: &ParentalPlaytimeRequest| { &m.current_playtime_restrictions },
            |m: &mut ParentalPlaytimeRequest| { &mut m.current_playtime_restrictions },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_expires",
            |m: &ParentalPlaytimeRequest| { &m.time_expires },
            |m: &mut ParentalPlaytimeRequest| { &mut m.time_expires },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_requested",
            |m: &ParentalPlaytimeRequest| { &m.time_requested },
            |m: &mut ParentalPlaytimeRequest| { &mut m.time_requested },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "approved",
            |m: &ParentalPlaytimeRequest| { &m.approved },
            |m: &mut ParentalPlaytimeRequest| { &mut m.approved },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_responder",
            |m: &ParentalPlaytimeRequest| { &m.steamid_responder },
            |m: &mut ParentalPlaytimeRequest| { &mut m.steamid_responder },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_responded",
            |m: &ParentalPlaytimeRequest| { &m.time_responded },
            |m: &mut ParentalPlaytimeRequest| { &mut m.time_responded },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, ParentalTemporaryPlaytimeRestrictions>(
            "restrictions_approved",
            |m: &ParentalPlaytimeRequest| { &m.restrictions_approved },
            |m: &mut ParentalPlaytimeRequest| { &mut m.restrictions_approved },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<ParentalPlaytimeRequest>(
            "ParentalPlaytimeRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for ParentalPlaytimeRequest {
    const NAME: &'static str = "ParentalPlaytimeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.family_groupid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.current_playtime_restrictions)?;
                },
                40 => {
                    self.time_expires = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.time_requested = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.approved = ::std::option::Option::Some(is.read_bool()?);
                },
                65 => {
                    self.steamid_responder = ::std::option::Option::Some(is.read_fixed64()?);
                },
                72 => {
                    self.time_responded = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.restrictions_approved)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.family_groupid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.current_playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_expires {
            my_size += crate::rt::uint32_size(5, v);
        }
        if let Some(v) = self.time_requested {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.approved {
            my_size += 1 + 1;
        }
        if let Some(v) = self.steamid_responder {
            my_size += 1 + 8;
        }
        if let Some(v) = self.time_responded {
            my_size += crate::rt::uint32_size(9, v);
        }
        if let Some(v) = self.restrictions_approved.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.requestid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.family_groupid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.current_playtime_restrictions.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.time_expires {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_requested {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.approved {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.steamid_responder {
            os.write_fixed64(8, v)?;
        }
        if let Some(v) = self.time_responded {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.restrictions_approved.as_ref() {
            crate::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalPlaytimeRequest {
        ParentalPlaytimeRequest::new()
    }

    fn clear(&mut self) {
        self.requestid = ::std::option::Option::None;
        self.family_groupid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.current_playtime_restrictions.clear();
        self.time_expires = ::std::option::Option::None;
        self.time_requested = ::std::option::Option::None;
        self.approved = ::std::option::Option::None;
        self.steamid_responder = ::std::option::Option::None;
        self.time_responded = ::std::option::Option::None;
        self.restrictions_approved.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalPlaytimeRequest {
        static instance: ParentalPlaytimeRequest = ParentalPlaytimeRequest {
            requestid: ::std::option::Option::None,
            family_groupid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            current_playtime_restrictions: crate::MessageField::none(),
            time_expires: ::std::option::Option::None,
            time_requested: ::std::option::Option::None,
            approved: ::std::option::Option::None,
            steamid_responder: ::std::option::Option::None,
            time_responded: ::std::option::Option::None,
            restrictions_approved: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for ParentalPlaytimeRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ParentalPlaytimeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ParentalPlaytimeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for ParentalPlaytimeRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_GetRequests_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_GetRequests_Response {
    // message fields
    // @@protoc_insertion_point(field:CParental_GetRequests_Response.feature_requests)
    pub feature_requests: ::std::vec::Vec<ParentalFeatureRequest>,
    // @@protoc_insertion_point(field:CParental_GetRequests_Response.playtime_requests)
    pub playtime_requests: ::std::vec::Vec<ParentalPlaytimeRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_GetRequests_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_GetRequests_Response {
    fn default() -> &'a CParental_GetRequests_Response {
        <CParental_GetRequests_Response as crate::Message>::default_instance()
    }
}

impl CParental_GetRequests_Response {
    pub fn new() -> CParental_GetRequests_Response {
        ::std::default::Default::default()
    }

    // repeated .ParentalFeatureRequest feature_requests = 1;

    pub fn feature_requests(&self) -> &[ParentalFeatureRequest] {
        &self.feature_requests
    }

    pub fn clear_feature_requests(&mut self) {
        self.feature_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_feature_requests(&mut self, v: ::std::vec::Vec<ParentalFeatureRequest>) {
        self.feature_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feature_requests(&mut self) -> &mut ::std::vec::Vec<ParentalFeatureRequest> {
        &mut self.feature_requests
    }

    // Take field
    pub fn take_feature_requests(&mut self) -> ::std::vec::Vec<ParentalFeatureRequest> {
        ::std::mem::replace(&mut self.feature_requests, ::std::vec::Vec::new())
    }

    // repeated .ParentalPlaytimeRequest playtime_requests = 2;

    pub fn playtime_requests(&self) -> &[ParentalPlaytimeRequest] {
        &self.playtime_requests
    }

    pub fn clear_playtime_requests(&mut self) {
        self.playtime_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_playtime_requests(&mut self, v: ::std::vec::Vec<ParentalPlaytimeRequest>) {
        self.playtime_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_playtime_requests(&mut self) -> &mut ::std::vec::Vec<ParentalPlaytimeRequest> {
        &mut self.playtime_requests
    }

    // Take field
    pub fn take_playtime_requests(&mut self) -> ::std::vec::Vec<ParentalPlaytimeRequest> {
        ::std::mem::replace(&mut self.playtime_requests, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_requests",
            |m: &CParental_GetRequests_Response| { &m.feature_requests },
            |m: &mut CParental_GetRequests_Response| { &mut m.feature_requests },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "playtime_requests",
            |m: &CParental_GetRequests_Response| { &m.playtime_requests },
            |m: &mut CParental_GetRequests_Response| { &mut m.playtime_requests },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_GetRequests_Response>(
            "CParental_GetRequests_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_GetRequests_Response {
    const NAME: &'static str = "CParental_GetRequests_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.feature_requests.push(is.read_message()?);
                },
                18 => {
                    self.playtime_requests.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.feature_requests {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.playtime_requests {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.feature_requests {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.playtime_requests {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_GetRequests_Response {
        CParental_GetRequests_Response::new()
    }

    fn clear(&mut self) {
        self.feature_requests.clear();
        self.playtime_requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_GetRequests_Response {
        static instance: CParental_GetRequests_Response = CParental_GetRequests_Response {
            feature_requests: ::std::vec::Vec::new(),
            playtime_requests: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_GetRequests_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_GetRequests_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_GetRequests_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_GetRequests_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ReportPlaytimeAndNotify_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ReportPlaytimeAndNotify_Request {
    // message fields
    // @@protoc_insertion_point(field:CParental_ReportPlaytimeAndNotify_Request.day_of_week)
    pub day_of_week: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_ReportPlaytimeAndNotify_Request.minutes_used)
    pub minutes_used: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_ReportPlaytimeAndNotify_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ReportPlaytimeAndNotify_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ReportPlaytimeAndNotify_Request {
    fn default() -> &'a CParental_ReportPlaytimeAndNotify_Request {
        <CParental_ReportPlaytimeAndNotify_Request as crate::Message>::default_instance()
    }
}

impl CParental_ReportPlaytimeAndNotify_Request {
    pub fn new() -> CParental_ReportPlaytimeAndNotify_Request {
        ::std::default::Default::default()
    }

    // optional uint32 day_of_week = 1;

    pub fn day_of_week(&self) -> u32 {
        self.day_of_week.unwrap_or(0)
    }

    pub fn clear_day_of_week(&mut self) {
        self.day_of_week = ::std::option::Option::None;
    }

    pub fn has_day_of_week(&self) -> bool {
        self.day_of_week.is_some()
    }

    // Param is passed by value, moved
    pub fn set_day_of_week(&mut self, v: u32) {
        self.day_of_week = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_used = 2;

    pub fn minutes_used(&self) -> u32 {
        self.minutes_used.unwrap_or(0)
    }

    pub fn clear_minutes_used(&mut self) {
        self.minutes_used = ::std::option::Option::None;
    }

    pub fn has_minutes_used(&self) -> bool {
        self.minutes_used.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_used(&mut self, v: u32) {
        self.minutes_used = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 10;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "day_of_week",
            |m: &CParental_ReportPlaytimeAndNotify_Request| { &m.day_of_week },
            |m: &mut CParental_ReportPlaytimeAndNotify_Request| { &mut m.day_of_week },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "minutes_used",
            |m: &CParental_ReportPlaytimeAndNotify_Request| { &m.minutes_used },
            |m: &mut CParental_ReportPlaytimeAndNotify_Request| { &mut m.minutes_used },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParental_ReportPlaytimeAndNotify_Request| { &m.steamid },
            |m: &mut CParental_ReportPlaytimeAndNotify_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ReportPlaytimeAndNotify_Request>(
            "CParental_ReportPlaytimeAndNotify_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ReportPlaytimeAndNotify_Request {
    const NAME: &'static str = "CParental_ReportPlaytimeAndNotify_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.day_of_week = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.minutes_used = ::std::option::Option::Some(is.read_uint32()?);
                },
                81 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.day_of_week {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.minutes_used {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.day_of_week {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.minutes_used {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ReportPlaytimeAndNotify_Request {
        CParental_ReportPlaytimeAndNotify_Request::new()
    }

    fn clear(&mut self) {
        self.day_of_week = ::std::option::Option::None;
        self.minutes_used = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ReportPlaytimeAndNotify_Request {
        static instance: CParental_ReportPlaytimeAndNotify_Request = CParental_ReportPlaytimeAndNotify_Request {
            day_of_week: ::std::option::Option::None,
            minutes_used: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ReportPlaytimeAndNotify_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ReportPlaytimeAndNotify_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ReportPlaytimeAndNotify_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ReportPlaytimeAndNotify_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ReportPlaytimeAndNotify_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ReportPlaytimeAndNotify_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ReportPlaytimeAndNotify_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ReportPlaytimeAndNotify_Response {
    fn default() -> &'a CParental_ReportPlaytimeAndNotify_Response {
        <CParental_ReportPlaytimeAndNotify_Response as crate::Message>::default_instance()
    }
}

impl CParental_ReportPlaytimeAndNotify_Response {
    pub fn new() -> CParental_ReportPlaytimeAndNotify_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ReportPlaytimeAndNotify_Response>(
            "CParental_ReportPlaytimeAndNotify_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ReportPlaytimeAndNotify_Response {
    const NAME: &'static str = "CParental_ReportPlaytimeAndNotify_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ReportPlaytimeAndNotify_Response {
        CParental_ReportPlaytimeAndNotify_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ReportPlaytimeAndNotify_Response {
        static instance: CParental_ReportPlaytimeAndNotify_Response = CParental_ReportPlaytimeAndNotify_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ReportPlaytimeAndNotify_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ReportPlaytimeAndNotify_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ReportPlaytimeAndNotify_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ReportPlaytimeAndNotify_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ParentalSettingsChange_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ParentalSettingsChange_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.serialized_settings)
    pub serialized_settings: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.signature)
    pub signature: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ParentalSettingsChange_Notification.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ParentalSettingsChange_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ParentalSettingsChange_Notification {
    fn default() -> &'a CParental_ParentalSettingsChange_Notification {
        <CParental_ParentalSettingsChange_Notification as crate::Message>::default_instance()
    }
}

impl CParental_ParentalSettingsChange_Notification {
    pub fn new() -> CParental_ParentalSettingsChange_Notification {
        ::std::default::Default::default()
    }

    // optional bytes serialized_settings = 1;

    pub fn serialized_settings(&self) -> &[u8] {
        match self.serialized_settings.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_serialized_settings(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
    }

    pub fn has_serialized_settings(&self) -> bool {
        self.serialized_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_settings(&mut self, v: ::bytes::Bytes) {
        self.serialized_settings = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_settings(&mut self) -> &mut ::bytes::Bytes {
        if self.serialized_settings.is_none() {
            self.serialized_settings = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.serialized_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_settings(&mut self) -> ::bytes::Bytes {
        self.serialized_settings.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::bytes::Bytes) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::bytes::Bytes {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::bytes::Bytes {
        self.signature.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional string password = 3;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 4;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serialized_settings",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.serialized_settings },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.serialized_settings },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.signature },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.signature },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.password },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_ParentalSettingsChange_Notification| { &m.sessionid },
            |m: &mut CParental_ParentalSettingsChange_Notification| { &mut m.sessionid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ParentalSettingsChange_Notification>(
            "CParental_ParentalSettingsChange_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ParentalSettingsChange_Notification {
    const NAME: &'static str = "CParental_ParentalSettingsChange_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serialized_settings = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                26 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serialized_settings.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serialized_settings.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.password.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ParentalSettingsChange_Notification {
        CParental_ParentalSettingsChange_Notification::new()
    }

    fn clear(&mut self) {
        self.serialized_settings = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.password = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ParentalSettingsChange_Notification {
        static instance: CParental_ParentalSettingsChange_Notification = CParental_ParentalSettingsChange_Notification {
            serialized_settings: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            password: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ParentalSettingsChange_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ParentalSettingsChange_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ParentalSettingsChange_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ParentalSettingsChange_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ParentalUnlock_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ParentalUnlock_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_ParentalUnlock_Notification.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParental_ParentalUnlock_Notification.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ParentalUnlock_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ParentalUnlock_Notification {
    fn default() -> &'a CParental_ParentalUnlock_Notification {
        <CParental_ParentalUnlock_Notification as crate::Message>::default_instance()
    }
}

impl CParental_ParentalUnlock_Notification {
    pub fn new() -> CParental_ParentalUnlock_Notification {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sessionid = 2;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CParental_ParentalUnlock_Notification| { &m.password },
            |m: &mut CParental_ParentalUnlock_Notification| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_ParentalUnlock_Notification| { &m.sessionid },
            |m: &mut CParental_ParentalUnlock_Notification| { &mut m.sessionid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ParentalUnlock_Notification>(
            "CParental_ParentalUnlock_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ParentalUnlock_Notification {
    const NAME: &'static str = "CParental_ParentalUnlock_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.sessionid.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ParentalUnlock_Notification {
        CParental_ParentalUnlock_Notification::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ParentalUnlock_Notification {
        static instance: CParental_ParentalUnlock_Notification = CParental_ParentalUnlock_Notification {
            password: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ParentalUnlock_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ParentalUnlock_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ParentalUnlock_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ParentalUnlock_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_ParentalLock_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_ParentalLock_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_ParentalLock_Notification.sessionid)
    pub sessionid: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_ParentalLock_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_ParentalLock_Notification {
    fn default() -> &'a CParental_ParentalLock_Notification {
        <CParental_ParentalLock_Notification as crate::Message>::default_instance()
    }
}

impl CParental_ParentalLock_Notification {
    pub fn new() -> CParental_ParentalLock_Notification {
        ::std::default::Default::default()
    }

    // optional string sessionid = 1;

    pub fn sessionid(&self) -> &str {
        match self.sessionid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: ::std::string::String) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sessionid(&mut self) -> &mut ::std::string::String {
        if self.sessionid.is_none() {
            self.sessionid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sessionid.as_mut().unwrap()
    }

    // Take field
    pub fn take_sessionid(&mut self) -> ::std::string::String {
        self.sessionid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CParental_ParentalLock_Notification| { &m.sessionid },
            |m: &mut CParental_ParentalLock_Notification| { &mut m.sessionid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_ParentalLock_Notification>(
            "CParental_ParentalLock_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_ParentalLock_Notification {
    const NAME: &'static str = "CParental_ParentalLock_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessionid = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sessionid.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_ParentalLock_Notification {
        CParental_ParentalLock_Notification::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_ParentalLock_Notification {
        static instance: CParental_ParentalLock_Notification = CParental_ParentalLock_Notification {
            sessionid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_ParentalLock_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_ParentalLock_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_ParentalLock_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_ParentalLock_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParental_PlaytimeUsed_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParental_PlaytimeUsed_Notification {
    // message fields
    // @@protoc_insertion_point(field:CParental_PlaytimeUsed_Notification.day_of_week)
    pub day_of_week: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParental_PlaytimeUsed_Notification.minutes_used)
    pub minutes_used: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CParental_PlaytimeUsed_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParental_PlaytimeUsed_Notification {
    fn default() -> &'a CParental_PlaytimeUsed_Notification {
        <CParental_PlaytimeUsed_Notification as crate::Message>::default_instance()
    }
}

impl CParental_PlaytimeUsed_Notification {
    pub fn new() -> CParental_PlaytimeUsed_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 day_of_week = 1;

    pub fn day_of_week(&self) -> u32 {
        self.day_of_week.unwrap_or(0)
    }

    pub fn clear_day_of_week(&mut self) {
        self.day_of_week = ::std::option::Option::None;
    }

    pub fn has_day_of_week(&self) -> bool {
        self.day_of_week.is_some()
    }

    // Param is passed by value, moved
    pub fn set_day_of_week(&mut self, v: u32) {
        self.day_of_week = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_used = 2;

    pub fn minutes_used(&self) -> u32 {
        self.minutes_used.unwrap_or(0)
    }

    pub fn clear_minutes_used(&mut self) {
        self.minutes_used = ::std::option::Option::None;
    }

    pub fn has_minutes_used(&self) -> bool {
        self.minutes_used.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_used(&mut self, v: u32) {
        self.minutes_used = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "day_of_week",
            |m: &CParental_PlaytimeUsed_Notification| { &m.day_of_week },
            |m: &mut CParental_PlaytimeUsed_Notification| { &mut m.day_of_week },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "minutes_used",
            |m: &CParental_PlaytimeUsed_Notification| { &m.minutes_used },
            |m: &mut CParental_PlaytimeUsed_Notification| { &mut m.minutes_used },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParental_PlaytimeUsed_Notification>(
            "CParental_PlaytimeUsed_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParental_PlaytimeUsed_Notification {
    const NAME: &'static str = "CParental_PlaytimeUsed_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.day_of_week = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.minutes_used = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.day_of_week {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.minutes_used {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.day_of_week {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.minutes_used {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParental_PlaytimeUsed_Notification {
        CParental_PlaytimeUsed_Notification::new()
    }

    fn clear(&mut self) {
        self.day_of_week = ::std::option::Option::None;
        self.minutes_used = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParental_PlaytimeUsed_Notification {
        static instance: CParental_PlaytimeUsed_Notification = CParental_PlaytimeUsed_Notification {
            day_of_week: ::std::option::Option::None,
            minutes_used: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParental_PlaytimeUsed_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParental_PlaytimeUsed_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParental_PlaytimeUsed_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParental_PlaytimeUsed_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(steammessages_parental.steamclient.proto\x1a\x18steammessages_base.pr\
    oto\x1a,steammessages_unified_base.steamclient.proto\"B\n\x0bParentalApp\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1d\n\nis_allowed\
    \x18\x02\x20\x01(\x08R\tisAllowed\"{\n\x13ParentalPlaytimeDay\x120\n\x14\
    allowed_time_windows\x18\x01\x20\x01(\x04R\x12allowedTimeWindows\x122\n\
    \x15allowed_daily_minutes\x18\x02\x20\x01(\rR\x13allowedDailyMinutes\"\
    \x99\x01\n\x1cParentalPlaytimeRestrictions\x12>\n\x1bapply_playtime_rest\
    rictions\x18\x02\x20\x01(\x08R\x19applyPlaytimeRestrictions\x129\n\rplay\
    time_days\x18\x0f\x20\x03(\x0b2\x14.ParentalPlaytimeDayR\x0cplaytimeDays\
    \"\x86\x01\n%ParentalTemporaryPlaytimeRestrictions\x128\n\x0crestriction\
    s\x18\x01\x20\x01(\x0b2\x14.ParentalPlaytimeDayR\x0crestrictions\x12#\n\
    \rrtime_expires\x18\x02\x20\x01(\rR\x0crtimeExpires\"\xc9\x06\n\x10Paren\
    talSettings\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12&\n\
    \x0fapplist_base_id\x18\x02\x20\x01(\rR\rapplistBaseId\x128\n\x18applist\
    _base_description\x18\x03\x20\x01(\tR\x16applistBaseDescription\x12/\n\
    \x0capplist_base\x18\x04\x20\x03(\x0b2\x0c.ParentalAppR\x0bapplistBase\
    \x123\n\x0eapplist_custom\x18\x05\x20\x03(\x0b2\x0c.ParentalAppR\rapplis\
    tCustom\x12*\n\x10passwordhashtype\x18\x06\x20\x01(\rR\x10passwordhashty\
    pe\x12\x12\n\x04salt\x18\x07\x20\x01(\x0cR\x04salt\x12\"\n\x0cpasswordha\
    sh\x18\x08\x20\x01(\x0cR\x0cpasswordhash\x12\x1d\n\nis_enabled\x18\t\x20\
    \x01(\x08R\tisEnabled\x12)\n\x10enabled_features\x18\n\x20\x01(\rR\x0fen\
    abledFeatures\x12%\n\x0erecovery_email\x18\x0b\x20\x01(\tR\rrecoveryEmai\
    l\x12/\n\x14is_site_license_lock\x18\x0c\x20\x01(\x08R\x11isSiteLicenseL\
    ock\x12<\n\x1atemporary_enabled_features\x18\r\x20\x01(\rR\x18temporaryE\
    nabledFeatures\x12K\n\"rtime_temporary_feature_expiration\x18\x0e\x20\
    \x01(\rR\x1frtimeTemporaryFeatureExpiration\x12R\n\x15playtime_restricti\
    ons\x18\x0f\x20\x01(\x0b2\x1d.ParentalPlaytimeRestrictionsR\x14playtimeR\
    estrictions\x12n\n\x1ftemporary_playtime_restrictions\x18\x10\x20\x01(\
    \x0b2&.ParentalTemporaryPlaytimeRestrictionsR\x1dtemporaryPlaytimeRestri\
    ctions\"\xcd\x01\n(CParental_EnableParentalSettings_Request\x12\x1a\n\
    \x08password\x18\x01\x20\x01(\tR\x08password\x12-\n\x08settings\x18\x02\
    \x20\x01(\x0b2\x11.ParentalSettingsR\x08settings\x12\x1c\n\tsessionid\
    \x18\x03\x20\x01(\tR\tsessionid\x12\x1e\n\nenablecode\x18\x04\x20\x01(\r\
    R\nenablecode\x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\"+\n)C\
    Parental_EnableParentalSettings_Response\"a\n)CParental_DisableParentalS\
    ettings_Request\x12\x1a\n\x08password\x18\x01\x20\x01(\tR\x08password\
    \x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\",\n*CParental_Disa\
    bleParentalSettings_Response\"A\n%CParental_GetParentalSettings_Request\
    \x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\"W\n&CParental_GetP\
    arentalSettings_Response\x12-\n\x08settings\x18\x01\x20\x01(\x0b2\x11.Pa\
    rentalSettingsR\x08settings\"I\n+CParental_GetSignedParentalSettings_Req\
    uest\x12\x1a\n\x08priority\x18\x01\x20\x01(\rR\x08priority\"}\n,CParenta\
    l_GetSignedParentalSettings_Response\x12/\n\x13serialized_settings\x18\
    \x01\x20\x01(\x0cR\x12serializedSettings\x12\x1c\n\tsignature\x18\x02\
    \x20\x01(\x0cR\tsignature\"\xcd\x01\n%CParental_SetParentalSettings_Requ\
    est\x12\x1a\n\x08password\x18\x01\x20\x01(\tR\x08password\x12-\n\x08sett\
    ings\x18\x02\x20\x01(\x0b2\x11.ParentalSettingsR\x08settings\x12!\n\x0cn\
    ew_password\x18\x03\x20\x01(\tR\x0bnewPassword\x12\x1c\n\tsessionid\x18\
    \x04\x20\x01(\tR\tsessionid\x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07\
    steamid\"(\n&CParental_SetParentalSettings_Response\"D\n\x1fCParental_Va\
    lidateToken_Request\x12!\n\x0cunlock_token\x18\x01\x20\x01(\tR\x0bunlock\
    Token\"\"\n\x20CParental_ValidateToken_Response\"\x8f\x01\n\"CParental_V\
    alidatePassword_Request\x12\x1a\n\x08password\x18\x01\x20\x01(\tR\x08pas\
    sword\x12\x18\n\x07session\x18\x02\x20\x01(\tR\x07session\x123\n\x16send\
    _unlock_on_success\x18\x03\x20\x01(\x08R\x13sendUnlockOnSuccess\";\n#CPa\
    rental_ValidatePassword_Response\x12\x14\n\x05token\x18\x01\x20\x01(\tR\
    \x05token\"8\n\x1cCParental_LockClient_Request\x12\x18\n\x07session\x18\
    \x01\x20\x01(\tR\x07session\"\x1f\n\x1dCParental_LockClient_Response\"'\
    \n%CParental_RequestRecoveryCode_Request\"(\n&CParental_RequestRecoveryC\
    ode_Response\"j\n)CParental_DisableWithRecoveryCode_Request\x12#\n\rreco\
    very_code\x18\x01\x20\x01(\rR\x0crecoveryCode\x12\x18\n\x07steamid\x18\n\
    \x20\x01(\x06R\x07steamid\",\n*CParental_DisableWithRecoveryCode_Respons\
    e\"^\n&CParental_RequestFeatureAccess_Request\x12\x1a\n\x08features\x18\
    \x01\x20\x01(\rR\x08features\x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\
    \x07steamid\"G\n'CParental_RequestFeatureAccess_Response\x12\x1c\n\trequ\
    estid\x18\x01\x20\x01(\x06R\trequestid\"\xb2\x01\n&CParental_ApproveFeat\
    ureAccess_Request\x12\x18\n\x07approve\x18\x01\x20\x01(\x08R\x07approve\
    \x12\x1c\n\trequestid\x18\x02\x20\x01(\x06R\trequestid\x12\x1a\n\x08feat\
    ures\x18\x03\x20\x01(\rR\x08features\x12\x1a\n\x08duration\x18\x04\x20\
    \x01(\rR\x08duration\x12\x18\n\x07steamid\x18\n\x20\x01(\x06R\x07steamid\
    \")\n'CParental_ApproveFeatureAccess_Response\"\xba\x01\n!CParental_Requ\
    estPlaytime_Request\x12!\n\x0ctime_expires\x18\x01\x20\x01(\rR\x0btimeEx\
    pires\x12X\n\x1dcurrent_playtime_restrictions\x18\x02\x20\x01(\x0b2\x14.\
    ParentalPlaytimeDayR\x1bcurrentPlaytimeRestrictions\x12\x18\n\x07steamid\
    \x18\n\x20\x01(\x06R\x07steamid\"B\n\"CParental_RequestPlaytime_Response\
    \x12\x1c\n\trequestid\x18\x01\x20\x01(\x06R\trequestid\"\xd2\x01\n!CPare\
    ntal_ApprovePlaytime_Request\x12\x18\n\x07approve\x18\x01\x20\x01(\x08R\
    \x07approve\x12\x1c\n\trequestid\x18\x02\x20\x01(\x06R\trequestid\x12[\n\
    \x15restrictions_approved\x18\x03\x20\x01(\x0b2&.ParentalTemporaryPlayti\
    meRestrictionsR\x14restrictionsApproved\x12\x18\n\x07steamid\x18\n\x20\
    \x01(\x06R\x07steamid\"$\n\"CParental_ApprovePlaytime_Response\"v\n\x1dC\
    Parental_GetRequests_Request\x12;\n\x1art_include_completed_since\x18\
    \x01\x20\x01(\rR\x17rtIncludeCompletedSince\x12\x18\n\x07steamid\x18\n\
    \x20\x01(\x06R\x07steamid\"\xaa\x02\n\x16ParentalFeatureRequest\x12\x1c\
    \n\trequestid\x18\x01\x20\x01(\x06R\trequestid\x12%\n\x0efamily_groupid\
    \x18\x02\x20\x01(\x06R\rfamilyGroupid\x12\x18\n\x07steamid\x18\x03\x20\
    \x01(\x06R\x07steamid\x12\x1a\n\x08features\x18\x04\x20\x01(\rR\x08featu\
    res\x12%\n\x0etime_requested\x18\x05\x20\x01(\rR\rtimeRequested\x12\x1a\
    \n\x08approved\x18\x06\x20\x01(\x08R\x08approved\x12+\n\x11steamid_respo\
    nder\x18\x07\x20\x01(\x06R\x10steamidResponder\x12%\n\x0etime_responded\
    \x18\x08\x20\x01(\rR\rtimeResponded\"\xe9\x03\n\x17ParentalPlaytimeReque\
    st\x12\x1c\n\trequestid\x18\x01\x20\x01(\x06R\trequestid\x12%\n\x0efamil\
    y_groupid\x18\x02\x20\x01(\x06R\rfamilyGroupid\x12\x18\n\x07steamid\x18\
    \x03\x20\x01(\x06R\x07steamid\x12X\n\x1dcurrent_playtime_restrictions\
    \x18\x04\x20\x01(\x0b2\x14.ParentalPlaytimeDayR\x1bcurrentPlaytimeRestri\
    ctions\x12!\n\x0ctime_expires\x18\x05\x20\x01(\rR\x0btimeExpires\x12%\n\
    \x0etime_requested\x18\x06\x20\x01(\rR\rtimeRequested\x12\x1a\n\x08appro\
    ved\x18\x07\x20\x01(\x08R\x08approved\x12+\n\x11steamid_responder\x18\
    \x08\x20\x01(\x06R\x10steamidResponder\x12%\n\x0etime_responded\x18\t\
    \x20\x01(\rR\rtimeResponded\x12[\n\x15restrictions_approved\x18\n\x20\
    \x01(\x0b2&.ParentalTemporaryPlaytimeRestrictionsR\x14restrictionsApprov\
    ed\"\xab\x01\n\x1eCParental_GetRequests_Response\x12B\n\x10feature_reque\
    sts\x18\x01\x20\x03(\x0b2\x17.ParentalFeatureRequestR\x0ffeatureRequests\
    \x12E\n\x11playtime_requests\x18\x02\x20\x03(\x0b2\x18.ParentalPlaytimeR\
    equestR\x10playtimeRequests\"\x88\x01\n)CParental_ReportPlaytimeAndNotif\
    y_Request\x12\x1e\n\x0bday_of_week\x18\x01\x20\x01(\rR\tdayOfWeek\x12!\n\
    \x0cminutes_used\x18\x02\x20\x01(\rR\x0bminutesUsed\x12\x18\n\x07steamid\
    \x18\n\x20\x01(\x06R\x07steamid\",\n*CParental_ReportPlaytimeAndNotify_R\
    esponse\"\xb8\x01\n-CParental_ParentalSettingsChange_Notification\x12/\n\
    \x13serialized_settings\x18\x01\x20\x01(\x0cR\x12serializedSettings\x12\
    \x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12\x1a\n\x08password\
    \x18\x03\x20\x01(\tR\x08password\x12\x1c\n\tsessionid\x18\x04\x20\x01(\t\
    R\tsessionid\"a\n%CParental_ParentalUnlock_Notification\x12\x1a\n\x08pas\
    sword\x18\x01\x20\x01(\tR\x08password\x12\x1c\n\tsessionid\x18\x02\x20\
    \x01(\tR\tsessionid\"C\n#CParental_ParentalLock_Notification\x12\x1c\n\t\
    sessionid\x18\x01\x20\x01(\tR\tsessionid\"h\n#CParental_PlaytimeUsed_Not\
    ification\x12\x1e\n\x0bday_of_week\x18\x01\x20\x01(\rR\tdayOfWeek\x12!\n\
    \x0cminutes_used\x18\x02\x20\x01(\rR\x0bminutesUsed2\xe9\x0c\n\x08Parent\
    al\x12o\n\x16EnableParentalSettings\x12).CParental_EnableParentalSetting\
    s_Request\x1a*.CParental_EnableParentalSettings_Response\x12r\n\x17Disab\
    leParentalSettings\x12*.CParental_DisableParentalSettings_Request\x1a+.C\
    Parental_DisableParentalSettings_Response\x12f\n\x13GetParentalSettings\
    \x12&.CParental_GetParentalSettings_Request\x1a'.CParental_GetParentalSe\
    ttings_Response\x12x\n\x19GetSignedParentalSettings\x12,.CParental_GetSi\
    gnedParentalSettings_Request\x1a-.CParental_GetSignedParentalSettings_Re\
    sponse\x12f\n\x13SetParentalSettings\x12&.CParental_SetParentalSettings_\
    Request\x1a'.CParental_SetParentalSettings_Response\x12T\n\rValidateToke\
    n\x12\x20.CParental_ValidateToken_Request\x1a!.CParental_ValidateToken_R\
    esponse\x12]\n\x10ValidatePassword\x12#.CParental_ValidatePassword_Reque\
    st\x1a$.CParental_ValidatePassword_Response\x12K\n\nLockClient\x12\x1d.C\
    Parental_LockClient_Request\x1a\x1e.CParental_LockClient_Response\x12f\n\
    \x13RequestRecoveryCode\x12&.CParental_RequestRecoveryCode_Request\x1a'.\
    CParental_RequestRecoveryCode_Response\x12r\n\x17DisableWithRecoveryCode\
    \x12*.CParental_DisableWithRecoveryCode_Request\x1a+.CParental_DisableWi\
    thRecoveryCode_Response\x12i\n\x14RequestFeatureAccess\x12'.CParental_Re\
    questFeatureAccess_Request\x1a(.CParental_RequestFeatureAccess_Response\
    \x12i\n\x14ApproveFeatureAccess\x12'.CParental_ApproveFeatureAccess_Requ\
    est\x1a(.CParental_ApproveFeatureAccess_Response\x12Z\n\x0fRequestPlayti\
    me\x12\".CParental_RequestPlaytime_Request\x1a#.CParental_RequestPlaytim\
    e_Response\x12Z\n\x0fApprovePlaytime\x12\".CParental_ApprovePlaytime_Req\
    uest\x1a#.CParental_ApprovePlaytime_Response\x12N\n\x0bGetRequests\x12\
    \x1e.CParental_GetRequests_Request\x1a\x1f.CParental_GetRequests_Respons\
    e\x12r\n\x17ReportPlaytimeAndNotify\x12*.CParental_ReportPlaytimeAndNoti\
    fy_Request\x1a+.CParental_ReportPlaytimeAndNotify_Response2\xba\x02\n\
    \x0eParentalClient\x12S\n\x14NotifySettingsChange\x12..CParental_Parenta\
    lSettingsChange_Notification\x1a\x0b.NoResponse\x12C\n\x0cNotifyUnlock\
    \x12&.CParental_ParentalUnlock_Notification\x1a\x0b.NoResponse\x12?\n\nN\
    otifyLock\x12$.CParental_ParentalLock_Notification\x1a\x0b.NoResponse\
    \x12G\n\x12NotifyPlaytimeUsed\x12$.CParental_PlaytimeUsed_Notification\
    \x1a\x0b.NoResponse\x1a\x04\xc0\xb5\x18\x02B\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(43);
            messages.push(ParentalApp::generated_message_descriptor_data());
            messages.push(ParentalPlaytimeDay::generated_message_descriptor_data());
            messages.push(ParentalPlaytimeRestrictions::generated_message_descriptor_data());
            messages.push(ParentalTemporaryPlaytimeRestrictions::generated_message_descriptor_data());
            messages.push(ParentalSettings::generated_message_descriptor_data());
            messages.push(CParental_EnableParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_EnableParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_DisableParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_DisableParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_GetParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_GetParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_GetSignedParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_GetSignedParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_SetParentalSettings_Request::generated_message_descriptor_data());
            messages.push(CParental_SetParentalSettings_Response::generated_message_descriptor_data());
            messages.push(CParental_ValidateToken_Request::generated_message_descriptor_data());
            messages.push(CParental_ValidateToken_Response::generated_message_descriptor_data());
            messages.push(CParental_ValidatePassword_Request::generated_message_descriptor_data());
            messages.push(CParental_ValidatePassword_Response::generated_message_descriptor_data());
            messages.push(CParental_LockClient_Request::generated_message_descriptor_data());
            messages.push(CParental_LockClient_Response::generated_message_descriptor_data());
            messages.push(CParental_RequestRecoveryCode_Request::generated_message_descriptor_data());
            messages.push(CParental_RequestRecoveryCode_Response::generated_message_descriptor_data());
            messages.push(CParental_DisableWithRecoveryCode_Request::generated_message_descriptor_data());
            messages.push(CParental_DisableWithRecoveryCode_Response::generated_message_descriptor_data());
            messages.push(CParental_RequestFeatureAccess_Request::generated_message_descriptor_data());
            messages.push(CParental_RequestFeatureAccess_Response::generated_message_descriptor_data());
            messages.push(CParental_ApproveFeatureAccess_Request::generated_message_descriptor_data());
            messages.push(CParental_ApproveFeatureAccess_Response::generated_message_descriptor_data());
            messages.push(CParental_RequestPlaytime_Request::generated_message_descriptor_data());
            messages.push(CParental_RequestPlaytime_Response::generated_message_descriptor_data());
            messages.push(CParental_ApprovePlaytime_Request::generated_message_descriptor_data());
            messages.push(CParental_ApprovePlaytime_Response::generated_message_descriptor_data());
            messages.push(CParental_GetRequests_Request::generated_message_descriptor_data());
            messages.push(ParentalFeatureRequest::generated_message_descriptor_data());
            messages.push(ParentalPlaytimeRequest::generated_message_descriptor_data());
            messages.push(CParental_GetRequests_Response::generated_message_descriptor_data());
            messages.push(CParental_ReportPlaytimeAndNotify_Request::generated_message_descriptor_data());
            messages.push(CParental_ReportPlaytimeAndNotify_Response::generated_message_descriptor_data());
            messages.push(CParental_ParentalSettingsChange_Notification::generated_message_descriptor_data());
            messages.push(CParental_ParentalUnlock_Notification::generated_message_descriptor_data());
            messages.push(CParental_ParentalLock_Notification::generated_message_descriptor_data());
            messages.push(CParental_PlaytimeUsed_Notification::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
