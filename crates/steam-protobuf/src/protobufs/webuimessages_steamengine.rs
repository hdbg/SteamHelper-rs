// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_steamengine.proto`

// @@protoc_insertion_point(message:CSteamEngine_UpdateTextFilterDictionary_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamEngine_UpdateTextFilterDictionary_Notification {
    // message fields
    // @@protoc_insertion_point(field:CSteamEngine_UpdateTextFilterDictionary_Notification.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSteamEngine_UpdateTextFilterDictionary_Notification.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamEngine_UpdateTextFilterDictionary_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamEngine_UpdateTextFilterDictionary_Notification {
    fn default() -> &'a CSteamEngine_UpdateTextFilterDictionary_Notification {
        <CSteamEngine_UpdateTextFilterDictionary_Notification as crate::Message>::default_instance()
    }
}

impl CSteamEngine_UpdateTextFilterDictionary_Notification {
    pub fn new() -> CSteamEngine_UpdateTextFilterDictionary_Notification {
        ::std::default::Default::default()
    }

    // required string language = 1;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string type = 2;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CSteamEngine_UpdateTextFilterDictionary_Notification| { &m.language },
            |m: &mut CSteamEngine_UpdateTextFilterDictionary_Notification| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CSteamEngine_UpdateTextFilterDictionary_Notification| { &m.type_ },
            |m: &mut CSteamEngine_UpdateTextFilterDictionary_Notification| { &mut m.type_ },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamEngine_UpdateTextFilterDictionary_Notification>(
            "CSteamEngine_UpdateTextFilterDictionary_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamEngine_UpdateTextFilterDictionary_Notification {
    const NAME: &'static str = "CSteamEngine_UpdateTextFilterDictionary_Notification";

    fn is_initialized(&self) -> bool {
        if self.language.is_none() {
            return false;
        }
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.language.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamEngine_UpdateTextFilterDictionary_Notification {
        CSteamEngine_UpdateTextFilterDictionary_Notification::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamEngine_UpdateTextFilterDictionary_Notification {
        static instance: CSteamEngine_UpdateTextFilterDictionary_Notification = CSteamEngine_UpdateTextFilterDictionary_Notification {
            language: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamEngine_UpdateTextFilterDictionary_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamEngine_UpdateTextFilterDictionary_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamEngine_UpdateTextFilterDictionary_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamEngine_UpdateTextFilterDictionary_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamEngine_GetTextFilterDictionary_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamEngine_GetTextFilterDictionary_Request {
    // message fields
    // @@protoc_insertion_point(field:CSteamEngine_GetTextFilterDictionary_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSteamEngine_GetTextFilterDictionary_Request.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamEngine_GetTextFilterDictionary_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamEngine_GetTextFilterDictionary_Request {
    fn default() -> &'a CSteamEngine_GetTextFilterDictionary_Request {
        <CSteamEngine_GetTextFilterDictionary_Request as crate::Message>::default_instance()
    }
}

impl CSteamEngine_GetTextFilterDictionary_Request {
    pub fn new() -> CSteamEngine_GetTextFilterDictionary_Request {
        ::std::default::Default::default()
    }

    // required string language = 1;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string type = 2;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CSteamEngine_GetTextFilterDictionary_Request| { &m.language },
            |m: &mut CSteamEngine_GetTextFilterDictionary_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CSteamEngine_GetTextFilterDictionary_Request| { &m.type_ },
            |m: &mut CSteamEngine_GetTextFilterDictionary_Request| { &mut m.type_ },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamEngine_GetTextFilterDictionary_Request>(
            "CSteamEngine_GetTextFilterDictionary_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamEngine_GetTextFilterDictionary_Request {
    const NAME: &'static str = "CSteamEngine_GetTextFilterDictionary_Request";

    fn is_initialized(&self) -> bool {
        if self.language.is_none() {
            return false;
        }
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.language.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamEngine_GetTextFilterDictionary_Request {
        CSteamEngine_GetTextFilterDictionary_Request::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamEngine_GetTextFilterDictionary_Request {
        static instance: CSteamEngine_GetTextFilterDictionary_Request = CSteamEngine_GetTextFilterDictionary_Request {
            language: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamEngine_GetTextFilterDictionary_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamEngine_GetTextFilterDictionary_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamEngine_GetTextFilterDictionary_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamEngine_GetTextFilterDictionary_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamEngine_GetTextFilterDictionary_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamEngine_GetTextFilterDictionary_Response {
    // message fields
    // @@protoc_insertion_point(field:CSteamEngine_GetTextFilterDictionary_Response.dictionary)
    pub dictionary: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamEngine_GetTextFilterDictionary_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamEngine_GetTextFilterDictionary_Response {
    fn default() -> &'a CSteamEngine_GetTextFilterDictionary_Response {
        <CSteamEngine_GetTextFilterDictionary_Response as crate::Message>::default_instance()
    }
}

impl CSteamEngine_GetTextFilterDictionary_Response {
    pub fn new() -> CSteamEngine_GetTextFilterDictionary_Response {
        ::std::default::Default::default()
    }

    // optional string dictionary = 1;

    pub fn dictionary(&self) -> &str {
        match self.dictionary.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_dictionary(&mut self) {
        self.dictionary = ::std::option::Option::None;
    }

    pub fn has_dictionary(&self) -> bool {
        self.dictionary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dictionary(&mut self, v: ::std::string::String) {
        self.dictionary = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dictionary(&mut self) -> &mut ::std::string::String {
        if self.dictionary.is_none() {
            self.dictionary = ::std::option::Option::Some(::std::string::String::new());
        }
        self.dictionary.as_mut().unwrap()
    }

    // Take field
    pub fn take_dictionary(&mut self) -> ::std::string::String {
        self.dictionary.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "dictionary",
            |m: &CSteamEngine_GetTextFilterDictionary_Response| { &m.dictionary },
            |m: &mut CSteamEngine_GetTextFilterDictionary_Response| { &mut m.dictionary },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamEngine_GetTextFilterDictionary_Response>(
            "CSteamEngine_GetTextFilterDictionary_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamEngine_GetTextFilterDictionary_Response {
    const NAME: &'static str = "CSteamEngine_GetTextFilterDictionary_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dictionary = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.dictionary.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.dictionary.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamEngine_GetTextFilterDictionary_Response {
        CSteamEngine_GetTextFilterDictionary_Response::new()
    }

    fn clear(&mut self) {
        self.dictionary = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamEngine_GetTextFilterDictionary_Response {
        static instance: CSteamEngine_GetTextFilterDictionary_Response = CSteamEngine_GetTextFilterDictionary_Response {
            dictionary: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamEngine_GetTextFilterDictionary_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamEngine_GetTextFilterDictionary_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamEngine_GetTextFilterDictionary_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamEngine_GetTextFilterDictionary_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamEngine_TextFilterDictionaryChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamEngine_TextFilterDictionaryChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CSteamEngine_TextFilterDictionaryChanged_Notification.language)
    pub language: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSteamEngine_TextFilterDictionaryChanged_Notification.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamEngine_TextFilterDictionaryChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamEngine_TextFilterDictionaryChanged_Notification {
    fn default() -> &'a CSteamEngine_TextFilterDictionaryChanged_Notification {
        <CSteamEngine_TextFilterDictionaryChanged_Notification as crate::Message>::default_instance()
    }
}

impl CSteamEngine_TextFilterDictionaryChanged_Notification {
    pub fn new() -> CSteamEngine_TextFilterDictionaryChanged_Notification {
        ::std::default::Default::default()
    }

    // required string language = 1;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string type = 2;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CSteamEngine_TextFilterDictionaryChanged_Notification| { &m.language },
            |m: &mut CSteamEngine_TextFilterDictionaryChanged_Notification| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CSteamEngine_TextFilterDictionaryChanged_Notification| { &m.type_ },
            |m: &mut CSteamEngine_TextFilterDictionaryChanged_Notification| { &mut m.type_ },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamEngine_TextFilterDictionaryChanged_Notification>(
            "CSteamEngine_TextFilterDictionaryChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamEngine_TextFilterDictionaryChanged_Notification {
    const NAME: &'static str = "CSteamEngine_TextFilterDictionaryChanged_Notification";

    fn is_initialized(&self) -> bool {
        if self.language.is_none() {
            return false;
        }
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.language.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamEngine_TextFilterDictionaryChanged_Notification {
        CSteamEngine_TextFilterDictionaryChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamEngine_TextFilterDictionaryChanged_Notification {
        static instance: CSteamEngine_TextFilterDictionaryChanged_Notification = CSteamEngine_TextFilterDictionaryChanged_Notification {
            language: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamEngine_TextFilterDictionaryChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamEngine_TextFilterDictionaryChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamEngine_TextFilterDictionaryChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamEngine_TextFilterDictionaryChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamEngine_GetGameIDForPID_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamEngine_GetGameIDForPID_Request {
    // message fields
    // @@protoc_insertion_point(field:CSteamEngine_GetGameIDForPID_Request.pid)
    pub pid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamEngine_GetGameIDForPID_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamEngine_GetGameIDForPID_Request {
    fn default() -> &'a CSteamEngine_GetGameIDForPID_Request {
        <CSteamEngine_GetGameIDForPID_Request as crate::Message>::default_instance()
    }
}

impl CSteamEngine_GetGameIDForPID_Request {
    pub fn new() -> CSteamEngine_GetGameIDForPID_Request {
        ::std::default::Default::default()
    }

    // optional uint32 pid = 1;

    pub fn pid(&self) -> u32 {
        self.pid.unwrap_or(0)
    }

    pub fn clear_pid(&mut self) {
        self.pid = ::std::option::Option::None;
    }

    pub fn has_pid(&self) -> bool {
        self.pid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pid",
            |m: &CSteamEngine_GetGameIDForPID_Request| { &m.pid },
            |m: &mut CSteamEngine_GetGameIDForPID_Request| { &mut m.pid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamEngine_GetGameIDForPID_Request>(
            "CSteamEngine_GetGameIDForPID_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamEngine_GetGameIDForPID_Request {
    const NAME: &'static str = "CSteamEngine_GetGameIDForPID_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.pid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamEngine_GetGameIDForPID_Request {
        CSteamEngine_GetGameIDForPID_Request::new()
    }

    fn clear(&mut self) {
        self.pid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamEngine_GetGameIDForPID_Request {
        static instance: CSteamEngine_GetGameIDForPID_Request = CSteamEngine_GetGameIDForPID_Request {
            pid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamEngine_GetGameIDForPID_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamEngine_GetGameIDForPID_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamEngine_GetGameIDForPID_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamEngine_GetGameIDForPID_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamEngine_GetGameIDForPID_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamEngine_GetGameIDForPID_Response {
    // message fields
    // @@protoc_insertion_point(field:CSteamEngine_GetGameIDForPID_Response.gameid)
    pub gameid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamEngine_GetGameIDForPID_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamEngine_GetGameIDForPID_Response {
    fn default() -> &'a CSteamEngine_GetGameIDForPID_Response {
        <CSteamEngine_GetGameIDForPID_Response as crate::Message>::default_instance()
    }
}

impl CSteamEngine_GetGameIDForPID_Response {
    pub fn new() -> CSteamEngine_GetGameIDForPID_Response {
        ::std::default::Default::default()
    }

    // optional uint64 gameid = 1;

    pub fn gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameid",
            |m: &CSteamEngine_GetGameIDForPID_Response| { &m.gameid },
            |m: &mut CSteamEngine_GetGameIDForPID_Response| { &mut m.gameid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamEngine_GetGameIDForPID_Response>(
            "CSteamEngine_GetGameIDForPID_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamEngine_GetGameIDForPID_Response {
    const NAME: &'static str = "CSteamEngine_GetGameIDForPID_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gameid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.gameid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamEngine_GetGameIDForPID_Response {
        CSteamEngine_GetGameIDForPID_Response::new()
    }

    fn clear(&mut self) {
        self.gameid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamEngine_GetGameIDForPID_Response {
        static instance: CSteamEngine_GetGameIDForPID_Response = CSteamEngine_GetGameIDForPID_Response {
            gameid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamEngine_GetGameIDForPID_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamEngine_GetGameIDForPID_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamEngine_GetGameIDForPID_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamEngine_GetGameIDForPID_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fwebuimessages_steamengine.proto\x1a\x18steammessages_base.proto\
    \x1a\x18webuimessages_base.proto\"f\n4CSteamEngine_UpdateTextFilterDicti\
    onary_Notification\x12\x1a\n\x08language\x18\x01\x20\x02(\tR\x08language\
    \x12\x12\n\x04type\x18\x02\x20\x02(\tR\x04type\"^\n,CSteamEngine_GetText\
    FilterDictionary_Request\x12\x1a\n\x08language\x18\x01\x20\x02(\tR\x08la\
    nguage\x12\x12\n\x04type\x18\x02\x20\x02(\tR\x04type\"O\n-CSteamEngine_G\
    etTextFilterDictionary_Response\x12\x1e\n\ndictionary\x18\x01\x20\x01(\t\
    R\ndictionary\"g\n5CSteamEngine_TextFilterDictionaryChanged_Notification\
    \x12\x1a\n\x08language\x18\x01\x20\x02(\tR\x08language\x12\x12\n\x04type\
    \x18\x02\x20\x02(\tR\x04type\"8\n$CSteamEngine_GetGameIDForPID_Request\
    \x12\x10\n\x03pid\x18\x01\x20\x01(\rR\x03pid\"?\n%CSteamEngine_GetGameID\
    ForPID_Response\x12\x16\n\x06gameid\x18\x01\x20\x01(\x04R\x06gameid2\xc5\
    \x03\n\x0bSteamEngine\x12e\n\x1aUpdateTextFilterDictionary\x125.CSteamEn\
    gine_UpdateTextFilterDictionary_Notification\x1a\x10.WebUINoResponse\x12\
    x\n\x17GetTextFilterDictionary\x12-.CSteamEngine_GetTextFilterDictionary\
    _Request\x1a..CSteamEngine_GetTextFilterDictionary_Response\x12m\n!Notif\
    yTextFilterDictionaryChanged\x126.CSteamEngine_TextFilterDictionaryChang\
    ed_Notification\x1a\x10.WebUINoResponse\x12`\n\x0fGetGameIDForPID\x12%.C\
    SteamEngine_GetGameIDForPID_Request\x1a&.CSteamEngine_GetGameIDForPID_Re\
    sponse\x1a\x04\x80\x97\"\x02B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CSteamEngine_UpdateTextFilterDictionary_Notification::generated_message_descriptor_data());
            messages.push(CSteamEngine_GetTextFilterDictionary_Request::generated_message_descriptor_data());
            messages.push(CSteamEngine_GetTextFilterDictionary_Response::generated_message_descriptor_data());
            messages.push(CSteamEngine_TextFilterDictionaryChanged_Notification::generated_message_descriptor_data());
            messages.push(CSteamEngine_GetGameIDForPID_Request::generated_message_descriptor_data());
            messages.push(CSteamEngine_GetGameIDForPID_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
