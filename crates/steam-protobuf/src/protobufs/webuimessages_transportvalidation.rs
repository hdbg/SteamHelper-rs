// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_transportvalidation.proto`

// @@protoc_insertion_point(message:CTransportValidation_AppendToString_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AppendToString_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AppendToString_Request.append_strings)
    pub append_strings: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AppendToString_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AppendToString_Request {
    fn default() -> &'a CTransportValidation_AppendToString_Request {
        <CTransportValidation_AppendToString_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_AppendToString_Request {
    pub fn new() -> CTransportValidation_AppendToString_Request {
        ::std::default::Default::default()
    }

    // repeated string append_strings = 1;

    pub fn append_strings(&self) -> &[::std::string::String] {
        &self.append_strings
    }

    pub fn clear_append_strings(&mut self) {
        self.append_strings.clear();
    }

    // Param is passed by value, moved
    pub fn set_append_strings(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.append_strings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_append_strings(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.append_strings
    }

    // Take field
    pub fn take_append_strings(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.append_strings, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "append_strings",
            |m: &CTransportValidation_AppendToString_Request| { &m.append_strings },
            |m: &mut CTransportValidation_AppendToString_Request| { &mut m.append_strings },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_AppendToString_Request>(
            "CTransportValidation_AppendToString_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_AppendToString_Request {
    const NAME: &'static str = "CTransportValidation_AppendToString_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.append_strings.push(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.append_strings {
            my_size += crate::rt::string_size(1, &value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.append_strings {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AppendToString_Request {
        CTransportValidation_AppendToString_Request::new()
    }

    fn clear(&mut self) {
        self.append_strings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AppendToString_Request {
        static instance: CTransportValidation_AppendToString_Request = CTransportValidation_AppendToString_Request {
            append_strings: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_AppendToString_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_AppendToString_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_AppendToString_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_AppendToString_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_AppendToString_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AppendToString_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AppendToString_Response.combined_text)
    pub combined_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AppendToString_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AppendToString_Response {
    fn default() -> &'a CTransportValidation_AppendToString_Response {
        <CTransportValidation_AppendToString_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_AppendToString_Response {
    pub fn new() -> CTransportValidation_AppendToString_Response {
        ::std::default::Default::default()
    }

    // optional string combined_text = 1;

    pub fn combined_text(&self) -> &str {
        match self.combined_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_combined_text(&mut self) {
        self.combined_text = ::std::option::Option::None;
    }

    pub fn has_combined_text(&self) -> bool {
        self.combined_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_combined_text(&mut self, v: ::std::string::String) {
        self.combined_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_combined_text(&mut self) -> &mut ::std::string::String {
        if self.combined_text.is_none() {
            self.combined_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.combined_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_combined_text(&mut self) -> ::std::string::String {
        self.combined_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "combined_text",
            |m: &CTransportValidation_AppendToString_Response| { &m.combined_text },
            |m: &mut CTransportValidation_AppendToString_Response| { &mut m.combined_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_AppendToString_Response>(
            "CTransportValidation_AppendToString_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_AppendToString_Response {
    const NAME: &'static str = "CTransportValidation_AppendToString_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.combined_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.combined_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.combined_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AppendToString_Response {
        CTransportValidation_AppendToString_Response::new()
    }

    fn clear(&mut self) {
        self.combined_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AppendToString_Response {
        static instance: CTransportValidation_AppendToString_Response = CTransportValidation_AppendToString_Response {
            combined_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_AppendToString_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_AppendToString_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_AppendToString_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_AppendToString_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_NotifyText_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifyText_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifyText_Notification.text)
    pub text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifyText_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifyText_Notification {
    fn default() -> &'a CTransportValidation_NotifyText_Notification {
        <CTransportValidation_NotifyText_Notification as crate::Message>::default_instance()
    }
}

impl CTransportValidation_NotifyText_Notification {
    pub fn new() -> CTransportValidation_NotifyText_Notification {
        ::std::default::Default::default()
    }

    // optional string text = 1;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &CTransportValidation_NotifyText_Notification| { &m.text },
            |m: &mut CTransportValidation_NotifyText_Notification| { &mut m.text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_NotifyText_Notification>(
            "CTransportValidation_NotifyText_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_NotifyText_Notification {
    const NAME: &'static str = "CTransportValidation_NotifyText_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifyText_Notification {
        CTransportValidation_NotifyText_Notification::new()
    }

    fn clear(&mut self) {
        self.text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifyText_Notification {
        static instance: CTransportValidation_NotifyText_Notification = CTransportValidation_NotifyText_Notification {
            text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_NotifyText_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_NotifyText_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_NotifyText_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_NotifyText_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_NotifyNumber_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifyNumber_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifyNumber_Notification.number)
    pub number: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifyNumber_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifyNumber_Notification {
    fn default() -> &'a CTransportValidation_NotifyNumber_Notification {
        <CTransportValidation_NotifyNumber_Notification as crate::Message>::default_instance()
    }
}

impl CTransportValidation_NotifyNumber_Notification {
    pub fn new() -> CTransportValidation_NotifyNumber_Notification {
        ::std::default::Default::default()
    }

    // optional int32 number = 1;

    pub fn number(&self) -> i32 {
        self.number.unwrap_or(0)
    }

    pub fn clear_number(&mut self) {
        self.number = ::std::option::Option::None;
    }

    pub fn has_number(&self) -> bool {
        self.number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: i32) {
        self.number = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "number",
            |m: &CTransportValidation_NotifyNumber_Notification| { &m.number },
            |m: &mut CTransportValidation_NotifyNumber_Notification| { &mut m.number },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_NotifyNumber_Notification>(
            "CTransportValidation_NotifyNumber_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_NotifyNumber_Notification {
    const NAME: &'static str = "CTransportValidation_NotifyNumber_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.number {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.number {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifyNumber_Notification {
        CTransportValidation_NotifyNumber_Notification::new()
    }

    fn clear(&mut self) {
        self.number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifyNumber_Notification {
        static instance: CTransportValidation_NotifyNumber_Notification = CTransportValidation_NotifyNumber_Notification {
            number: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_NotifyNumber_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_NotifyNumber_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_NotifyNumber_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_NotifyNumber_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_GetLastNotifyNumber_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_GetLastNotifyNumber_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_GetLastNotifyNumber_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_GetLastNotifyNumber_Request {
    fn default() -> &'a CTransportValidation_GetLastNotifyNumber_Request {
        <CTransportValidation_GetLastNotifyNumber_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_GetLastNotifyNumber_Request {
    pub fn new() -> CTransportValidation_GetLastNotifyNumber_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_GetLastNotifyNumber_Request>(
            "CTransportValidation_GetLastNotifyNumber_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_GetLastNotifyNumber_Request {
    const NAME: &'static str = "CTransportValidation_GetLastNotifyNumber_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_GetLastNotifyNumber_Request {
        CTransportValidation_GetLastNotifyNumber_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_GetLastNotifyNumber_Request {
        static instance: CTransportValidation_GetLastNotifyNumber_Request = CTransportValidation_GetLastNotifyNumber_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_GetLastNotifyNumber_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_GetLastNotifyNumber_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_GetLastNotifyNumber_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_GetLastNotifyNumber_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_GetLastNotifyNumber_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_GetLastNotifyNumber_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_GetLastNotifyNumber_Response.last_notify_number)
    pub last_notify_number: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_GetLastNotifyNumber_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_GetLastNotifyNumber_Response {
    fn default() -> &'a CTransportValidation_GetLastNotifyNumber_Response {
        <CTransportValidation_GetLastNotifyNumber_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_GetLastNotifyNumber_Response {
    pub fn new() -> CTransportValidation_GetLastNotifyNumber_Response {
        ::std::default::Default::default()
    }

    // optional int32 last_notify_number = 1;

    pub fn last_notify_number(&self) -> i32 {
        self.last_notify_number.unwrap_or(0)
    }

    pub fn clear_last_notify_number(&mut self) {
        self.last_notify_number = ::std::option::Option::None;
    }

    pub fn has_last_notify_number(&self) -> bool {
        self.last_notify_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_notify_number(&mut self, v: i32) {
        self.last_notify_number = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_notify_number",
            |m: &CTransportValidation_GetLastNotifyNumber_Response| { &m.last_notify_number },
            |m: &mut CTransportValidation_GetLastNotifyNumber_Response| { &mut m.last_notify_number },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_GetLastNotifyNumber_Response>(
            "CTransportValidation_GetLastNotifyNumber_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_GetLastNotifyNumber_Response {
    const NAME: &'static str = "CTransportValidation_GetLastNotifyNumber_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.last_notify_number = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.last_notify_number {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.last_notify_number {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_GetLastNotifyNumber_Response {
        CTransportValidation_GetLastNotifyNumber_Response::new()
    }

    fn clear(&mut self) {
        self.last_notify_number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_GetLastNotifyNumber_Response {
        static instance: CTransportValidation_GetLastNotifyNumber_Response = CTransportValidation_GetLastNotifyNumber_Response {
            last_notify_number: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_GetLastNotifyNumber_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_GetLastNotifyNumber_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_GetLastNotifyNumber_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_GetLastNotifyNumber_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerSyntheticEvents_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerSyntheticEvents_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_TriggerSyntheticEvents_Request.count)
    pub count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerSyntheticEvents_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerSyntheticEvents_Request {
    fn default() -> &'a CTransportValidation_TriggerSyntheticEvents_Request {
        <CTransportValidation_TriggerSyntheticEvents_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerSyntheticEvents_Request {
    pub fn new() -> CTransportValidation_TriggerSyntheticEvents_Request {
        ::std::default::Default::default()
    }

    // optional int32 count = 1;

    pub fn count(&self) -> i32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CTransportValidation_TriggerSyntheticEvents_Request| { &m.count },
            |m: &mut CTransportValidation_TriggerSyntheticEvents_Request| { &mut m.count },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_TriggerSyntheticEvents_Request>(
            "CTransportValidation_TriggerSyntheticEvents_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_TriggerSyntheticEvents_Request {
    const NAME: &'static str = "CTransportValidation_TriggerSyntheticEvents_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.count {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.count {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerSyntheticEvents_Request {
        CTransportValidation_TriggerSyntheticEvents_Request::new()
    }

    fn clear(&mut self) {
        self.count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerSyntheticEvents_Request {
        static instance: CTransportValidation_TriggerSyntheticEvents_Request = CTransportValidation_TriggerSyntheticEvents_Request {
            count: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_TriggerSyntheticEvents_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_TriggerSyntheticEvents_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_TriggerSyntheticEvents_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_TriggerSyntheticEvents_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerSyntheticEvents_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerSyntheticEvents_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerSyntheticEvents_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerSyntheticEvents_Response {
    fn default() -> &'a CTransportValidation_TriggerSyntheticEvents_Response {
        <CTransportValidation_TriggerSyntheticEvents_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerSyntheticEvents_Response {
    pub fn new() -> CTransportValidation_TriggerSyntheticEvents_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_TriggerSyntheticEvents_Response>(
            "CTransportValidation_TriggerSyntheticEvents_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_TriggerSyntheticEvents_Response {
    const NAME: &'static str = "CTransportValidation_TriggerSyntheticEvents_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerSyntheticEvents_Response {
        CTransportValidation_TriggerSyntheticEvents_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerSyntheticEvents_Response {
        static instance: CTransportValidation_TriggerSyntheticEvents_Response = CTransportValidation_TriggerSyntheticEvents_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_TriggerSyntheticEvents_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_TriggerSyntheticEvents_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_TriggerSyntheticEvents_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_TriggerSyntheticEvents_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_NotifySyntheticEvent_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifySyntheticEvent_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifySyntheticEvent_Notification.sequence)
    pub sequence: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifySyntheticEvent_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifySyntheticEvent_Notification {
    fn default() -> &'a CTransportValidation_NotifySyntheticEvent_Notification {
        <CTransportValidation_NotifySyntheticEvent_Notification as crate::Message>::default_instance()
    }
}

impl CTransportValidation_NotifySyntheticEvent_Notification {
    pub fn new() -> CTransportValidation_NotifySyntheticEvent_Notification {
        ::std::default::Default::default()
    }

    // optional int32 sequence = 1;

    pub fn sequence(&self) -> i32 {
        self.sequence.unwrap_or(0)
    }

    pub fn clear_sequence(&mut self) {
        self.sequence = ::std::option::Option::None;
    }

    pub fn has_sequence(&self) -> bool {
        self.sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: i32) {
        self.sequence = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sequence",
            |m: &CTransportValidation_NotifySyntheticEvent_Notification| { &m.sequence },
            |m: &mut CTransportValidation_NotifySyntheticEvent_Notification| { &mut m.sequence },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_NotifySyntheticEvent_Notification>(
            "CTransportValidation_NotifySyntheticEvent_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_NotifySyntheticEvent_Notification {
    const NAME: &'static str = "CTransportValidation_NotifySyntheticEvent_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequence = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sequence {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sequence {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifySyntheticEvent_Notification {
        CTransportValidation_NotifySyntheticEvent_Notification::new()
    }

    fn clear(&mut self) {
        self.sequence = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifySyntheticEvent_Notification {
        static instance: CTransportValidation_NotifySyntheticEvent_Notification = CTransportValidation_NotifySyntheticEvent_Notification {
            sequence: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_NotifySyntheticEvent_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_NotifySyntheticEvent_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_NotifySyntheticEvent_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_NotifySyntheticEvent_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerDataRequest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerDataRequest_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerDataRequest_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerDataRequest_Request {
    fn default() -> &'a CTransportValidation_TriggerDataRequest_Request {
        <CTransportValidation_TriggerDataRequest_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerDataRequest_Request {
    pub fn new() -> CTransportValidation_TriggerDataRequest_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_TriggerDataRequest_Request>(
            "CTransportValidation_TriggerDataRequest_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_TriggerDataRequest_Request {
    const NAME: &'static str = "CTransportValidation_TriggerDataRequest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerDataRequest_Request {
        CTransportValidation_TriggerDataRequest_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerDataRequest_Request {
        static instance: CTransportValidation_TriggerDataRequest_Request = CTransportValidation_TriggerDataRequest_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_TriggerDataRequest_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_TriggerDataRequest_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_TriggerDataRequest_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_TriggerDataRequest_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerDataRequest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerDataRequest_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_TriggerDataRequest_Response.data)
    pub data: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerDataRequest_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerDataRequest_Response {
    fn default() -> &'a CTransportValidation_TriggerDataRequest_Response {
        <CTransportValidation_TriggerDataRequest_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerDataRequest_Response {
    pub fn new() -> CTransportValidation_TriggerDataRequest_Response {
        ::std::default::Default::default()
    }

    // optional int32 data = 1;

    pub fn data(&self) -> i32 {
        self.data.unwrap_or(0)
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: i32) {
        self.data = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &CTransportValidation_TriggerDataRequest_Response| { &m.data },
            |m: &mut CTransportValidation_TriggerDataRequest_Response| { &mut m.data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_TriggerDataRequest_Response>(
            "CTransportValidation_TriggerDataRequest_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_TriggerDataRequest_Response {
    const NAME: &'static str = "CTransportValidation_TriggerDataRequest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.data = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.data {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerDataRequest_Response {
        CTransportValidation_TriggerDataRequest_Response::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerDataRequest_Response {
        static instance: CTransportValidation_TriggerDataRequest_Response = CTransportValidation_TriggerDataRequest_Response {
            data: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_TriggerDataRequest_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_TriggerDataRequest_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_TriggerDataRequest_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_TriggerDataRequest_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_DataRequest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_DataRequest_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_DataRequest_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_DataRequest_Request {
    fn default() -> &'a CTransportValidation_DataRequest_Request {
        <CTransportValidation_DataRequest_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_DataRequest_Request {
    pub fn new() -> CTransportValidation_DataRequest_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_DataRequest_Request>(
            "CTransportValidation_DataRequest_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_DataRequest_Request {
    const NAME: &'static str = "CTransportValidation_DataRequest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_DataRequest_Request {
        CTransportValidation_DataRequest_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_DataRequest_Request {
        static instance: CTransportValidation_DataRequest_Request = CTransportValidation_DataRequest_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_DataRequest_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_DataRequest_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_DataRequest_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_DataRequest_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_DataRequest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_DataRequest_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_DataRequest_Response.data)
    pub data: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_DataRequest_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_DataRequest_Response {
    fn default() -> &'a CTransportValidation_DataRequest_Response {
        <CTransportValidation_DataRequest_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_DataRequest_Response {
    pub fn new() -> CTransportValidation_DataRequest_Response {
        ::std::default::Default::default()
    }

    // optional int32 data = 1;

    pub fn data(&self) -> i32 {
        self.data.unwrap_or(0)
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: i32) {
        self.data = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &CTransportValidation_DataRequest_Response| { &m.data },
            |m: &mut CTransportValidation_DataRequest_Response| { &mut m.data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_DataRequest_Response>(
            "CTransportValidation_DataRequest_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_DataRequest_Response {
    const NAME: &'static str = "CTransportValidation_DataRequest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.data = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.data {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_DataRequest_Response {
        CTransportValidation_DataRequest_Response::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_DataRequest_Response {
        static instance: CTransportValidation_DataRequest_Response = CTransportValidation_DataRequest_Response {
            data: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_DataRequest_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_DataRequest_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_DataRequest_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_DataRequest_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_AddNumbers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AddNumbers_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AddNumbers_Request.numbers)
    pub numbers: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AddNumbers_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AddNumbers_Request {
    fn default() -> &'a CTransportValidation_AddNumbers_Request {
        <CTransportValidation_AddNumbers_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_AddNumbers_Request {
    pub fn new() -> CTransportValidation_AddNumbers_Request {
        ::std::default::Default::default()
    }

    // repeated int32 numbers = 1;

    pub fn numbers(&self) -> &[i32] {
        &self.numbers
    }

    pub fn clear_numbers(&mut self) {
        self.numbers.clear();
    }

    // Param is passed by value, moved
    pub fn set_numbers(&mut self, v: ::std::vec::Vec<i32>) {
        self.numbers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_numbers(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.numbers
    }

    // Take field
    pub fn take_numbers(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.numbers, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "numbers",
            |m: &CTransportValidation_AddNumbers_Request| { &m.numbers },
            |m: &mut CTransportValidation_AddNumbers_Request| { &mut m.numbers },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_AddNumbers_Request>(
            "CTransportValidation_AddNumbers_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_AddNumbers_Request {
    const NAME: &'static str = "CTransportValidation_AddNumbers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.numbers)?;
                },
                8 => {
                    self.numbers.push(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.numbers {
            my_size += crate::rt::int32_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.numbers {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AddNumbers_Request {
        CTransportValidation_AddNumbers_Request::new()
    }

    fn clear(&mut self) {
        self.numbers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AddNumbers_Request {
        static instance: CTransportValidation_AddNumbers_Request = CTransportValidation_AddNumbers_Request {
            numbers: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_AddNumbers_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_AddNumbers_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_AddNumbers_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_AddNumbers_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_AddNumbers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AddNumbers_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AddNumbers_Response.accumulated)
    pub accumulated: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AddNumbers_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AddNumbers_Response {
    fn default() -> &'a CTransportValidation_AddNumbers_Response {
        <CTransportValidation_AddNumbers_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_AddNumbers_Response {
    pub fn new() -> CTransportValidation_AddNumbers_Response {
        ::std::default::Default::default()
    }

    // optional int32 accumulated = 1;

    pub fn accumulated(&self) -> i32 {
        self.accumulated.unwrap_or(0)
    }

    pub fn clear_accumulated(&mut self) {
        self.accumulated = ::std::option::Option::None;
    }

    pub fn has_accumulated(&self) -> bool {
        self.accumulated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accumulated(&mut self, v: i32) {
        self.accumulated = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accumulated",
            |m: &CTransportValidation_AddNumbers_Response| { &m.accumulated },
            |m: &mut CTransportValidation_AddNumbers_Response| { &mut m.accumulated },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_AddNumbers_Response>(
            "CTransportValidation_AddNumbers_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_AddNumbers_Response {
    const NAME: &'static str = "CTransportValidation_AddNumbers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accumulated = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accumulated {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accumulated {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AddNumbers_Response {
        CTransportValidation_AddNumbers_Response::new()
    }

    fn clear(&mut self) {
        self.accumulated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AddNumbers_Response {
        static instance: CTransportValidation_AddNumbers_Response = CTransportValidation_AddNumbers_Response {
            accumulated: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_AddNumbers_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_AddNumbers_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_AddNumbers_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_AddNumbers_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_CountOrderedBytes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_CountOrderedBytes_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_CountOrderedBytes_Request.ordered_bytes)
    pub ordered_bytes: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_CountOrderedBytes_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_CountOrderedBytes_Request {
    fn default() -> &'a CTransportValidation_CountOrderedBytes_Request {
        <CTransportValidation_CountOrderedBytes_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_CountOrderedBytes_Request {
    pub fn new() -> CTransportValidation_CountOrderedBytes_Request {
        ::std::default::Default::default()
    }

    // optional bytes ordered_bytes = 1;

    pub fn ordered_bytes(&self) -> &[u8] {
        match self.ordered_bytes.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ordered_bytes(&mut self) {
        self.ordered_bytes = ::std::option::Option::None;
    }

    pub fn has_ordered_bytes(&self) -> bool {
        self.ordered_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ordered_bytes(&mut self, v: ::bytes::Bytes) {
        self.ordered_bytes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ordered_bytes(&mut self) -> &mut ::bytes::Bytes {
        if self.ordered_bytes.is_none() {
            self.ordered_bytes = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.ordered_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_ordered_bytes(&mut self) -> ::bytes::Bytes {
        self.ordered_bytes.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ordered_bytes",
            |m: &CTransportValidation_CountOrderedBytes_Request| { &m.ordered_bytes },
            |m: &mut CTransportValidation_CountOrderedBytes_Request| { &mut m.ordered_bytes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_CountOrderedBytes_Request>(
            "CTransportValidation_CountOrderedBytes_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_CountOrderedBytes_Request {
    const NAME: &'static str = "CTransportValidation_CountOrderedBytes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ordered_bytes = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ordered_bytes.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.ordered_bytes.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_CountOrderedBytes_Request {
        CTransportValidation_CountOrderedBytes_Request::new()
    }

    fn clear(&mut self) {
        self.ordered_bytes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_CountOrderedBytes_Request {
        static instance: CTransportValidation_CountOrderedBytes_Request = CTransportValidation_CountOrderedBytes_Request {
            ordered_bytes: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_CountOrderedBytes_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_CountOrderedBytes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_CountOrderedBytes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_CountOrderedBytes_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_CountOrderedBytes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_CountOrderedBytes_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_CountOrderedBytes_Response.byte_count)
    pub byte_count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_CountOrderedBytes_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_CountOrderedBytes_Response {
    fn default() -> &'a CTransportValidation_CountOrderedBytes_Response {
        <CTransportValidation_CountOrderedBytes_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_CountOrderedBytes_Response {
    pub fn new() -> CTransportValidation_CountOrderedBytes_Response {
        ::std::default::Default::default()
    }

    // optional int32 byte_count = 1;

    pub fn byte_count(&self) -> i32 {
        self.byte_count.unwrap_or(0)
    }

    pub fn clear_byte_count(&mut self) {
        self.byte_count = ::std::option::Option::None;
    }

    pub fn has_byte_count(&self) -> bool {
        self.byte_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_byte_count(&mut self, v: i32) {
        self.byte_count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "byte_count",
            |m: &CTransportValidation_CountOrderedBytes_Response| { &m.byte_count },
            |m: &mut CTransportValidation_CountOrderedBytes_Response| { &mut m.byte_count },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_CountOrderedBytes_Response>(
            "CTransportValidation_CountOrderedBytes_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_CountOrderedBytes_Response {
    const NAME: &'static str = "CTransportValidation_CountOrderedBytes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.byte_count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.byte_count {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.byte_count {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_CountOrderedBytes_Response {
        CTransportValidation_CountOrderedBytes_Response::new()
    }

    fn clear(&mut self) {
        self.byte_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_CountOrderedBytes_Response {
        static instance: CTransportValidation_CountOrderedBytes_Response = CTransportValidation_CountOrderedBytes_Response {
            byte_count: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_CountOrderedBytes_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_CountOrderedBytes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_CountOrderedBytes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_CountOrderedBytes_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_ThreadedCount_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_ThreadedCount_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_ThreadedCount_Request.start_num)
    pub start_num: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CTransportValidation_ThreadedCount_Request.end_num)
    pub end_num: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_ThreadedCount_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_ThreadedCount_Request {
    fn default() -> &'a CTransportValidation_ThreadedCount_Request {
        <CTransportValidation_ThreadedCount_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidation_ThreadedCount_Request {
    pub fn new() -> CTransportValidation_ThreadedCount_Request {
        ::std::default::Default::default()
    }

    // optional int32 start_num = 1;

    pub fn start_num(&self) -> i32 {
        self.start_num.unwrap_or(0)
    }

    pub fn clear_start_num(&mut self) {
        self.start_num = ::std::option::Option::None;
    }

    pub fn has_start_num(&self) -> bool {
        self.start_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_num(&mut self, v: i32) {
        self.start_num = ::std::option::Option::Some(v);
    }

    // optional int32 end_num = 2;

    pub fn end_num(&self) -> i32 {
        self.end_num.unwrap_or(0)
    }

    pub fn clear_end_num(&mut self) {
        self.end_num = ::std::option::Option::None;
    }

    pub fn has_end_num(&self) -> bool {
        self.end_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_num(&mut self, v: i32) {
        self.end_num = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "start_num",
            |m: &CTransportValidation_ThreadedCount_Request| { &m.start_num },
            |m: &mut CTransportValidation_ThreadedCount_Request| { &mut m.start_num },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "end_num",
            |m: &CTransportValidation_ThreadedCount_Request| { &m.end_num },
            |m: &mut CTransportValidation_ThreadedCount_Request| { &mut m.end_num },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_ThreadedCount_Request>(
            "CTransportValidation_ThreadedCount_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_ThreadedCount_Request {
    const NAME: &'static str = "CTransportValidation_ThreadedCount_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start_num = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.end_num = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start_num {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.end_num {
            my_size += crate::rt::int32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.start_num {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.end_num {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_ThreadedCount_Request {
        CTransportValidation_ThreadedCount_Request::new()
    }

    fn clear(&mut self) {
        self.start_num = ::std::option::Option::None;
        self.end_num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_ThreadedCount_Request {
        static instance: CTransportValidation_ThreadedCount_Request = CTransportValidation_ThreadedCount_Request {
            start_num: ::std::option::Option::None,
            end_num: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_ThreadedCount_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_ThreadedCount_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_ThreadedCount_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_ThreadedCount_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_ThreadedCount_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_ThreadedCount_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_ThreadedCount_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_ThreadedCount_Response {
    fn default() -> &'a CTransportValidation_ThreadedCount_Response {
        <CTransportValidation_ThreadedCount_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidation_ThreadedCount_Response {
    pub fn new() -> CTransportValidation_ThreadedCount_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_ThreadedCount_Response>(
            "CTransportValidation_ThreadedCount_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_ThreadedCount_Response {
    const NAME: &'static str = "CTransportValidation_ThreadedCount_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_ThreadedCount_Response {
        CTransportValidation_ThreadedCount_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_ThreadedCount_Response {
        static instance: CTransportValidation_ThreadedCount_Response = CTransportValidation_ThreadedCount_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_ThreadedCount_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_ThreadedCount_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_ThreadedCount_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_ThreadedCount_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidation_NotifyCount_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifyCount_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifyCount_Notification.num)
    pub num: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifyCount_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifyCount_Notification {
    fn default() -> &'a CTransportValidation_NotifyCount_Notification {
        <CTransportValidation_NotifyCount_Notification as crate::Message>::default_instance()
    }
}

impl CTransportValidation_NotifyCount_Notification {
    pub fn new() -> CTransportValidation_NotifyCount_Notification {
        ::std::default::Default::default()
    }

    // optional int32 num = 1;

    pub fn num(&self) -> i32 {
        self.num.unwrap_or(0)
    }

    pub fn clear_num(&mut self) {
        self.num = ::std::option::Option::None;
    }

    pub fn has_num(&self) -> bool {
        self.num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num(&mut self, v: i32) {
        self.num = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num",
            |m: &CTransportValidation_NotifyCount_Notification| { &m.num },
            |m: &mut CTransportValidation_NotifyCount_Notification| { &mut m.num },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidation_NotifyCount_Notification>(
            "CTransportValidation_NotifyCount_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidation_NotifyCount_Notification {
    const NAME: &'static str = "CTransportValidation_NotifyCount_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.num = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.num {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.num {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifyCount_Notification {
        CTransportValidation_NotifyCount_Notification::new()
    }

    fn clear(&mut self) {
        self.num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifyCount_Notification {
        static instance: CTransportValidation_NotifyCount_Notification = CTransportValidation_NotifyCount_Notification {
            num: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidation_NotifyCount_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidation_NotifyCount_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidation_NotifyCount_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidation_NotifyCount_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidationClient_AddNumbers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidationClient_AddNumbers_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidationClient_AddNumbers_Request.numbers)
    pub numbers: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidationClient_AddNumbers_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidationClient_AddNumbers_Request {
    fn default() -> &'a CTransportValidationClient_AddNumbers_Request {
        <CTransportValidationClient_AddNumbers_Request as crate::Message>::default_instance()
    }
}

impl CTransportValidationClient_AddNumbers_Request {
    pub fn new() -> CTransportValidationClient_AddNumbers_Request {
        ::std::default::Default::default()
    }

    // repeated int32 numbers = 1;

    pub fn numbers(&self) -> &[i32] {
        &self.numbers
    }

    pub fn clear_numbers(&mut self) {
        self.numbers.clear();
    }

    // Param is passed by value, moved
    pub fn set_numbers(&mut self, v: ::std::vec::Vec<i32>) {
        self.numbers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_numbers(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.numbers
    }

    // Take field
    pub fn take_numbers(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.numbers, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "numbers",
            |m: &CTransportValidationClient_AddNumbers_Request| { &m.numbers },
            |m: &mut CTransportValidationClient_AddNumbers_Request| { &mut m.numbers },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidationClient_AddNumbers_Request>(
            "CTransportValidationClient_AddNumbers_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidationClient_AddNumbers_Request {
    const NAME: &'static str = "CTransportValidationClient_AddNumbers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.numbers)?;
                },
                8 => {
                    self.numbers.push(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.numbers {
            my_size += crate::rt::int32_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.numbers {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidationClient_AddNumbers_Request {
        CTransportValidationClient_AddNumbers_Request::new()
    }

    fn clear(&mut self) {
        self.numbers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidationClient_AddNumbers_Request {
        static instance: CTransportValidationClient_AddNumbers_Request = CTransportValidationClient_AddNumbers_Request {
            numbers: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidationClient_AddNumbers_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidationClient_AddNumbers_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidationClient_AddNumbers_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidationClient_AddNumbers_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTransportValidationClient_AddNumbers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidationClient_AddNumbers_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidationClient_AddNumbers_Response.accumulated)
    pub accumulated: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidationClient_AddNumbers_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidationClient_AddNumbers_Response {
    fn default() -> &'a CTransportValidationClient_AddNumbers_Response {
        <CTransportValidationClient_AddNumbers_Response as crate::Message>::default_instance()
    }
}

impl CTransportValidationClient_AddNumbers_Response {
    pub fn new() -> CTransportValidationClient_AddNumbers_Response {
        ::std::default::Default::default()
    }

    // optional int32 accumulated = 1;

    pub fn accumulated(&self) -> i32 {
        self.accumulated.unwrap_or(0)
    }

    pub fn clear_accumulated(&mut self) {
        self.accumulated = ::std::option::Option::None;
    }

    pub fn has_accumulated(&self) -> bool {
        self.accumulated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accumulated(&mut self, v: i32) {
        self.accumulated = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accumulated",
            |m: &CTransportValidationClient_AddNumbers_Response| { &m.accumulated },
            |m: &mut CTransportValidationClient_AddNumbers_Response| { &mut m.accumulated },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTransportValidationClient_AddNumbers_Response>(
            "CTransportValidationClient_AddNumbers_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTransportValidationClient_AddNumbers_Response {
    const NAME: &'static str = "CTransportValidationClient_AddNumbers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accumulated = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accumulated {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accumulated {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidationClient_AddNumbers_Response {
        CTransportValidationClient_AddNumbers_Response::new()
    }

    fn clear(&mut self) {
        self.accumulated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidationClient_AddNumbers_Response {
        static instance: CTransportValidationClient_AddNumbers_Response = CTransportValidationClient_AddNumbers_Response {
            accumulated: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTransportValidationClient_AddNumbers_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTransportValidationClient_AddNumbers_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTransportValidationClient_AddNumbers_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTransportValidationClient_AddNumbers_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'webuimessages_transportvalidation.proto\x1a\x18steammessages_base.pro\
    to\x1a\x18webuimessages_base.proto\"T\n+CTransportValidation_AppendToStr\
    ing_Request\x12%\n\x0eappend_strings\x18\x01\x20\x03(\tR\rappendStrings\
    \"S\n,CTransportValidation_AppendToString_Response\x12#\n\rcombined_text\
    \x18\x01\x20\x01(\tR\x0ccombinedText\"B\n,CTransportValidation_NotifyTex\
    t_Notification\x12\x12\n\x04text\x18\x01\x20\x01(\tR\x04text\"H\n.CTrans\
    portValidation_NotifyNumber_Notification\x12\x16\n\x06number\x18\x01\x20\
    \x01(\x05R\x06number\"2\n0CTransportValidation_GetLastNotifyNumber_Reque\
    st\"a\n1CTransportValidation_GetLastNotifyNumber_Response\x12,\n\x12last\
    _notify_number\x18\x01\x20\x01(\x05R\x10lastNotifyNumber\"K\n3CTransport\
    Validation_TriggerSyntheticEvents_Request\x12\x14\n\x05count\x18\x01\x20\
    \x01(\x05R\x05count\"6\n4CTransportValidation_TriggerSyntheticEvents_Res\
    ponse\"T\n6CTransportValidation_NotifySyntheticEvent_Notification\x12\
    \x1a\n\x08sequence\x18\x01\x20\x01(\x05R\x08sequence\"1\n/CTransportVali\
    dation_TriggerDataRequest_Request\"F\n0CTransportValidation_TriggerDataR\
    equest_Response\x12\x12\n\x04data\x18\x01\x20\x01(\x05R\x04data\"*\n(CTr\
    ansportValidation_DataRequest_Request\"?\n)CTransportValidation_DataRequ\
    est_Response\x12\x12\n\x04data\x18\x01\x20\x01(\x05R\x04data\"C\n'CTrans\
    portValidation_AddNumbers_Request\x12\x18\n\x07numbers\x18\x01\x20\x03(\
    \x05R\x07numbers\"L\n(CTransportValidation_AddNumbers_Response\x12\x20\n\
    \x0baccumulated\x18\x01\x20\x01(\x05R\x0baccumulated\"U\n.CTransportVali\
    dation_CountOrderedBytes_Request\x12#\n\rordered_bytes\x18\x01\x20\x01(\
    \x0cR\x0corderedBytes\"P\n/CTransportValidation_CountOrderedBytes_Respon\
    se\x12\x1d\n\nbyte_count\x18\x01\x20\x01(\x05R\tbyteCount\"b\n*CTranspor\
    tValidation_ThreadedCount_Request\x12\x1b\n\tstart_num\x18\x01\x20\x01(\
    \x05R\x08startNum\x12\x17\n\x07end_num\x18\x02\x20\x01(\x05R\x06endNum\"\
    -\n+CTransportValidation_ThreadedCount_Response\"A\n-CTransportValidatio\
    n_NotifyCount_Notification\x12\x10\n\x03num\x18\x01\x20\x01(\x05R\x03num\
    \"I\n-CTransportValidationClient_AddNumbers_Request\x12\x18\n\x07numbers\
    \x18\x01\x20\x03(\x05R\x07numbers\"R\n.CTransportValidationClient_AddNum\
    bers_Response\x12\x20\n\x0baccumulated\x18\x01\x20\x01(\x05R\x0baccumula\
    ted2\x96\t\n\x13TransportValidation\x12m\n\x0eAppendToString\x12,.CTrans\
    portValidation_AppendToString_Request\x1a-.CTransportValidation_AppendTo\
    String_Response\x12a\n\nAddNumbers\x12(.CTransportValidation_AddNumbers_\
    Request\x1a).CTransportValidation_AddNumbers_Response\x12g\n\x10AddNumbe\
    rsStatic\x12(.CTransportValidation_AddNumbers_Request\x1a).CTransportVal\
    idation_AddNumbers_Response\x12M\n\nNotifyText\x12-.CTransportValidation\
    _NotifyText_Notification\x1a\x10.WebUINoResponse\x12Q\n\x0cNotifyNumber\
    \x12/.CTransportValidation_NotifyNumber_Notification\x1a\x10.WebUINoResp\
    onse\x12|\n\x13GetLastNotifyNumber\x121.CTransportValidation_GetLastNoti\
    fyNumber_Request\x1a2.CTransportValidation_GetLastNotifyNumber_Response\
    \x12a\n\x14NotifySyntheticEvent\x127.CTransportValidation_NotifySyntheti\
    cEvent_Notification\x1a\x10.WebUINoResponse\x12\x85\x01\n\x16TriggerSynt\
    heticEvents\x124.CTransportValidation_TriggerSyntheticEvents_Request\x1a\
    5.CTransportValidation_TriggerSyntheticEvents_Response\x12v\n\x11CountOr\
    deredBytes\x12/.CTransportValidation_CountOrderedBytes_Request\x1a0.CTra\
    nsportValidation_CountOrderedBytes_Response\x12j\n\rThreadedCount\x12+.C\
    TransportValidation_ThreadedCount_Request\x1a,.CTransportValidation_Thre\
    adedCount_Response\x12O\n\x0bNotifyCount\x12..CTransportValidation_Notif\
    yCount_Notification\x1a\x10.WebUINoResponse\x1a\x04\x80\x97\"\x012\x90\
    \x01\n\x19TransportValidationClient\x12m\n\nAddNumbers\x12..CTransportVa\
    lidationClient_AddNumbers_Request\x1a/.CTransportValidationClient_AddNum\
    bers_Response\x1a\x04\x80\x97\"\x02B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(22);
            messages.push(CTransportValidation_AppendToString_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_AppendToString_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_NotifyText_Notification::generated_message_descriptor_data());
            messages.push(CTransportValidation_NotifyNumber_Notification::generated_message_descriptor_data());
            messages.push(CTransportValidation_GetLastNotifyNumber_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_GetLastNotifyNumber_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_TriggerSyntheticEvents_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_TriggerSyntheticEvents_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_NotifySyntheticEvent_Notification::generated_message_descriptor_data());
            messages.push(CTransportValidation_TriggerDataRequest_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_TriggerDataRequest_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_DataRequest_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_DataRequest_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_AddNumbers_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_AddNumbers_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_CountOrderedBytes_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_CountOrderedBytes_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_ThreadedCount_Request::generated_message_descriptor_data());
            messages.push(CTransportValidation_ThreadedCount_Response::generated_message_descriptor_data());
            messages.push(CTransportValidation_NotifyCount_Notification::generated_message_descriptor_data());
            messages.push(CTransportValidationClient_AddNumbers_Request::generated_message_descriptor_data());
            messages.push(CTransportValidationClient_AddNumbers_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
