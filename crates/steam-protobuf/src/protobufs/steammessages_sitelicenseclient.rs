// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_sitelicenseclient.proto`

// @@protoc_insertion_point(message:CMsgClientSiteInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteInfo.site_id)
    pub site_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientSiteInfo.site_name)
    pub site_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientSiteInfo.allow_cached_credentials)
    pub allow_cached_credentials: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteInfo.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteInfo {
    fn default() -> &'a CMsgClientSiteInfo {
        <CMsgClientSiteInfo as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteInfo {
    pub fn new() -> CMsgClientSiteInfo {
        ::std::default::Default::default()
    }

    // optional uint64 site_id = 1;

    pub fn site_id(&self) -> u64 {
        self.site_id.unwrap_or(0)
    }

    pub fn clear_site_id(&mut self) {
        self.site_id = ::std::option::Option::None;
    }

    pub fn has_site_id(&self) -> bool {
        self.site_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: u64) {
        self.site_id = ::std::option::Option::Some(v);
    }

    // optional string site_name = 2;

    pub fn site_name(&self) -> &str {
        match self.site_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_site_name(&mut self) {
        self.site_name = ::std::option::Option::None;
    }

    pub fn has_site_name(&self) -> bool {
        self.site_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_name(&mut self, v: ::std::string::String) {
        self.site_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_site_name(&mut self) -> &mut ::std::string::String {
        if self.site_name.is_none() {
            self.site_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.site_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_site_name(&mut self) -> ::std::string::String {
        self.site_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool allow_cached_credentials = 3;

    pub fn allow_cached_credentials(&self) -> bool {
        self.allow_cached_credentials.unwrap_or(false)
    }

    pub fn clear_allow_cached_credentials(&mut self) {
        self.allow_cached_credentials = ::std::option::Option::None;
    }

    pub fn has_allow_cached_credentials(&self) -> bool {
        self.allow_cached_credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_cached_credentials(&mut self, v: bool) {
        self.allow_cached_credentials = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_id",
            |m: &CMsgClientSiteInfo| { &m.site_id },
            |m: &mut CMsgClientSiteInfo| { &mut m.site_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_name",
            |m: &CMsgClientSiteInfo| { &m.site_name },
            |m: &mut CMsgClientSiteInfo| { &mut m.site_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_cached_credentials",
            |m: &CMsgClientSiteInfo| { &m.allow_cached_credentials },
            |m: &mut CMsgClientSiteInfo| { &mut m.allow_cached_credentials },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteInfo>(
            "CMsgClientSiteInfo",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteInfo {
    const NAME: &'static str = "CMsgClientSiteInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.site_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.site_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.allow_cached_credentials = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.site_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.site_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.allow_cached_credentials {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.site_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.site_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.allow_cached_credentials {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteInfo {
        CMsgClientSiteInfo::new()
    }

    fn clear(&mut self) {
        self.site_id = ::std::option::Option::None;
        self.site_name = ::std::option::Option::None;
        self.allow_cached_credentials = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteInfo {
        static instance: CMsgClientSiteInfo = CMsgClientSiteInfo {
            site_id: ::std::option::Option::None,
            site_name: ::std::option::Option::None,
            allow_cached_credentials: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteInfo {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteInfo {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseCheckout)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseCheckout {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseCheckout.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseCheckout.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseCheckout {
    fn default() -> &'a CMsgClientSiteLicenseCheckout {
        <CMsgClientSiteLicenseCheckout as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseCheckout {
    pub fn new() -> CMsgClientSiteLicenseCheckout {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgClientSiteLicenseCheckout| { &m.appid },
            |m: &mut CMsgClientSiteLicenseCheckout| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteLicenseCheckout>(
            "CMsgClientSiteLicenseCheckout",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteLicenseCheckout {
    const NAME: &'static str = "CMsgClientSiteLicenseCheckout";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseCheckout {
        CMsgClientSiteLicenseCheckout::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseCheckout {
        static instance: CMsgClientSiteLicenseCheckout = CMsgClientSiteLicenseCheckout {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteLicenseCheckout {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteLicenseCheckout").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteLicenseCheckout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteLicenseCheckout {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseCheckoutResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseCheckoutResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseCheckoutResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseCheckoutResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseCheckoutResponse {
    fn default() -> &'a CMsgClientSiteLicenseCheckoutResponse {
        <CMsgClientSiteLicenseCheckoutResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseCheckoutResponse {
    pub fn new() -> CMsgClientSiteLicenseCheckoutResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientSiteLicenseCheckoutResponse| { &m.eresult },
            |m: &mut CMsgClientSiteLicenseCheckoutResponse| { &mut m.eresult },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteLicenseCheckoutResponse>(
            "CMsgClientSiteLicenseCheckoutResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteLicenseCheckoutResponse {
    const NAME: &'static str = "CMsgClientSiteLicenseCheckoutResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseCheckoutResponse {
        CMsgClientSiteLicenseCheckoutResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseCheckoutResponse {
        static instance: CMsgClientSiteLicenseCheckoutResponse = CMsgClientSiteLicenseCheckoutResponse {
            eresult: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteLicenseCheckoutResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteLicenseCheckoutResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteLicenseCheckoutResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteLicenseCheckoutResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetAvailableSeats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetAvailableSeats {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetAvailableSeats.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetAvailableSeats.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetAvailableSeats {
    fn default() -> &'a CMsgClientSiteLicenseGetAvailableSeats {
        <CMsgClientSiteLicenseGetAvailableSeats as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetAvailableSeats {
    pub fn new() -> CMsgClientSiteLicenseGetAvailableSeats {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgClientSiteLicenseGetAvailableSeats| { &m.appid },
            |m: &mut CMsgClientSiteLicenseGetAvailableSeats| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteLicenseGetAvailableSeats>(
            "CMsgClientSiteLicenseGetAvailableSeats",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteLicenseGetAvailableSeats {
    const NAME: &'static str = "CMsgClientSiteLicenseGetAvailableSeats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetAvailableSeats {
        CMsgClientSiteLicenseGetAvailableSeats::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetAvailableSeats {
        static instance: CMsgClientSiteLicenseGetAvailableSeats = CMsgClientSiteLicenseGetAvailableSeats {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteLicenseGetAvailableSeats {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteLicenseGetAvailableSeats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteLicenseGetAvailableSeats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteLicenseGetAvailableSeats {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetAvailableSeatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetAvailableSeatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
    pub seats: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetAvailableSeatsResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn default() -> &'a CMsgClientSiteLicenseGetAvailableSeatsResponse {
        <CMsgClientSiteLicenseGetAvailableSeatsResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetAvailableSeatsResponse {
    pub fn new() -> CMsgClientSiteLicenseGetAvailableSeatsResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 seats = 2;

    pub fn seats(&self) -> u32 {
        self.seats.unwrap_or(0)
    }

    pub fn clear_seats(&mut self) {
        self.seats = ::std::option::Option::None;
    }

    pub fn has_seats(&self) -> bool {
        self.seats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seats(&mut self, v: u32) {
        self.seats = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "eresult",
            |m: &CMsgClientSiteLicenseGetAvailableSeatsResponse| { &m.eresult },
            |m: &mut CMsgClientSiteLicenseGetAvailableSeatsResponse| { &mut m.eresult },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seats",
            |m: &CMsgClientSiteLicenseGetAvailableSeatsResponse| { &m.seats },
            |m: &mut CMsgClientSiteLicenseGetAvailableSeatsResponse| { &mut m.seats },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteLicenseGetAvailableSeatsResponse>(
            "CMsgClientSiteLicenseGetAvailableSeatsResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    const NAME: &'static str = "CMsgClientSiteLicenseGetAvailableSeatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.seats = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.seats {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.seats {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetAvailableSeatsResponse {
        CMsgClientSiteLicenseGetAvailableSeatsResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.seats = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetAvailableSeatsResponse {
        static instance: CMsgClientSiteLicenseGetAvailableSeatsResponse = CMsgClientSiteLicenseGetAvailableSeatsResponse {
            eresult: ::std::option::Option::None,
            seats: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteLicenseGetAvailableSeatsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetContentCacheInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetContentCacheInfo {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetContentCacheInfo.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetContentCacheInfo {
    fn default() -> &'a CMsgClientSiteLicenseGetContentCacheInfo {
        <CMsgClientSiteLicenseGetContentCacheInfo as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetContentCacheInfo {
    pub fn new() -> CMsgClientSiteLicenseGetContentCacheInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteLicenseGetContentCacheInfo>(
            "CMsgClientSiteLicenseGetContentCacheInfo",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteLicenseGetContentCacheInfo {
    const NAME: &'static str = "CMsgClientSiteLicenseGetContentCacheInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetContentCacheInfo {
        CMsgClientSiteLicenseGetContentCacheInfo::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetContentCacheInfo {
        static instance: CMsgClientSiteLicenseGetContentCacheInfo = CMsgClientSiteLicenseGetContentCacheInfo {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteLicenseGetContentCacheInfo {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteLicenseGetContentCacheInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteLicenseGetContentCacheInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteLicenseGetContentCacheInfo {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetContentCacheInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetContentCacheInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
    pub use_cache: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
    pub ipv4_address: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
    pub port_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
    pub p2p_group: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
    pub ip_address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetContentCacheInfoResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn default() -> &'a CMsgClientSiteLicenseGetContentCacheInfoResponse {
        <CMsgClientSiteLicenseGetContentCacheInfoResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetContentCacheInfoResponse {
    pub fn new() -> CMsgClientSiteLicenseGetContentCacheInfoResponse {
        ::std::default::Default::default()
    }

    // optional bool use_cache = 1;

    pub fn use_cache(&self) -> bool {
        self.use_cache.unwrap_or(false)
    }

    pub fn clear_use_cache(&mut self) {
        self.use_cache = ::std::option::Option::None;
    }

    pub fn has_use_cache(&self) -> bool {
        self.use_cache.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_cache(&mut self, v: bool) {
        self.use_cache = ::std::option::Option::Some(v);
    }

    // optional uint32 ipv4_address = 2;

    pub fn ipv4_address(&self) -> u32 {
        self.ipv4_address.unwrap_or(0)
    }

    pub fn clear_ipv4_address(&mut self) {
        self.ipv4_address = ::std::option::Option::None;
    }

    pub fn has_ipv4_address(&self) -> bool {
        self.ipv4_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv4_address(&mut self, v: u32) {
        self.ipv4_address = ::std::option::Option::Some(v);
    }

    // optional uint32 port_number = 3;

    pub fn port_number(&self) -> u32 {
        self.port_number.unwrap_or(0)
    }

    pub fn clear_port_number(&mut self) {
        self.port_number = ::std::option::Option::None;
    }

    pub fn has_port_number(&self) -> bool {
        self.port_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port_number(&mut self, v: u32) {
        self.port_number = ::std::option::Option::Some(v);
    }

    // optional uint32 p2p_group = 4;

    pub fn p2p_group(&self) -> u32 {
        self.p2p_group.unwrap_or(0)
    }

    pub fn clear_p2p_group(&mut self) {
        self.p2p_group = ::std::option::Option::None;
    }

    pub fn has_p2p_group(&self) -> bool {
        self.p2p_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2p_group(&mut self, v: u32) {
        self.p2p_group = ::std::option::Option::Some(v);
    }

    // optional string ip_address = 5;

    pub fn ip_address(&self) -> &str {
        match self.ip_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_address(&mut self) {
        self.ip_address = ::std::option::Option::None;
    }

    pub fn has_ip_address(&self) -> bool {
        self.ip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_address(&mut self, v: ::std::string::String) {
        self.ip_address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_address(&mut self) -> &mut ::std::string::String {
        if self.ip_address.is_none() {
            self.ip_address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_address(&mut self) -> ::std::string::String {
        self.ip_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_cache",
            |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.use_cache },
            |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.use_cache },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ipv4_address",
            |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.ipv4_address },
            |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.ipv4_address },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "port_number",
            |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.port_number },
            |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.port_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "p2p_group",
            |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.p2p_group },
            |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.p2p_group },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_address",
            |m: &CMsgClientSiteLicenseGetContentCacheInfoResponse| { &m.ip_address },
            |m: &mut CMsgClientSiteLicenseGetContentCacheInfoResponse| { &mut m.ip_address },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientSiteLicenseGetContentCacheInfoResponse>(
            "CMsgClientSiteLicenseGetContentCacheInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    const NAME: &'static str = "CMsgClientSiteLicenseGetContentCacheInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.use_cache = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.ipv4_address = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.port_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.p2p_group = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.ip_address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.use_cache {
            my_size += 1 + 1;
        }
        if let Some(v) = self.ipv4_address {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.port_number {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.p2p_group {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.ip_address.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.use_cache {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.ipv4_address {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.port_number {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.p2p_group {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.ip_address.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetContentCacheInfoResponse {
        CMsgClientSiteLicenseGetContentCacheInfoResponse::new()
    }

    fn clear(&mut self) {
        self.use_cache = ::std::option::Option::None;
        self.ipv4_address = ::std::option::Option::None;
        self.port_number = ::std::option::Option::None;
        self.p2p_group = ::std::option::Option::None;
        self.ip_address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetContentCacheInfoResponse {
        static instance: CMsgClientSiteLicenseGetContentCacheInfoResponse = CMsgClientSiteLicenseGetContentCacheInfoResponse {
            use_cache: ::std::option::Option::None,
            ipv4_address: ::std::option::Option::None,
            port_number: ::std::option::Option::None,
            p2p_group: ::std::option::Option::None,
            ip_address: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientSiteLicenseGetContentCacheInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%steammessages_sitelicenseclient.proto\x1a\x18steammessages_base.proto\
    \"\x84\x01\n\x12CMsgClientSiteInfo\x12\x17\n\x07site_id\x18\x01\x20\x01(\
    \x04R\x06siteId\x12\x1b\n\tsite_name\x18\x02\x20\x01(\tR\x08siteName\x12\
    8\n\x18allow_cached_credentials\x18\x03\x20\x01(\x08R\x16allowCachedCred\
    entials\"5\n\x1dCMsgClientSiteLicenseCheckout\x12\x14\n\x05appid\x18\x01\
    \x20\x01(\rR\x05appid\"D\n%CMsgClientSiteLicenseCheckoutResponse\x12\x1b\
    \n\x07eresult\x18\x01\x20\x01(\x05:\x012R\x07eresult\">\n&CMsgClientSite\
    LicenseGetAvailableSeats\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \"c\n.CMsgClientSiteLicenseGetAvailableSeatsResponse\x12\x1b\n\x07eresul\
    t\x18\x01\x20\x01(\x05:\x012R\x07eresult\x12\x14\n\x05seats\x18\x02\x20\
    \x01(\rR\x05seats\"*\n(CMsgClientSiteLicenseGetContentCacheInfo\"\xcf\
    \x01\n0CMsgClientSiteLicenseGetContentCacheInfoResponse\x12\x1b\n\tuse_c\
    ache\x18\x01\x20\x01(\x08R\x08useCache\x12!\n\x0cipv4_address\x18\x02\
    \x20\x01(\rR\x0bipv4Address\x12\x1f\n\x0bport_number\x18\x03\x20\x01(\rR\
    \nportNumber\x12\x1b\n\tp2p_group\x18\x04\x20\x01(\rR\x08p2pGroup\x12\
    \x1d\n\nip_address\x18\x05\x20\x01(\tR\tipAddressB\x05H\x01\x80\x01\0\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CMsgClientSiteInfo::generated_message_descriptor_data());
            messages.push(CMsgClientSiteLicenseCheckout::generated_message_descriptor_data());
            messages.push(CMsgClientSiteLicenseCheckoutResponse::generated_message_descriptor_data());
            messages.push(CMsgClientSiteLicenseGetAvailableSeats::generated_message_descriptor_data());
            messages.push(CMsgClientSiteLicenseGetAvailableSeatsResponse::generated_message_descriptor_data());
            messages.push(CMsgClientSiteLicenseGetContentCacheInfo::generated_message_descriptor_data());
            messages.push(CMsgClientSiteLicenseGetContentCacheInfoResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
