// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_timedtrial.steamclient.proto`

// @@protoc_insertion_point(message:CTimedTrial_GetTimeRemaining_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_GetTimeRemaining_Request {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_GetTimeRemaining_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_GetTimeRemaining_Request {
    fn default() -> &'a CTimedTrial_GetTimeRemaining_Request {
        <CTimedTrial_GetTimeRemaining_Request as crate::Message>::default_instance()
    }
}

impl CTimedTrial_GetTimeRemaining_Request {
    pub fn new() -> CTimedTrial_GetTimeRemaining_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CTimedTrial_GetTimeRemaining_Request| { &m.appid },
            |m: &mut CTimedTrial_GetTimeRemaining_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTimedTrial_GetTimeRemaining_Request>(
            "CTimedTrial_GetTimeRemaining_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTimedTrial_GetTimeRemaining_Request {
    const NAME: &'static str = "CTimedTrial_GetTimeRemaining_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_GetTimeRemaining_Request {
        CTimedTrial_GetTimeRemaining_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_GetTimeRemaining_Request {
        static instance: CTimedTrial_GetTimeRemaining_Request = CTimedTrial_GetTimeRemaining_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTimedTrial_GetTimeRemaining_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTimedTrial_GetTimeRemaining_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTimedTrial_GetTimeRemaining_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTimedTrial_GetTimeRemaining_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTimedTrial_GetTimeRemaining_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_GetTimeRemaining_Response {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.seconds_allowed)
    pub seconds_allowed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.packageid)
    pub packageid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.mastersub_appid)
    pub mastersub_appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_GetTimeRemaining_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_GetTimeRemaining_Response {
    fn default() -> &'a CTimedTrial_GetTimeRemaining_Response {
        <CTimedTrial_GetTimeRemaining_Response as crate::Message>::default_instance()
    }
}

impl CTimedTrial_GetTimeRemaining_Response {
    pub fn new() -> CTimedTrial_GetTimeRemaining_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;

    pub fn seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }

    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }

    // optional uint32 packageid = 3;

    pub fn packageid(&self) -> u32 {
        self.packageid.unwrap_or(0)
    }

    pub fn clear_packageid(&mut self) {
        self.packageid = ::std::option::Option::None;
    }

    pub fn has_packageid(&self) -> bool {
        self.packageid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packageid(&mut self, v: u32) {
        self.packageid = ::std::option::Option::Some(v);
    }

    // optional uint32 mastersub_appid = 4;

    pub fn mastersub_appid(&self) -> u32 {
        self.mastersub_appid.unwrap_or(0)
    }

    pub fn clear_mastersub_appid(&mut self) {
        self.mastersub_appid = ::std::option::Option::None;
    }

    pub fn has_mastersub_appid(&self) -> bool {
        self.mastersub_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mastersub_appid(&mut self, v: u32) {
        self.mastersub_appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_played",
            |m: &CTimedTrial_GetTimeRemaining_Response| { &m.seconds_played },
            |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.seconds_played },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_allowed",
            |m: &CTimedTrial_GetTimeRemaining_Response| { &m.seconds_allowed },
            |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.seconds_allowed },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "packageid",
            |m: &CTimedTrial_GetTimeRemaining_Response| { &m.packageid },
            |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.packageid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mastersub_appid",
            |m: &CTimedTrial_GetTimeRemaining_Response| { &m.mastersub_appid },
            |m: &mut CTimedTrial_GetTimeRemaining_Response| { &mut m.mastersub_appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTimedTrial_GetTimeRemaining_Response>(
            "CTimedTrial_GetTimeRemaining_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTimedTrial_GetTimeRemaining_Response {
    const NAME: &'static str = "CTimedTrial_GetTimeRemaining_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_allowed = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.mastersub_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.packageid {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.mastersub_appid {
            my_size += crate::rt::uint32_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.packageid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.mastersub_appid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_GetTimeRemaining_Response {
        CTimedTrial_GetTimeRemaining_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.packageid = ::std::option::Option::None;
        self.mastersub_appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_GetTimeRemaining_Response {
        static instance: CTimedTrial_GetTimeRemaining_Response = CTimedTrial_GetTimeRemaining_Response {
            seconds_played: ::std::option::Option::None,
            seconds_allowed: ::std::option::Option::None,
            packageid: ::std::option::Option::None,
            mastersub_appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTimedTrial_GetTimeRemaining_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTimedTrial_GetTimeRemaining_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTimedTrial_GetTimeRemaining_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTimedTrial_GetTimeRemaining_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTimedTrial_RecordPlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_RecordPlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Request.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_RecordPlaytime_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_RecordPlaytime_Request {
    fn default() -> &'a CTimedTrial_RecordPlaytime_Request {
        <CTimedTrial_RecordPlaytime_Request as crate::Message>::default_instance()
    }
}

impl CTimedTrial_RecordPlaytime_Request {
    pub fn new() -> CTimedTrial_RecordPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_played = 2;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CTimedTrial_RecordPlaytime_Request| { &m.appid },
            |m: &mut CTimedTrial_RecordPlaytime_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_played",
            |m: &CTimedTrial_RecordPlaytime_Request| { &m.seconds_played },
            |m: &mut CTimedTrial_RecordPlaytime_Request| { &mut m.seconds_played },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTimedTrial_RecordPlaytime_Request>(
            "CTimedTrial_RecordPlaytime_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTimedTrial_RecordPlaytime_Request {
    const NAME: &'static str = "CTimedTrial_RecordPlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_played {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_played {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_RecordPlaytime_Request {
        CTimedTrial_RecordPlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.seconds_played = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_RecordPlaytime_Request {
        static instance: CTimedTrial_RecordPlaytime_Request = CTimedTrial_RecordPlaytime_Request {
            appid: ::std::option::Option::None,
            seconds_played: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTimedTrial_RecordPlaytime_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTimedTrial_RecordPlaytime_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTimedTrial_RecordPlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTimedTrial_RecordPlaytime_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTimedTrial_RecordPlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_RecordPlaytime_Response {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Response.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Response.seconds_allowed)
    pub seconds_allowed: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_RecordPlaytime_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_RecordPlaytime_Response {
    fn default() -> &'a CTimedTrial_RecordPlaytime_Response {
        <CTimedTrial_RecordPlaytime_Response as crate::Message>::default_instance()
    }
}

impl CTimedTrial_RecordPlaytime_Response {
    pub fn new() -> CTimedTrial_RecordPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;

    pub fn seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }

    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_played",
            |m: &CTimedTrial_RecordPlaytime_Response| { &m.seconds_played },
            |m: &mut CTimedTrial_RecordPlaytime_Response| { &mut m.seconds_played },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_allowed",
            |m: &CTimedTrial_RecordPlaytime_Response| { &m.seconds_allowed },
            |m: &mut CTimedTrial_RecordPlaytime_Response| { &mut m.seconds_allowed },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTimedTrial_RecordPlaytime_Response>(
            "CTimedTrial_RecordPlaytime_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTimedTrial_RecordPlaytime_Response {
    const NAME: &'static str = "CTimedTrial_RecordPlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_allowed = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_RecordPlaytime_Response {
        CTimedTrial_RecordPlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_RecordPlaytime_Response {
        static instance: CTimedTrial_RecordPlaytime_Response = CTimedTrial_RecordPlaytime_Response {
            seconds_played: ::std::option::Option::None,
            seconds_allowed: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTimedTrial_RecordPlaytime_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTimedTrial_RecordPlaytime_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTimedTrial_RecordPlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTimedTrial_RecordPlaytime_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTimedTrial_ResetPlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_ResetPlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_ResetPlaytime_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_ResetPlaytime_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_ResetPlaytime_Request {
    fn default() -> &'a CTimedTrial_ResetPlaytime_Request {
        <CTimedTrial_ResetPlaytime_Request as crate::Message>::default_instance()
    }
}

impl CTimedTrial_ResetPlaytime_Request {
    pub fn new() -> CTimedTrial_ResetPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CTimedTrial_ResetPlaytime_Request| { &m.appid },
            |m: &mut CTimedTrial_ResetPlaytime_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTimedTrial_ResetPlaytime_Request>(
            "CTimedTrial_ResetPlaytime_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTimedTrial_ResetPlaytime_Request {
    const NAME: &'static str = "CTimedTrial_ResetPlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_ResetPlaytime_Request {
        CTimedTrial_ResetPlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_ResetPlaytime_Request {
        static instance: CTimedTrial_ResetPlaytime_Request = CTimedTrial_ResetPlaytime_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTimedTrial_ResetPlaytime_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTimedTrial_ResetPlaytime_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTimedTrial_ResetPlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTimedTrial_ResetPlaytime_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CTimedTrial_ResetPlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_ResetPlaytime_Response {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_ResetPlaytime_Response.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_ResetPlaytime_Response.seconds_allowed)
    pub seconds_allowed: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_ResetPlaytime_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_ResetPlaytime_Response {
    fn default() -> &'a CTimedTrial_ResetPlaytime_Response {
        <CTimedTrial_ResetPlaytime_Response as crate::Message>::default_instance()
    }
}

impl CTimedTrial_ResetPlaytime_Response {
    pub fn new() -> CTimedTrial_ResetPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;

    pub fn seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }

    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_played",
            |m: &CTimedTrial_ResetPlaytime_Response| { &m.seconds_played },
            |m: &mut CTimedTrial_ResetPlaytime_Response| { &mut m.seconds_played },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_allowed",
            |m: &CTimedTrial_ResetPlaytime_Response| { &m.seconds_allowed },
            |m: &mut CTimedTrial_ResetPlaytime_Response| { &mut m.seconds_allowed },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CTimedTrial_ResetPlaytime_Response>(
            "CTimedTrial_ResetPlaytime_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CTimedTrial_ResetPlaytime_Response {
    const NAME: &'static str = "CTimedTrial_ResetPlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_allowed = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_ResetPlaytime_Response {
        CTimedTrial_ResetPlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_ResetPlaytime_Response {
        static instance: CTimedTrial_ResetPlaytime_Response = CTimedTrial_ResetPlaytime_Response {
            seconds_played: ::std::option::Option::None,
            seconds_allowed: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CTimedTrial_ResetPlaytime_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CTimedTrial_ResetPlaytime_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CTimedTrial_ResetPlaytime_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CTimedTrial_ResetPlaytime_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*steammessages_timedtrial.steamclient.proto\x1a\x18steammessages_base.\
    proto\x1a,steammessages_unified_base.steamclient.proto\"<\n$CTimedTrial_\
    GetTimeRemaining_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \"\xbe\x01\n%CTimedTrial_GetTimeRemaining_Response\x12%\n\x0eseconds_pla\
    yed\x18\x01\x20\x01(\rR\rsecondsPlayed\x12'\n\x0fseconds_allowed\x18\x02\
    \x20\x01(\rR\x0esecondsAllowed\x12\x1c\n\tpackageid\x18\x03\x20\x01(\rR\
    \tpackageid\x12'\n\x0fmastersub_appid\x18\x04\x20\x01(\rR\x0emastersubAp\
    pid\"a\n\"CTimedTrial_RecordPlaytime_Request\x12\x14\n\x05appid\x18\x01\
    \x20\x01(\rR\x05appid\x12%\n\x0eseconds_played\x18\x02\x20\x01(\rR\rseco\
    ndsPlayed\"u\n#CTimedTrial_RecordPlaytime_Response\x12%\n\x0eseconds_pla\
    yed\x18\x01\x20\x01(\rR\rsecondsPlayed\x12'\n\x0fseconds_allowed\x18\x02\
    \x20\x01(\rR\x0esecondsAllowed\"9\n!CTimedTrial_ResetPlaytime_Request\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"t\n\"CTimedTrial_Reset\
    Playtime_Response\x12%\n\x0eseconds_played\x18\x01\x20\x01(\rR\rsecondsP\
    layed\x12'\n\x0fseconds_allowed\x18\x02\x20\x01(\rR\x0esecondsAllowed2\
    \xa6\x02\n\nTimedTrial\x12a\n\x10GetTimeRemaining\x12%.CTimedTrial_GetTi\
    meRemaining_Request\x1a&.CTimedTrial_GetTimeRemaining_Response\x12[\n\
    \x0eRecordPlaytime\x12#.CTimedTrial_RecordPlaytime_Request\x1a$.CTimedTr\
    ial_RecordPlaytime_Response\x12X\n\rResetPlaytime\x12\".CTimedTrial_Rese\
    tPlaytime_Request\x1a#.CTimedTrial_ResetPlaytime_ResponseB\x03\x80\x01\
    \x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CTimedTrial_GetTimeRemaining_Request::generated_message_descriptor_data());
            messages.push(CTimedTrial_GetTimeRemaining_Response::generated_message_descriptor_data());
            messages.push(CTimedTrial_RecordPlaytime_Request::generated_message_descriptor_data());
            messages.push(CTimedTrial_RecordPlaytime_Response::generated_message_descriptor_data());
            messages.push(CTimedTrial_ResetPlaytime_Request::generated_message_descriptor_data());
            messages.push(CTimedTrial_ResetPlaytime_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
