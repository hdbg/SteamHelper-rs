// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_remoteclient_service.steamclient.proto`

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4steammessages_remoteclient_service.steamclient.proto\x1a\x18steammess\
    ages_base.proto\x1a,steammessages_unified_base.steamclient.proto\x1a1ste\
    ammessages_remoteclient_service_messages.proto2\xb7\t\n\x0cRemoteClient\
    \x12_\n\x0eGetPairingInfo\x12%.CRemoteClient_GetPairingInfo_Request\x1a&\
    .CRemoteClient_GetPairingInfo_Response\x12?\n\x0cNotifyOnline\x12\".CRem\
    oteClient_Online_Notification\x1a\x0b.NoResponse\x12I\n\x11NotifyReplyPa\
    cket\x12'.CRemoteClient_ReplyPacket_Notification\x1a\x0b.NoResponse\x12n\
    \n\x13AllocateRelayServer\x12*.CRemoteClient_AllocateRelayServer_Request\
    \x1a+.CRemoteClient_AllocateRelayServer_Response\x12V\n\x0bAllocateSDR\
    \x12\".CRemoteClient_AllocateSDR_Request\x1a#.CRemoteClient_AllocateSDR_\
    Response\x12S\n\x18SendSteamBroadcastPacket\x12*.CRemoteClient_SteamBroa\
    dcast_Notification\x1a\x0b.NoResponse\x12O\n\x16SendSteamToSteamPacket\
    \x12(.CRemoteClient_SteamToSteam_Notification\x1a\x0b.NoResponse\x12i\n\
    \x1cSendRemotePlaySessionStarted\x12#.CRemotePlay_SessionStarted_Request\
    \x1a$.CRemotePlay_SessionStarted_Response\x12U\n\x1cSendRemotePlaySessio\
    nStopped\x12(.CRemotePlay_SessionStopped_Notification\x1a\x0b.NoResponse\
    \x12N\n\x1cSendRemotePlayTogetherPacket\x12!.CRemotePlayTogether_Notific\
    ation\x1a\x0b.NoResponse\x12\x9b\x01\n\"CreateRemotePlayTogetherInvitati\
    on\x129.CRemoteClient_CreateRemotePlayTogetherInvitation_Request\x1a:.CR\
    emoteClient_CreateRemotePlayTogetherInvitation_Response\x12\x9b\x01\n\"D\
    eleteRemotePlayTogetherInvitation\x129.CRemoteClient_DeleteRemotePlayTog\
    etherInvitation_Request\x1a:.CRemoteClient_DeleteRemotePlayTogetherInvit\
    ation_Response2\xa6\x04\n\x17RemoteClientSteamClient\x12[\n\x1aNotifyReg\
    isterStatusUpdate\x120.CRemoteClient_RegisterStatusUpdate_Notification\
    \x1a\x0b.NoResponse\x12_\n\x1cNotifyUnregisterStatusUpdate\x122.CRemoteC\
    lient_UnregisterStatusUpdate_Notification\x1a\x0b.NoResponse\x12K\n\x12N\
    otifyRemotePacket\x12(.CRemoteClient_RemotePacket_Notification\x1a\x0b.N\
    oResponse\x12U\n\x1aNotifySteamBroadcastPacket\x12*.CRemoteClient_SteamB\
    roadcast_Notification\x1a\x0b.NoResponse\x12Q\n\x18NotifySteamToSteamPac\
    ket\x12(.CRemoteClient_SteamToSteam_Notification\x1a\x0b.NoResponse\x12P\
    \n\x1eNotifyRemotePlayTogetherPacket\x12!.CRemotePlayTogether_Notificati\
    on\x1a\x0b.NoResponse\x1a\x04\xc0\xb5\x18\x02B\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            deps.push(super::steammessages_remoteclient_service_messages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
