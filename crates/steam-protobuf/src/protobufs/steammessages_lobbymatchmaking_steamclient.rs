// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_lobbymatchmaking.steamclient.proto`

// @@protoc_insertion_point(message:LobbyMatchmakingLegacy_GetLobbyStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.steamid_lobby)
    pub steamid_lobby: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_ownership)
    pub claim_ownership: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_membership)
    pub claim_membership: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.version_num)
    pub version_num: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyMatchmakingLegacy_GetLobbyStatus_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    fn default() -> &'a LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        <LobbyMatchmakingLegacy_GetLobbyStatus_Request as crate::Message>::default_instance()
    }
}

impl LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    pub fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_lobby = 2;

    pub fn steamid_lobby(&self) -> u64 {
        self.steamid_lobby.unwrap_or(0)
    }

    pub fn clear_steamid_lobby(&mut self) {
        self.steamid_lobby = ::std::option::Option::None;
    }

    pub fn has_steamid_lobby(&self) -> bool {
        self.steamid_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_lobby(&mut self, v: u64) {
        self.steamid_lobby = ::std::option::Option::Some(v);
    }

    // optional bool claim_ownership = 3;

    pub fn claim_ownership(&self) -> bool {
        self.claim_ownership.unwrap_or(false)
    }

    pub fn clear_claim_ownership(&mut self) {
        self.claim_ownership = ::std::option::Option::None;
    }

    pub fn has_claim_ownership(&self) -> bool {
        self.claim_ownership.is_some()
    }

    // Param is passed by value, moved
    pub fn set_claim_ownership(&mut self, v: bool) {
        self.claim_ownership = ::std::option::Option::Some(v);
    }

    // optional bool claim_membership = 4;

    pub fn claim_membership(&self) -> bool {
        self.claim_membership.unwrap_or(false)
    }

    pub fn clear_claim_membership(&mut self) {
        self.claim_membership = ::std::option::Option::None;
    }

    pub fn has_claim_membership(&self) -> bool {
        self.claim_membership.is_some()
    }

    // Param is passed by value, moved
    pub fn set_claim_membership(&mut self, v: bool) {
        self.claim_membership = ::std::option::Option::Some(v);
    }

    // optional uint32 version_num = 5;

    pub fn version_num(&self) -> u32 {
        self.version_num.unwrap_or(0)
    }

    pub fn clear_version_num(&mut self) {
        self.version_num = ::std::option::Option::None;
    }

    pub fn has_version_num(&self) -> bool {
        self.version_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version_num(&mut self, v: u32) {
        self.version_num = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.app_id },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_lobby",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.steamid_lobby },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.steamid_lobby },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "claim_ownership",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.claim_ownership },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.claim_ownership },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "claim_membership",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.claim_membership },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.claim_membership },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version_num",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &m.version_num },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Request| { &mut m.version_num },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<LobbyMatchmakingLegacy_GetLobbyStatus_Request>(
            "LobbyMatchmakingLegacy_GetLobbyStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    const NAME: &'static str = "LobbyMatchmakingLegacy_GetLobbyStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid_lobby = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.claim_ownership = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.claim_membership = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.version_num = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid_lobby {
            my_size += 1 + 8;
        }
        if let Some(v) = self.claim_ownership {
            my_size += 1 + 1;
        }
        if let Some(v) = self.claim_membership {
            my_size += 1 + 1;
        }
        if let Some(v) = self.version_num {
            my_size += crate::rt::uint32_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid_lobby {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.claim_ownership {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.claim_membership {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.version_num {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        LobbyMatchmakingLegacy_GetLobbyStatus_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.steamid_lobby = ::std::option::Option::None;
        self.claim_ownership = ::std::option::Option::None;
        self.claim_membership = ::std::option::Option::None;
        self.version_num = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyMatchmakingLegacy_GetLobbyStatus_Request {
        static instance: LobbyMatchmakingLegacy_GetLobbyStatus_Request = LobbyMatchmakingLegacy_GetLobbyStatus_Request {
            app_id: ::std::option::Option::None,
            steamid_lobby: ::std::option::Option::None,
            claim_ownership: ::std::option::Option::None,
            claim_membership: ::std::option::Option::None,
            version_num: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyMatchmakingLegacy_GetLobbyStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for LobbyMatchmakingLegacy_GetLobbyStatus_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LobbyMatchmakingLegacy_GetLobbyStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.steamid_lobby)
    pub steamid_lobby: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.lobby_status)
    pub lobby_status: ::std::option::Option<crate::EnumOrUnknown<ELobbyStatus>>,
    // special fields
    // @@protoc_insertion_point(special_field:LobbyMatchmakingLegacy_GetLobbyStatus_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    fn default() -> &'a LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        <LobbyMatchmakingLegacy_GetLobbyStatus_Response as crate::Message>::default_instance()
    }
}

impl LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    pub fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_lobby = 2;

    pub fn steamid_lobby(&self) -> u64 {
        self.steamid_lobby.unwrap_or(0)
    }

    pub fn clear_steamid_lobby(&mut self) {
        self.steamid_lobby = ::std::option::Option::None;
    }

    pub fn has_steamid_lobby(&self) -> bool {
        self.steamid_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_lobby(&mut self, v: u64) {
        self.steamid_lobby = ::std::option::Option::Some(v);
    }

    // optional .ELobbyStatus lobby_status = 3;

    pub fn lobby_status(&self) -> ELobbyStatus {
        match self.lobby_status {
            Some(e) => e.enum_value_or(ELobbyStatus::k_ELobbyStatusInvalid),
            None => ELobbyStatus::k_ELobbyStatusInvalid,
        }
    }

    pub fn clear_lobby_status(&mut self) {
        self.lobby_status = ::std::option::Option::None;
    }

    pub fn has_lobby_status(&self) -> bool {
        self.lobby_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby_status(&mut self, v: ELobbyStatus) {
        self.lobby_status = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &m.app_id },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_lobby",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &m.steamid_lobby },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &mut m.steamid_lobby },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby_status",
            |m: &LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &m.lobby_status },
            |m: &mut LobbyMatchmakingLegacy_GetLobbyStatus_Response| { &mut m.lobby_status },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<LobbyMatchmakingLegacy_GetLobbyStatus_Response>(
            "LobbyMatchmakingLegacy_GetLobbyStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    const NAME: &'static str = "LobbyMatchmakingLegacy_GetLobbyStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.steamid_lobby = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.lobby_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid_lobby {
            my_size += 1 + 8;
        }
        if let Some(v) = self.lobby_status {
            my_size += crate::rt::int32_size(3, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid_lobby {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.lobby_status {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        LobbyMatchmakingLegacy_GetLobbyStatus_Response::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.steamid_lobby = ::std::option::Option::None;
        self.lobby_status = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LobbyMatchmakingLegacy_GetLobbyStatus_Response {
        static instance: LobbyMatchmakingLegacy_GetLobbyStatus_Response = LobbyMatchmakingLegacy_GetLobbyStatus_Response {
            app_id: ::std::option::Option::None,
            steamid_lobby: ::std::option::Option::None,
            lobby_status: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LobbyMatchmakingLegacy_GetLobbyStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for LobbyMatchmakingLegacy_GetLobbyStatus_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ELobbyStatus)
pub enum ELobbyStatus {
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusInvalid)
    k_ELobbyStatusInvalid = 0,
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusExists)
    k_ELobbyStatusExists = 1,
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusDoesNotExist)
    k_ELobbyStatusDoesNotExist = 2,
    // @@protoc_insertion_point(enum_value:ELobbyStatus.k_ELobbyStatusNotAMember)
    k_ELobbyStatusNotAMember = 3,
}

impl crate::Enum for ELobbyStatus {
    const NAME: &'static str = "ELobbyStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ELobbyStatus> {
        match value {
            0 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusInvalid),
            1 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusExists),
            2 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusDoesNotExist),
            3 => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusNotAMember),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ELobbyStatus> {
        match str {
            "k_ELobbyStatusInvalid" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusInvalid),
            "k_ELobbyStatusExists" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusExists),
            "k_ELobbyStatusDoesNotExist" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusDoesNotExist),
            "k_ELobbyStatusNotAMember" => ::std::option::Option::Some(ELobbyStatus::k_ELobbyStatusNotAMember),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ELobbyStatus] = &[
        ELobbyStatus::k_ELobbyStatusInvalid,
        ELobbyStatus::k_ELobbyStatusExists,
        ELobbyStatus::k_ELobbyStatusDoesNotExist,
        ELobbyStatus::k_ELobbyStatusNotAMember,
    ];
}

impl crate::EnumFull for ELobbyStatus {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ELobbyStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ELobbyStatus {
    fn default() -> Self {
        ELobbyStatus::k_ELobbyStatusInvalid
    }
}

impl ELobbyStatus {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<ELobbyStatus>("ELobbyStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0steammessages_lobbymatchmaking.steamclient.proto\x1a\x18steammessages\
    _base.proto\x1a,steammessages_unified_base.steamclient.proto\"\xe0\x01\n\
    -LobbyMatchmakingLegacy_GetLobbyStatus_Request\x12\x15\n\x06app_id\x18\
    \x01\x20\x01(\rR\x05appId\x12#\n\rsteamid_lobby\x18\x02\x20\x01(\x06R\
    \x0csteamidLobby\x12'\n\x0fclaim_ownership\x18\x03\x20\x01(\x08R\x0eclai\
    mOwnership\x12)\n\x10claim_membership\x18\x04\x20\x01(\x08R\x0fclaimMemb\
    ership\x12\x1f\n\x0bversion_num\x18\x05\x20\x01(\rR\nversionNum\"\xb5\
    \x01\n.LobbyMatchmakingLegacy_GetLobbyStatus_Response\x12\x15\n\x06app_i\
    d\x18\x01\x20\x01(\rR\x05appId\x12#\n\rsteamid_lobby\x18\x02\x20\x01(\
    \x06R\x0csteamidLobby\x12G\n\x0clobby_status\x18\x03\x20\x01(\x0e2\r.ELo\
    bbyStatus:\x15k_ELobbyStatusInvalidR\x0blobbyStatus*\x81\x01\n\x0cELobby\
    Status\x12\x19\n\x15k_ELobbyStatusInvalid\x10\0\x12\x18\n\x14k_ELobbySta\
    tusExists\x10\x01\x12\x1e\n\x1ak_ELobbyStatusDoesNotExist\x10\x02\x12\
    \x1c\n\x18k_ELobbyStatusNotAMember\x10\x032\x8b\x01\n\x16LobbyMatchmakin\
    gLegacy\x12q\n\x0eGetLobbyStatus\x12..LobbyMatchmakingLegacy_GetLobbySta\
    tus_Request\x1a/.LobbyMatchmakingLegacy_GetLobbyStatus_ResponseB\x03\x80\
    \x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(LobbyMatchmakingLegacy_GetLobbyStatus_Request::generated_message_descriptor_data());
            messages.push(LobbyMatchmakingLegacy_GetLobbyStatus_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ELobbyStatus::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
