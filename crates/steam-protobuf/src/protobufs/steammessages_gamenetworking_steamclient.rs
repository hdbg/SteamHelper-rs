// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gamenetworking.steamclient.proto`

// @@protoc_insertion_point(message:CGameNetworking_AllocateFakeIP_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNetworking_AllocateFakeIP_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNetworking_AllocateFakeIP_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNetworking_AllocateFakeIP_Request.num_fake_ports)
    pub num_fake_ports: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNetworking_AllocateFakeIP_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNetworking_AllocateFakeIP_Request {
    fn default() -> &'a CGameNetworking_AllocateFakeIP_Request {
        <CGameNetworking_AllocateFakeIP_Request as crate::Message>::default_instance()
    }
}

impl CGameNetworking_AllocateFakeIP_Request {
    pub fn new() -> CGameNetworking_AllocateFakeIP_Request {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 num_fake_ports = 2;

    pub fn num_fake_ports(&self) -> u32 {
        self.num_fake_ports.unwrap_or(0)
    }

    pub fn clear_num_fake_ports(&mut self) {
        self.num_fake_ports = ::std::option::Option::None;
    }

    pub fn has_num_fake_ports(&self) -> bool {
        self.num_fake_ports.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_fake_ports(&mut self, v: u32) {
        self.num_fake_ports = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CGameNetworking_AllocateFakeIP_Request| { &m.app_id },
            |m: &mut CGameNetworking_AllocateFakeIP_Request| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_fake_ports",
            |m: &CGameNetworking_AllocateFakeIP_Request| { &m.num_fake_ports },
            |m: &mut CGameNetworking_AllocateFakeIP_Request| { &mut m.num_fake_ports },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNetworking_AllocateFakeIP_Request>(
            "CGameNetworking_AllocateFakeIP_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNetworking_AllocateFakeIP_Request {
    const NAME: &'static str = "CGameNetworking_AllocateFakeIP_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.num_fake_ports = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.num_fake_ports {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.num_fake_ports {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNetworking_AllocateFakeIP_Request {
        CGameNetworking_AllocateFakeIP_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.num_fake_ports = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNetworking_AllocateFakeIP_Request {
        static instance: CGameNetworking_AllocateFakeIP_Request = CGameNetworking_AllocateFakeIP_Request {
            app_id: ::std::option::Option::None,
            num_fake_ports: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNetworking_AllocateFakeIP_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNetworking_AllocateFakeIP_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNetworking_AllocateFakeIP_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNetworking_AllocateFakeIP_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNetworking_AllocateFakeIP_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNetworking_AllocateFakeIP_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNetworking_AllocateFakeIP_Response.fake_ip)
    pub fake_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNetworking_AllocateFakeIP_Response.fake_ports)
    pub fake_ports: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNetworking_AllocateFakeIP_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNetworking_AllocateFakeIP_Response {
    fn default() -> &'a CGameNetworking_AllocateFakeIP_Response {
        <CGameNetworking_AllocateFakeIP_Response as crate::Message>::default_instance()
    }
}

impl CGameNetworking_AllocateFakeIP_Response {
    pub fn new() -> CGameNetworking_AllocateFakeIP_Response {
        ::std::default::Default::default()
    }

    // optional fixed32 fake_ip = 1;

    pub fn fake_ip(&self) -> u32 {
        self.fake_ip.unwrap_or(0)
    }

    pub fn clear_fake_ip(&mut self) {
        self.fake_ip = ::std::option::Option::None;
    }

    pub fn has_fake_ip(&self) -> bool {
        self.fake_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fake_ip(&mut self, v: u32) {
        self.fake_ip = ::std::option::Option::Some(v);
    }

    // repeated uint32 fake_ports = 2;

    pub fn fake_ports(&self) -> &[u32] {
        &self.fake_ports
    }

    pub fn clear_fake_ports(&mut self) {
        self.fake_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_fake_ports(&mut self, v: ::std::vec::Vec<u32>) {
        self.fake_ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fake_ports(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.fake_ports
    }

    // Take field
    pub fn take_fake_ports(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.fake_ports, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "fake_ip",
            |m: &CGameNetworking_AllocateFakeIP_Response| { &m.fake_ip },
            |m: &mut CGameNetworking_AllocateFakeIP_Response| { &mut m.fake_ip },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fake_ports",
            |m: &CGameNetworking_AllocateFakeIP_Response| { &m.fake_ports },
            |m: &mut CGameNetworking_AllocateFakeIP_Response| { &mut m.fake_ports },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNetworking_AllocateFakeIP_Response>(
            "CGameNetworking_AllocateFakeIP_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNetworking_AllocateFakeIP_Response {
    const NAME: &'static str = "CGameNetworking_AllocateFakeIP_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.fake_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.fake_ports)?;
                },
                16 => {
                    self.fake_ports.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fake_ip {
            my_size += 1 + 4;
        }
        for value in &self.fake_ports {
            my_size += crate::rt::uint32_size(2, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.fake_ip {
            os.write_fixed32(1, v)?;
        }
        for v in &self.fake_ports {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNetworking_AllocateFakeIP_Response {
        CGameNetworking_AllocateFakeIP_Response::new()
    }

    fn clear(&mut self) {
        self.fake_ip = ::std::option::Option::None;
        self.fake_ports.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNetworking_AllocateFakeIP_Response {
        static instance: CGameNetworking_AllocateFakeIP_Response = CGameNetworking_AllocateFakeIP_Response {
            fake_ip: ::std::option::Option::None,
            fake_ports: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNetworking_AllocateFakeIP_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNetworking_AllocateFakeIP_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNetworking_AllocateFakeIP_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNetworking_AllocateFakeIP_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNetworking_ReleaseFakeIP_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNetworking_ReleaseFakeIP_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNetworking_ReleaseFakeIP_Notification.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNetworking_ReleaseFakeIP_Notification.fake_ip)
    pub fake_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNetworking_ReleaseFakeIP_Notification.fake_ports)
    pub fake_ports: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNetworking_ReleaseFakeIP_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNetworking_ReleaseFakeIP_Notification {
    fn default() -> &'a CGameNetworking_ReleaseFakeIP_Notification {
        <CGameNetworking_ReleaseFakeIP_Notification as crate::Message>::default_instance()
    }
}

impl CGameNetworking_ReleaseFakeIP_Notification {
    pub fn new() -> CGameNetworking_ReleaseFakeIP_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 fake_ip = 2;

    pub fn fake_ip(&self) -> u32 {
        self.fake_ip.unwrap_or(0)
    }

    pub fn clear_fake_ip(&mut self) {
        self.fake_ip = ::std::option::Option::None;
    }

    pub fn has_fake_ip(&self) -> bool {
        self.fake_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fake_ip(&mut self, v: u32) {
        self.fake_ip = ::std::option::Option::Some(v);
    }

    // repeated uint32 fake_ports = 3;

    pub fn fake_ports(&self) -> &[u32] {
        &self.fake_ports
    }

    pub fn clear_fake_ports(&mut self) {
        self.fake_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_fake_ports(&mut self, v: ::std::vec::Vec<u32>) {
        self.fake_ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fake_ports(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.fake_ports
    }

    // Take field
    pub fn take_fake_ports(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.fake_ports, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CGameNetworking_ReleaseFakeIP_Notification| { &m.app_id },
            |m: &mut CGameNetworking_ReleaseFakeIP_Notification| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "fake_ip",
            |m: &CGameNetworking_ReleaseFakeIP_Notification| { &m.fake_ip },
            |m: &mut CGameNetworking_ReleaseFakeIP_Notification| { &mut m.fake_ip },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fake_ports",
            |m: &CGameNetworking_ReleaseFakeIP_Notification| { &m.fake_ports },
            |m: &mut CGameNetworking_ReleaseFakeIP_Notification| { &mut m.fake_ports },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNetworking_ReleaseFakeIP_Notification>(
            "CGameNetworking_ReleaseFakeIP_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNetworking_ReleaseFakeIP_Notification {
    const NAME: &'static str = "CGameNetworking_ReleaseFakeIP_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                21 => {
                    self.fake_ip = ::std::option::Option::Some(is.read_fixed32()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.fake_ports)?;
                },
                24 => {
                    self.fake_ports.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.fake_ip {
            my_size += 1 + 4;
        }
        for value in &self.fake_ports {
            my_size += crate::rt::uint32_size(3, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.fake_ip {
            os.write_fixed32(2, v)?;
        }
        for v in &self.fake_ports {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNetworking_ReleaseFakeIP_Notification {
        CGameNetworking_ReleaseFakeIP_Notification::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.fake_ip = ::std::option::Option::None;
        self.fake_ports.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNetworking_ReleaseFakeIP_Notification {
        static instance: CGameNetworking_ReleaseFakeIP_Notification = CGameNetworking_ReleaseFakeIP_Notification {
            app_id: ::std::option::Option::None,
            fake_ip: ::std::option::Option::None,
            fake_ports: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNetworking_ReleaseFakeIP_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNetworking_ReleaseFakeIP_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNetworking_ReleaseFakeIP_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNetworking_ReleaseFakeIP_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.steammessages_gamenetworking.steamclient.proto\x1a\x18steammessages_b\
    ase.proto\x1a,steammessages_unified_base.steamclient.proto\"e\n&CGameNet\
    working_AllocateFakeIP_Request\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\
    \x05appId\x12$\n\x0enum_fake_ports\x18\x02\x20\x01(\rR\x0cnumFakePorts\"\
    a\n'CGameNetworking_AllocateFakeIP_Response\x12\x17\n\x07fake_ip\x18\x01\
    \x20\x01(\x07R\x06fakeIp\x12\x1d\n\nfake_ports\x18\x02\x20\x03(\rR\tfake\
    Ports\"{\n*CGameNetworking_ReleaseFakeIP_Notification\x12\x15\n\x06app_i\
    d\x18\x01\x20\x01(\rR\x05appId\x12\x17\n\x07fake_ip\x18\x02\x20\x01(\x07\
    R\x06fakeIp\x12\x1d\n\nfake_ports\x18\x03\x20\x03(\rR\tfakePorts2\xc6\
    \x01\n\x0eGameNetworking\x12c\n\x0eAllocateFakeIP\x12'.CGameNetworking_A\
    llocateFakeIP_Request\x1a(.CGameNetworking_AllocateFakeIP_Response\x12O\
    \n\x13NotifyReleaseFakeIP\x12+.CGameNetworking_ReleaseFakeIP_Notificatio\
    n\x1a\x0b.NoResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CGameNetworking_AllocateFakeIP_Request::generated_message_descriptor_data());
            messages.push(CGameNetworking_AllocateFakeIP_Response::generated_message_descriptor_data());
            messages.push(CGameNetworking_ReleaseFakeIP_Notification::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
