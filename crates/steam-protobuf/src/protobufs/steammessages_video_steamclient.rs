// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_video.steamclient.proto`

// @@protoc_insertion_point(message:CVideo_ClientGetVideoURL_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_ClientGetVideoURL_Request {
    // message fields
    // @@protoc_insertion_point(field:CVideo_ClientGetVideoURL_Request.video_id)
    pub video_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideo_ClientGetVideoURL_Request.client_cellid)
    pub client_cellid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_ClientGetVideoURL_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_ClientGetVideoURL_Request {
    fn default() -> &'a CVideo_ClientGetVideoURL_Request {
        <CVideo_ClientGetVideoURL_Request as crate::Message>::default_instance()
    }
}

impl CVideo_ClientGetVideoURL_Request {
    pub fn new() -> CVideo_ClientGetVideoURL_Request {
        ::std::default::Default::default()
    }

    // optional uint64 video_id = 1;

    pub fn video_id(&self) -> u64 {
        self.video_id.unwrap_or(0)
    }

    pub fn clear_video_id(&mut self) {
        self.video_id = ::std::option::Option::None;
    }

    pub fn has_video_id(&self) -> bool {
        self.video_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_id(&mut self, v: u64) {
        self.video_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_cellid = 2;

    pub fn client_cellid(&self) -> u32 {
        self.client_cellid.unwrap_or(0)
    }

    pub fn clear_client_cellid(&mut self) {
        self.client_cellid = ::std::option::Option::None;
    }

    pub fn has_client_cellid(&self) -> bool {
        self.client_cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_cellid(&mut self, v: u32) {
        self.client_cellid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "video_id",
            |m: &CVideo_ClientGetVideoURL_Request| { &m.video_id },
            |m: &mut CVideo_ClientGetVideoURL_Request| { &mut m.video_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_cellid",
            |m: &CVideo_ClientGetVideoURL_Request| { &m.client_cellid },
            |m: &mut CVideo_ClientGetVideoURL_Request| { &mut m.client_cellid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVideo_ClientGetVideoURL_Request>(
            "CVideo_ClientGetVideoURL_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVideo_ClientGetVideoURL_Request {
    const NAME: &'static str = "CVideo_ClientGetVideoURL_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.video_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.client_cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.video_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.client_cellid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.video_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.client_cellid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_ClientGetVideoURL_Request {
        CVideo_ClientGetVideoURL_Request::new()
    }

    fn clear(&mut self) {
        self.video_id = ::std::option::Option::None;
        self.client_cellid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_ClientGetVideoURL_Request {
        static instance: CVideo_ClientGetVideoURL_Request = CVideo_ClientGetVideoURL_Request {
            video_id: ::std::option::Option::None,
            client_cellid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVideo_ClientGetVideoURL_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVideo_ClientGetVideoURL_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVideo_ClientGetVideoURL_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVideo_ClientGetVideoURL_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVideo_ClientGetVideoURL_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_ClientGetVideoURL_Response {
    // message fields
    // @@protoc_insertion_point(field:CVideo_ClientGetVideoURL_Response.video_id)
    pub video_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideo_ClientGetVideoURL_Response.video_url)
    pub video_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_ClientGetVideoURL_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_ClientGetVideoURL_Response {
    fn default() -> &'a CVideo_ClientGetVideoURL_Response {
        <CVideo_ClientGetVideoURL_Response as crate::Message>::default_instance()
    }
}

impl CVideo_ClientGetVideoURL_Response {
    pub fn new() -> CVideo_ClientGetVideoURL_Response {
        ::std::default::Default::default()
    }

    // optional uint64 video_id = 1;

    pub fn video_id(&self) -> u64 {
        self.video_id.unwrap_or(0)
    }

    pub fn clear_video_id(&mut self) {
        self.video_id = ::std::option::Option::None;
    }

    pub fn has_video_id(&self) -> bool {
        self.video_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_id(&mut self, v: u64) {
        self.video_id = ::std::option::Option::Some(v);
    }

    // optional string video_url = 2;

    pub fn video_url(&self) -> &str {
        match self.video_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_video_url(&mut self) {
        self.video_url = ::std::option::Option::None;
    }

    pub fn has_video_url(&self) -> bool {
        self.video_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_url(&mut self, v: ::std::string::String) {
        self.video_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_video_url(&mut self) -> &mut ::std::string::String {
        if self.video_url.is_none() {
            self.video_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.video_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_video_url(&mut self) -> ::std::string::String {
        self.video_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "video_id",
            |m: &CVideo_ClientGetVideoURL_Response| { &m.video_id },
            |m: &mut CVideo_ClientGetVideoURL_Response| { &mut m.video_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "video_url",
            |m: &CVideo_ClientGetVideoURL_Response| { &m.video_url },
            |m: &mut CVideo_ClientGetVideoURL_Response| { &mut m.video_url },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVideo_ClientGetVideoURL_Response>(
            "CVideo_ClientGetVideoURL_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVideo_ClientGetVideoURL_Response {
    const NAME: &'static str = "CVideo_ClientGetVideoURL_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.video_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.video_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.video_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.video_url.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.video_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.video_url.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_ClientGetVideoURL_Response {
        CVideo_ClientGetVideoURL_Response::new()
    }

    fn clear(&mut self) {
        self.video_id = ::std::option::Option::None;
        self.video_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_ClientGetVideoURL_Response {
        static instance: CVideo_ClientGetVideoURL_Response = CVideo_ClientGetVideoURL_Response {
            video_id: ::std::option::Option::None,
            video_url: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVideo_ClientGetVideoURL_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVideo_ClientGetVideoURL_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVideo_ClientGetVideoURL_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVideo_ClientGetVideoURL_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:VideoBookmark)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VideoBookmark {
    // message fields
    // @@protoc_insertion_point(field:VideoBookmark.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:VideoBookmark.playback_position_in_seconds)
    pub playback_position_in_seconds: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:VideoBookmark.video_track_id)
    pub video_track_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:VideoBookmark.audio_track_id)
    pub audio_track_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:VideoBookmark.timedtext_track_id)
    pub timedtext_track_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:VideoBookmark.last_modified)
    pub last_modified: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:VideoBookmark.hide_from_watch_history)
    pub hide_from_watch_history: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:VideoBookmark.hide_from_library)
    pub hide_from_library: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:VideoBookmark.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VideoBookmark {
    fn default() -> &'a VideoBookmark {
        <VideoBookmark as crate::Message>::default_instance()
    }
}

impl VideoBookmark {
    pub fn new() -> VideoBookmark {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 playback_position_in_seconds = 2;

    pub fn playback_position_in_seconds(&self) -> u32 {
        self.playback_position_in_seconds.unwrap_or(0)
    }

    pub fn clear_playback_position_in_seconds(&mut self) {
        self.playback_position_in_seconds = ::std::option::Option::None;
    }

    pub fn has_playback_position_in_seconds(&self) -> bool {
        self.playback_position_in_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playback_position_in_seconds(&mut self, v: u32) {
        self.playback_position_in_seconds = ::std::option::Option::Some(v);
    }

    // optional uint64 video_track_id = 3;

    pub fn video_track_id(&self) -> u64 {
        self.video_track_id.unwrap_or(0)
    }

    pub fn clear_video_track_id(&mut self) {
        self.video_track_id = ::std::option::Option::None;
    }

    pub fn has_video_track_id(&self) -> bool {
        self.video_track_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_track_id(&mut self, v: u64) {
        self.video_track_id = ::std::option::Option::Some(v);
    }

    // optional uint64 audio_track_id = 4;

    pub fn audio_track_id(&self) -> u64 {
        self.audio_track_id.unwrap_or(0)
    }

    pub fn clear_audio_track_id(&mut self) {
        self.audio_track_id = ::std::option::Option::None;
    }

    pub fn has_audio_track_id(&self) -> bool {
        self.audio_track_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_audio_track_id(&mut self, v: u64) {
        self.audio_track_id = ::std::option::Option::Some(v);
    }

    // optional uint64 timedtext_track_id = 5;

    pub fn timedtext_track_id(&self) -> u64 {
        self.timedtext_track_id.unwrap_or(0)
    }

    pub fn clear_timedtext_track_id(&mut self) {
        self.timedtext_track_id = ::std::option::Option::None;
    }

    pub fn has_timedtext_track_id(&self) -> bool {
        self.timedtext_track_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timedtext_track_id(&mut self, v: u64) {
        self.timedtext_track_id = ::std::option::Option::Some(v);
    }

    // optional uint32 last_modified = 6;

    pub fn last_modified(&self) -> u32 {
        self.last_modified.unwrap_or(0)
    }

    pub fn clear_last_modified(&mut self) {
        self.last_modified = ::std::option::Option::None;
    }

    pub fn has_last_modified(&self) -> bool {
        self.last_modified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_modified(&mut self, v: u32) {
        self.last_modified = ::std::option::Option::Some(v);
    }

    // optional bool hide_from_watch_history = 7;

    pub fn hide_from_watch_history(&self) -> bool {
        self.hide_from_watch_history.unwrap_or(false)
    }

    pub fn clear_hide_from_watch_history(&mut self) {
        self.hide_from_watch_history = ::std::option::Option::None;
    }

    pub fn has_hide_from_watch_history(&self) -> bool {
        self.hide_from_watch_history.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hide_from_watch_history(&mut self, v: bool) {
        self.hide_from_watch_history = ::std::option::Option::Some(v);
    }

    // optional bool hide_from_library = 8;

    pub fn hide_from_library(&self) -> bool {
        self.hide_from_library.unwrap_or(false)
    }

    pub fn clear_hide_from_library(&mut self) {
        self.hide_from_library = ::std::option::Option::None;
    }

    pub fn has_hide_from_library(&self) -> bool {
        self.hide_from_library.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hide_from_library(&mut self, v: bool) {
        self.hide_from_library = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &VideoBookmark| { &m.app_id },
            |m: &mut VideoBookmark| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "playback_position_in_seconds",
            |m: &VideoBookmark| { &m.playback_position_in_seconds },
            |m: &mut VideoBookmark| { &mut m.playback_position_in_seconds },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "video_track_id",
            |m: &VideoBookmark| { &m.video_track_id },
            |m: &mut VideoBookmark| { &mut m.video_track_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "audio_track_id",
            |m: &VideoBookmark| { &m.audio_track_id },
            |m: &mut VideoBookmark| { &mut m.audio_track_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timedtext_track_id",
            |m: &VideoBookmark| { &m.timedtext_track_id },
            |m: &mut VideoBookmark| { &mut m.timedtext_track_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_modified",
            |m: &VideoBookmark| { &m.last_modified },
            |m: &mut VideoBookmark| { &mut m.last_modified },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hide_from_watch_history",
            |m: &VideoBookmark| { &m.hide_from_watch_history },
            |m: &mut VideoBookmark| { &mut m.hide_from_watch_history },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hide_from_library",
            |m: &VideoBookmark| { &m.hide_from_library },
            |m: &mut VideoBookmark| { &mut m.hide_from_library },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<VideoBookmark>(
            "VideoBookmark",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for VideoBookmark {
    const NAME: &'static str = "VideoBookmark";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.playback_position_in_seconds = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.video_track_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.audio_track_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.timedtext_track_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.last_modified = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.hide_from_watch_history = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.hide_from_library = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.playback_position_in_seconds {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.video_track_id {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.audio_track_id {
            my_size += crate::rt::uint64_size(4, v);
        }
        if let Some(v) = self.timedtext_track_id {
            my_size += crate::rt::uint64_size(5, v);
        }
        if let Some(v) = self.last_modified {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.hide_from_watch_history {
            my_size += 1 + 1;
        }
        if let Some(v) = self.hide_from_library {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.playback_position_in_seconds {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.video_track_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.audio_track_id {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.timedtext_track_id {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.last_modified {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.hide_from_watch_history {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.hide_from_library {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VideoBookmark {
        VideoBookmark::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.playback_position_in_seconds = ::std::option::Option::None;
        self.video_track_id = ::std::option::Option::None;
        self.audio_track_id = ::std::option::Option::None;
        self.timedtext_track_id = ::std::option::Option::None;
        self.last_modified = ::std::option::Option::None;
        self.hide_from_watch_history = ::std::option::Option::None;
        self.hide_from_library = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VideoBookmark {
        static instance: VideoBookmark = VideoBookmark {
            app_id: ::std::option::Option::None,
            playback_position_in_seconds: ::std::option::Option::None,
            video_track_id: ::std::option::Option::None,
            audio_track_id: ::std::option::Option::None,
            timedtext_track_id: ::std::option::Option::None,
            last_modified: ::std::option::Option::None,
            hide_from_watch_history: ::std::option::Option::None,
            hide_from_library: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for VideoBookmark {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VideoBookmark").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VideoBookmark {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for VideoBookmark {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVideo_SetVideoBookmark_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_SetVideoBookmark_Notification {
    // message fields
    // @@protoc_insertion_point(field:CVideo_SetVideoBookmark_Notification.bookmarks)
    pub bookmarks: ::std::vec::Vec<VideoBookmark>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_SetVideoBookmark_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_SetVideoBookmark_Notification {
    fn default() -> &'a CVideo_SetVideoBookmark_Notification {
        <CVideo_SetVideoBookmark_Notification as crate::Message>::default_instance()
    }
}

impl CVideo_SetVideoBookmark_Notification {
    pub fn new() -> CVideo_SetVideoBookmark_Notification {
        ::std::default::Default::default()
    }

    // repeated .VideoBookmark bookmarks = 1;

    pub fn bookmarks(&self) -> &[VideoBookmark] {
        &self.bookmarks
    }

    pub fn clear_bookmarks(&mut self) {
        self.bookmarks.clear();
    }

    // Param is passed by value, moved
    pub fn set_bookmarks(&mut self, v: ::std::vec::Vec<VideoBookmark>) {
        self.bookmarks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bookmarks(&mut self) -> &mut ::std::vec::Vec<VideoBookmark> {
        &mut self.bookmarks
    }

    // Take field
    pub fn take_bookmarks(&mut self) -> ::std::vec::Vec<VideoBookmark> {
        ::std::mem::replace(&mut self.bookmarks, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bookmarks",
            |m: &CVideo_SetVideoBookmark_Notification| { &m.bookmarks },
            |m: &mut CVideo_SetVideoBookmark_Notification| { &mut m.bookmarks },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVideo_SetVideoBookmark_Notification>(
            "CVideo_SetVideoBookmark_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVideo_SetVideoBookmark_Notification {
    const NAME: &'static str = "CVideo_SetVideoBookmark_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bookmarks.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.bookmarks {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.bookmarks {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_SetVideoBookmark_Notification {
        CVideo_SetVideoBookmark_Notification::new()
    }

    fn clear(&mut self) {
        self.bookmarks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_SetVideoBookmark_Notification {
        static instance: CVideo_SetVideoBookmark_Notification = CVideo_SetVideoBookmark_Notification {
            bookmarks: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVideo_SetVideoBookmark_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVideo_SetVideoBookmark_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVideo_SetVideoBookmark_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVideo_SetVideoBookmark_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVideo_GetVideoBookmarks_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_GetVideoBookmarks_Request {
    // message fields
    // @@protoc_insertion_point(field:CVideo_GetVideoBookmarks_Request.appids)
    pub appids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CVideo_GetVideoBookmarks_Request.updated_since)
    pub updated_since: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_GetVideoBookmarks_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_GetVideoBookmarks_Request {
    fn default() -> &'a CVideo_GetVideoBookmarks_Request {
        <CVideo_GetVideoBookmarks_Request as crate::Message>::default_instance()
    }
}

impl CVideo_GetVideoBookmarks_Request {
    pub fn new() -> CVideo_GetVideoBookmarks_Request {
        ::std::default::Default::default()
    }

    // repeated uint32 appids = 1;

    pub fn appids(&self) -> &[u32] {
        &self.appids
    }

    pub fn clear_appids(&mut self) {
        self.appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids
    }

    // Take field
    pub fn take_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids, ::std::vec::Vec::new())
    }

    // optional uint32 updated_since = 2;

    pub fn updated_since(&self) -> u32 {
        self.updated_since.unwrap_or(0)
    }

    pub fn clear_updated_since(&mut self) {
        self.updated_since = ::std::option::Option::None;
    }

    pub fn has_updated_since(&self) -> bool {
        self.updated_since.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_since(&mut self, v: u32) {
        self.updated_since = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids",
            |m: &CVideo_GetVideoBookmarks_Request| { &m.appids },
            |m: &mut CVideo_GetVideoBookmarks_Request| { &mut m.appids },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "updated_since",
            |m: &CVideo_GetVideoBookmarks_Request| { &m.updated_since },
            |m: &mut CVideo_GetVideoBookmarks_Request| { &mut m.updated_since },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVideo_GetVideoBookmarks_Request>(
            "CVideo_GetVideoBookmarks_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVideo_GetVideoBookmarks_Request {
    const NAME: &'static str = "CVideo_GetVideoBookmarks_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids)?;
                },
                8 => {
                    self.appids.push(is.read_uint32()?);
                },
                16 => {
                    self.updated_since = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.appids {
            my_size += crate::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.updated_since {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.appids {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.updated_since {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_GetVideoBookmarks_Request {
        CVideo_GetVideoBookmarks_Request::new()
    }

    fn clear(&mut self) {
        self.appids.clear();
        self.updated_since = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_GetVideoBookmarks_Request {
        static instance: CVideo_GetVideoBookmarks_Request = CVideo_GetVideoBookmarks_Request {
            appids: ::std::vec::Vec::new(),
            updated_since: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVideo_GetVideoBookmarks_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVideo_GetVideoBookmarks_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVideo_GetVideoBookmarks_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVideo_GetVideoBookmarks_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVideo_GetVideoBookmarks_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_GetVideoBookmarks_Response {
    // message fields
    // @@protoc_insertion_point(field:CVideo_GetVideoBookmarks_Response.bookmarks)
    pub bookmarks: ::std::vec::Vec<VideoBookmark>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_GetVideoBookmarks_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_GetVideoBookmarks_Response {
    fn default() -> &'a CVideo_GetVideoBookmarks_Response {
        <CVideo_GetVideoBookmarks_Response as crate::Message>::default_instance()
    }
}

impl CVideo_GetVideoBookmarks_Response {
    pub fn new() -> CVideo_GetVideoBookmarks_Response {
        ::std::default::Default::default()
    }

    // repeated .VideoBookmark bookmarks = 1;

    pub fn bookmarks(&self) -> &[VideoBookmark] {
        &self.bookmarks
    }

    pub fn clear_bookmarks(&mut self) {
        self.bookmarks.clear();
    }

    // Param is passed by value, moved
    pub fn set_bookmarks(&mut self, v: ::std::vec::Vec<VideoBookmark>) {
        self.bookmarks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bookmarks(&mut self) -> &mut ::std::vec::Vec<VideoBookmark> {
        &mut self.bookmarks
    }

    // Take field
    pub fn take_bookmarks(&mut self) -> ::std::vec::Vec<VideoBookmark> {
        ::std::mem::replace(&mut self.bookmarks, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bookmarks",
            |m: &CVideo_GetVideoBookmarks_Response| { &m.bookmarks },
            |m: &mut CVideo_GetVideoBookmarks_Response| { &mut m.bookmarks },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVideo_GetVideoBookmarks_Response>(
            "CVideo_GetVideoBookmarks_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVideo_GetVideoBookmarks_Response {
    const NAME: &'static str = "CVideo_GetVideoBookmarks_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bookmarks.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.bookmarks {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.bookmarks {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_GetVideoBookmarks_Response {
        CVideo_GetVideoBookmarks_Response::new()
    }

    fn clear(&mut self) {
        self.bookmarks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_GetVideoBookmarks_Response {
        static instance: CVideo_GetVideoBookmarks_Response = CVideo_GetVideoBookmarks_Response {
            bookmarks: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVideo_GetVideoBookmarks_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVideo_GetVideoBookmarks_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVideo_GetVideoBookmarks_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVideo_GetVideoBookmarks_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVideo_UnlockedH264_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_UnlockedH264_Notification {
    // message fields
    // @@protoc_insertion_point(field:CVideo_UnlockedH264_Notification.encryption_key)
    pub encryption_key: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_UnlockedH264_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_UnlockedH264_Notification {
    fn default() -> &'a CVideo_UnlockedH264_Notification {
        <CVideo_UnlockedH264_Notification as crate::Message>::default_instance()
    }
}

impl CVideo_UnlockedH264_Notification {
    pub fn new() -> CVideo_UnlockedH264_Notification {
        ::std::default::Default::default()
    }

    // optional bytes encryption_key = 1;

    pub fn encryption_key(&self) -> &[u8] {
        match self.encryption_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encryption_key(&mut self) {
        self.encryption_key = ::std::option::Option::None;
    }

    pub fn has_encryption_key(&self) -> bool {
        self.encryption_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_key(&mut self, v: ::bytes::Bytes) {
        self.encryption_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_key(&mut self) -> &mut ::bytes::Bytes {
        if self.encryption_key.is_none() {
            self.encryption_key = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.encryption_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryption_key(&mut self) -> ::bytes::Bytes {
        self.encryption_key.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encryption_key",
            |m: &CVideo_UnlockedH264_Notification| { &m.encryption_key },
            |m: &mut CVideo_UnlockedH264_Notification| { &mut m.encryption_key },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVideo_UnlockedH264_Notification>(
            "CVideo_UnlockedH264_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVideo_UnlockedH264_Notification {
    const NAME: &'static str = "CVideo_UnlockedH264_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.encryption_key = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.encryption_key.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.encryption_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_UnlockedH264_Notification {
        CVideo_UnlockedH264_Notification::new()
    }

    fn clear(&mut self) {
        self.encryption_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_UnlockedH264_Notification {
        static instance: CVideo_UnlockedH264_Notification = CVideo_UnlockedH264_Notification {
            encryption_key: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVideo_UnlockedH264_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVideo_UnlockedH264_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVideo_UnlockedH264_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVideo_UnlockedH264_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CFovasVideo_ClientGetOPFSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFovasVideo_ClientGetOPFSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CFovasVideo_ClientGetOPFSettings_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFovasVideo_ClientGetOPFSettings_Request.client_cellid)
    pub client_cellid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CFovasVideo_ClientGetOPFSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFovasVideo_ClientGetOPFSettings_Request {
    fn default() -> &'a CFovasVideo_ClientGetOPFSettings_Request {
        <CFovasVideo_ClientGetOPFSettings_Request as crate::Message>::default_instance()
    }
}

impl CFovasVideo_ClientGetOPFSettings_Request {
    pub fn new() -> CFovasVideo_ClientGetOPFSettings_Request {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_cellid = 2;

    pub fn client_cellid(&self) -> u32 {
        self.client_cellid.unwrap_or(0)
    }

    pub fn clear_client_cellid(&mut self) {
        self.client_cellid = ::std::option::Option::None;
    }

    pub fn has_client_cellid(&self) -> bool {
        self.client_cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_cellid(&mut self, v: u32) {
        self.client_cellid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CFovasVideo_ClientGetOPFSettings_Request| { &m.app_id },
            |m: &mut CFovasVideo_ClientGetOPFSettings_Request| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_cellid",
            |m: &CFovasVideo_ClientGetOPFSettings_Request| { &m.client_cellid },
            |m: &mut CFovasVideo_ClientGetOPFSettings_Request| { &mut m.client_cellid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CFovasVideo_ClientGetOPFSettings_Request>(
            "CFovasVideo_ClientGetOPFSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CFovasVideo_ClientGetOPFSettings_Request {
    const NAME: &'static str = "CFovasVideo_ClientGetOPFSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.client_cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.client_cellid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_cellid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFovasVideo_ClientGetOPFSettings_Request {
        CFovasVideo_ClientGetOPFSettings_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.client_cellid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFovasVideo_ClientGetOPFSettings_Request {
        static instance: CFovasVideo_ClientGetOPFSettings_Request = CFovasVideo_ClientGetOPFSettings_Request {
            app_id: ::std::option::Option::None,
            client_cellid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CFovasVideo_ClientGetOPFSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CFovasVideo_ClientGetOPFSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CFovasVideo_ClientGetOPFSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CFovasVideo_ClientGetOPFSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CFovasVideo_ClientGetOPFSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFovasVideo_ClientGetOPFSettings_Response {
    // message fields
    // @@protoc_insertion_point(field:CFovasVideo_ClientGetOPFSettings_Response.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
    pub opf_settings: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CFovasVideo_ClientGetOPFSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFovasVideo_ClientGetOPFSettings_Response {
    fn default() -> &'a CFovasVideo_ClientGetOPFSettings_Response {
        <CFovasVideo_ClientGetOPFSettings_Response as crate::Message>::default_instance()
    }
}

impl CFovasVideo_ClientGetOPFSettings_Response {
    pub fn new() -> CFovasVideo_ClientGetOPFSettings_Response {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string opf_settings = 2;

    pub fn opf_settings(&self) -> &str {
        match self.opf_settings.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_opf_settings(&mut self) {
        self.opf_settings = ::std::option::Option::None;
    }

    pub fn has_opf_settings(&self) -> bool {
        self.opf_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_opf_settings(&mut self, v: ::std::string::String) {
        self.opf_settings = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_opf_settings(&mut self) -> &mut ::std::string::String {
        if self.opf_settings.is_none() {
            self.opf_settings = ::std::option::Option::Some(::std::string::String::new());
        }
        self.opf_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_opf_settings(&mut self) -> ::std::string::String {
        self.opf_settings.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CFovasVideo_ClientGetOPFSettings_Response| { &m.app_id },
            |m: &mut CFovasVideo_ClientGetOPFSettings_Response| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "opf_settings",
            |m: &CFovasVideo_ClientGetOPFSettings_Response| { &m.opf_settings },
            |m: &mut CFovasVideo_ClientGetOPFSettings_Response| { &mut m.opf_settings },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CFovasVideo_ClientGetOPFSettings_Response>(
            "CFovasVideo_ClientGetOPFSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CFovasVideo_ClientGetOPFSettings_Response {
    const NAME: &'static str = "CFovasVideo_ClientGetOPFSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.opf_settings = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.opf_settings.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.opf_settings.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFovasVideo_ClientGetOPFSettings_Response {
        CFovasVideo_ClientGetOPFSettings_Response::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.opf_settings = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFovasVideo_ClientGetOPFSettings_Response {
        static instance: CFovasVideo_ClientGetOPFSettings_Response = CFovasVideo_ClientGetOPFSettings_Response {
            app_id: ::std::option::Option::None,
            opf_settings: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CFovasVideo_ClientGetOPFSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CFovasVideo_ClientGetOPFSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CFovasVideo_ClientGetOPFSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CFovasVideo_ClientGetOPFSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%steammessages_video.steamclient.proto\x1a\x18steammessages_base.proto\
    \x1a,steammessages_unified_base.steamclient.proto\"b\n\x20CVideo_ClientG\
    etVideoURL_Request\x12\x19\n\x08video_id\x18\x01\x20\x01(\x04R\x07videoI\
    d\x12#\n\rclient_cellid\x18\x02\x20\x01(\rR\x0cclientCellid\"[\n!CVideo_\
    ClientGetVideoURL_Response\x12\x19\n\x08video_id\x18\x01\x20\x01(\x04R\
    \x07videoId\x12\x1b\n\tvideo_url\x18\x02\x20\x01(\tR\x08videoUrl\"\xf7\
    \x02\n\rVideoBookmark\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\x05appId\
    \x12?\n\x1cplayback_position_in_seconds\x18\x02\x20\x01(\rR\x19playbackP\
    ositionInSeconds\x12$\n\x0evideo_track_id\x18\x03\x20\x01(\x04R\x0cvideo\
    TrackId\x12$\n\x0eaudio_track_id\x18\x04\x20\x01(\x04R\x0caudioTrackId\
    \x12,\n\x12timedtext_track_id\x18\x05\x20\x01(\x04R\x10timedtextTrackId\
    \x12#\n\rlast_modified\x18\x06\x20\x01(\rR\x0clastModified\x12<\n\x17hid\
    e_from_watch_history\x18\x07\x20\x01(\x08:\x05falseR\x14hideFromWatchHis\
    tory\x121\n\x11hide_from_library\x18\x08\x20\x01(\x08:\x05falseR\x0fhide\
    FromLibrary\"T\n$CVideo_SetVideoBookmark_Notification\x12,\n\tbookmarks\
    \x18\x01\x20\x03(\x0b2\x0e.VideoBookmarkR\tbookmarks\"_\n\x20CVideo_GetV\
    ideoBookmarks_Request\x12\x16\n\x06appids\x18\x01\x20\x03(\rR\x06appids\
    \x12#\n\rupdated_since\x18\x02\x20\x01(\rR\x0cupdatedSince\"Q\n!CVideo_G\
    etVideoBookmarks_Response\x12,\n\tbookmarks\x18\x01\x20\x03(\x0b2\x0e.Vi\
    deoBookmarkR\tbookmarks\"I\n\x20CVideo_UnlockedH264_Notification\x12%\n\
    \x0eencryption_key\x18\x01\x20\x01(\x0cR\rencryptionKey\"f\n(CFovasVideo\
    _ClientGetOPFSettings_Request\x12\x15\n\x06app_id\x18\x01\x20\x01(\rR\
    \x05appId\x12#\n\rclient_cellid\x18\x02\x20\x01(\rR\x0cclientCellid\"e\n\
    )CFovasVideo_ClientGetOPFSettings_Response\x12\x15\n\x06app_id\x18\x01\
    \x20\x01(\rR\x05appId\x12!\n\x0copf_settings\x18\x02\x20\x01(\tR\x0bopfS\
    ettings2\x87\x02\n\x05Video\x12Z\n\x11ClientGetVideoURL\x12!.CVideo_Clie\
    ntGetVideoURL_Request\x1a\".CVideo_ClientGetVideoURL_Response\x12F\n\x10\
    SetVideoBookmark\x12%.CVideo_SetVideoBookmark_Notification\x1a\x0b.NoRes\
    ponse\x12Z\n\x11GetVideoBookmarks\x12!.CVideo_GetVideoBookmarks_Request\
    \x1a\".CVideo_GetVideoBookmarks_Response2Y\n\x0bVideoClient\x12D\n\x12No\
    tifyUnlockedH264\x12!.CVideo_UnlockedH264_Notification\x1a\x0b.NoRespons\
    e\x1a\x04\xc0\xb5\x18\x022{\n\nFovasVideo\x12m\n\x14ClientGetOPFSettings\
    \x12).CFovasVideo_ClientGetOPFSettings_Request\x1a*.CFovasVideo_ClientGe\
    tOPFSettings_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(CVideo_ClientGetVideoURL_Request::generated_message_descriptor_data());
            messages.push(CVideo_ClientGetVideoURL_Response::generated_message_descriptor_data());
            messages.push(VideoBookmark::generated_message_descriptor_data());
            messages.push(CVideo_SetVideoBookmark_Notification::generated_message_descriptor_data());
            messages.push(CVideo_GetVideoBookmarks_Request::generated_message_descriptor_data());
            messages.push(CVideo_GetVideoBookmarks_Response::generated_message_descriptor_data());
            messages.push(CVideo_UnlockedH264_Notification::generated_message_descriptor_data());
            messages.push(CFovasVideo_ClientGetOPFSettings_Request::generated_message_descriptor_data());
            messages.push(CFovasVideo_ClientGetOPFSettings_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
