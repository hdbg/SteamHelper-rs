// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_base.proto`

// @@protoc_insertion_point(message:WebUINoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WebUINoResponse {
    // special fields
    // @@protoc_insertion_point(special_field:WebUINoResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WebUINoResponse {
    fn default() -> &'a WebUINoResponse {
        <WebUINoResponse as crate::Message>::default_instance()
    }
}

impl WebUINoResponse {
    pub fn new() -> WebUINoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<WebUINoResponse>(
            "WebUINoResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for WebUINoResponse {
    const NAME: &'static str = "WebUINoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WebUINoResponse {
        WebUINoResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WebUINoResponse {
        static instance: WebUINoResponse = WebUINoResponse {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for WebUINoResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WebUINoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WebUINoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for WebUINoResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EClientExecutionSite)
pub enum EClientExecutionSite {
    // @@protoc_insertion_point(enum_value:EClientExecutionSite.k_EClientExecutionSiteInvalid)
    k_EClientExecutionSiteInvalid = 0,
    // @@protoc_insertion_point(enum_value:EClientExecutionSite.k_EClientExecutionSiteSteamUI)
    k_EClientExecutionSiteSteamUI = 1,
    // @@protoc_insertion_point(enum_value:EClientExecutionSite.k_EClientExecutionSiteClientdll)
    k_EClientExecutionSiteClientdll = 2,
    // @@protoc_insertion_point(enum_value:EClientExecutionSite.k_EClientExecutionSiteAny)
    k_EClientExecutionSiteAny = 3,
}

impl crate::Enum for EClientExecutionSite {
    const NAME: &'static str = "EClientExecutionSite";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EClientExecutionSite> {
        match value {
            0 => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteInvalid),
            1 => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteSteamUI),
            2 => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteClientdll),
            3 => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteAny),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EClientExecutionSite> {
        match str {
            "k_EClientExecutionSiteInvalid" => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteInvalid),
            "k_EClientExecutionSiteSteamUI" => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteSteamUI),
            "k_EClientExecutionSiteClientdll" => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteClientdll),
            "k_EClientExecutionSiteAny" => ::std::option::Option::Some(EClientExecutionSite::k_EClientExecutionSiteAny),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EClientExecutionSite] = &[
        EClientExecutionSite::k_EClientExecutionSiteInvalid,
        EClientExecutionSite::k_EClientExecutionSiteSteamUI,
        EClientExecutionSite::k_EClientExecutionSiteClientdll,
        EClientExecutionSite::k_EClientExecutionSiteAny,
    ];
}

impl crate::EnumFull for EClientExecutionSite {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EClientExecutionSite").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EClientExecutionSite {
    fn default() -> Self {
        EClientExecutionSite::k_EClientExecutionSiteInvalid
    }
}

impl EClientExecutionSite {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EClientExecutionSite>("EClientExecutionSite")
    }
}

/// Extension fields
pub mod exts {

    pub const webui_service_execution_site: crate::ext::ExtFieldOptional<crate::descriptor::ServiceOptions, crate::EnumOrUnknown<super::EClientExecutionSite>> = crate::ext::ExtFieldOptional::new(70000, crate::descriptor::field_descriptor_proto::Type::TYPE_ENUM);

    pub const webui_method_execution_site: crate::ext::ExtFieldOptional<crate::descriptor::MethodOptions, crate::EnumOrUnknown<super::EClientExecutionSite>> = crate::ext::ExtFieldOptional::new(70000, crate::descriptor::field_descriptor_proto::Type::TYPE_ENUM);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18webuimessages_base.proto\x1a\x0benums.proto\x1a\x18steammessages_b\
    ase.proto\x1a\x20google/protobuf/descriptor.proto\"\x11\n\x0fWebUINoResp\
    onse*\xa0\x01\n\x14EClientExecutionSite\x12!\n\x1dk_EClientExecutionSite\
    Invalid\x10\0\x12!\n\x1dk_EClientExecutionSiteSteamUI\x10\x01\x12#\n\x1f\
    k_EClientExecutionSiteClientdll\x10\x02\x12\x1d\n\x19k_EClientExecutionS\
    iteAny\x10\x03:\x98\x01\n\x1cwebui_service_execution_site\x18\xf0\xa2\
    \x04\x20\x01(\x0e2\x15.EClientExecutionSite\x12\x1f.google.protobuf.Serv\
    iceOptions:\x1dk_EClientExecutionSiteSteamUIR\x19webuiServiceExecutionSi\
    te:\x95\x01\n\x1bwebui_method_execution_site\x18\xf0\xa2\x04\x20\x01(\
    \x0e2\x15.EClientExecutionSite\x12\x1e.google.protobuf.MethodOptions:\
    \x1dk_EClientExecutionSiteInvalidR\x18webuiMethodExecutionSiteB\x05H\x01\
    \x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::enums::file_descriptor().clone());
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(crate::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(WebUINoResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EClientExecutionSite::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
