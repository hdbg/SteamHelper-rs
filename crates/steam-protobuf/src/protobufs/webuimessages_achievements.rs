// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_achievements.proto`

// @@protoc_insertion_point(message:CAchievements_GetInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAchievements_GetInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CAchievements_GetInfo_Request.gameid)
    pub gameid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAchievements_GetInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAchievements_GetInfo_Request {
    fn default() -> &'a CAchievements_GetInfo_Request {
        <CAchievements_GetInfo_Request as crate::Message>::default_instance()
    }
}

impl CAchievements_GetInfo_Request {
    pub fn new() -> CAchievements_GetInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint64 gameid = 1;

    pub fn gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameid",
            |m: &CAchievements_GetInfo_Request| { &m.gameid },
            |m: &mut CAchievements_GetInfo_Request| { &mut m.gameid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAchievements_GetInfo_Request>(
            "CAchievements_GetInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAchievements_GetInfo_Request {
    const NAME: &'static str = "CAchievements_GetInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gameid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.gameid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAchievements_GetInfo_Request {
        CAchievements_GetInfo_Request::new()
    }

    fn clear(&mut self) {
        self.gameid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAchievements_GetInfo_Request {
        static instance: CAchievements_GetInfo_Request = CAchievements_GetInfo_Request {
            gameid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAchievements_GetInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAchievements_GetInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAchievements_GetInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAchievements_GetInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAchievements_GetInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAchievements_GetInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.achievements)
    pub achievements: ::std::vec::Vec<cachievements_get_info_response::Info>,
    // special fields
    // @@protoc_insertion_point(special_field:CAchievements_GetInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAchievements_GetInfo_Response {
    fn default() -> &'a CAchievements_GetInfo_Response {
        <CAchievements_GetInfo_Response as crate::Message>::default_instance()
    }
}

impl CAchievements_GetInfo_Response {
    pub fn new() -> CAchievements_GetInfo_Response {
        ::std::default::Default::default()
    }

    // repeated .CAchievements_GetInfo_Response.Info achievements = 1;

    pub fn achievements(&self) -> &[cachievements_get_info_response::Info] {
        &self.achievements
    }

    pub fn clear_achievements(&mut self) {
        self.achievements.clear();
    }

    // Param is passed by value, moved
    pub fn set_achievements(&mut self, v: ::std::vec::Vec<cachievements_get_info_response::Info>) {
        self.achievements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_achievements(&mut self) -> &mut ::std::vec::Vec<cachievements_get_info_response::Info> {
        &mut self.achievements
    }

    // Take field
    pub fn take_achievements(&mut self) -> ::std::vec::Vec<cachievements_get_info_response::Info> {
        ::std::mem::replace(&mut self.achievements, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "achievements",
            |m: &CAchievements_GetInfo_Response| { &m.achievements },
            |m: &mut CAchievements_GetInfo_Response| { &mut m.achievements },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAchievements_GetInfo_Response>(
            "CAchievements_GetInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAchievements_GetInfo_Response {
    const NAME: &'static str = "CAchievements_GetInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.achievements.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.achievements {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.achievements {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAchievements_GetInfo_Response {
        CAchievements_GetInfo_Response::new()
    }

    fn clear(&mut self) {
        self.achievements.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAchievements_GetInfo_Response {
        static instance: CAchievements_GetInfo_Response = CAchievements_GetInfo_Response {
            achievements: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAchievements_GetInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAchievements_GetInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAchievements_GetInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAchievements_GetInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAchievements_GetInfo_Response`
pub mod cachievements_get_info_response {
    // @@protoc_insertion_point(message:CAchievements_GetInfo_Response.Info)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Info {
        // message fields
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.id)
        pub id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.desc)
        pub desc: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.image_url_achieved)
        pub image_url_achieved: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.image_url_not_achieved)
        pub image_url_not_achieved: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.achieved)
        pub achieved: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CAchievements_GetInfo_Response.Info.unlock_time)
        pub unlock_time: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CAchievements_GetInfo_Response.Info.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Info {
        fn default() -> &'a Info {
            <Info as crate::Message>::default_instance()
        }
    }

    impl Info {
        pub fn new() -> Info {
            ::std::default::Default::default()
        }

        // optional string id = 1;

        pub fn id(&self) -> &str {
            match self.id.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: ::std::string::String) {
            self.id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_id(&mut self) -> &mut ::std::string::String {
            if self.id.is_none() {
                self.id = ::std::option::Option::Some(::std::string::String::new());
            }
            self.id.as_mut().unwrap()
        }

        // Take field
        pub fn take_id(&mut self) -> ::std::string::String {
            self.id.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string desc = 3;

        pub fn desc(&self) -> &str {
            match self.desc.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_desc(&mut self) {
            self.desc = ::std::option::Option::None;
        }

        pub fn has_desc(&self) -> bool {
            self.desc.is_some()
        }

        // Param is passed by value, moved
        pub fn set_desc(&mut self, v: ::std::string::String) {
            self.desc = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_desc(&mut self) -> &mut ::std::string::String {
            if self.desc.is_none() {
                self.desc = ::std::option::Option::Some(::std::string::String::new());
            }
            self.desc.as_mut().unwrap()
        }

        // Take field
        pub fn take_desc(&mut self) -> ::std::string::String {
            self.desc.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string image_url_achieved = 4;

        pub fn image_url_achieved(&self) -> &str {
            match self.image_url_achieved.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_image_url_achieved(&mut self) {
            self.image_url_achieved = ::std::option::Option::None;
        }

        pub fn has_image_url_achieved(&self) -> bool {
            self.image_url_achieved.is_some()
        }

        // Param is passed by value, moved
        pub fn set_image_url_achieved(&mut self, v: ::std::string::String) {
            self.image_url_achieved = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_image_url_achieved(&mut self) -> &mut ::std::string::String {
            if self.image_url_achieved.is_none() {
                self.image_url_achieved = ::std::option::Option::Some(::std::string::String::new());
            }
            self.image_url_achieved.as_mut().unwrap()
        }

        // Take field
        pub fn take_image_url_achieved(&mut self) -> ::std::string::String {
            self.image_url_achieved.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string image_url_not_achieved = 5;

        pub fn image_url_not_achieved(&self) -> &str {
            match self.image_url_not_achieved.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_image_url_not_achieved(&mut self) {
            self.image_url_not_achieved = ::std::option::Option::None;
        }

        pub fn has_image_url_not_achieved(&self) -> bool {
            self.image_url_not_achieved.is_some()
        }

        // Param is passed by value, moved
        pub fn set_image_url_not_achieved(&mut self, v: ::std::string::String) {
            self.image_url_not_achieved = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_image_url_not_achieved(&mut self) -> &mut ::std::string::String {
            if self.image_url_not_achieved.is_none() {
                self.image_url_not_achieved = ::std::option::Option::Some(::std::string::String::new());
            }
            self.image_url_not_achieved.as_mut().unwrap()
        }

        // Take field
        pub fn take_image_url_not_achieved(&mut self) -> ::std::string::String {
            self.image_url_not_achieved.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool achieved = 6;

        pub fn achieved(&self) -> bool {
            self.achieved.unwrap_or(false)
        }

        pub fn clear_achieved(&mut self) {
            self.achieved = ::std::option::Option::None;
        }

        pub fn has_achieved(&self) -> bool {
            self.achieved.is_some()
        }

        // Param is passed by value, moved
        pub fn set_achieved(&mut self, v: bool) {
            self.achieved = ::std::option::Option::Some(v);
        }

        // optional uint32 unlock_time = 7;

        pub fn unlock_time(&self) -> u32 {
            self.unlock_time.unwrap_or(0)
        }

        pub fn clear_unlock_time(&mut self) {
            self.unlock_time = ::std::option::Option::None;
        }

        pub fn has_unlock_time(&self) -> bool {
            self.unlock_time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_unlock_time(&mut self, v: u32) {
            self.unlock_time = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &Info| { &m.id },
                |m: &mut Info| { &mut m.id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Info| { &m.name },
                |m: &mut Info| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "desc",
                |m: &Info| { &m.desc },
                |m: &mut Info| { &mut m.desc },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "image_url_achieved",
                |m: &Info| { &m.image_url_achieved },
                |m: &mut Info| { &mut m.image_url_achieved },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "image_url_not_achieved",
                |m: &Info| { &m.image_url_not_achieved },
                |m: &mut Info| { &mut m.image_url_not_achieved },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "achieved",
                |m: &Info| { &m.achieved },
                |m: &mut Info| { &mut m.achieved },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "unlock_time",
                |m: &Info| { &m.unlock_time },
                |m: &mut Info| { &mut m.unlock_time },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Info>(
                "CAchievements_GetInfo_Response.Info",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Info {
        const NAME: &'static str = "Info";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.id = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.desc = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.image_url_achieved = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.image_url_not_achieved = ::std::option::Option::Some(is.read_string()?);
                    },
                    48 => {
                        self.achieved = ::std::option::Option::Some(is.read_bool()?);
                    },
                    56 => {
                        self.unlock_time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.desc.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.image_url_achieved.as_ref() {
                my_size += crate::rt::string_size(4, &v);
            }
            if let Some(v) = self.image_url_not_achieved.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.achieved {
                my_size += 1 + 1;
            }
            if let Some(v) = self.unlock_time {
                my_size += crate::rt::uint32_size(7, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.id.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.desc.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.image_url_achieved.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.image_url_not_achieved.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.achieved {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.unlock_time {
                os.write_uint32(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Info {
            Info::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.desc = ::std::option::Option::None;
            self.image_url_achieved = ::std::option::Option::None;
            self.image_url_not_achieved = ::std::option::Option::None;
            self.achieved = ::std::option::Option::None;
            self.unlock_time = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Info {
            static instance: Info = Info {
                id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                desc: ::std::option::Option::None,
                image_url_achieved: ::std::option::Option::None,
                image_url_not_achieved: ::std::option::Option::None,
                achieved: ::std::option::Option::None,
                unlock_time: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Info {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAchievements_GetInfo_Response.Info").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Info {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Info {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20webuimessages_achievements.proto\x1a\x18steammessages_base.proto\
    \x1a\x18webuimessages_base.proto\"7\n\x1dCAchievements_GetInfo_Request\
    \x12\x16\n\x06gameid\x18\x01\x20\x01(\x04R\x06gameid\"\xcb\x02\n\x1eCAch\
    ievements_GetInfo_Response\x12H\n\x0cachievements\x18\x01\x20\x03(\x0b2$\
    .CAchievements_GetInfo_Response.InfoR\x0cachievements\x1a\xde\x01\n\x04I\
    nfo\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12\x12\n\x04desc\x18\x03\x20\x01(\tR\x04desc\x12,\
    \n\x12image_url_achieved\x18\x04\x20\x01(\tR\x10imageUrlAchieved\x123\n\
    \x16image_url_not_achieved\x18\x05\x20\x01(\tR\x13imageUrlNotAchieved\
    \x12\x1a\n\x08achieved\x18\x06\x20\x01(\x08R\x08achieved\x12\x1f\n\x0bun\
    lock_time\x18\x07\x20\x01(\rR\nunlockTime2`\n\x0cAchievements\x12J\n\x07\
    GetInfo\x12\x1e.CAchievements_GetInfo_Request\x1a\x1f.CAchievements_GetI\
    nfo_Response\x1a\x04\x80\x97\"\x02B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CAchievements_GetInfo_Request::generated_message_descriptor_data());
            messages.push(CAchievements_GetInfo_Response::generated_message_descriptor_data());
            messages.push(cachievements_get_info_response::Info::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
