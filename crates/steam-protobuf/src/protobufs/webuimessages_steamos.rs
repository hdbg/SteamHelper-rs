// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_steamos.proto`

// @@protoc_insertion_point(message:CSteamOSManagerState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManagerState {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSManagerState.is_service_available)
    pub is_service_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSteamOSManagerState.os_version)
    pub os_version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSteamOSManagerState.is_mandatory_update_available)
    pub is_mandatory_update_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSteamOSManagerState.startup_movie_variant)
    pub startup_movie_variant: ::std::option::Option<crate::EnumOrUnknown<super::enums::EStartupMovieVariant>>,
    // @@protoc_insertion_point(field:CSteamOSManagerState.is_status_led_control_available)
    pub is_status_led_control_available: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManagerState.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManagerState {
    fn default() -> &'a CSteamOSManagerState {
        <CSteamOSManagerState as crate::Message>::default_instance()
    }
}

impl CSteamOSManagerState {
    pub fn new() -> CSteamOSManagerState {
        ::std::default::Default::default()
    }

    // optional bool is_service_available = 1;

    pub fn is_service_available(&self) -> bool {
        self.is_service_available.unwrap_or(false)
    }

    pub fn clear_is_service_available(&mut self) {
        self.is_service_available = ::std::option::Option::None;
    }

    pub fn has_is_service_available(&self) -> bool {
        self.is_service_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_service_available(&mut self, v: bool) {
        self.is_service_available = ::std::option::Option::Some(v);
    }

    // optional string os_version = 2;

    pub fn os_version(&self) -> &str {
        match self.os_version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_os_version(&mut self) {
        self.os_version = ::std::option::Option::None;
    }

    pub fn has_os_version(&self) -> bool {
        self.os_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_version(&mut self, v: ::std::string::String) {
        self.os_version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_version(&mut self) -> &mut ::std::string::String {
        if self.os_version.is_none() {
            self.os_version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.os_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_os_version(&mut self) -> ::std::string::String {
        self.os_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_mandatory_update_available = 3;

    pub fn is_mandatory_update_available(&self) -> bool {
        self.is_mandatory_update_available.unwrap_or(false)
    }

    pub fn clear_is_mandatory_update_available(&mut self) {
        self.is_mandatory_update_available = ::std::option::Option::None;
    }

    pub fn has_is_mandatory_update_available(&self) -> bool {
        self.is_mandatory_update_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_mandatory_update_available(&mut self, v: bool) {
        self.is_mandatory_update_available = ::std::option::Option::Some(v);
    }

    // optional .EStartupMovieVariant startup_movie_variant = 4;

    pub fn startup_movie_variant(&self) -> super::enums::EStartupMovieVariant {
        match self.startup_movie_variant {
            Some(e) => e.enum_value_or(super::enums::EStartupMovieVariant::k_EStartupMovieVariant_Invalid),
            None => super::enums::EStartupMovieVariant::k_EStartupMovieVariant_Invalid,
        }
    }

    pub fn clear_startup_movie_variant(&mut self) {
        self.startup_movie_variant = ::std::option::Option::None;
    }

    pub fn has_startup_movie_variant(&self) -> bool {
        self.startup_movie_variant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startup_movie_variant(&mut self, v: super::enums::EStartupMovieVariant) {
        self.startup_movie_variant = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool is_status_led_control_available = 5;

    pub fn is_status_led_control_available(&self) -> bool {
        self.is_status_led_control_available.unwrap_or(false)
    }

    pub fn clear_is_status_led_control_available(&mut self) {
        self.is_status_led_control_available = ::std::option::Option::None;
    }

    pub fn has_is_status_led_control_available(&self) -> bool {
        self.is_status_led_control_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_status_led_control_available(&mut self, v: bool) {
        self.is_status_led_control_available = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_service_available",
            |m: &CSteamOSManagerState| { &m.is_service_available },
            |m: &mut CSteamOSManagerState| { &mut m.is_service_available },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "os_version",
            |m: &CSteamOSManagerState| { &m.os_version },
            |m: &mut CSteamOSManagerState| { &mut m.os_version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_mandatory_update_available",
            |m: &CSteamOSManagerState| { &m.is_mandatory_update_available },
            |m: &mut CSteamOSManagerState| { &mut m.is_mandatory_update_available },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "startup_movie_variant",
            |m: &CSteamOSManagerState| { &m.startup_movie_variant },
            |m: &mut CSteamOSManagerState| { &mut m.startup_movie_variant },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_status_led_control_available",
            |m: &CSteamOSManagerState| { &m.is_status_led_control_available },
            |m: &mut CSteamOSManagerState| { &mut m.is_status_led_control_available },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManagerState>(
            "CSteamOSManagerState",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManagerState {
    const NAME: &'static str = "CSteamOSManagerState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_service_available = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.os_version = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.is_mandatory_update_available = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.startup_movie_variant = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.is_status_led_control_available = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_service_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.os_version.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.is_mandatory_update_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.startup_movie_variant {
            my_size += crate::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.is_status_led_control_available {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.is_service_available {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.os_version.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.is_mandatory_update_available {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.startup_movie_variant {
            os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.is_status_led_control_available {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManagerState {
        CSteamOSManagerState::new()
    }

    fn clear(&mut self) {
        self.is_service_available = ::std::option::Option::None;
        self.os_version = ::std::option::Option::None;
        self.is_mandatory_update_available = ::std::option::Option::None;
        self.startup_movie_variant = ::std::option::Option::None;
        self.is_status_led_control_available = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManagerState {
        static instance: CSteamOSManagerState = CSteamOSManagerState {
            is_service_available: ::std::option::Option::None,
            os_version: ::std::option::Option::None,
            is_mandatory_update_available: ::std::option::Option::None,
            startup_movie_variant: ::std::option::Option::None,
            is_status_led_control_available: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManagerState {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManagerState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManagerState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManagerState {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_GetState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_GetState_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_GetState_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_GetState_Request {
    fn default() -> &'a CSteamOSManager_GetState_Request {
        <CSteamOSManager_GetState_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_GetState_Request {
    pub fn new() -> CSteamOSManager_GetState_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_GetState_Request>(
            "CSteamOSManager_GetState_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_GetState_Request {
    const NAME: &'static str = "CSteamOSManager_GetState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_GetState_Request {
        CSteamOSManager_GetState_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_GetState_Request {
        static instance: CSteamOSManager_GetState_Request = CSteamOSManager_GetState_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_GetState_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_GetState_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_GetState_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_GetState_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_GetState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_GetState_Response {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSManager_GetState_Response.state)
    pub state: crate::MessageField<CSteamOSManagerState>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_GetState_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_GetState_Response {
    fn default() -> &'a CSteamOSManager_GetState_Response {
        <CSteamOSManager_GetState_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_GetState_Response {
    pub fn new() -> CSteamOSManager_GetState_Response {
        ::std::default::Default::default()
    }

    // optional .CSteamOSManagerState state = 1;

    pub fn state(&self) -> &CSteamOSManagerState {
        self.state.as_ref().unwrap_or_else(|| <CSteamOSManagerState as crate::Message>::default_instance())
    }

    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: CSteamOSManagerState) {
        self.state = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut CSteamOSManagerState {
        self.state.mut_or_insert_default()
    }

    // Take field
    pub fn take_state(&mut self) -> CSteamOSManagerState {
        self.state.take().unwrap_or_else(|| CSteamOSManagerState::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CSteamOSManagerState>(
            "state",
            |m: &CSteamOSManager_GetState_Response| { &m.state },
            |m: &mut CSteamOSManager_GetState_Response| { &mut m.state },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_GetState_Response>(
            "CSteamOSManager_GetState_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_GetState_Response {
    const NAME: &'static str = "CSteamOSManager_GetState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.state.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_GetState_Response {
        CSteamOSManager_GetState_Response::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_GetState_Response {
        static instance: CSteamOSManager_GetState_Response = CSteamOSManager_GetState_Response {
            state: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_GetState_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_GetState_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_GetState_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_GetState_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_StateChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_StateChanged_Notification {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_StateChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_StateChanged_Notification {
    fn default() -> &'a CSteamOSManager_StateChanged_Notification {
        <CSteamOSManager_StateChanged_Notification as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_StateChanged_Notification {
    pub fn new() -> CSteamOSManager_StateChanged_Notification {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_StateChanged_Notification>(
            "CSteamOSManager_StateChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_StateChanged_Notification {
    const NAME: &'static str = "CSteamOSManager_StateChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_StateChanged_Notification {
        CSteamOSManager_StateChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_StateChanged_Notification {
        static instance: CSteamOSManager_StateChanged_Notification = CSteamOSManager_StateChanged_Notification {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_StateChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_StateChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_StateChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_StateChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_IsTelemetryHelperAvailable_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_IsTelemetryHelperAvailable_Request {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSManager_IsTelemetryHelperAvailable_Request.etype)
    pub etype: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESLSHelper>>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_IsTelemetryHelperAvailable_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_IsTelemetryHelperAvailable_Request {
    fn default() -> &'a CSteamOSManager_IsTelemetryHelperAvailable_Request {
        <CSteamOSManager_IsTelemetryHelperAvailable_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_IsTelemetryHelperAvailable_Request {
    pub fn new() -> CSteamOSManager_IsTelemetryHelperAvailable_Request {
        ::std::default::Default::default()
    }

    // optional .ESLSHelper etype = 1;

    pub fn etype(&self) -> super::enums::ESLSHelper {
        match self.etype {
            Some(e) => e.enum_value_or(super::enums::ESLSHelper::k_ESLSHelper_Invalid),
            None => super::enums::ESLSHelper::k_ESLSHelper_Invalid,
        }
    }

    pub fn clear_etype(&mut self) {
        self.etype = ::std::option::Option::None;
    }

    pub fn has_etype(&self) -> bool {
        self.etype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_etype(&mut self, v: super::enums::ESLSHelper) {
        self.etype = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "etype",
            |m: &CSteamOSManager_IsTelemetryHelperAvailable_Request| { &m.etype },
            |m: &mut CSteamOSManager_IsTelemetryHelperAvailable_Request| { &mut m.etype },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_IsTelemetryHelperAvailable_Request>(
            "CSteamOSManager_IsTelemetryHelperAvailable_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_IsTelemetryHelperAvailable_Request {
    const NAME: &'static str = "CSteamOSManager_IsTelemetryHelperAvailable_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.etype = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.etype {
            my_size += crate::rt::int32_size(1, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.etype {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_IsTelemetryHelperAvailable_Request {
        CSteamOSManager_IsTelemetryHelperAvailable_Request::new()
    }

    fn clear(&mut self) {
        self.etype = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_IsTelemetryHelperAvailable_Request {
        static instance: CSteamOSManager_IsTelemetryHelperAvailable_Request = CSteamOSManager_IsTelemetryHelperAvailable_Request {
            etype: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_IsTelemetryHelperAvailable_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_IsTelemetryHelperAvailable_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_IsTelemetryHelperAvailable_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_IsTelemetryHelperAvailable_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_IsTelemetryHelperAvailable_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_IsTelemetryHelperAvailable_Response {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSManager_IsTelemetryHelperAvailable_Response.available)
    pub available: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_IsTelemetryHelperAvailable_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_IsTelemetryHelperAvailable_Response {
    fn default() -> &'a CSteamOSManager_IsTelemetryHelperAvailable_Response {
        <CSteamOSManager_IsTelemetryHelperAvailable_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_IsTelemetryHelperAvailable_Response {
    pub fn new() -> CSteamOSManager_IsTelemetryHelperAvailable_Response {
        ::std::default::Default::default()
    }

    // optional bool available = 1;

    pub fn available(&self) -> bool {
        self.available.unwrap_or(false)
    }

    pub fn clear_available(&mut self) {
        self.available = ::std::option::Option::None;
    }

    pub fn has_available(&self) -> bool {
        self.available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: bool) {
        self.available = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "available",
            |m: &CSteamOSManager_IsTelemetryHelperAvailable_Response| { &m.available },
            |m: &mut CSteamOSManager_IsTelemetryHelperAvailable_Response| { &mut m.available },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_IsTelemetryHelperAvailable_Response>(
            "CSteamOSManager_IsTelemetryHelperAvailable_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_IsTelemetryHelperAvailable_Response {
    const NAME: &'static str = "CSteamOSManager_IsTelemetryHelperAvailable_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.available = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.available {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.available {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_IsTelemetryHelperAvailable_Response {
        CSteamOSManager_IsTelemetryHelperAvailable_Response::new()
    }

    fn clear(&mut self) {
        self.available = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_IsTelemetryHelperAvailable_Response {
        static instance: CSteamOSManager_IsTelemetryHelperAvailable_Response = CSteamOSManager_IsTelemetryHelperAvailable_Response {
            available: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_IsTelemetryHelperAvailable_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_IsTelemetryHelperAvailable_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_IsTelemetryHelperAvailable_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_IsTelemetryHelperAvailable_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_OptOutOfSideloadedClient_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_OptOutOfSideloadedClient_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_OptOutOfSideloadedClient_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_OptOutOfSideloadedClient_Request {
    fn default() -> &'a CSteamOSManager_OptOutOfSideloadedClient_Request {
        <CSteamOSManager_OptOutOfSideloadedClient_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_OptOutOfSideloadedClient_Request {
    pub fn new() -> CSteamOSManager_OptOutOfSideloadedClient_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_OptOutOfSideloadedClient_Request>(
            "CSteamOSManager_OptOutOfSideloadedClient_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_OptOutOfSideloadedClient_Request {
    const NAME: &'static str = "CSteamOSManager_OptOutOfSideloadedClient_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_OptOutOfSideloadedClient_Request {
        CSteamOSManager_OptOutOfSideloadedClient_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_OptOutOfSideloadedClient_Request {
        static instance: CSteamOSManager_OptOutOfSideloadedClient_Request = CSteamOSManager_OptOutOfSideloadedClient_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_OptOutOfSideloadedClient_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_OptOutOfSideloadedClient_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_OptOutOfSideloadedClient_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_OptOutOfSideloadedClient_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_OptOutOfSideloadedClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_OptOutOfSideloadedClient_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_OptOutOfSideloadedClient_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_OptOutOfSideloadedClient_Response {
    fn default() -> &'a CSteamOSManager_OptOutOfSideloadedClient_Response {
        <CSteamOSManager_OptOutOfSideloadedClient_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_OptOutOfSideloadedClient_Response {
    pub fn new() -> CSteamOSManager_OptOutOfSideloadedClient_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_OptOutOfSideloadedClient_Response>(
            "CSteamOSManager_OptOutOfSideloadedClient_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_OptOutOfSideloadedClient_Response {
    const NAME: &'static str = "CSteamOSManager_OptOutOfSideloadedClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_OptOutOfSideloadedClient_Response {
        CSteamOSManager_OptOutOfSideloadedClient_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_OptOutOfSideloadedClient_Response {
        static instance: CSteamOSManager_OptOutOfSideloadedClient_Response = CSteamOSManager_OptOutOfSideloadedClient_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_OptOutOfSideloadedClient_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_OptOutOfSideloadedClient_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_OptOutOfSideloadedClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_OptOutOfSideloadedClient_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_ApplyMandatoryUpdate_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_ApplyMandatoryUpdate_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_ApplyMandatoryUpdate_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_ApplyMandatoryUpdate_Request {
    fn default() -> &'a CSteamOSManager_ApplyMandatoryUpdate_Request {
        <CSteamOSManager_ApplyMandatoryUpdate_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_ApplyMandatoryUpdate_Request {
    pub fn new() -> CSteamOSManager_ApplyMandatoryUpdate_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_ApplyMandatoryUpdate_Request>(
            "CSteamOSManager_ApplyMandatoryUpdate_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_ApplyMandatoryUpdate_Request {
    const NAME: &'static str = "CSteamOSManager_ApplyMandatoryUpdate_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_ApplyMandatoryUpdate_Request {
        CSteamOSManager_ApplyMandatoryUpdate_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_ApplyMandatoryUpdate_Request {
        static instance: CSteamOSManager_ApplyMandatoryUpdate_Request = CSteamOSManager_ApplyMandatoryUpdate_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_ApplyMandatoryUpdate_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_ApplyMandatoryUpdate_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_ApplyMandatoryUpdate_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_ApplyMandatoryUpdate_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSManager_ApplyMandatoryUpdate_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSManager_ApplyMandatoryUpdate_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSManager_ApplyMandatoryUpdate_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSManager_ApplyMandatoryUpdate_Response {
    fn default() -> &'a CSteamOSManager_ApplyMandatoryUpdate_Response {
        <CSteamOSManager_ApplyMandatoryUpdate_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSManager_ApplyMandatoryUpdate_Response {
    pub fn new() -> CSteamOSManager_ApplyMandatoryUpdate_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSManager_ApplyMandatoryUpdate_Response>(
            "CSteamOSManager_ApplyMandatoryUpdate_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSManager_ApplyMandatoryUpdate_Response {
    const NAME: &'static str = "CSteamOSManager_ApplyMandatoryUpdate_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSManager_ApplyMandatoryUpdate_Response {
        CSteamOSManager_ApplyMandatoryUpdate_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSManager_ApplyMandatoryUpdate_Response {
        static instance: CSteamOSManager_ApplyMandatoryUpdate_Response = CSteamOSManager_ApplyMandatoryUpdate_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSManager_ApplyMandatoryUpdate_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSManager_ApplyMandatoryUpdate_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSManager_ApplyMandatoryUpdate_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSManager_ApplyMandatoryUpdate_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLSPlugin)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLSPlugin {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSSLSPlugin.etype)
    pub etype: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESLSHelper>>,
    // @@protoc_insertion_point(field:CSteamOSSLSPlugin.is_available)
    pub is_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSteamOSSLSPlugin.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLSPlugin.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLSPlugin {
    fn default() -> &'a CSteamOSSLSPlugin {
        <CSteamOSSLSPlugin as crate::Message>::default_instance()
    }
}

impl CSteamOSSLSPlugin {
    pub fn new() -> CSteamOSSLSPlugin {
        ::std::default::Default::default()
    }

    // optional .ESLSHelper etype = 1;

    pub fn etype(&self) -> super::enums::ESLSHelper {
        match self.etype {
            Some(e) => e.enum_value_or(super::enums::ESLSHelper::k_ESLSHelper_Invalid),
            None => super::enums::ESLSHelper::k_ESLSHelper_Invalid,
        }
    }

    pub fn clear_etype(&mut self) {
        self.etype = ::std::option::Option::None;
    }

    pub fn has_etype(&self) -> bool {
        self.etype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_etype(&mut self, v: super::enums::ESLSHelper) {
        self.etype = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool is_available = 2;

    pub fn is_available(&self) -> bool {
        self.is_available.unwrap_or(false)
    }

    pub fn clear_is_available(&mut self) {
        self.is_available = ::std::option::Option::None;
    }

    pub fn has_is_available(&self) -> bool {
        self.is_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_available(&mut self, v: bool) {
        self.is_available = ::std::option::Option::Some(v);
    }

    // optional bool is_enabled = 3;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "etype",
            |m: &CSteamOSSLSPlugin| { &m.etype },
            |m: &mut CSteamOSSLSPlugin| { &mut m.etype },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_available",
            |m: &CSteamOSSLSPlugin| { &m.is_available },
            |m: &mut CSteamOSSLSPlugin| { &mut m.is_available },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_enabled",
            |m: &CSteamOSSLSPlugin| { &m.is_enabled },
            |m: &mut CSteamOSSLSPlugin| { &mut m.is_enabled },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLSPlugin>(
            "CSteamOSSLSPlugin",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLSPlugin {
    const NAME: &'static str = "CSteamOSSLSPlugin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.etype = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.is_available = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.etype {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.is_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.etype {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.is_available {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLSPlugin {
        CSteamOSSLSPlugin::new()
    }

    fn clear(&mut self) {
        self.etype = ::std::option::Option::None;
        self.is_available = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLSPlugin {
        static instance: CSteamOSSLSPlugin = CSteamOSSLSPlugin {
            etype: ::std::option::Option::None,
            is_available: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLSPlugin {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLSPlugin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLSPlugin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLSPlugin {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLSState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLSState {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSSLSState.is_available)
    pub is_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSteamOSSLSState.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSteamOSSLSState.plugins)
    pub plugins: ::std::vec::Vec<CSteamOSSLSPlugin>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLSState.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLSState {
    fn default() -> &'a CSteamOSSLSState {
        <CSteamOSSLSState as crate::Message>::default_instance()
    }
}

impl CSteamOSSLSState {
    pub fn new() -> CSteamOSSLSState {
        ::std::default::Default::default()
    }

    // optional bool is_available = 1;

    pub fn is_available(&self) -> bool {
        self.is_available.unwrap_or(false)
    }

    pub fn clear_is_available(&mut self) {
        self.is_available = ::std::option::Option::None;
    }

    pub fn has_is_available(&self) -> bool {
        self.is_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_available(&mut self, v: bool) {
        self.is_available = ::std::option::Option::Some(v);
    }

    // optional bool is_enabled = 2;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // repeated .CSteamOSSLSPlugin plugins = 3;

    pub fn plugins(&self) -> &[CSteamOSSLSPlugin] {
        &self.plugins
    }

    pub fn clear_plugins(&mut self) {
        self.plugins.clear();
    }

    // Param is passed by value, moved
    pub fn set_plugins(&mut self, v: ::std::vec::Vec<CSteamOSSLSPlugin>) {
        self.plugins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plugins(&mut self) -> &mut ::std::vec::Vec<CSteamOSSLSPlugin> {
        &mut self.plugins
    }

    // Take field
    pub fn take_plugins(&mut self) -> ::std::vec::Vec<CSteamOSSLSPlugin> {
        ::std::mem::replace(&mut self.plugins, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_available",
            |m: &CSteamOSSLSState| { &m.is_available },
            |m: &mut CSteamOSSLSState| { &mut m.is_available },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_enabled",
            |m: &CSteamOSSLSState| { &m.is_enabled },
            |m: &mut CSteamOSSLSState| { &mut m.is_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "plugins",
            |m: &CSteamOSSLSState| { &m.plugins },
            |m: &mut CSteamOSSLSState| { &mut m.plugins },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLSState>(
            "CSteamOSSLSState",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLSState {
    const NAME: &'static str = "CSteamOSSLSState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_available = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.plugins.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        for value in &self.plugins {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.is_available {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(2, v)?;
        }
        for v in &self.plugins {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLSState {
        CSteamOSSLSState::new()
    }

    fn clear(&mut self) {
        self.is_available = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.plugins.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLSState {
        static instance: CSteamOSSLSState = CSteamOSSLSState {
            is_available: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            plugins: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLSState {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLSState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLSState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLSState {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_GetState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_GetState_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_GetState_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_GetState_Request {
    fn default() -> &'a CSteamOSSLS_GetState_Request {
        <CSteamOSSLS_GetState_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_GetState_Request {
    pub fn new() -> CSteamOSSLS_GetState_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_GetState_Request>(
            "CSteamOSSLS_GetState_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_GetState_Request {
    const NAME: &'static str = "CSteamOSSLS_GetState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_GetState_Request {
        CSteamOSSLS_GetState_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_GetState_Request {
        static instance: CSteamOSSLS_GetState_Request = CSteamOSSLS_GetState_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_GetState_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_GetState_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_GetState_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_GetState_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_GetState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_GetState_Response {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSSLS_GetState_Response.state)
    pub state: crate::MessageField<CSteamOSSLSState>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_GetState_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_GetState_Response {
    fn default() -> &'a CSteamOSSLS_GetState_Response {
        <CSteamOSSLS_GetState_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_GetState_Response {
    pub fn new() -> CSteamOSSLS_GetState_Response {
        ::std::default::Default::default()
    }

    // optional .CSteamOSSLSState state = 1;

    pub fn state(&self) -> &CSteamOSSLSState {
        self.state.as_ref().unwrap_or_else(|| <CSteamOSSLSState as crate::Message>::default_instance())
    }

    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: CSteamOSSLSState) {
        self.state = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut CSteamOSSLSState {
        self.state.mut_or_insert_default()
    }

    // Take field
    pub fn take_state(&mut self) -> CSteamOSSLSState {
        self.state.take().unwrap_or_else(|| CSteamOSSLSState::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CSteamOSSLSState>(
            "state",
            |m: &CSteamOSSLS_GetState_Response| { &m.state },
            |m: &mut CSteamOSSLS_GetState_Response| { &mut m.state },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_GetState_Response>(
            "CSteamOSSLS_GetState_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_GetState_Response {
    const NAME: &'static str = "CSteamOSSLS_GetState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.state.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_GetState_Response {
        CSteamOSSLS_GetState_Response::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_GetState_Response {
        static instance: CSteamOSSLS_GetState_Response = CSteamOSSLS_GetState_Response {
            state: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_GetState_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_GetState_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_GetState_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_GetState_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_StateChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_StateChanged_Notification {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_StateChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_StateChanged_Notification {
    fn default() -> &'a CSteamOSSLS_StateChanged_Notification {
        <CSteamOSSLS_StateChanged_Notification as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_StateChanged_Notification {
    pub fn new() -> CSteamOSSLS_StateChanged_Notification {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_StateChanged_Notification>(
            "CSteamOSSLS_StateChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_StateChanged_Notification {
    const NAME: &'static str = "CSteamOSSLS_StateChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_StateChanged_Notification {
        CSteamOSSLS_StateChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_StateChanged_Notification {
        static instance: CSteamOSSLS_StateChanged_Notification = CSteamOSSLS_StateChanged_Notification {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_StateChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_StateChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_StateChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_StateChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_SetEnabled_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_SetEnabled_Request {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSSLS_SetEnabled_Request.enabled)
    pub enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_SetEnabled_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_SetEnabled_Request {
    fn default() -> &'a CSteamOSSLS_SetEnabled_Request {
        <CSteamOSSLS_SetEnabled_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_SetEnabled_Request {
    pub fn new() -> CSteamOSSLS_SetEnabled_Request {
        ::std::default::Default::default()
    }

    // optional bool enabled = 1;

    pub fn enabled(&self) -> bool {
        self.enabled.unwrap_or(false)
    }

    pub fn clear_enabled(&mut self) {
        self.enabled = ::std::option::Option::None;
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: bool) {
        self.enabled = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "enabled",
            |m: &CSteamOSSLS_SetEnabled_Request| { &m.enabled },
            |m: &mut CSteamOSSLS_SetEnabled_Request| { &mut m.enabled },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_SetEnabled_Request>(
            "CSteamOSSLS_SetEnabled_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_SetEnabled_Request {
    const NAME: &'static str = "CSteamOSSLS_SetEnabled_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.enabled {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.enabled {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_SetEnabled_Request {
        CSteamOSSLS_SetEnabled_Request::new()
    }

    fn clear(&mut self) {
        self.enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_SetEnabled_Request {
        static instance: CSteamOSSLS_SetEnabled_Request = CSteamOSSLS_SetEnabled_Request {
            enabled: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_SetEnabled_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_SetEnabled_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_SetEnabled_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_SetEnabled_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_SetEnabled_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_SetEnabled_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_SetEnabled_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_SetEnabled_Response {
    fn default() -> &'a CSteamOSSLS_SetEnabled_Response {
        <CSteamOSSLS_SetEnabled_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_SetEnabled_Response {
    pub fn new() -> CSteamOSSLS_SetEnabled_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_SetEnabled_Response>(
            "CSteamOSSLS_SetEnabled_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_SetEnabled_Response {
    const NAME: &'static str = "CSteamOSSLS_SetEnabled_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_SetEnabled_Response {
        CSteamOSSLS_SetEnabled_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_SetEnabled_Response {
        static instance: CSteamOSSLS_SetEnabled_Response = CSteamOSSLS_SetEnabled_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_SetEnabled_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_SetEnabled_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_SetEnabled_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_SetEnabled_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_SetPluginEnabled_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_SetPluginEnabled_Request {
    // message fields
    // @@protoc_insertion_point(field:CSteamOSSLS_SetPluginEnabled_Request.etype)
    pub etype: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESLSHelper>>,
    // @@protoc_insertion_point(field:CSteamOSSLS_SetPluginEnabled_Request.enabled)
    pub enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_SetPluginEnabled_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_SetPluginEnabled_Request {
    fn default() -> &'a CSteamOSSLS_SetPluginEnabled_Request {
        <CSteamOSSLS_SetPluginEnabled_Request as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_SetPluginEnabled_Request {
    pub fn new() -> CSteamOSSLS_SetPluginEnabled_Request {
        ::std::default::Default::default()
    }

    // optional .ESLSHelper etype = 1;

    pub fn etype(&self) -> super::enums::ESLSHelper {
        match self.etype {
            Some(e) => e.enum_value_or(super::enums::ESLSHelper::k_ESLSHelper_Invalid),
            None => super::enums::ESLSHelper::k_ESLSHelper_Invalid,
        }
    }

    pub fn clear_etype(&mut self) {
        self.etype = ::std::option::Option::None;
    }

    pub fn has_etype(&self) -> bool {
        self.etype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_etype(&mut self, v: super::enums::ESLSHelper) {
        self.etype = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool enabled = 2;

    pub fn enabled(&self) -> bool {
        self.enabled.unwrap_or(false)
    }

    pub fn clear_enabled(&mut self) {
        self.enabled = ::std::option::Option::None;
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: bool) {
        self.enabled = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "etype",
            |m: &CSteamOSSLS_SetPluginEnabled_Request| { &m.etype },
            |m: &mut CSteamOSSLS_SetPluginEnabled_Request| { &mut m.etype },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "enabled",
            |m: &CSteamOSSLS_SetPluginEnabled_Request| { &m.enabled },
            |m: &mut CSteamOSSLS_SetPluginEnabled_Request| { &mut m.enabled },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_SetPluginEnabled_Request>(
            "CSteamOSSLS_SetPluginEnabled_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_SetPluginEnabled_Request {
    const NAME: &'static str = "CSteamOSSLS_SetPluginEnabled_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.etype = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.etype {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.enabled {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.etype {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.enabled {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_SetPluginEnabled_Request {
        CSteamOSSLS_SetPluginEnabled_Request::new()
    }

    fn clear(&mut self) {
        self.etype = ::std::option::Option::None;
        self.enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_SetPluginEnabled_Request {
        static instance: CSteamOSSLS_SetPluginEnabled_Request = CSteamOSSLS_SetPluginEnabled_Request {
            etype: ::std::option::Option::None,
            enabled: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_SetPluginEnabled_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_SetPluginEnabled_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_SetPluginEnabled_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_SetPluginEnabled_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSteamOSSLS_SetPluginEnabled_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamOSSLS_SetPluginEnabled_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CSteamOSSLS_SetPluginEnabled_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamOSSLS_SetPluginEnabled_Response {
    fn default() -> &'a CSteamOSSLS_SetPluginEnabled_Response {
        <CSteamOSSLS_SetPluginEnabled_Response as crate::Message>::default_instance()
    }
}

impl CSteamOSSLS_SetPluginEnabled_Response {
    pub fn new() -> CSteamOSSLS_SetPluginEnabled_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSteamOSSLS_SetPluginEnabled_Response>(
            "CSteamOSSLS_SetPluginEnabled_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSteamOSSLS_SetPluginEnabled_Response {
    const NAME: &'static str = "CSteamOSSLS_SetPluginEnabled_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamOSSLS_SetPluginEnabled_Response {
        CSteamOSSLS_SetPluginEnabled_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamOSSLS_SetPluginEnabled_Response {
        static instance: CSteamOSSLS_SetPluginEnabled_Response = CSteamOSSLS_SetPluginEnabled_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSteamOSSLS_SetPluginEnabled_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSteamOSSLS_SetPluginEnabled_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSteamOSSLS_SetPluginEnabled_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSteamOSSLS_SetPluginEnabled_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bwebuimessages_steamos.proto\x1a\x0benums.proto\x1a\x18steammessage\
    s_base.proto\x1a\x18webuimessages_base.proto\"\xdb\x02\n\x14CSteamOSMana\
    gerState\x120\n\x14is_service_available\x18\x01\x20\x01(\x08R\x12isServi\
    ceAvailable\x12\x1d\n\nos_version\x18\x02\x20\x01(\tR\tosVersion\x12A\n\
    \x1dis_mandatory_update_available\x18\x03\x20\x01(\x08R\x1aisMandatoryUp\
    dateAvailable\x12i\n\x15startup_movie_variant\x18\x04\x20\x01(\x0e2\x15.\
    EStartupMovieVariant:\x1ek_EStartupMovieVariant_InvalidR\x13startupMovie\
    Variant\x12D\n\x1fis_status_led_control_available\x18\x05\x20\x01(\x08R\
    \x1bisStatusLedControlAvailable\"\"\n\x20CSteamOSManager_GetState_Reques\
    t\"P\n!CSteamOSManager_GetState_Response\x12+\n\x05state\x18\x01\x20\x01\
    (\x0b2\x15.CSteamOSManagerStateR\x05state\"+\n)CSteamOSManager_StateChan\
    ged_Notification\"m\n2CSteamOSManager_IsTelemetryHelperAvailable_Request\
    \x127\n\x05etype\x18\x01\x20\x01(\x0e2\x0b.ESLSHelper:\x14k_ESLSHelper_I\
    nvalidR\x05etype\"S\n3CSteamOSManager_IsTelemetryHelperAvailable_Respons\
    e\x12\x1c\n\tavailable\x18\x01\x20\x01(\x08R\tavailable\"2\n0CSteamOSMan\
    ager_OptOutOfSideloadedClient_Request\"3\n1CSteamOSManager_OptOutOfSidel\
    oadedClient_Response\".\n,CSteamOSManager_ApplyMandatoryUpdate_Request\"\
    /\n-CSteamOSManager_ApplyMandatoryUpdate_Response\"\x8e\x01\n\x11CSteamO\
    SSLSPlugin\x127\n\x05etype\x18\x01\x20\x01(\x0e2\x0b.ESLSHelper:\x14k_ES\
    LSHelper_InvalidR\x05etype\x12!\n\x0cis_available\x18\x02\x20\x01(\x08R\
    \x0bisAvailable\x12\x1d\n\nis_enabled\x18\x03\x20\x01(\x08R\tisEnabled\"\
    \x82\x01\n\x10CSteamOSSLSState\x12!\n\x0cis_available\x18\x01\x20\x01(\
    \x08R\x0bisAvailable\x12\x1d\n\nis_enabled\x18\x02\x20\x01(\x08R\tisEnab\
    led\x12,\n\x07plugins\x18\x03\x20\x03(\x0b2\x12.CSteamOSSLSPluginR\x07pl\
    ugins\"\x1e\n\x1cCSteamOSSLS_GetState_Request\"H\n\x1dCSteamOSSLS_GetSta\
    te_Response\x12'\n\x05state\x18\x01\x20\x01(\x0b2\x11.CSteamOSSLSStateR\
    \x05state\"'\n%CSteamOSSLS_StateChanged_Notification\":\n\x1eCSteamOSSLS\
    _SetEnabled_Request\x12\x18\n\x07enabled\x18\x01\x20\x01(\x08R\x07enable\
    d\"!\n\x1fCSteamOSSLS_SetEnabled_Response\"y\n$CSteamOSSLS_SetPluginEnab\
    led_Request\x127\n\x05etype\x18\x01\x20\x01(\x0e2\x0b.ESLSHelper:\x14k_E\
    SLSHelper_InvalidR\x05etype\x12\x18\n\x07enabled\x18\x02\x20\x01(\x08R\
    \x07enabled\"'\n%CSteamOSSLS_SetPluginEnabled_Response2\xb8\x03\n\x0eSte\
    amOSManager\x12Q\n\x08GetState\x12!.CSteamOSManager_GetState_Request\x1a\
    \".CSteamOSManager_GetState_Response\x12R\n\x12NotifyStateChanged\x12*.C\
    SteamOSManager_StateChanged_Notification\x1a\x10.WebUINoResponse\x12\x81\
    \x01\n\x18OptOutOfSideloadedClient\x121.CSteamOSManager_OptOutOfSideload\
    edClient_Request\x1a2.CSteamOSManager_OptOutOfSideloadedClient_Response\
    \x12u\n\x14ApplyMandatoryUpdate\x12-.CSteamOSManager_ApplyMandatoryUpdat\
    e_Request\x1a..CSteamOSManager_ApplyMandatoryUpdate_Response\x1a\x04\x80\
    \x97\"\x012\xe1\x02\n\nSteamOSSLS\x12I\n\x08GetState\x12\x1d.CSteamOSSLS\
    _GetState_Request\x1a\x1e.CSteamOSSLS_GetState_Response\x12N\n\x12Notify\
    StateChanged\x12&.CSteamOSSLS_StateChanged_Notification\x1a\x10.WebUINoR\
    esponse\x12O\n\nSetEnabled\x12\x1f.CSteamOSSLS_SetEnabled_Request\x1a\
    \x20.CSteamOSSLS_SetEnabled_Response\x12a\n\x10SetPluginEnabled\x12%.CSt\
    eamOSSLS_SetPluginEnabled_Request\x1a&.CSteamOSSLS_SetPluginEnabled_Resp\
    onse\x1a\x04\x80\x97\"\x01B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::enums::file_descriptor().clone());
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(19);
            messages.push(CSteamOSManagerState::generated_message_descriptor_data());
            messages.push(CSteamOSManager_GetState_Request::generated_message_descriptor_data());
            messages.push(CSteamOSManager_GetState_Response::generated_message_descriptor_data());
            messages.push(CSteamOSManager_StateChanged_Notification::generated_message_descriptor_data());
            messages.push(CSteamOSManager_IsTelemetryHelperAvailable_Request::generated_message_descriptor_data());
            messages.push(CSteamOSManager_IsTelemetryHelperAvailable_Response::generated_message_descriptor_data());
            messages.push(CSteamOSManager_OptOutOfSideloadedClient_Request::generated_message_descriptor_data());
            messages.push(CSteamOSManager_OptOutOfSideloadedClient_Response::generated_message_descriptor_data());
            messages.push(CSteamOSManager_ApplyMandatoryUpdate_Request::generated_message_descriptor_data());
            messages.push(CSteamOSManager_ApplyMandatoryUpdate_Response::generated_message_descriptor_data());
            messages.push(CSteamOSSLSPlugin::generated_message_descriptor_data());
            messages.push(CSteamOSSLSState::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_GetState_Request::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_GetState_Response::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_StateChanged_Notification::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_SetEnabled_Request::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_SetEnabled_Response::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_SetPluginEnabled_Request::generated_message_descriptor_data());
            messages.push(CSteamOSSLS_SetPluginEnabled_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
