// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steamnetworkingsockets_messages_udp.proto`

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ChallengeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ChallengeRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeRequest.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeRequest.my_timestamp)
    pub my_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeRequest.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ChallengeRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ChallengeRequest {
    fn default() -> &'a CMsgSteamSockets_UDP_ChallengeRequest {
        <CMsgSteamSockets_UDP_ChallengeRequest as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ChallengeRequest {
    pub fn new() -> CMsgSteamSockets_UDP_ChallengeRequest {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 my_timestamp = 3;

    pub fn my_timestamp(&self) -> u64 {
        self.my_timestamp.unwrap_or(0)
    }

    pub fn clear_my_timestamp(&mut self) {
        self.my_timestamp = ::std::option::Option::None;
    }

    pub fn has_my_timestamp(&self) -> bool {
        self.my_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_timestamp(&mut self, v: u64) {
        self.my_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 4;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamSockets_UDP_ChallengeRequest| { &m.connection_id },
            |m: &mut CMsgSteamSockets_UDP_ChallengeRequest| { &mut m.connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_timestamp",
            |m: &CMsgSteamSockets_UDP_ChallengeRequest| { &m.my_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ChallengeRequest| { &mut m.my_timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamSockets_UDP_ChallengeRequest| { &m.protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ChallengeRequest| { &mut m.protocol_version },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ChallengeRequest>(
            "CMsgSteamSockets_UDP_ChallengeRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_ChallengeRequest {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ChallengeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.my_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.my_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.protocol_version {
            my_size += crate::rt::uint32_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.my_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ChallengeRequest {
        CMsgSteamSockets_UDP_ChallengeRequest::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.my_timestamp = ::std::option::Option::None;
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ChallengeRequest {
        static instance: CMsgSteamSockets_UDP_ChallengeRequest = CMsgSteamSockets_UDP_ChallengeRequest {
            connection_id: ::std::option::Option::None,
            my_timestamp: ::std::option::Option::None,
            protocol_version: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_ChallengeRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ChallengeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ChallengeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_ChallengeRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ChallengeReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ChallengeReply {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.connection_id)
    pub connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.your_timestamp)
    pub your_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ChallengeReply.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ChallengeReply.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ChallengeReply {
    fn default() -> &'a CMsgSteamSockets_UDP_ChallengeReply {
        <CMsgSteamSockets_UDP_ChallengeReply as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ChallengeReply {
    pub fn new() -> CMsgSteamSockets_UDP_ChallengeReply {
        ::std::default::Default::default()
    }

    // optional fixed32 connection_id = 1;

    pub fn connection_id(&self) -> u32 {
        self.connection_id.unwrap_or(0)
    }

    pub fn clear_connection_id(&mut self) {
        self.connection_id = ::std::option::Option::None;
    }

    pub fn has_connection_id(&self) -> bool {
        self.connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: u32) {
        self.connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 2;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional fixed64 your_timestamp = 3;

    pub fn your_timestamp(&self) -> u64 {
        self.your_timestamp.unwrap_or(0)
    }

    pub fn clear_your_timestamp(&mut self) {
        self.your_timestamp = ::std::option::Option::None;
    }

    pub fn has_your_timestamp(&self) -> bool {
        self.your_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_timestamp(&mut self, v: u64) {
        self.your_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 protocol_version = 4;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "connection_id",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.connection_id },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.challenge },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.challenge },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_timestamp",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.your_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.your_timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol_version",
            |m: &CMsgSteamSockets_UDP_ChallengeReply| { &m.protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ChallengeReply| { &mut m.protocol_version },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ChallengeReply>(
            "CMsgSteamSockets_UDP_ChallengeReply",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_ChallengeReply {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ChallengeReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.your_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.your_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.protocol_version {
            my_size += crate::rt::uint32_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.your_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.protocol_version {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ChallengeReply {
        CMsgSteamSockets_UDP_ChallengeReply::new()
    }

    fn clear(&mut self) {
        self.connection_id = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.your_timestamp = ::std::option::Option::None;
        self.protocol_version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ChallengeReply {
        static instance: CMsgSteamSockets_UDP_ChallengeReply = CMsgSteamSockets_UDP_ChallengeReply {
            connection_id: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            your_timestamp: ::std::option::Option::None,
            protocol_version: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_ChallengeReply {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ChallengeReply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ChallengeReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_ChallengeReply {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ConnectRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ConnectRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.challenge)
    pub challenge: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.my_timestamp)
    pub my_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.ping_est_ms)
    pub ping_est_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.crypt)
    pub crypt: crate::MessageField<super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.cert)
    pub cert: crate::MessageField<super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.legacy_protocol_version)
    pub legacy_protocol_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.identity_string)
    pub identity_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.legacy_client_steam_id)
    pub legacy_client_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectRequest.legacy_identity_binary)
    pub legacy_identity_binary: crate::MessageField<super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ConnectRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ConnectRequest {
    fn default() -> &'a CMsgSteamSockets_UDP_ConnectRequest {
        <CMsgSteamSockets_UDP_ConnectRequest as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ConnectRequest {
    pub fn new() -> CMsgSteamSockets_UDP_ConnectRequest {
        ::std::default::Default::default()
    }

    // optional fixed32 client_connection_id = 1;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 challenge = 2;

    pub fn challenge(&self) -> u64 {
        self.challenge.unwrap_or(0)
    }

    pub fn clear_challenge(&mut self) {
        self.challenge = ::std::option::Option::None;
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: u64) {
        self.challenge = ::std::option::Option::Some(v);
    }

    // optional fixed64 my_timestamp = 5;

    pub fn my_timestamp(&self) -> u64 {
        self.my_timestamp.unwrap_or(0)
    }

    pub fn clear_my_timestamp(&mut self) {
        self.my_timestamp = ::std::option::Option::None;
    }

    pub fn has_my_timestamp(&self) -> bool {
        self.my_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_my_timestamp(&mut self, v: u64) {
        self.my_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 ping_est_ms = 6;

    pub fn ping_est_ms(&self) -> u32 {
        self.ping_est_ms.unwrap_or(0)
    }

    pub fn clear_ping_est_ms(&mut self) {
        self.ping_est_ms = ::std::option::Option::None;
    }

    pub fn has_ping_est_ms(&self) -> bool {
        self.ping_est_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_est_ms(&mut self, v: u32) {
        self.ping_est_ms = ::std::option::Option::Some(v);
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;

    pub fn crypt(&self) -> &super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned {
        self.crypt.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned as crate::Message>::default_instance())
    }

    pub fn clear_crypt(&mut self) {
        self.crypt.clear();
    }

    pub fn has_crypt(&self) -> bool {
        self.crypt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crypt(&mut self, v: super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned) {
        self.crypt = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crypt(&mut self) -> &mut super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned {
        self.crypt.mut_or_insert_default()
    }

    // Take field
    pub fn take_crypt(&mut self) -> super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned {
        self.crypt.take().unwrap_or_else(|| super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned::new())
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 4;

    pub fn cert(&self) -> &super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned {
        self.cert.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned as crate::Message>::default_instance())
    }

    pub fn clear_cert(&mut self) {
        self.cert.clear();
    }

    pub fn has_cert(&self) -> bool {
        self.cert.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cert(&mut self, v: super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned) {
        self.cert = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cert(&mut self) -> &mut super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned {
        self.cert.mut_or_insert_default()
    }

    // Take field
    pub fn take_cert(&mut self) -> super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned {
        self.cert.take().unwrap_or_else(|| super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned::new())
    }

    // optional uint32 legacy_protocol_version = 8;

    pub fn legacy_protocol_version(&self) -> u32 {
        self.legacy_protocol_version.unwrap_or(0)
    }

    pub fn clear_legacy_protocol_version(&mut self) {
        self.legacy_protocol_version = ::std::option::Option::None;
    }

    pub fn has_legacy_protocol_version(&self) -> bool {
        self.legacy_protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_protocol_version(&mut self, v: u32) {
        self.legacy_protocol_version = ::std::option::Option::Some(v);
    }

    // optional string identity_string = 10;

    pub fn identity_string(&self) -> &str {
        match self.identity_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_identity_string(&mut self) {
        self.identity_string = ::std::option::Option::None;
    }

    pub fn has_identity_string(&self) -> bool {
        self.identity_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identity_string(&mut self, v: ::std::string::String) {
        self.identity_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identity_string(&mut self) -> &mut ::std::string::String {
        if self.identity_string.is_none() {
            self.identity_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.identity_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_identity_string(&mut self) -> ::std::string::String {
        self.identity_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 legacy_client_steam_id = 3;

    pub fn legacy_client_steam_id(&self) -> u64 {
        self.legacy_client_steam_id.unwrap_or(0)
    }

    pub fn clear_legacy_client_steam_id(&mut self) {
        self.legacy_client_steam_id = ::std::option::Option::None;
    }

    pub fn has_legacy_client_steam_id(&self) -> bool {
        self.legacy_client_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_client_steam_id(&mut self, v: u64) {
        self.legacy_client_steam_id = ::std::option::Option::Some(v);
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;

    pub fn legacy_identity_binary(&self) -> &super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary {
        self.legacy_identity_binary.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary as crate::Message>::default_instance())
    }

    pub fn clear_legacy_identity_binary(&mut self) {
        self.legacy_identity_binary.clear();
    }

    pub fn has_legacy_identity_binary(&self) -> bool {
        self.legacy_identity_binary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_identity_binary(&mut self, v: super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary) {
        self.legacy_identity_binary = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_legacy_identity_binary(&mut self) -> &mut super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary {
        self.legacy_identity_binary.mut_or_insert_default()
    }

    // Take field
    pub fn take_legacy_identity_binary(&mut self) -> super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary {
        self.legacy_identity_binary.take().unwrap_or_else(|| super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.client_connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.challenge },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.challenge },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "my_timestamp",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.my_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.my_timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ping_est_ms",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.ping_est_ms },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.ping_est_ms },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned>(
            "crypt",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.crypt },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.crypt },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.cert },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.cert },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_protocol_version",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.legacy_protocol_version },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.legacy_protocol_version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "identity_string",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.identity_string },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.identity_string },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_client_steam_id",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.legacy_client_steam_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.legacy_client_steam_id },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary>(
            "legacy_identity_binary",
            |m: &CMsgSteamSockets_UDP_ConnectRequest| { &m.legacy_identity_binary },
            |m: &mut CMsgSteamSockets_UDP_ConnectRequest| { &mut m.legacy_identity_binary },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ConnectRequest>(
            "CMsgSteamSockets_UDP_ConnectRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_ConnectRequest {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ConnectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                17 => {
                    self.challenge = ::std::option::Option::Some(is.read_fixed64()?);
                },
                41 => {
                    self.my_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                48 => {
                    self.ping_est_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.crypt)?;
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                64 => {
                    self.legacy_protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    self.identity_string = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.legacy_client_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                74 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.legacy_identity_binary)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.challenge {
            my_size += 1 + 8;
        }
        if let Some(v) = self.my_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ping_est_ms {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.crypt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.legacy_protocol_version {
            my_size += crate::rt::uint32_size(8, v);
        }
        if let Some(v) = self.identity_string.as_ref() {
            my_size += crate::rt::string_size(10, &v);
        }
        if let Some(v) = self.legacy_client_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.legacy_identity_binary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.challenge {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.my_timestamp {
            os.write_fixed64(5, v)?;
        }
        if let Some(v) = self.ping_est_ms {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.crypt.as_ref() {
            crate::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.cert.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.legacy_protocol_version {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.identity_string.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.legacy_client_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.legacy_identity_binary.as_ref() {
            crate::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ConnectRequest {
        CMsgSteamSockets_UDP_ConnectRequest::new()
    }

    fn clear(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
        self.challenge = ::std::option::Option::None;
        self.my_timestamp = ::std::option::Option::None;
        self.ping_est_ms = ::std::option::Option::None;
        self.crypt.clear();
        self.cert.clear();
        self.legacy_protocol_version = ::std::option::Option::None;
        self.identity_string = ::std::option::Option::None;
        self.legacy_client_steam_id = ::std::option::Option::None;
        self.legacy_identity_binary.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ConnectRequest {
        static instance: CMsgSteamSockets_UDP_ConnectRequest = CMsgSteamSockets_UDP_ConnectRequest {
            client_connection_id: ::std::option::Option::None,
            challenge: ::std::option::Option::None,
            my_timestamp: ::std::option::Option::None,
            ping_est_ms: ::std::option::Option::None,
            crypt: crate::MessageField::none(),
            cert: crate::MessageField::none(),
            legacy_protocol_version: ::std::option::Option::None,
            identity_string: ::std::option::Option::None,
            legacy_client_steam_id: ::std::option::Option::None,
            legacy_identity_binary: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_ConnectRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ConnectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ConnectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_ConnectRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ConnectOK)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ConnectOK {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.client_connection_id)
    pub client_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.server_connection_id)
    pub server_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.your_timestamp)
    pub your_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.delay_time_usec)
    pub delay_time_usec: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.crypt)
    pub crypt: crate::MessageField<super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.cert)
    pub cert: crate::MessageField<super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.identity_string)
    pub identity_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.legacy_server_steam_id)
    pub legacy_server_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectOK.legacy_identity_binary)
    pub legacy_identity_binary: crate::MessageField<super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ConnectOK.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ConnectOK {
    fn default() -> &'a CMsgSteamSockets_UDP_ConnectOK {
        <CMsgSteamSockets_UDP_ConnectOK as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ConnectOK {
    pub fn new() -> CMsgSteamSockets_UDP_ConnectOK {
        ::std::default::Default::default()
    }

    // optional fixed32 client_connection_id = 1;

    pub fn client_connection_id(&self) -> u32 {
        self.client_connection_id.unwrap_or(0)
    }

    pub fn clear_client_connection_id(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
    }

    pub fn has_client_connection_id(&self) -> bool {
        self.client_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_connection_id(&mut self, v: u32) {
        self.client_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 server_connection_id = 5;

    pub fn server_connection_id(&self) -> u32 {
        self.server_connection_id.unwrap_or(0)
    }

    pub fn clear_server_connection_id(&mut self) {
        self.server_connection_id = ::std::option::Option::None;
    }

    pub fn has_server_connection_id(&self) -> bool {
        self.server_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_connection_id(&mut self, v: u32) {
        self.server_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 your_timestamp = 3;

    pub fn your_timestamp(&self) -> u64 {
        self.your_timestamp.unwrap_or(0)
    }

    pub fn clear_your_timestamp(&mut self) {
        self.your_timestamp = ::std::option::Option::None;
    }

    pub fn has_your_timestamp(&self) -> bool {
        self.your_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_your_timestamp(&mut self, v: u64) {
        self.your_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 delay_time_usec = 4;

    pub fn delay_time_usec(&self) -> u32 {
        self.delay_time_usec.unwrap_or(0)
    }

    pub fn clear_delay_time_usec(&mut self) {
        self.delay_time_usec = ::std::option::Option::None;
    }

    pub fn has_delay_time_usec(&self) -> bool {
        self.delay_time_usec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay_time_usec(&mut self, v: u32) {
        self.delay_time_usec = ::std::option::Option::Some(v);
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;

    pub fn crypt(&self) -> &super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned {
        self.crypt.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned as crate::Message>::default_instance())
    }

    pub fn clear_crypt(&mut self) {
        self.crypt.clear();
    }

    pub fn has_crypt(&self) -> bool {
        self.crypt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crypt(&mut self, v: super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned) {
        self.crypt = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crypt(&mut self) -> &mut super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned {
        self.crypt.mut_or_insert_default()
    }

    // Take field
    pub fn take_crypt(&mut self) -> super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned {
        self.crypt.take().unwrap_or_else(|| super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned::new())
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 8;

    pub fn cert(&self) -> &super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned {
        self.cert.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned as crate::Message>::default_instance())
    }

    pub fn clear_cert(&mut self) {
        self.cert.clear();
    }

    pub fn has_cert(&self) -> bool {
        self.cert.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cert(&mut self, v: super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned) {
        self.cert = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cert(&mut self) -> &mut super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned {
        self.cert.mut_or_insert_default()
    }

    // Take field
    pub fn take_cert(&mut self) -> super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned {
        self.cert.take().unwrap_or_else(|| super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned::new())
    }

    // optional string identity_string = 11;

    pub fn identity_string(&self) -> &str {
        match self.identity_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_identity_string(&mut self) {
        self.identity_string = ::std::option::Option::None;
    }

    pub fn has_identity_string(&self) -> bool {
        self.identity_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identity_string(&mut self, v: ::std::string::String) {
        self.identity_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identity_string(&mut self) -> &mut ::std::string::String {
        if self.identity_string.is_none() {
            self.identity_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.identity_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_identity_string(&mut self) -> ::std::string::String {
        self.identity_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 legacy_server_steam_id = 2;

    pub fn legacy_server_steam_id(&self) -> u64 {
        self.legacy_server_steam_id.unwrap_or(0)
    }

    pub fn clear_legacy_server_steam_id(&mut self) {
        self.legacy_server_steam_id = ::std::option::Option::None;
    }

    pub fn has_legacy_server_steam_id(&self) -> bool {
        self.legacy_server_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_server_steam_id(&mut self, v: u64) {
        self.legacy_server_steam_id = ::std::option::Option::Some(v);
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;

    pub fn legacy_identity_binary(&self) -> &super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary {
        self.legacy_identity_binary.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary as crate::Message>::default_instance())
    }

    pub fn clear_legacy_identity_binary(&mut self) {
        self.legacy_identity_binary.clear();
    }

    pub fn has_legacy_identity_binary(&self) -> bool {
        self.legacy_identity_binary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_legacy_identity_binary(&mut self, v: super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary) {
        self.legacy_identity_binary = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_legacy_identity_binary(&mut self) -> &mut super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary {
        self.legacy_identity_binary.mut_or_insert_default()
    }

    // Take field
    pub fn take_legacy_identity_binary(&mut self) -> super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary {
        self.legacy_identity_binary.take().unwrap_or_else(|| super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.client_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.client_connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.server_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.server_connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "your_timestamp",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.your_timestamp },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.your_timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "delay_time_usec",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.delay_time_usec },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.delay_time_usec },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages::CMsgSteamDatagramSessionCryptInfoSigned>(
            "crypt",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.crypt },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.crypt },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages_certs::CMsgSteamDatagramCertificateSigned>(
            "cert",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.cert },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.cert },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "identity_string",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.identity_string },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.identity_string },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "legacy_server_steam_id",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.legacy_server_steam_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.legacy_server_steam_id },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages_certs::CMsgSteamNetworkingIdentityLegacyBinary>(
            "legacy_identity_binary",
            |m: &CMsgSteamSockets_UDP_ConnectOK| { &m.legacy_identity_binary },
            |m: &mut CMsgSteamSockets_UDP_ConnectOK| { &mut m.legacy_identity_binary },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ConnectOK>(
            "CMsgSteamSockets_UDP_ConnectOK",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_ConnectOK {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ConnectOK";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.client_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.server_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                25 => {
                    self.your_timestamp = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.delay_time_usec = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.crypt)?;
                },
                66 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.cert)?;
                },
                90 => {
                    self.identity_string = ::std::option::Option::Some(is.read_string()?);
                },
                17 => {
                    self.legacy_server_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                82 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.legacy_identity_binary)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.server_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.your_timestamp {
            my_size += 1 + 8;
        }
        if let Some(v) = self.delay_time_usec {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.crypt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.identity_string.as_ref() {
            my_size += crate::rt::string_size(11, &v);
        }
        if let Some(v) = self.legacy_server_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.legacy_identity_binary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_connection_id {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.server_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.your_timestamp {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.delay_time_usec {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.crypt.as_ref() {
            crate::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.cert.as_ref() {
            crate::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.identity_string.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.legacy_server_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.legacy_identity_binary.as_ref() {
            crate::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ConnectOK {
        CMsgSteamSockets_UDP_ConnectOK::new()
    }

    fn clear(&mut self) {
        self.client_connection_id = ::std::option::Option::None;
        self.server_connection_id = ::std::option::Option::None;
        self.your_timestamp = ::std::option::Option::None;
        self.delay_time_usec = ::std::option::Option::None;
        self.crypt.clear();
        self.cert.clear();
        self.identity_string = ::std::option::Option::None;
        self.legacy_server_steam_id = ::std::option::Option::None;
        self.legacy_identity_binary.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ConnectOK {
        static instance: CMsgSteamSockets_UDP_ConnectOK = CMsgSteamSockets_UDP_ConnectOK {
            client_connection_id: ::std::option::Option::None,
            server_connection_id: ::std::option::Option::None,
            your_timestamp: ::std::option::Option::None,
            delay_time_usec: ::std::option::Option::None,
            crypt: crate::MessageField::none(),
            cert: crate::MessageField::none(),
            identity_string: ::std::option::Option::None,
            legacy_server_steam_id: ::std::option::Option::None,
            legacy_identity_binary: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_ConnectOK {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ConnectOK").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ConnectOK {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_ConnectOK {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_ConnectionClosed)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_ConnectionClosed {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.debug)
    pub debug: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_ConnectionClosed.reason_code)
    pub reason_code: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_ConnectionClosed.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_ConnectionClosed {
    fn default() -> &'a CMsgSteamSockets_UDP_ConnectionClosed {
        <CMsgSteamSockets_UDP_ConnectionClosed as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_ConnectionClosed {
    pub fn new() -> CMsgSteamSockets_UDP_ConnectionClosed {
        ::std::default::Default::default()
    }

    // optional fixed32 to_connection_id = 4;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 from_connection_id = 5;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional string debug = 2;

    pub fn debug(&self) -> &str {
        match self.debug.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_debug(&mut self) {
        self.debug = ::std::option::Option::None;
    }

    pub fn has_debug(&self) -> bool {
        self.debug.is_some()
    }

    // Param is passed by value, moved
    pub fn set_debug(&mut self, v: ::std::string::String) {
        self.debug = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug(&mut self) -> &mut ::std::string::String {
        if self.debug.is_none() {
            self.debug = ::std::option::Option::Some(::std::string::String::new());
        }
        self.debug.as_mut().unwrap()
    }

    // Take field
    pub fn take_debug(&mut self) -> ::std::string::String {
        self.debug.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 reason_code = 3;

    pub fn reason_code(&self) -> u32 {
        self.reason_code.unwrap_or(0)
    }

    pub fn clear_reason_code(&mut self) {
        self.reason_code = ::std::option::Option::None;
    }

    pub fn has_reason_code(&self) -> bool {
        self.reason_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason_code(&mut self, v: u32) {
        self.reason_code = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.to_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.to_connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.from_connection_id },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.from_connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "debug",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.debug },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.debug },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason_code",
            |m: &CMsgSteamSockets_UDP_ConnectionClosed| { &m.reason_code },
            |m: &mut CMsgSteamSockets_UDP_ConnectionClosed| { &mut m.reason_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_ConnectionClosed>(
            "CMsgSteamSockets_UDP_ConnectionClosed",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_ConnectionClosed {
    const NAME: &'static str = "CMsgSteamSockets_UDP_ConnectionClosed";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                37 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                45 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    self.debug = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.reason_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.debug.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.reason_code {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.debug.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.reason_code {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_ConnectionClosed {
        CMsgSteamSockets_UDP_ConnectionClosed::new()
    }

    fn clear(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
        self.from_connection_id = ::std::option::Option::None;
        self.debug = ::std::option::Option::None;
        self.reason_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_ConnectionClosed {
        static instance: CMsgSteamSockets_UDP_ConnectionClosed = CMsgSteamSockets_UDP_ConnectionClosed {
            to_connection_id: ::std::option::Option::None,
            from_connection_id: ::std::option::Option::None,
            debug: ::std::option::Option::None,
            reason_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_ConnectionClosed {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_ConnectionClosed").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_ConnectionClosed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_ConnectionClosed {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_NoConnection)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_NoConnection {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_NoConnection.from_connection_id)
    pub from_connection_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_NoConnection.to_connection_id)
    pub to_connection_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_NoConnection.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_NoConnection {
    fn default() -> &'a CMsgSteamSockets_UDP_NoConnection {
        <CMsgSteamSockets_UDP_NoConnection as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_NoConnection {
    pub fn new() -> CMsgSteamSockets_UDP_NoConnection {
        ::std::default::Default::default()
    }

    // optional fixed32 from_connection_id = 2;

    pub fn from_connection_id(&self) -> u32 {
        self.from_connection_id.unwrap_or(0)
    }

    pub fn clear_from_connection_id(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
    }

    pub fn has_from_connection_id(&self) -> bool {
        self.from_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_connection_id(&mut self, v: u32) {
        self.from_connection_id = ::std::option::Option::Some(v);
    }

    // optional fixed32 to_connection_id = 3;

    pub fn to_connection_id(&self) -> u32 {
        self.to_connection_id.unwrap_or(0)
    }

    pub fn clear_to_connection_id(&mut self) {
        self.to_connection_id = ::std::option::Option::None;
    }

    pub fn has_to_connection_id(&self) -> bool {
        self.to_connection_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_connection_id(&mut self, v: u32) {
        self.to_connection_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_connection_id",
            |m: &CMsgSteamSockets_UDP_NoConnection| { &m.from_connection_id },
            |m: &mut CMsgSteamSockets_UDP_NoConnection| { &mut m.from_connection_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_connection_id",
            |m: &CMsgSteamSockets_UDP_NoConnection| { &m.to_connection_id },
            |m: &mut CMsgSteamSockets_UDP_NoConnection| { &mut m.to_connection_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_NoConnection>(
            "CMsgSteamSockets_UDP_NoConnection",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_NoConnection {
    const NAME: &'static str = "CMsgSteamSockets_UDP_NoConnection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                21 => {
                    self.from_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                29 => {
                    self.to_connection_id = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.from_connection_id {
            my_size += 1 + 4;
        }
        if let Some(v) = self.to_connection_id {
            my_size += 1 + 4;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.from_connection_id {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.to_connection_id {
            os.write_fixed32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_NoConnection {
        CMsgSteamSockets_UDP_NoConnection::new()
    }

    fn clear(&mut self) {
        self.from_connection_id = ::std::option::Option::None;
        self.to_connection_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_NoConnection {
        static instance: CMsgSteamSockets_UDP_NoConnection = CMsgSteamSockets_UDP_NoConnection {
            from_connection_id: ::std::option::Option::None,
            to_connection_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_NoConnection {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_NoConnection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_NoConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_NoConnection {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgSteamSockets_UDP_Stats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgSteamSockets_UDP_Stats {
    // message fields
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.stats)
    pub stats: crate::MessageField<super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality>,
    // @@protoc_insertion_point(field:CMsgSteamSockets_UDP_Stats.flags)
    pub flags: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgSteamSockets_UDP_Stats.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgSteamSockets_UDP_Stats {
    fn default() -> &'a CMsgSteamSockets_UDP_Stats {
        <CMsgSteamSockets_UDP_Stats as crate::Message>::default_instance()
    }
}

impl CMsgSteamSockets_UDP_Stats {
    pub fn new() -> CMsgSteamSockets_UDP_Stats {
        ::std::default::Default::default()
    }

    // optional .CMsgSteamDatagramConnectionQuality stats = 1;

    pub fn stats(&self) -> &super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality {
        self.stats.as_ref().unwrap_or_else(|| <super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality as crate::Message>::default_instance())
    }

    pub fn clear_stats(&mut self) {
        self.stats.clear();
    }

    pub fn has_stats(&self) -> bool {
        self.stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats(&mut self, v: super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality) {
        self.stats = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats(&mut self) -> &mut super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality {
        self.stats.mut_or_insert_default()
    }

    // Take field
    pub fn take_stats(&mut self) -> super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality {
        self.stats.take().unwrap_or_else(|| super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality::new())
    }

    // optional uint32 flags = 3;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steamnetworkingsockets_messages::CMsgSteamDatagramConnectionQuality>(
            "stats",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.stats },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.stats },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &CMsgSteamSockets_UDP_Stats| { &m.flags },
            |m: &mut CMsgSteamSockets_UDP_Stats| { &mut m.flags },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgSteamSockets_UDP_Stats>(
            "CMsgSteamSockets_UDP_Stats",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgSteamSockets_UDP_Stats {
    const NAME: &'static str = "CMsgSteamSockets_UDP_Stats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.stats)?;
                },
                24 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.flags {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.stats.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgSteamSockets_UDP_Stats {
        CMsgSteamSockets_UDP_Stats::new()
    }

    fn clear(&mut self) {
        self.stats.clear();
        self.flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgSteamSockets_UDP_Stats {
        static instance: CMsgSteamSockets_UDP_Stats = CMsgSteamSockets_UDP_Stats {
            stats: crate::MessageField::none(),
            flags: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgSteamSockets_UDP_Stats {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgSteamSockets_UDP_Stats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgSteamSockets_UDP_Stats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgSteamSockets_UDP_Stats {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgSteamSockets_UDP_Stats`
pub mod cmsg_steam_sockets_udp_stats {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CMsgSteamSockets_UDP_Stats.Flags)
    pub enum Flags {
        // @@protoc_insertion_point(enum_value:CMsgSteamSockets_UDP_Stats.Flags.ACK_REQUEST_E2E)
        ACK_REQUEST_E2E = 2,
        // @@protoc_insertion_point(enum_value:CMsgSteamSockets_UDP_Stats.Flags.ACK_REQUEST_IMMEDIATE)
        ACK_REQUEST_IMMEDIATE = 4,
        // @@protoc_insertion_point(enum_value:CMsgSteamSockets_UDP_Stats.Flags.NOT_PRIMARY_TRANSPORT_E2E)
        NOT_PRIMARY_TRANSPORT_E2E = 16,
    }

    impl crate::Enum for Flags {
        const NAME: &'static str = "Flags";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Flags> {
            match value {
                2 => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                4 => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                16 => ::std::option::Option::Some(Flags::NOT_PRIMARY_TRANSPORT_E2E),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Flags> {
            match str {
                "ACK_REQUEST_E2E" => ::std::option::Option::Some(Flags::ACK_REQUEST_E2E),
                "ACK_REQUEST_IMMEDIATE" => ::std::option::Option::Some(Flags::ACK_REQUEST_IMMEDIATE),
                "NOT_PRIMARY_TRANSPORT_E2E" => ::std::option::Option::Some(Flags::NOT_PRIMARY_TRANSPORT_E2E),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Flags] = &[
            Flags::ACK_REQUEST_E2E,
            Flags::ACK_REQUEST_IMMEDIATE,
            Flags::NOT_PRIMARY_TRANSPORT_E2E,
        ];
    }

    impl crate::EnumFull for Flags {
        fn enum_descriptor() -> crate::reflect::EnumDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CMsgSteamSockets_UDP_Stats.Flags").unwrap()).clone()
        }

        fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
            let index = match self {
                Flags::ACK_REQUEST_E2E => 0,
                Flags::ACK_REQUEST_IMMEDIATE => 1,
                Flags::NOT_PRIMARY_TRANSPORT_E2E => 2,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Flags {
        fn default() -> Self {
            Flags::ACK_REQUEST_E2E
        }
    }

    impl Flags {
        pub(in super) fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
            crate::reflect::GeneratedEnumDescriptorData::new::<Flags>("CMsgSteamSockets_UDP_Stats.Flags")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESteamNetworkingUDPMsgID)
pub enum ESteamNetworkingUDPMsgID {
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ChallengeRequest)
    k_ESteamNetworkingUDPMsg_ChallengeRequest = 32,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ChallengeReply)
    k_ESteamNetworkingUDPMsg_ChallengeReply = 33,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ConnectRequest)
    k_ESteamNetworkingUDPMsg_ConnectRequest = 34,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ConnectOK)
    k_ESteamNetworkingUDPMsg_ConnectOK = 35,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_ConnectionClosed)
    k_ESteamNetworkingUDPMsg_ConnectionClosed = 36,
    // @@protoc_insertion_point(enum_value:ESteamNetworkingUDPMsgID.k_ESteamNetworkingUDPMsg_NoConnection)
    k_ESteamNetworkingUDPMsg_NoConnection = 37,
}

impl crate::Enum for ESteamNetworkingUDPMsgID {
    const NAME: &'static str = "ESteamNetworkingUDPMsgID";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESteamNetworkingUDPMsgID> {
        match value {
            32 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest),
            33 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply),
            34 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest),
            35 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK),
            36 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed),
            37 => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESteamNetworkingUDPMsgID> {
        match str {
            "k_ESteamNetworkingUDPMsg_ChallengeRequest" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest),
            "k_ESteamNetworkingUDPMsg_ChallengeReply" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply),
            "k_ESteamNetworkingUDPMsg_ConnectRequest" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest),
            "k_ESteamNetworkingUDPMsg_ConnectOK" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK),
            "k_ESteamNetworkingUDPMsg_ConnectionClosed" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed),
            "k_ESteamNetworkingUDPMsg_NoConnection" => ::std::option::Option::Some(ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESteamNetworkingUDPMsgID] = &[
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed,
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection,
    ];
}

impl crate::EnumFull for ESteamNetworkingUDPMsgID {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ESteamNetworkingUDPMsgID").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest => 0,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeReply => 1,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectRequest => 2,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectOK => 3,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ConnectionClosed => 4,
            ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_NoConnection => 5,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESteamNetworkingUDPMsgID {
    fn default() -> Self {
        ESteamNetworkingUDPMsgID::k_ESteamNetworkingUDPMsg_ChallengeRequest
    }
}

impl ESteamNetworkingUDPMsgID {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<ESteamNetworkingUDPMsgID>("ESteamNetworkingUDPMsgID")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)steamnetworkingsockets_messages_udp.proto\x1a+steamnetworkingsockets_\
    messages_certs.proto\x1a%steamnetworkingsockets_messages.proto\"\x9a\x01\
    \n%CMsgSteamSockets_UDP_ChallengeRequest\x12#\n\rconnection_id\x18\x01\
    \x20\x01(\x07R\x0cconnectionId\x12!\n\x0cmy_timestamp\x18\x03\x20\x01(\
    \x06R\x0bmyTimestamp\x12)\n\x10protocol_version\x18\x04\x20\x01(\rR\x0fp\
    rotocolVersion\"\xba\x01\n#CMsgSteamSockets_UDP_ChallengeReply\x12#\n\rc\
    onnection_id\x18\x01\x20\x01(\x07R\x0cconnectionId\x12\x1c\n\tchallenge\
    \x18\x02\x20\x01(\x06R\tchallenge\x12%\n\x0eyour_timestamp\x18\x03\x20\
    \x01(\x06R\ryourTimestamp\x12)\n\x10protocol_version\x18\x04\x20\x01(\rR\
    \x0fprotocolVersion\"\xa7\x04\n#CMsgSteamSockets_UDP_ConnectRequest\x120\
    \n\x14client_connection_id\x18\x01\x20\x01(\x07R\x12clientConnectionId\
    \x12\x1c\n\tchallenge\x18\x02\x20\x01(\x06R\tchallenge\x12!\n\x0cmy_time\
    stamp\x18\x05\x20\x01(\x06R\x0bmyTimestamp\x12\x1e\n\x0bping_est_ms\x18\
    \x06\x20\x01(\rR\tpingEstMs\x12>\n\x05crypt\x18\x07\x20\x01(\x0b2(.CMsgS\
    teamDatagramSessionCryptInfoSignedR\x05crypt\x127\n\x04cert\x18\x04\x20\
    \x01(\x0b2#.CMsgSteamDatagramCertificateSignedR\x04cert\x126\n\x17legacy\
    _protocol_version\x18\x08\x20\x01(\rR\x15legacyProtocolVersion\x12'\n\
    \x0fidentity_string\x18\n\x20\x01(\tR\x0eidentityString\x123\n\x16legacy\
    _client_steam_id\x18\x03\x20\x01(\x06R\x13legacyClientSteamId\x12^\n\x16\
    legacy_identity_binary\x18\t\x20\x01(\x0b2(.CMsgSteamNetworkingIdentityL\
    egacyBinaryR\x14legacyIdentityBinary\"\x8a\x04\n\x1eCMsgSteamSockets_UDP\
    _ConnectOK\x120\n\x14client_connection_id\x18\x01\x20\x01(\x07R\x12clien\
    tConnectionId\x120\n\x14server_connection_id\x18\x05\x20\x01(\x07R\x12se\
    rverConnectionId\x12%\n\x0eyour_timestamp\x18\x03\x20\x01(\x06R\ryourTim\
    estamp\x12&\n\x0fdelay_time_usec\x18\x04\x20\x01(\rR\rdelayTimeUsec\x12>\
    \n\x05crypt\x18\x07\x20\x01(\x0b2(.CMsgSteamDatagramSessionCryptInfoSign\
    edR\x05crypt\x127\n\x04cert\x18\x08\x20\x01(\x0b2#.CMsgSteamDatagramCert\
    ificateSignedR\x04cert\x12'\n\x0fidentity_string\x18\x0b\x20\x01(\tR\x0e\
    identityString\x123\n\x16legacy_server_steam_id\x18\x02\x20\x01(\x06R\
    \x13legacyServerSteamId\x12^\n\x16legacy_identity_binary\x18\n\x20\x01(\
    \x0b2(.CMsgSteamNetworkingIdentityLegacyBinaryR\x14legacyIdentityBinary\
    \"\xb6\x01\n%CMsgSteamSockets_UDP_ConnectionClosed\x12(\n\x10to_connecti\
    on_id\x18\x04\x20\x01(\x07R\x0etoConnectionId\x12,\n\x12from_connection_\
    id\x18\x05\x20\x01(\x07R\x10fromConnectionId\x12\x14\n\x05debug\x18\x02\
    \x20\x01(\tR\x05debug\x12\x1f\n\x0breason_code\x18\x03\x20\x01(\rR\nreas\
    onCode\"{\n!CMsgSteamSockets_UDP_NoConnection\x12,\n\x12from_connection_\
    id\x18\x02\x20\x01(\x07R\x10fromConnectionId\x12(\n\x10to_connection_id\
    \x18\x03\x20\x01(\x07R\x0etoConnectionId\"\xc5\x01\n\x1aCMsgSteamSockets\
    _UDP_Stats\x129\n\x05stats\x18\x01\x20\x01(\x0b2#.CMsgSteamDatagramConne\
    ctionQualityR\x05stats\x12\x14\n\x05flags\x18\x03\x20\x01(\rR\x05flags\"\
    V\n\x05Flags\x12\x13\n\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n\x15ACK_REQUE\
    ST_IMMEDIATE\x10\x04\x12\x1d\n\x19NOT_PRIMARY_TRANSPORT_E2E\x10\x10*\xa5\
    \x02\n\x18ESteamNetworkingUDPMsgID\x12-\n)k_ESteamNetworkingUDPMsg_Chall\
    engeRequest\x10\x20\x12+\n'k_ESteamNetworkingUDPMsg_ChallengeReply\x10!\
    \x12+\n'k_ESteamNetworkingUDPMsg_ConnectRequest\x10\"\x12&\n\"k_ESteamNe\
    tworkingUDPMsg_ConnectOK\x10#\x12-\n)k_ESteamNetworkingUDPMsg_Connection\
    Closed\x10$\x12)\n%k_ESteamNetworkingUDPMsg_NoConnection\x10%B\x05H\x01\
    \x80\x01\0\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steamnetworkingsockets_messages_certs::file_descriptor().clone());
            deps.push(super::steamnetworkingsockets_messages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CMsgSteamSockets_UDP_ChallengeRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ChallengeReply::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ConnectRequest::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ConnectOK::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_ConnectionClosed::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_NoConnection::generated_message_descriptor_data());
            messages.push(CMsgSteamSockets_UDP_Stats::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(ESteamNetworkingUDPMsgID::generated_enum_descriptor_data());
            enums.push(cmsg_steam_sockets_udp_stats::Flags::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
