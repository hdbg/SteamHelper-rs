// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_virtualcontroller.proto`

// @@protoc_insertion_point(message:CVirtualControllerElement)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerElement {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerElement.type)
    pub type_: ::std::option::Option<crate::EnumOrUnknown<EControllerElementType>>,
    // @@protoc_insertion_point(field:CVirtualControllerElement.visible)
    pub visible: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerElement.x_position)
    pub x_position: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerElement.y_position)
    pub y_position: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerElement.x_scale)
    pub x_scale: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerElement.y_scale)
    pub y_scale: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerElement.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerElement {
    fn default() -> &'a CVirtualControllerElement {
        <CVirtualControllerElement as crate::Message>::default_instance()
    }
}

impl CVirtualControllerElement {
    pub fn new() -> CVirtualControllerElement {
        ::std::default::Default::default()
    }

    // optional .EControllerElementType type = 1;

    pub fn type_(&self) -> EControllerElementType {
        match self.type_ {
            Some(e) => e.enum_value_or(EControllerElementType::k_EControllerElementTypeNone),
            None => EControllerElementType::k_EControllerElementTypeNone,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: EControllerElementType) {
        self.type_ = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool visible = 2;

    pub fn visible(&self) -> bool {
        self.visible.unwrap_or(false)
    }

    pub fn clear_visible(&mut self) {
        self.visible = ::std::option::Option::None;
    }

    pub fn has_visible(&self) -> bool {
        self.visible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visible(&mut self, v: bool) {
        self.visible = ::std::option::Option::Some(v);
    }

    // optional float x_position = 3;

    pub fn x_position(&self) -> f32 {
        self.x_position.unwrap_or(0.)
    }

    pub fn clear_x_position(&mut self) {
        self.x_position = ::std::option::Option::None;
    }

    pub fn has_x_position(&self) -> bool {
        self.x_position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x_position(&mut self, v: f32) {
        self.x_position = ::std::option::Option::Some(v);
    }

    // optional float y_position = 4;

    pub fn y_position(&self) -> f32 {
        self.y_position.unwrap_or(0.)
    }

    pub fn clear_y_position(&mut self) {
        self.y_position = ::std::option::Option::None;
    }

    pub fn has_y_position(&self) -> bool {
        self.y_position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y_position(&mut self, v: f32) {
        self.y_position = ::std::option::Option::Some(v);
    }

    // optional float x_scale = 5;

    pub fn x_scale(&self) -> f32 {
        self.x_scale.unwrap_or(1.0f32)
    }

    pub fn clear_x_scale(&mut self) {
        self.x_scale = ::std::option::Option::None;
    }

    pub fn has_x_scale(&self) -> bool {
        self.x_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x_scale(&mut self, v: f32) {
        self.x_scale = ::std::option::Option::Some(v);
    }

    // optional float y_scale = 6;

    pub fn y_scale(&self) -> f32 {
        self.y_scale.unwrap_or(1.0f32)
    }

    pub fn clear_y_scale(&mut self) {
        self.y_scale = ::std::option::Option::None;
    }

    pub fn has_y_scale(&self) -> bool {
        self.y_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y_scale(&mut self, v: f32) {
        self.y_scale = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CVirtualControllerElement| { &m.type_ },
            |m: &mut CVirtualControllerElement| { &mut m.type_ },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "visible",
            |m: &CVirtualControllerElement| { &m.visible },
            |m: &mut CVirtualControllerElement| { &mut m.visible },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "x_position",
            |m: &CVirtualControllerElement| { &m.x_position },
            |m: &mut CVirtualControllerElement| { &mut m.x_position },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "y_position",
            |m: &CVirtualControllerElement| { &m.y_position },
            |m: &mut CVirtualControllerElement| { &mut m.y_position },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "x_scale",
            |m: &CVirtualControllerElement| { &m.x_scale },
            |m: &mut CVirtualControllerElement| { &mut m.x_scale },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "y_scale",
            |m: &CVirtualControllerElement| { &m.y_scale },
            |m: &mut CVirtualControllerElement| { &mut m.y_scale },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerElement>(
            "CVirtualControllerElement",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerElement {
    const NAME: &'static str = "CVirtualControllerElement";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.visible = ::std::option::Option::Some(is.read_bool()?);
                },
                29 => {
                    self.x_position = ::std::option::Option::Some(is.read_float()?);
                },
                37 => {
                    self.y_position = ::std::option::Option::Some(is.read_float()?);
                },
                45 => {
                    self.x_scale = ::std::option::Option::Some(is.read_float()?);
                },
                53 => {
                    self.y_scale = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.visible {
            my_size += 1 + 1;
        }
        if let Some(v) = self.x_position {
            my_size += 1 + 4;
        }
        if let Some(v) = self.y_position {
            my_size += 1 + 4;
        }
        if let Some(v) = self.x_scale {
            my_size += 1 + 4;
        }
        if let Some(v) = self.y_scale {
            my_size += 1 + 4;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.visible {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.x_position {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.y_position {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.x_scale {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.y_scale {
            os.write_float(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerElement {
        CVirtualControllerElement::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.visible = ::std::option::Option::None;
        self.x_position = ::std::option::Option::None;
        self.y_position = ::std::option::Option::None;
        self.x_scale = ::std::option::Option::None;
        self.y_scale = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerElement {
        static instance: CVirtualControllerElement = CVirtualControllerElement {
            type_: ::std::option::Option::None,
            visible: ::std::option::Option::None,
            x_position: ::std::option::Option::None,
            y_position: ::std::option::Option::None,
            x_scale: ::std::option::Option::None,
            y_scale: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerElement {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerElement").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerElement {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVirtualControllerColor)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerColor {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerColor.r)
    pub r: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerColor.g)
    pub g: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerColor.b)
    pub b: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerColor.a)
    pub a: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerColor.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerColor {
    fn default() -> &'a CVirtualControllerColor {
        <CVirtualControllerColor as crate::Message>::default_instance()
    }
}

impl CVirtualControllerColor {
    pub fn new() -> CVirtualControllerColor {
        ::std::default::Default::default()
    }

    // optional float r = 1;

    pub fn r(&self) -> f32 {
        self.r.unwrap_or(1.0f32)
    }

    pub fn clear_r(&mut self) {
        self.r = ::std::option::Option::None;
    }

    pub fn has_r(&self) -> bool {
        self.r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: f32) {
        self.r = ::std::option::Option::Some(v);
    }

    // optional float g = 2;

    pub fn g(&self) -> f32 {
        self.g.unwrap_or(1.0f32)
    }

    pub fn clear_g(&mut self) {
        self.g = ::std::option::Option::None;
    }

    pub fn has_g(&self) -> bool {
        self.g.is_some()
    }

    // Param is passed by value, moved
    pub fn set_g(&mut self, v: f32) {
        self.g = ::std::option::Option::Some(v);
    }

    // optional float b = 3;

    pub fn b(&self) -> f32 {
        self.b.unwrap_or(1.0f32)
    }

    pub fn clear_b(&mut self) {
        self.b = ::std::option::Option::None;
    }

    pub fn has_b(&self) -> bool {
        self.b.is_some()
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: f32) {
        self.b = ::std::option::Option::Some(v);
    }

    // optional float a = 4;

    pub fn a(&self) -> f32 {
        self.a.unwrap_or(1.0f32)
    }

    pub fn clear_a(&mut self) {
        self.a = ::std::option::Option::None;
    }

    pub fn has_a(&self) -> bool {
        self.a.is_some()
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: f32) {
        self.a = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "r",
            |m: &CVirtualControllerColor| { &m.r },
            |m: &mut CVirtualControllerColor| { &mut m.r },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "g",
            |m: &CVirtualControllerColor| { &m.g },
            |m: &mut CVirtualControllerColor| { &mut m.g },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "b",
            |m: &CVirtualControllerColor| { &m.b },
            |m: &mut CVirtualControllerColor| { &mut m.b },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "a",
            |m: &CVirtualControllerColor| { &m.a },
            |m: &mut CVirtualControllerColor| { &mut m.a },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerColor>(
            "CVirtualControllerColor",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerColor {
    const NAME: &'static str = "CVirtualControllerColor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.r = ::std::option::Option::Some(is.read_float()?);
                },
                21 => {
                    self.g = ::std::option::Option::Some(is.read_float()?);
                },
                29 => {
                    self.b = ::std::option::Option::Some(is.read_float()?);
                },
                37 => {
                    self.a = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.r {
            my_size += 1 + 4;
        }
        if let Some(v) = self.g {
            my_size += 1 + 4;
        }
        if let Some(v) = self.b {
            my_size += 1 + 4;
        }
        if let Some(v) = self.a {
            my_size += 1 + 4;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.r {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.g {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.b {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.a {
            os.write_float(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerColor {
        CVirtualControllerColor::new()
    }

    fn clear(&mut self) {
        self.r = ::std::option::Option::None;
        self.g = ::std::option::Option::None;
        self.b = ::std::option::Option::None;
        self.a = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerColor {
        static instance: CVirtualControllerColor = CVirtualControllerColor {
            r: ::std::option::Option::None,
            g: ::std::option::Option::None,
            b: ::std::option::Option::None,
            a: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerColor {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerColor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerColor {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVirtualControllerLayout)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerLayout {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerLayout.layout_version)
    pub layout_version: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayout.actionset_id)
    pub actionset_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayout.elements)
    pub elements: ::std::vec::Vec<CVirtualControllerElement>,
    // @@protoc_insertion_point(field:CVirtualControllerLayout.color)
    pub color: crate::MessageField<CVirtualControllerColor>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerLayout.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerLayout {
    fn default() -> &'a CVirtualControllerLayout {
        <CVirtualControllerLayout as crate::Message>::default_instance()
    }
}

impl CVirtualControllerLayout {
    pub fn new() -> CVirtualControllerLayout {
        ::std::default::Default::default()
    }

    // optional int32 layout_version = 1;

    pub fn layout_version(&self) -> i32 {
        self.layout_version.unwrap_or(0)
    }

    pub fn clear_layout_version(&mut self) {
        self.layout_version = ::std::option::Option::None;
    }

    pub fn has_layout_version(&self) -> bool {
        self.layout_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layout_version(&mut self, v: i32) {
        self.layout_version = ::std::option::Option::Some(v);
    }

    // optional int32 actionset_id = 2;

    pub fn actionset_id(&self) -> i32 {
        self.actionset_id.unwrap_or(0)
    }

    pub fn clear_actionset_id(&mut self) {
        self.actionset_id = ::std::option::Option::None;
    }

    pub fn has_actionset_id(&self) -> bool {
        self.actionset_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actionset_id(&mut self, v: i32) {
        self.actionset_id = ::std::option::Option::Some(v);
    }

    // repeated .CVirtualControllerElement elements = 4;

    pub fn elements(&self) -> &[CVirtualControllerElement] {
        &self.elements
    }

    pub fn clear_elements(&mut self) {
        self.elements.clear();
    }

    // Param is passed by value, moved
    pub fn set_elements(&mut self, v: ::std::vec::Vec<CVirtualControllerElement>) {
        self.elements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elements(&mut self) -> &mut ::std::vec::Vec<CVirtualControllerElement> {
        &mut self.elements
    }

    // Take field
    pub fn take_elements(&mut self) -> ::std::vec::Vec<CVirtualControllerElement> {
        ::std::mem::replace(&mut self.elements, ::std::vec::Vec::new())
    }

    // optional .CVirtualControllerColor color = 5;

    pub fn color(&self) -> &CVirtualControllerColor {
        self.color.as_ref().unwrap_or_else(|| <CVirtualControllerColor as crate::Message>::default_instance())
    }

    pub fn clear_color(&mut self) {
        self.color.clear();
    }

    pub fn has_color(&self) -> bool {
        self.color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: CVirtualControllerColor) {
        self.color = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_color(&mut self) -> &mut CVirtualControllerColor {
        self.color.mut_or_insert_default()
    }

    // Take field
    pub fn take_color(&mut self) -> CVirtualControllerColor {
        self.color.take().unwrap_or_else(|| CVirtualControllerColor::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "layout_version",
            |m: &CVirtualControllerLayout| { &m.layout_version },
            |m: &mut CVirtualControllerLayout| { &mut m.layout_version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "actionset_id",
            |m: &CVirtualControllerLayout| { &m.actionset_id },
            |m: &mut CVirtualControllerLayout| { &mut m.actionset_id },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "elements",
            |m: &CVirtualControllerLayout| { &m.elements },
            |m: &mut CVirtualControllerLayout| { &mut m.elements },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CVirtualControllerColor>(
            "color",
            |m: &CVirtualControllerLayout| { &m.color },
            |m: &mut CVirtualControllerLayout| { &mut m.color },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerLayout>(
            "CVirtualControllerLayout",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerLayout {
    const NAME: &'static str = "CVirtualControllerLayout";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.layout_version = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.actionset_id = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.elements.push(is.read_message()?);
                },
                42 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.color)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.layout_version {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.actionset_id {
            my_size += crate::rt::int32_size(2, v);
        }
        for value in &self.elements {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.layout_version {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.actionset_id {
            os.write_int32(2, v)?;
        }
        for v in &self.elements {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.color.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerLayout {
        CVirtualControllerLayout::new()
    }

    fn clear(&mut self) {
        self.layout_version = ::std::option::Option::None;
        self.actionset_id = ::std::option::Option::None;
        self.elements.clear();
        self.color.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerLayout {
        static instance: CVirtualControllerLayout = CVirtualControllerLayout {
            layout_version: ::std::option::Option::None,
            actionset_id: ::std::option::Option::None,
            elements: ::std::vec::Vec::new(),
            color: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerLayout {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerLayout").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerLayout {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVirtualControllerLayouts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerLayouts {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.layouts)
    pub layouts: ::std::vec::Vec<CVirtualControllerLayout>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.input_mode)
    pub input_mode: ::std::option::Option<crate::EnumOrUnknown<EInputMode>>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.mouse_mode)
    pub mouse_mode: ::std::option::Option<crate::EnumOrUnknown<EMouseMode>>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.trackpad_sensitivity)
    pub trackpad_sensitivity: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.pinch_zoom_enabled)
    pub pinch_zoom_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.pinch_zoom_x)
    pub pinch_zoom_x: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.pinch_zoom_y)
    pub pinch_zoom_y: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.pinch_zoom_scale)
    pub pinch_zoom_scale: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.shaken)
    pub shaken: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerLayouts.mouse_offscreen)
    pub mouse_offscreen: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerLayouts.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerLayouts {
    fn default() -> &'a CVirtualControllerLayouts {
        <CVirtualControllerLayouts as crate::Message>::default_instance()
    }
}

impl CVirtualControllerLayouts {
    pub fn new() -> CVirtualControllerLayouts {
        ::std::default::Default::default()
    }

    // repeated .CVirtualControllerLayout layouts = 1;

    pub fn layouts(&self) -> &[CVirtualControllerLayout] {
        &self.layouts
    }

    pub fn clear_layouts(&mut self) {
        self.layouts.clear();
    }

    // Param is passed by value, moved
    pub fn set_layouts(&mut self, v: ::std::vec::Vec<CVirtualControllerLayout>) {
        self.layouts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_layouts(&mut self) -> &mut ::std::vec::Vec<CVirtualControllerLayout> {
        &mut self.layouts
    }

    // Take field
    pub fn take_layouts(&mut self) -> ::std::vec::Vec<CVirtualControllerLayout> {
        ::std::mem::replace(&mut self.layouts, ::std::vec::Vec::new())
    }

    // optional .EInputMode input_mode = 2;

    pub fn input_mode(&self) -> EInputMode {
        match self.input_mode {
            Some(e) => e.enum_value_or(EInputMode::k_EInputModeController),
            None => EInputMode::k_EInputModeController,
        }
    }

    pub fn clear_input_mode(&mut self) {
        self.input_mode = ::std::option::Option::None;
    }

    pub fn has_input_mode(&self) -> bool {
        self.input_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input_mode(&mut self, v: EInputMode) {
        self.input_mode = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .EMouseMode mouse_mode = 3;

    pub fn mouse_mode(&self) -> EMouseMode {
        match self.mouse_mode {
            Some(e) => e.enum_value_or(EMouseMode::k_EMouseModeUnknown),
            None => EMouseMode::k_EMouseModeUnknown,
        }
    }

    pub fn clear_mouse_mode(&mut self) {
        self.mouse_mode = ::std::option::Option::None;
    }

    pub fn has_mouse_mode(&self) -> bool {
        self.mouse_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mouse_mode(&mut self, v: EMouseMode) {
        self.mouse_mode = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional float trackpad_sensitivity = 4;

    pub fn trackpad_sensitivity(&self) -> f32 {
        self.trackpad_sensitivity.unwrap_or(1.0f32)
    }

    pub fn clear_trackpad_sensitivity(&mut self) {
        self.trackpad_sensitivity = ::std::option::Option::None;
    }

    pub fn has_trackpad_sensitivity(&self) -> bool {
        self.trackpad_sensitivity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trackpad_sensitivity(&mut self, v: f32) {
        self.trackpad_sensitivity = ::std::option::Option::Some(v);
    }

    // optional bool pinch_zoom_enabled = 5;

    pub fn pinch_zoom_enabled(&self) -> bool {
        self.pinch_zoom_enabled.unwrap_or(false)
    }

    pub fn clear_pinch_zoom_enabled(&mut self) {
        self.pinch_zoom_enabled = ::std::option::Option::None;
    }

    pub fn has_pinch_zoom_enabled(&self) -> bool {
        self.pinch_zoom_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pinch_zoom_enabled(&mut self, v: bool) {
        self.pinch_zoom_enabled = ::std::option::Option::Some(v);
    }

    // optional float pinch_zoom_x = 6;

    pub fn pinch_zoom_x(&self) -> f32 {
        self.pinch_zoom_x.unwrap_or(0.0f32)
    }

    pub fn clear_pinch_zoom_x(&mut self) {
        self.pinch_zoom_x = ::std::option::Option::None;
    }

    pub fn has_pinch_zoom_x(&self) -> bool {
        self.pinch_zoom_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pinch_zoom_x(&mut self, v: f32) {
        self.pinch_zoom_x = ::std::option::Option::Some(v);
    }

    // optional float pinch_zoom_y = 7;

    pub fn pinch_zoom_y(&self) -> f32 {
        self.pinch_zoom_y.unwrap_or(0.0f32)
    }

    pub fn clear_pinch_zoom_y(&mut self) {
        self.pinch_zoom_y = ::std::option::Option::None;
    }

    pub fn has_pinch_zoom_y(&self) -> bool {
        self.pinch_zoom_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pinch_zoom_y(&mut self, v: f32) {
        self.pinch_zoom_y = ::std::option::Option::Some(v);
    }

    // optional float pinch_zoom_scale = 8;

    pub fn pinch_zoom_scale(&self) -> f32 {
        self.pinch_zoom_scale.unwrap_or(1.0f32)
    }

    pub fn clear_pinch_zoom_scale(&mut self) {
        self.pinch_zoom_scale = ::std::option::Option::None;
    }

    pub fn has_pinch_zoom_scale(&self) -> bool {
        self.pinch_zoom_scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pinch_zoom_scale(&mut self, v: f32) {
        self.pinch_zoom_scale = ::std::option::Option::Some(v);
    }

    // optional bool shaken = 9;

    pub fn shaken(&self) -> bool {
        self.shaken.unwrap_or(false)
    }

    pub fn clear_shaken(&mut self) {
        self.shaken = ::std::option::Option::None;
    }

    pub fn has_shaken(&self) -> bool {
        self.shaken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shaken(&mut self, v: bool) {
        self.shaken = ::std::option::Option::Some(v);
    }

    // optional bool mouse_offscreen = 10;

    pub fn mouse_offscreen(&self) -> bool {
        self.mouse_offscreen.unwrap_or(false)
    }

    pub fn clear_mouse_offscreen(&mut self) {
        self.mouse_offscreen = ::std::option::Option::None;
    }

    pub fn has_mouse_offscreen(&self) -> bool {
        self.mouse_offscreen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mouse_offscreen(&mut self, v: bool) {
        self.mouse_offscreen = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "layouts",
            |m: &CVirtualControllerLayouts| { &m.layouts },
            |m: &mut CVirtualControllerLayouts| { &mut m.layouts },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "input_mode",
            |m: &CVirtualControllerLayouts| { &m.input_mode },
            |m: &mut CVirtualControllerLayouts| { &mut m.input_mode },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mouse_mode",
            |m: &CVirtualControllerLayouts| { &m.mouse_mode },
            |m: &mut CVirtualControllerLayouts| { &mut m.mouse_mode },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "trackpad_sensitivity",
            |m: &CVirtualControllerLayouts| { &m.trackpad_sensitivity },
            |m: &mut CVirtualControllerLayouts| { &mut m.trackpad_sensitivity },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pinch_zoom_enabled",
            |m: &CVirtualControllerLayouts| { &m.pinch_zoom_enabled },
            |m: &mut CVirtualControllerLayouts| { &mut m.pinch_zoom_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pinch_zoom_x",
            |m: &CVirtualControllerLayouts| { &m.pinch_zoom_x },
            |m: &mut CVirtualControllerLayouts| { &mut m.pinch_zoom_x },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pinch_zoom_y",
            |m: &CVirtualControllerLayouts| { &m.pinch_zoom_y },
            |m: &mut CVirtualControllerLayouts| { &mut m.pinch_zoom_y },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pinch_zoom_scale",
            |m: &CVirtualControllerLayouts| { &m.pinch_zoom_scale },
            |m: &mut CVirtualControllerLayouts| { &mut m.pinch_zoom_scale },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "shaken",
            |m: &CVirtualControllerLayouts| { &m.shaken },
            |m: &mut CVirtualControllerLayouts| { &mut m.shaken },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mouse_offscreen",
            |m: &CVirtualControllerLayouts| { &m.mouse_offscreen },
            |m: &mut CVirtualControllerLayouts| { &mut m.mouse_offscreen },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerLayouts>(
            "CVirtualControllerLayouts",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerLayouts {
    const NAME: &'static str = "CVirtualControllerLayouts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layouts.push(is.read_message()?);
                },
                16 => {
                    self.input_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.mouse_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                37 => {
                    self.trackpad_sensitivity = ::std::option::Option::Some(is.read_float()?);
                },
                40 => {
                    self.pinch_zoom_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                53 => {
                    self.pinch_zoom_x = ::std::option::Option::Some(is.read_float()?);
                },
                61 => {
                    self.pinch_zoom_y = ::std::option::Option::Some(is.read_float()?);
                },
                69 => {
                    self.pinch_zoom_scale = ::std::option::Option::Some(is.read_float()?);
                },
                72 => {
                    self.shaken = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.mouse_offscreen = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.layouts {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.input_mode {
            my_size += crate::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.mouse_mode {
            my_size += crate::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.trackpad_sensitivity {
            my_size += 1 + 4;
        }
        if let Some(v) = self.pinch_zoom_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pinch_zoom_x {
            my_size += 1 + 4;
        }
        if let Some(v) = self.pinch_zoom_y {
            my_size += 1 + 4;
        }
        if let Some(v) = self.pinch_zoom_scale {
            my_size += 1 + 4;
        }
        if let Some(v) = self.shaken {
            my_size += 1 + 1;
        }
        if let Some(v) = self.mouse_offscreen {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.layouts {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.input_mode {
            os.write_enum(2, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.mouse_mode {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.trackpad_sensitivity {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.pinch_zoom_enabled {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.pinch_zoom_x {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.pinch_zoom_y {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.pinch_zoom_scale {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.shaken {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.mouse_offscreen {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerLayouts {
        CVirtualControllerLayouts::new()
    }

    fn clear(&mut self) {
        self.layouts.clear();
        self.input_mode = ::std::option::Option::None;
        self.mouse_mode = ::std::option::Option::None;
        self.trackpad_sensitivity = ::std::option::Option::None;
        self.pinch_zoom_enabled = ::std::option::Option::None;
        self.pinch_zoom_x = ::std::option::Option::None;
        self.pinch_zoom_y = ::std::option::Option::None;
        self.pinch_zoom_scale = ::std::option::Option::None;
        self.shaken = ::std::option::Option::None;
        self.mouse_offscreen = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerLayouts {
        static instance: CVirtualControllerLayouts = CVirtualControllerLayouts {
            layouts: ::std::vec::Vec::new(),
            input_mode: ::std::option::Option::None,
            mouse_mode: ::std::option::Option::None,
            trackpad_sensitivity: ::std::option::Option::None,
            pinch_zoom_enabled: ::std::option::Option::None,
            pinch_zoom_x: ::std::option::Option::None,
            pinch_zoom_y: ::std::option::Option::None,
            pinch_zoom_scale: ::std::option::Option::None,
            shaken: ::std::option::Option::None,
            mouse_offscreen: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerLayouts {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerLayouts").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerLayouts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerLayouts {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVirtualControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerConfig.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CVirtualControllerConfig.actionsets)
    pub actionsets: ::std::vec::Vec<cvirtual_controller_config::ActionSet>,
    // @@protoc_insertion_point(field:CVirtualControllerConfig.default_mouse_mode)
    pub default_mouse_mode: ::std::option::Option<crate::EnumOrUnknown<EMouseMode>>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerConfig.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerConfig {
    fn default() -> &'a CVirtualControllerConfig {
        <CVirtualControllerConfig as crate::Message>::default_instance()
    }
}

impl CVirtualControllerConfig {
    pub fn new() -> CVirtualControllerConfig {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CVirtualControllerConfig.ActionSet actionsets = 2;

    pub fn actionsets(&self) -> &[cvirtual_controller_config::ActionSet] {
        &self.actionsets
    }

    pub fn clear_actionsets(&mut self) {
        self.actionsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_actionsets(&mut self, v: ::std::vec::Vec<cvirtual_controller_config::ActionSet>) {
        self.actionsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_actionsets(&mut self) -> &mut ::std::vec::Vec<cvirtual_controller_config::ActionSet> {
        &mut self.actionsets
    }

    // Take field
    pub fn take_actionsets(&mut self) -> ::std::vec::Vec<cvirtual_controller_config::ActionSet> {
        ::std::mem::replace(&mut self.actionsets, ::std::vec::Vec::new())
    }

    // optional .EMouseMode default_mouse_mode = 3;

    pub fn default_mouse_mode(&self) -> EMouseMode {
        match self.default_mouse_mode {
            Some(e) => e.enum_value_or(EMouseMode::k_EMouseModeAbsoluteCursor),
            None => EMouseMode::k_EMouseModeAbsoluteCursor,
        }
    }

    pub fn clear_default_mouse_mode(&mut self) {
        self.default_mouse_mode = ::std::option::Option::None;
    }

    pub fn has_default_mouse_mode(&self) -> bool {
        self.default_mouse_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_mouse_mode(&mut self, v: EMouseMode) {
        self.default_mouse_mode = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CVirtualControllerConfig| { &m.name },
            |m: &mut CVirtualControllerConfig| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "actionsets",
            |m: &CVirtualControllerConfig| { &m.actionsets },
            |m: &mut CVirtualControllerConfig| { &mut m.actionsets },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "default_mouse_mode",
            |m: &CVirtualControllerConfig| { &m.default_mouse_mode },
            |m: &mut CVirtualControllerConfig| { &mut m.default_mouse_mode },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerConfig>(
            "CVirtualControllerConfig",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerConfig {
    const NAME: &'static str = "CVirtualControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.actionsets.push(is.read_message()?);
                },
                24 => {
                    self.default_mouse_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        for value in &self.actionsets {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.default_mouse_mode {
            my_size += crate::rt::int32_size(3, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.actionsets {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.default_mouse_mode {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerConfig {
        CVirtualControllerConfig::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.actionsets.clear();
        self.default_mouse_mode = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerConfig {
        static instance: CVirtualControllerConfig = CVirtualControllerConfig {
            name: ::std::option::Option::None,
            actionsets: ::std::vec::Vec::new(),
            default_mouse_mode: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerConfig {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerConfig {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CVirtualControllerConfig`
pub mod cvirtual_controller_config {
    // @@protoc_insertion_point(message:CVirtualControllerConfig.Control)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Control {
        // message fields
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.icon)
        pub icon: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.input_source)
        pub input_source: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.input_mode)
        pub input_mode: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.input_element)
        pub input_element: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.output_gamepad)
        pub output_gamepad: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.output_keyboard)
        pub output_keyboard: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.output_mouse)
        pub output_mouse: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.icon_foreground)
        pub icon_foreground: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.icon_background)
        pub icon_background: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.input_toggle)
        pub input_toggle: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.input_activate_stick_or_trackpad)
        pub input_activate_stick_or_trackpad: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.activation_type)
        pub activation_type: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.long_press_ms)
        pub long_press_ms: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.Control.double_press_ms)
        pub double_press_ms: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CVirtualControllerConfig.Control.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Control {
        fn default() -> &'a Control {
            <Control as crate::Message>::default_instance()
        }
    }

    impl Control {
        pub fn new() -> Control {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon = 2;

        pub fn icon(&self) -> &str {
            match self.icon.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon(&mut self) {
            self.icon = ::std::option::Option::None;
        }

        pub fn has_icon(&self) -> bool {
            self.icon.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon(&mut self, v: ::std::string::String) {
            self.icon = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon(&mut self) -> &mut ::std::string::String {
            if self.icon.is_none() {
                self.icon = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon(&mut self) -> ::std::string::String {
            self.icon.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 input_source = 3;

        pub fn input_source(&self) -> i32 {
            self.input_source.unwrap_or(0)
        }

        pub fn clear_input_source(&mut self) {
            self.input_source = ::std::option::Option::None;
        }

        pub fn has_input_source(&self) -> bool {
            self.input_source.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_source(&mut self, v: i32) {
            self.input_source = ::std::option::Option::Some(v);
        }

        // optional int32 input_mode = 4;

        pub fn input_mode(&self) -> i32 {
            self.input_mode.unwrap_or(0)
        }

        pub fn clear_input_mode(&mut self) {
            self.input_mode = ::std::option::Option::None;
        }

        pub fn has_input_mode(&self) -> bool {
            self.input_mode.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_mode(&mut self, v: i32) {
            self.input_mode = ::std::option::Option::Some(v);
        }

        // optional int32 input_element = 5;

        pub fn input_element(&self) -> i32 {
            self.input_element.unwrap_or(0)
        }

        pub fn clear_input_element(&mut self) {
            self.input_element = ::std::option::Option::None;
        }

        pub fn has_input_element(&self) -> bool {
            self.input_element.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_element(&mut self, v: i32) {
            self.input_element = ::std::option::Option::Some(v);
        }

        // optional int32 output_gamepad = 6;

        pub fn output_gamepad(&self) -> i32 {
            self.output_gamepad.unwrap_or(0)
        }

        pub fn clear_output_gamepad(&mut self) {
            self.output_gamepad = ::std::option::Option::None;
        }

        pub fn has_output_gamepad(&self) -> bool {
            self.output_gamepad.is_some()
        }

        // Param is passed by value, moved
        pub fn set_output_gamepad(&mut self, v: i32) {
            self.output_gamepad = ::std::option::Option::Some(v);
        }

        // optional int32 output_keyboard = 7;

        pub fn output_keyboard(&self) -> i32 {
            self.output_keyboard.unwrap_or(0)
        }

        pub fn clear_output_keyboard(&mut self) {
            self.output_keyboard = ::std::option::Option::None;
        }

        pub fn has_output_keyboard(&self) -> bool {
            self.output_keyboard.is_some()
        }

        // Param is passed by value, moved
        pub fn set_output_keyboard(&mut self, v: i32) {
            self.output_keyboard = ::std::option::Option::Some(v);
        }

        // optional int32 output_mouse = 8;

        pub fn output_mouse(&self) -> i32 {
            self.output_mouse.unwrap_or(0)
        }

        pub fn clear_output_mouse(&mut self) {
            self.output_mouse = ::std::option::Option::None;
        }

        pub fn has_output_mouse(&self) -> bool {
            self.output_mouse.is_some()
        }

        // Param is passed by value, moved
        pub fn set_output_mouse(&mut self, v: i32) {
            self.output_mouse = ::std::option::Option::Some(v);
        }

        // optional string icon_foreground = 9;

        pub fn icon_foreground(&self) -> &str {
            match self.icon_foreground.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon_foreground(&mut self) {
            self.icon_foreground = ::std::option::Option::None;
        }

        pub fn has_icon_foreground(&self) -> bool {
            self.icon_foreground.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon_foreground(&mut self, v: ::std::string::String) {
            self.icon_foreground = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon_foreground(&mut self) -> &mut ::std::string::String {
            if self.icon_foreground.is_none() {
                self.icon_foreground = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon_foreground.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon_foreground(&mut self) -> ::std::string::String {
            self.icon_foreground.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string icon_background = 10;

        pub fn icon_background(&self) -> &str {
            match self.icon_background.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_icon_background(&mut self) {
            self.icon_background = ::std::option::Option::None;
        }

        pub fn has_icon_background(&self) -> bool {
            self.icon_background.is_some()
        }

        // Param is passed by value, moved
        pub fn set_icon_background(&mut self, v: ::std::string::String) {
            self.icon_background = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_icon_background(&mut self) -> &mut ::std::string::String {
            if self.icon_background.is_none() {
                self.icon_background = ::std::option::Option::Some(::std::string::String::new());
            }
            self.icon_background.as_mut().unwrap()
        }

        // Take field
        pub fn take_icon_background(&mut self) -> ::std::string::String {
            self.icon_background.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool input_toggle = 11;

        pub fn input_toggle(&self) -> bool {
            self.input_toggle.unwrap_or(false)
        }

        pub fn clear_input_toggle(&mut self) {
            self.input_toggle = ::std::option::Option::None;
        }

        pub fn has_input_toggle(&self) -> bool {
            self.input_toggle.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_toggle(&mut self, v: bool) {
            self.input_toggle = ::std::option::Option::Some(v);
        }

        // optional int32 input_activate_stick_or_trackpad = 12;

        pub fn input_activate_stick_or_trackpad(&self) -> i32 {
            self.input_activate_stick_or_trackpad.unwrap_or(0)
        }

        pub fn clear_input_activate_stick_or_trackpad(&mut self) {
            self.input_activate_stick_or_trackpad = ::std::option::Option::None;
        }

        pub fn has_input_activate_stick_or_trackpad(&self) -> bool {
            self.input_activate_stick_or_trackpad.is_some()
        }

        // Param is passed by value, moved
        pub fn set_input_activate_stick_or_trackpad(&mut self, v: i32) {
            self.input_activate_stick_or_trackpad = ::std::option::Option::Some(v);
        }

        // optional int32 activation_type = 13;

        pub fn activation_type(&self) -> i32 {
            self.activation_type.unwrap_or(0)
        }

        pub fn clear_activation_type(&mut self) {
            self.activation_type = ::std::option::Option::None;
        }

        pub fn has_activation_type(&self) -> bool {
            self.activation_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_activation_type(&mut self, v: i32) {
            self.activation_type = ::std::option::Option::Some(v);
        }

        // optional int32 long_press_ms = 14;

        pub fn long_press_ms(&self) -> i32 {
            self.long_press_ms.unwrap_or(0)
        }

        pub fn clear_long_press_ms(&mut self) {
            self.long_press_ms = ::std::option::Option::None;
        }

        pub fn has_long_press_ms(&self) -> bool {
            self.long_press_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_long_press_ms(&mut self, v: i32) {
            self.long_press_ms = ::std::option::Option::Some(v);
        }

        // optional int32 double_press_ms = 15;

        pub fn double_press_ms(&self) -> i32 {
            self.double_press_ms.unwrap_or(0)
        }

        pub fn clear_double_press_ms(&mut self) {
            self.double_press_ms = ::std::option::Option::None;
        }

        pub fn has_double_press_ms(&self) -> bool {
            self.double_press_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_double_press_ms(&mut self, v: i32) {
            self.double_press_ms = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(15);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Control| { &m.name },
                |m: &mut Control| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon",
                |m: &Control| { &m.icon },
                |m: &mut Control| { &mut m.icon },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "input_source",
                |m: &Control| { &m.input_source },
                |m: &mut Control| { &mut m.input_source },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "input_mode",
                |m: &Control| { &m.input_mode },
                |m: &mut Control| { &mut m.input_mode },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "input_element",
                |m: &Control| { &m.input_element },
                |m: &mut Control| { &mut m.input_element },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "output_gamepad",
                |m: &Control| { &m.output_gamepad },
                |m: &mut Control| { &mut m.output_gamepad },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "output_keyboard",
                |m: &Control| { &m.output_keyboard },
                |m: &mut Control| { &mut m.output_keyboard },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "output_mouse",
                |m: &Control| { &m.output_mouse },
                |m: &mut Control| { &mut m.output_mouse },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon_foreground",
                |m: &Control| { &m.icon_foreground },
                |m: &mut Control| { &mut m.icon_foreground },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "icon_background",
                |m: &Control| { &m.icon_background },
                |m: &mut Control| { &mut m.icon_background },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "input_toggle",
                |m: &Control| { &m.input_toggle },
                |m: &mut Control| { &mut m.input_toggle },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "input_activate_stick_or_trackpad",
                |m: &Control| { &m.input_activate_stick_or_trackpad },
                |m: &mut Control| { &mut m.input_activate_stick_or_trackpad },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "activation_type",
                |m: &Control| { &m.activation_type },
                |m: &mut Control| { &mut m.activation_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "long_press_ms",
                |m: &Control| { &m.long_press_ms },
                |m: &mut Control| { &mut m.long_press_ms },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "double_press_ms",
                |m: &Control| { &m.double_press_ms },
                |m: &mut Control| { &mut m.double_press_ms },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Control>(
                "CVirtualControllerConfig.Control",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Control {
        const NAME: &'static str = "Control";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.icon = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.input_source = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.input_mode = ::std::option::Option::Some(is.read_int32()?);
                    },
                    40 => {
                        self.input_element = ::std::option::Option::Some(is.read_int32()?);
                    },
                    48 => {
                        self.output_gamepad = ::std::option::Option::Some(is.read_int32()?);
                    },
                    56 => {
                        self.output_keyboard = ::std::option::Option::Some(is.read_int32()?);
                    },
                    64 => {
                        self.output_mouse = ::std::option::Option::Some(is.read_int32()?);
                    },
                    74 => {
                        self.icon_foreground = ::std::option::Option::Some(is.read_string()?);
                    },
                    82 => {
                        self.icon_background = ::std::option::Option::Some(is.read_string()?);
                    },
                    88 => {
                        self.input_toggle = ::std::option::Option::Some(is.read_bool()?);
                    },
                    96 => {
                        self.input_activate_stick_or_trackpad = ::std::option::Option::Some(is.read_int32()?);
                    },
                    104 => {
                        self.activation_type = ::std::option::Option::Some(is.read_int32()?);
                    },
                    112 => {
                        self.long_press_ms = ::std::option::Option::Some(is.read_int32()?);
                    },
                    120 => {
                        self.double_press_ms = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.icon.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.input_source {
                my_size += crate::rt::int32_size(3, v);
            }
            if let Some(v) = self.input_mode {
                my_size += crate::rt::int32_size(4, v);
            }
            if let Some(v) = self.input_element {
                my_size += crate::rt::int32_size(5, v);
            }
            if let Some(v) = self.output_gamepad {
                my_size += crate::rt::int32_size(6, v);
            }
            if let Some(v) = self.output_keyboard {
                my_size += crate::rt::int32_size(7, v);
            }
            if let Some(v) = self.output_mouse {
                my_size += crate::rt::int32_size(8, v);
            }
            if let Some(v) = self.icon_foreground.as_ref() {
                my_size += crate::rt::string_size(9, &v);
            }
            if let Some(v) = self.icon_background.as_ref() {
                my_size += crate::rt::string_size(10, &v);
            }
            if let Some(v) = self.input_toggle {
                my_size += 1 + 1;
            }
            if let Some(v) = self.input_activate_stick_or_trackpad {
                my_size += crate::rt::int32_size(12, v);
            }
            if let Some(v) = self.activation_type {
                my_size += crate::rt::int32_size(13, v);
            }
            if let Some(v) = self.long_press_ms {
                my_size += crate::rt::int32_size(14, v);
            }
            if let Some(v) = self.double_press_ms {
                my_size += crate::rt::int32_size(15, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.icon.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.input_source {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.input_mode {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.input_element {
                os.write_int32(5, v)?;
            }
            if let Some(v) = self.output_gamepad {
                os.write_int32(6, v)?;
            }
            if let Some(v) = self.output_keyboard {
                os.write_int32(7, v)?;
            }
            if let Some(v) = self.output_mouse {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.icon_foreground.as_ref() {
                os.write_string(9, v)?;
            }
            if let Some(v) = self.icon_background.as_ref() {
                os.write_string(10, v)?;
            }
            if let Some(v) = self.input_toggle {
                os.write_bool(11, v)?;
            }
            if let Some(v) = self.input_activate_stick_or_trackpad {
                os.write_int32(12, v)?;
            }
            if let Some(v) = self.activation_type {
                os.write_int32(13, v)?;
            }
            if let Some(v) = self.long_press_ms {
                os.write_int32(14, v)?;
            }
            if let Some(v) = self.double_press_ms {
                os.write_int32(15, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Control {
            Control::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.icon = ::std::option::Option::None;
            self.input_source = ::std::option::Option::None;
            self.input_mode = ::std::option::Option::None;
            self.input_element = ::std::option::Option::None;
            self.output_gamepad = ::std::option::Option::None;
            self.output_keyboard = ::std::option::Option::None;
            self.output_mouse = ::std::option::Option::None;
            self.icon_foreground = ::std::option::Option::None;
            self.icon_background = ::std::option::Option::None;
            self.input_toggle = ::std::option::Option::None;
            self.input_activate_stick_or_trackpad = ::std::option::Option::None;
            self.activation_type = ::std::option::Option::None;
            self.long_press_ms = ::std::option::Option::None;
            self.double_press_ms = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Control {
            static instance: Control = Control {
                name: ::std::option::Option::None,
                icon: ::std::option::Option::None,
                input_source: ::std::option::Option::None,
                input_mode: ::std::option::Option::None,
                input_element: ::std::option::Option::None,
                output_gamepad: ::std::option::Option::None,
                output_keyboard: ::std::option::Option::None,
                output_mouse: ::std::option::Option::None,
                icon_foreground: ::std::option::Option::None,
                icon_background: ::std::option::Option::None,
                input_toggle: ::std::option::Option::None,
                input_activate_stick_or_trackpad: ::std::option::Option::None,
                activation_type: ::std::option::Option::None,
                long_press_ms: ::std::option::Option::None,
                double_press_ms: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Control {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CVirtualControllerConfig.Control").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Control {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Control {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CVirtualControllerConfig.ActionSet)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ActionSet {
        // message fields
        // @@protoc_insertion_point(field:CVirtualControllerConfig.ActionSet.id)
        pub id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.ActionSet.parent_id)
        pub parent_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.ActionSet.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CVirtualControllerConfig.ActionSet.controls)
        pub controls: ::std::vec::Vec<Control>,
        // special fields
        // @@protoc_insertion_point(special_field:CVirtualControllerConfig.ActionSet.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ActionSet {
        fn default() -> &'a ActionSet {
            <ActionSet as crate::Message>::default_instance()
        }
    }

    impl ActionSet {
        pub fn new() -> ActionSet {
            ::std::default::Default::default()
        }

        // optional int32 id = 1;

        pub fn id(&self) -> i32 {
            self.id.unwrap_or(0)
        }

        pub fn clear_id(&mut self) {
            self.id = ::std::option::Option::None;
        }

        pub fn has_id(&self) -> bool {
            self.id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_id(&mut self, v: i32) {
            self.id = ::std::option::Option::Some(v);
        }

        // optional int32 parent_id = 2;

        pub fn parent_id(&self) -> i32 {
            self.parent_id.unwrap_or(0)
        }

        pub fn clear_parent_id(&mut self) {
            self.parent_id = ::std::option::Option::None;
        }

        pub fn has_parent_id(&self) -> bool {
            self.parent_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_parent_id(&mut self, v: i32) {
            self.parent_id = ::std::option::Option::Some(v);
        }

        // optional string name = 3;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // repeated .CVirtualControllerConfig.Control controls = 4;

        pub fn controls(&self) -> &[Control] {
            &self.controls
        }

        pub fn clear_controls(&mut self) {
            self.controls.clear();
        }

        // Param is passed by value, moved
        pub fn set_controls(&mut self, v: ::std::vec::Vec<Control>) {
            self.controls = v;
        }

        // Mutable pointer to the field.
        pub fn mut_controls(&mut self) -> &mut ::std::vec::Vec<Control> {
            &mut self.controls
        }

        // Take field
        pub fn take_controls(&mut self) -> ::std::vec::Vec<Control> {
            ::std::mem::replace(&mut self.controls, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "id",
                |m: &ActionSet| { &m.id },
                |m: &mut ActionSet| { &mut m.id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "parent_id",
                |m: &ActionSet| { &m.parent_id },
                |m: &mut ActionSet| { &mut m.parent_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &ActionSet| { &m.name },
                |m: &mut ActionSet| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "controls",
                |m: &ActionSet| { &m.controls },
                |m: &mut ActionSet| { &mut m.controls },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ActionSet>(
                "CVirtualControllerConfig.ActionSet",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ActionSet {
        const NAME: &'static str = "ActionSet";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.parent_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    26 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.controls.push(is.read_message()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.id {
                my_size += crate::rt::int32_size(1, v);
            }
            if let Some(v) = self.parent_id {
                my_size += crate::rt::int32_size(2, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            for value in &self.controls {
                let len = value.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.id {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.parent_id {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(3, v)?;
            }
            for v in &self.controls {
                crate::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ActionSet {
            ActionSet::new()
        }

        fn clear(&mut self) {
            self.id = ::std::option::Option::None;
            self.parent_id = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.controls.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ActionSet {
            static instance: ActionSet = ActionSet {
                id: ::std::option::Option::None,
                parent_id: ::std::option::Option::None,
                name: ::std::option::Option::None,
                controls: ::std::vec::Vec::new(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ActionSet {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CVirtualControllerConfig.ActionSet").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ActionSet {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ActionSet {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CVirtualControllerLayoutPackage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerLayoutPackage {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerLayoutPackage.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayoutPackage.creator)
    pub creator: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVirtualControllerLayoutPackage.initial_revision)
    pub initial_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayoutPackage.saved_revision)
    pub saved_revision: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CVirtualControllerLayoutPackage.config)
    pub config: crate::MessageField<CVirtualControllerConfig>,
    // @@protoc_insertion_point(field:CVirtualControllerLayoutPackage.layouts)
    pub layouts: crate::MessageField<CVirtualControllerLayouts>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerLayoutPackage.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerLayoutPackage {
    fn default() -> &'a CVirtualControllerLayoutPackage {
        <CVirtualControllerLayoutPackage as crate::Message>::default_instance()
    }
}

impl CVirtualControllerLayoutPackage {
    pub fn new() -> CVirtualControllerLayoutPackage {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 creator = 2;

    pub fn creator(&self) -> u64 {
        self.creator.unwrap_or(0)
    }

    pub fn clear_creator(&mut self) {
        self.creator = ::std::option::Option::None;
    }

    pub fn has_creator(&self) -> bool {
        self.creator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: u64) {
        self.creator = ::std::option::Option::Some(v);
    }

    // optional uint32 initial_revision = 3;

    pub fn initial_revision(&self) -> u32 {
        self.initial_revision.unwrap_or(0)
    }

    pub fn clear_initial_revision(&mut self) {
        self.initial_revision = ::std::option::Option::None;
    }

    pub fn has_initial_revision(&self) -> bool {
        self.initial_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_revision(&mut self, v: u32) {
        self.initial_revision = ::std::option::Option::Some(v);
    }

    // optional uint32 saved_revision = 4;

    pub fn saved_revision(&self) -> u32 {
        self.saved_revision.unwrap_or(0)
    }

    pub fn clear_saved_revision(&mut self) {
        self.saved_revision = ::std::option::Option::None;
    }

    pub fn has_saved_revision(&self) -> bool {
        self.saved_revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_saved_revision(&mut self, v: u32) {
        self.saved_revision = ::std::option::Option::Some(v);
    }

    // optional .CVirtualControllerConfig config = 5;

    pub fn config(&self) -> &CVirtualControllerConfig {
        self.config.as_ref().unwrap_or_else(|| <CVirtualControllerConfig as crate::Message>::default_instance())
    }

    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: CVirtualControllerConfig) {
        self.config = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut CVirtualControllerConfig {
        self.config.mut_or_insert_default()
    }

    // Take field
    pub fn take_config(&mut self) -> CVirtualControllerConfig {
        self.config.take().unwrap_or_else(|| CVirtualControllerConfig::new())
    }

    // optional .CVirtualControllerLayouts layouts = 6;

    pub fn layouts(&self) -> &CVirtualControllerLayouts {
        self.layouts.as_ref().unwrap_or_else(|| <CVirtualControllerLayouts as crate::Message>::default_instance())
    }

    pub fn clear_layouts(&mut self) {
        self.layouts.clear();
    }

    pub fn has_layouts(&self) -> bool {
        self.layouts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layouts(&mut self, v: CVirtualControllerLayouts) {
        self.layouts = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layouts(&mut self) -> &mut CVirtualControllerLayouts {
        self.layouts.mut_or_insert_default()
    }

    // Take field
    pub fn take_layouts(&mut self) -> CVirtualControllerLayouts {
        self.layouts.take().unwrap_or_else(|| CVirtualControllerLayouts::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CVirtualControllerLayoutPackage| { &m.appid },
            |m: &mut CVirtualControllerLayoutPackage| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "creator",
            |m: &CVirtualControllerLayoutPackage| { &m.creator },
            |m: &mut CVirtualControllerLayoutPackage| { &mut m.creator },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "initial_revision",
            |m: &CVirtualControllerLayoutPackage| { &m.initial_revision },
            |m: &mut CVirtualControllerLayoutPackage| { &mut m.initial_revision },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "saved_revision",
            |m: &CVirtualControllerLayoutPackage| { &m.saved_revision },
            |m: &mut CVirtualControllerLayoutPackage| { &mut m.saved_revision },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CVirtualControllerConfig>(
            "config",
            |m: &CVirtualControllerLayoutPackage| { &m.config },
            |m: &mut CVirtualControllerLayoutPackage| { &mut m.config },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CVirtualControllerLayouts>(
            "layouts",
            |m: &CVirtualControllerLayoutPackage| { &m.layouts },
            |m: &mut CVirtualControllerLayoutPackage| { &mut m.layouts },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerLayoutPackage>(
            "CVirtualControllerLayoutPackage",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerLayoutPackage {
    const NAME: &'static str = "CVirtualControllerLayoutPackage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.creator = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.initial_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.saved_revision = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.config)?;
                },
                50 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.layouts)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.creator {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.initial_revision {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.saved_revision {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.layouts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.creator {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.initial_revision {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.saved_revision {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.config.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.layouts.as_ref() {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerLayoutPackage {
        CVirtualControllerLayoutPackage::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.creator = ::std::option::Option::None;
        self.initial_revision = ::std::option::Option::None;
        self.saved_revision = ::std::option::Option::None;
        self.config.clear();
        self.layouts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerLayoutPackage {
        static instance: CVirtualControllerLayoutPackage = CVirtualControllerLayoutPackage {
            appid: ::std::option::Option::None,
            creator: ::std::option::Option::None,
            initial_revision: ::std::option::Option::None,
            saved_revision: ::std::option::Option::None,
            config: crate::MessageField::none(),
            layouts: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerLayoutPackage {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerLayoutPackage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerLayoutPackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerLayoutPackage {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CVirtualControllerGlobalConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVirtualControllerGlobalConfig {
    // message fields
    // @@protoc_insertion_point(field:CVirtualControllerGlobalConfig.feedback_enabled)
    pub feedback_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerGlobalConfig.gyroscope_enabled)
    pub gyroscope_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerGlobalConfig.auto_fade_enabled)
    pub auto_fade_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerGlobalConfig.rumble_enabled)
    pub rumble_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CVirtualControllerGlobalConfig.shake_fade_enabled)
    pub shake_fade_enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CVirtualControllerGlobalConfig.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVirtualControllerGlobalConfig {
    fn default() -> &'a CVirtualControllerGlobalConfig {
        <CVirtualControllerGlobalConfig as crate::Message>::default_instance()
    }
}

impl CVirtualControllerGlobalConfig {
    pub fn new() -> CVirtualControllerGlobalConfig {
        ::std::default::Default::default()
    }

    // optional bool feedback_enabled = 1;

    pub fn feedback_enabled(&self) -> bool {
        self.feedback_enabled.unwrap_or(false)
    }

    pub fn clear_feedback_enabled(&mut self) {
        self.feedback_enabled = ::std::option::Option::None;
    }

    pub fn has_feedback_enabled(&self) -> bool {
        self.feedback_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_feedback_enabled(&mut self, v: bool) {
        self.feedback_enabled = ::std::option::Option::Some(v);
    }

    // optional bool gyroscope_enabled = 2;

    pub fn gyroscope_enabled(&self) -> bool {
        self.gyroscope_enabled.unwrap_or(true)
    }

    pub fn clear_gyroscope_enabled(&mut self) {
        self.gyroscope_enabled = ::std::option::Option::None;
    }

    pub fn has_gyroscope_enabled(&self) -> bool {
        self.gyroscope_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gyroscope_enabled(&mut self, v: bool) {
        self.gyroscope_enabled = ::std::option::Option::Some(v);
    }

    // optional bool auto_fade_enabled = 3;

    pub fn auto_fade_enabled(&self) -> bool {
        self.auto_fade_enabled.unwrap_or(true)
    }

    pub fn clear_auto_fade_enabled(&mut self) {
        self.auto_fade_enabled = ::std::option::Option::None;
    }

    pub fn has_auto_fade_enabled(&self) -> bool {
        self.auto_fade_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auto_fade_enabled(&mut self, v: bool) {
        self.auto_fade_enabled = ::std::option::Option::Some(v);
    }

    // optional bool rumble_enabled = 4;

    pub fn rumble_enabled(&self) -> bool {
        self.rumble_enabled.unwrap_or(true)
    }

    pub fn clear_rumble_enabled(&mut self) {
        self.rumble_enabled = ::std::option::Option::None;
    }

    pub fn has_rumble_enabled(&self) -> bool {
        self.rumble_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rumble_enabled(&mut self, v: bool) {
        self.rumble_enabled = ::std::option::Option::Some(v);
    }

    // optional bool shake_fade_enabled = 5;

    pub fn shake_fade_enabled(&self) -> bool {
        self.shake_fade_enabled.unwrap_or(false)
    }

    pub fn clear_shake_fade_enabled(&mut self) {
        self.shake_fade_enabled = ::std::option::Option::None;
    }

    pub fn has_shake_fade_enabled(&self) -> bool {
        self.shake_fade_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shake_fade_enabled(&mut self, v: bool) {
        self.shake_fade_enabled = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "feedback_enabled",
            |m: &CVirtualControllerGlobalConfig| { &m.feedback_enabled },
            |m: &mut CVirtualControllerGlobalConfig| { &mut m.feedback_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gyroscope_enabled",
            |m: &CVirtualControllerGlobalConfig| { &m.gyroscope_enabled },
            |m: &mut CVirtualControllerGlobalConfig| { &mut m.gyroscope_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "auto_fade_enabled",
            |m: &CVirtualControllerGlobalConfig| { &m.auto_fade_enabled },
            |m: &mut CVirtualControllerGlobalConfig| { &mut m.auto_fade_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rumble_enabled",
            |m: &CVirtualControllerGlobalConfig| { &m.rumble_enabled },
            |m: &mut CVirtualControllerGlobalConfig| { &mut m.rumble_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "shake_fade_enabled",
            |m: &CVirtualControllerGlobalConfig| { &m.shake_fade_enabled },
            |m: &mut CVirtualControllerGlobalConfig| { &mut m.shake_fade_enabled },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CVirtualControllerGlobalConfig>(
            "CVirtualControllerGlobalConfig",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CVirtualControllerGlobalConfig {
    const NAME: &'static str = "CVirtualControllerGlobalConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.feedback_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.gyroscope_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.auto_fade_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.rumble_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.shake_fade_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.feedback_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.gyroscope_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.auto_fade_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.rumble_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.shake_fade_enabled {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.feedback_enabled {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.gyroscope_enabled {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.auto_fade_enabled {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.rumble_enabled {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.shake_fade_enabled {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVirtualControllerGlobalConfig {
        CVirtualControllerGlobalConfig::new()
    }

    fn clear(&mut self) {
        self.feedback_enabled = ::std::option::Option::None;
        self.gyroscope_enabled = ::std::option::Option::None;
        self.auto_fade_enabled = ::std::option::Option::None;
        self.rumble_enabled = ::std::option::Option::None;
        self.shake_fade_enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVirtualControllerGlobalConfig {
        static instance: CVirtualControllerGlobalConfig = CVirtualControllerGlobalConfig {
            feedback_enabled: ::std::option::Option::None,
            gyroscope_enabled: ::std::option::Option::None,
            auto_fade_enabled: ::std::option::Option::None,
            rumble_enabled: ::std::option::Option::None,
            shake_fade_enabled: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CVirtualControllerGlobalConfig {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CVirtualControllerGlobalConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CVirtualControllerGlobalConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CVirtualControllerGlobalConfig {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EInputMode)
pub enum EInputMode {
    // @@protoc_insertion_point(enum_value:EInputMode.k_EInputModeUnknown)
    k_EInputModeUnknown = 0,
    // @@protoc_insertion_point(enum_value:EInputMode.k_EInputModeMouse)
    k_EInputModeMouse = 1,
    // @@protoc_insertion_point(enum_value:EInputMode.k_EInputModeController)
    k_EInputModeController = 2,
    // @@protoc_insertion_point(enum_value:EInputMode.k_EInputModeMouseAndController)
    k_EInputModeMouseAndController = 3,
}

impl crate::Enum for EInputMode {
    const NAME: &'static str = "EInputMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EInputMode> {
        match value {
            0 => ::std::option::Option::Some(EInputMode::k_EInputModeUnknown),
            1 => ::std::option::Option::Some(EInputMode::k_EInputModeMouse),
            2 => ::std::option::Option::Some(EInputMode::k_EInputModeController),
            3 => ::std::option::Option::Some(EInputMode::k_EInputModeMouseAndController),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EInputMode> {
        match str {
            "k_EInputModeUnknown" => ::std::option::Option::Some(EInputMode::k_EInputModeUnknown),
            "k_EInputModeMouse" => ::std::option::Option::Some(EInputMode::k_EInputModeMouse),
            "k_EInputModeController" => ::std::option::Option::Some(EInputMode::k_EInputModeController),
            "k_EInputModeMouseAndController" => ::std::option::Option::Some(EInputMode::k_EInputModeMouseAndController),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EInputMode] = &[
        EInputMode::k_EInputModeUnknown,
        EInputMode::k_EInputModeMouse,
        EInputMode::k_EInputModeController,
        EInputMode::k_EInputModeMouseAndController,
    ];
}

impl crate::EnumFull for EInputMode {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EInputMode").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EInputMode {
    fn default() -> Self {
        EInputMode::k_EInputModeUnknown
    }
}

impl EInputMode {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EInputMode>("EInputMode")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EMouseMode)
pub enum EMouseMode {
    // @@protoc_insertion_point(enum_value:EMouseMode.k_EMouseModeUnknown)
    k_EMouseModeUnknown = 0,
    // @@protoc_insertion_point(enum_value:EMouseMode.k_EMouseModeRelativeCursor)
    k_EMouseModeRelativeCursor = 1,
    // @@protoc_insertion_point(enum_value:EMouseMode.k_EMouseModeAbsoluteCursor)
    k_EMouseModeAbsoluteCursor = 2,
    // @@protoc_insertion_point(enum_value:EMouseMode.k_EMouseModeTouch)
    k_EMouseModeTouch = 3,
    // @@protoc_insertion_point(enum_value:EMouseMode.k_EMouseModeRelative)
    k_EMouseModeRelative = 4,
}

impl crate::Enum for EMouseMode {
    const NAME: &'static str = "EMouseMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EMouseMode> {
        match value {
            0 => ::std::option::Option::Some(EMouseMode::k_EMouseModeUnknown),
            1 => ::std::option::Option::Some(EMouseMode::k_EMouseModeRelativeCursor),
            2 => ::std::option::Option::Some(EMouseMode::k_EMouseModeAbsoluteCursor),
            3 => ::std::option::Option::Some(EMouseMode::k_EMouseModeTouch),
            4 => ::std::option::Option::Some(EMouseMode::k_EMouseModeRelative),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EMouseMode> {
        match str {
            "k_EMouseModeUnknown" => ::std::option::Option::Some(EMouseMode::k_EMouseModeUnknown),
            "k_EMouseModeRelativeCursor" => ::std::option::Option::Some(EMouseMode::k_EMouseModeRelativeCursor),
            "k_EMouseModeAbsoluteCursor" => ::std::option::Option::Some(EMouseMode::k_EMouseModeAbsoluteCursor),
            "k_EMouseModeTouch" => ::std::option::Option::Some(EMouseMode::k_EMouseModeTouch),
            "k_EMouseModeRelative" => ::std::option::Option::Some(EMouseMode::k_EMouseModeRelative),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EMouseMode] = &[
        EMouseMode::k_EMouseModeUnknown,
        EMouseMode::k_EMouseModeRelativeCursor,
        EMouseMode::k_EMouseModeAbsoluteCursor,
        EMouseMode::k_EMouseModeTouch,
        EMouseMode::k_EMouseModeRelative,
    ];
}

impl crate::EnumFull for EMouseMode {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EMouseMode").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EMouseMode {
    fn default() -> Self {
        EMouseMode::k_EMouseModeUnknown
    }
}

impl EMouseMode {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EMouseMode>("EMouseMode")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EControllerElementType)
pub enum EControllerElementType {
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeNone)
    k_EControllerElementTypeNone = -1,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeThumb)
    k_EControllerElementTypeThumb = 0,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonSteam)
    k_EControllerElementTypeButtonSteam = 1,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeJoystickLeft)
    k_EControllerElementTypeJoystickLeft = 2,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonJoystickLeft)
    k_EControllerElementTypeButtonJoystickLeft = 3,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeJoystickRight)
    k_EControllerElementTypeJoystickRight = 4,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonJoystickRight)
    k_EControllerElementTypeButtonJoystickRight = 5,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeDPad)
    k_EControllerElementTypeDPad = 6,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonA)
    k_EControllerElementTypeButtonA = 7,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonB)
    k_EControllerElementTypeButtonB = 8,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonX)
    k_EControllerElementTypeButtonX = 9,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonY)
    k_EControllerElementTypeButtonY = 10,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonSelect)
    k_EControllerElementTypeButtonSelect = 11,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonStart)
    k_EControllerElementTypeButtonStart = 12,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonTriggerLeft)
    k_EControllerElementTypeButtonTriggerLeft = 13,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonTriggerRight)
    k_EControllerElementTypeButtonTriggerRight = 14,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonBumperLeft)
    k_EControllerElementTypeButtonBumperLeft = 15,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonBumperRight)
    k_EControllerElementTypeButtonBumperRight = 16,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro0)
    k_EControllerElementTypeButtonMacro0 = 17,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro1)
    k_EControllerElementTypeButtonMacro1 = 18,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro2)
    k_EControllerElementTypeButtonMacro2 = 19,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro3)
    k_EControllerElementTypeButtonMacro3 = 20,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro4)
    k_EControllerElementTypeButtonMacro4 = 21,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro5)
    k_EControllerElementTypeButtonMacro5 = 22,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro6)
    k_EControllerElementTypeButtonMacro6 = 23,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro7)
    k_EControllerElementTypeButtonMacro7 = 24,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeTrackpadCenter)
    k_EControllerElementTypeTrackpadCenter = 25,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeTrackpadLeft)
    k_EControllerElementTypeTrackpadLeft = 26,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeTrackpadRight)
    k_EControllerElementTypeTrackpadRight = 27,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeKeyboard)
    k_EControllerElementTypeKeyboard = 28,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeMagnifyingGlass)
    k_EControllerElementTypeMagnifyingGlass = 29,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro1Finger)
    k_EControllerElementTypeButtonMacro1Finger = 30,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeButtonMacro2Finger)
    k_EControllerElementTypeButtonMacro2Finger = 31,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeRecordInput)
    k_EControllerElementTypeRecordInput = 32,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypePlaybackInput)
    k_EControllerElementTypePlaybackInput = 33,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypePaste)
    k_EControllerElementTypePaste = 34,
    // @@protoc_insertion_point(enum_value:EControllerElementType.k_EControllerElementTypeMax)
    k_EControllerElementTypeMax = 35,
}

impl crate::Enum for EControllerElementType {
    const NAME: &'static str = "EControllerElementType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EControllerElementType> {
        match value {
            -1 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeNone),
            0 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeThumb),
            1 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonSteam),
            2 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeJoystickLeft),
            3 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonJoystickLeft),
            4 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeJoystickRight),
            5 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonJoystickRight),
            6 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeDPad),
            7 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonA),
            8 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonB),
            9 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonX),
            10 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonY),
            11 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonSelect),
            12 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonStart),
            13 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonTriggerLeft),
            14 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonTriggerRight),
            15 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonBumperLeft),
            16 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonBumperRight),
            17 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro0),
            18 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro1),
            19 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro2),
            20 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro3),
            21 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro4),
            22 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro5),
            23 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro6),
            24 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro7),
            25 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadCenter),
            26 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadLeft),
            27 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadRight),
            28 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeKeyboard),
            29 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeMagnifyingGlass),
            30 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro1Finger),
            31 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro2Finger),
            32 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeRecordInput),
            33 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypePlaybackInput),
            34 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypePaste),
            35 => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeMax),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EControllerElementType> {
        match str {
            "k_EControllerElementTypeNone" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeNone),
            "k_EControllerElementTypeThumb" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeThumb),
            "k_EControllerElementTypeButtonSteam" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonSteam),
            "k_EControllerElementTypeJoystickLeft" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeJoystickLeft),
            "k_EControllerElementTypeButtonJoystickLeft" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonJoystickLeft),
            "k_EControllerElementTypeJoystickRight" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeJoystickRight),
            "k_EControllerElementTypeButtonJoystickRight" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonJoystickRight),
            "k_EControllerElementTypeDPad" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeDPad),
            "k_EControllerElementTypeButtonA" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonA),
            "k_EControllerElementTypeButtonB" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonB),
            "k_EControllerElementTypeButtonX" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonX),
            "k_EControllerElementTypeButtonY" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonY),
            "k_EControllerElementTypeButtonSelect" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonSelect),
            "k_EControllerElementTypeButtonStart" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonStart),
            "k_EControllerElementTypeButtonTriggerLeft" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonTriggerLeft),
            "k_EControllerElementTypeButtonTriggerRight" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonTriggerRight),
            "k_EControllerElementTypeButtonBumperLeft" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonBumperLeft),
            "k_EControllerElementTypeButtonBumperRight" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonBumperRight),
            "k_EControllerElementTypeButtonMacro0" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro0),
            "k_EControllerElementTypeButtonMacro1" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro1),
            "k_EControllerElementTypeButtonMacro2" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro2),
            "k_EControllerElementTypeButtonMacro3" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro3),
            "k_EControllerElementTypeButtonMacro4" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro4),
            "k_EControllerElementTypeButtonMacro5" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro5),
            "k_EControllerElementTypeButtonMacro6" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro6),
            "k_EControllerElementTypeButtonMacro7" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro7),
            "k_EControllerElementTypeTrackpadCenter" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadCenter),
            "k_EControllerElementTypeTrackpadLeft" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadLeft),
            "k_EControllerElementTypeTrackpadRight" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeTrackpadRight),
            "k_EControllerElementTypeKeyboard" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeKeyboard),
            "k_EControllerElementTypeMagnifyingGlass" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeMagnifyingGlass),
            "k_EControllerElementTypeButtonMacro1Finger" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro1Finger),
            "k_EControllerElementTypeButtonMacro2Finger" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeButtonMacro2Finger),
            "k_EControllerElementTypeRecordInput" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeRecordInput),
            "k_EControllerElementTypePlaybackInput" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypePlaybackInput),
            "k_EControllerElementTypePaste" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypePaste),
            "k_EControllerElementTypeMax" => ::std::option::Option::Some(EControllerElementType::k_EControllerElementTypeMax),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EControllerElementType] = &[
        EControllerElementType::k_EControllerElementTypeNone,
        EControllerElementType::k_EControllerElementTypeThumb,
        EControllerElementType::k_EControllerElementTypeButtonSteam,
        EControllerElementType::k_EControllerElementTypeJoystickLeft,
        EControllerElementType::k_EControllerElementTypeButtonJoystickLeft,
        EControllerElementType::k_EControllerElementTypeJoystickRight,
        EControllerElementType::k_EControllerElementTypeButtonJoystickRight,
        EControllerElementType::k_EControllerElementTypeDPad,
        EControllerElementType::k_EControllerElementTypeButtonA,
        EControllerElementType::k_EControllerElementTypeButtonB,
        EControllerElementType::k_EControllerElementTypeButtonX,
        EControllerElementType::k_EControllerElementTypeButtonY,
        EControllerElementType::k_EControllerElementTypeButtonSelect,
        EControllerElementType::k_EControllerElementTypeButtonStart,
        EControllerElementType::k_EControllerElementTypeButtonTriggerLeft,
        EControllerElementType::k_EControllerElementTypeButtonTriggerRight,
        EControllerElementType::k_EControllerElementTypeButtonBumperLeft,
        EControllerElementType::k_EControllerElementTypeButtonBumperRight,
        EControllerElementType::k_EControllerElementTypeButtonMacro0,
        EControllerElementType::k_EControllerElementTypeButtonMacro1,
        EControllerElementType::k_EControllerElementTypeButtonMacro2,
        EControllerElementType::k_EControllerElementTypeButtonMacro3,
        EControllerElementType::k_EControllerElementTypeButtonMacro4,
        EControllerElementType::k_EControllerElementTypeButtonMacro5,
        EControllerElementType::k_EControllerElementTypeButtonMacro6,
        EControllerElementType::k_EControllerElementTypeButtonMacro7,
        EControllerElementType::k_EControllerElementTypeTrackpadCenter,
        EControllerElementType::k_EControllerElementTypeTrackpadLeft,
        EControllerElementType::k_EControllerElementTypeTrackpadRight,
        EControllerElementType::k_EControllerElementTypeKeyboard,
        EControllerElementType::k_EControllerElementTypeMagnifyingGlass,
        EControllerElementType::k_EControllerElementTypeButtonMacro1Finger,
        EControllerElementType::k_EControllerElementTypeButtonMacro2Finger,
        EControllerElementType::k_EControllerElementTypeRecordInput,
        EControllerElementType::k_EControllerElementTypePlaybackInput,
        EControllerElementType::k_EControllerElementTypePaste,
        EControllerElementType::k_EControllerElementTypeMax,
    ];
}

impl crate::EnumFull for EControllerElementType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EControllerElementType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EControllerElementType::k_EControllerElementTypeNone => 0,
            EControllerElementType::k_EControllerElementTypeThumb => 1,
            EControllerElementType::k_EControllerElementTypeButtonSteam => 2,
            EControllerElementType::k_EControllerElementTypeJoystickLeft => 3,
            EControllerElementType::k_EControllerElementTypeButtonJoystickLeft => 4,
            EControllerElementType::k_EControllerElementTypeJoystickRight => 5,
            EControllerElementType::k_EControllerElementTypeButtonJoystickRight => 6,
            EControllerElementType::k_EControllerElementTypeDPad => 7,
            EControllerElementType::k_EControllerElementTypeButtonA => 8,
            EControllerElementType::k_EControllerElementTypeButtonB => 9,
            EControllerElementType::k_EControllerElementTypeButtonX => 10,
            EControllerElementType::k_EControllerElementTypeButtonY => 11,
            EControllerElementType::k_EControllerElementTypeButtonSelect => 12,
            EControllerElementType::k_EControllerElementTypeButtonStart => 13,
            EControllerElementType::k_EControllerElementTypeButtonTriggerLeft => 14,
            EControllerElementType::k_EControllerElementTypeButtonTriggerRight => 15,
            EControllerElementType::k_EControllerElementTypeButtonBumperLeft => 16,
            EControllerElementType::k_EControllerElementTypeButtonBumperRight => 17,
            EControllerElementType::k_EControllerElementTypeButtonMacro0 => 18,
            EControllerElementType::k_EControllerElementTypeButtonMacro1 => 19,
            EControllerElementType::k_EControllerElementTypeButtonMacro2 => 20,
            EControllerElementType::k_EControllerElementTypeButtonMacro3 => 21,
            EControllerElementType::k_EControllerElementTypeButtonMacro4 => 22,
            EControllerElementType::k_EControllerElementTypeButtonMacro5 => 23,
            EControllerElementType::k_EControllerElementTypeButtonMacro6 => 24,
            EControllerElementType::k_EControllerElementTypeButtonMacro7 => 25,
            EControllerElementType::k_EControllerElementTypeTrackpadCenter => 26,
            EControllerElementType::k_EControllerElementTypeTrackpadLeft => 27,
            EControllerElementType::k_EControllerElementTypeTrackpadRight => 28,
            EControllerElementType::k_EControllerElementTypeKeyboard => 29,
            EControllerElementType::k_EControllerElementTypeMagnifyingGlass => 30,
            EControllerElementType::k_EControllerElementTypeButtonMacro1Finger => 31,
            EControllerElementType::k_EControllerElementTypeButtonMacro2Finger => 32,
            EControllerElementType::k_EControllerElementTypeRecordInput => 33,
            EControllerElementType::k_EControllerElementTypePlaybackInput => 34,
            EControllerElementType::k_EControllerElementTypePaste => 35,
            EControllerElementType::k_EControllerElementTypeMax => 36,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EControllerElementType {
    fn default() -> Self {
        EControllerElementType::k_EControllerElementTypeNone
    }
}

impl EControllerElementType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EControllerElementType>("EControllerElementType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%steammessages_virtualcontroller.proto\"\xf6\x01\n\x19CVirtualControll\
    erElement\x12I\n\x04type\x18\x01\x20\x01(\x0e2\x17.EControllerElementTyp\
    e:\x1ck_EControllerElementTypeNoneR\x04type\x12\x18\n\x07visible\x18\x02\
    \x20\x01(\x08R\x07visible\x12\x1d\n\nx_position\x18\x03\x20\x01(\x02R\tx\
    Position\x12\x1d\n\ny_position\x18\x04\x20\x01(\x02R\tyPosition\x12\x1a\
    \n\x07x_scale\x18\x05\x20\x01(\x02:\x011R\x06xScale\x12\x1a\n\x07y_scale\
    \x18\x06\x20\x01(\x02:\x011R\x06yScale\"]\n\x17CVirtualControllerColor\
    \x12\x0f\n\x01r\x18\x01\x20\x01(\x02:\x011R\x01r\x12\x0f\n\x01g\x18\x02\
    \x20\x01(\x02:\x011R\x01g\x12\x0f\n\x01b\x18\x03\x20\x01(\x02:\x011R\x01\
    b\x12\x0f\n\x01a\x18\x04\x20\x01(\x02:\x011R\x01a\"\xcc\x01\n\x18CVirtua\
    lControllerLayout\x12%\n\x0elayout_version\x18\x01\x20\x01(\x05R\rlayout\
    Version\x12!\n\x0cactionset_id\x18\x02\x20\x01(\x05R\x0bactionsetId\x126\
    \n\x08elements\x18\x04\x20\x03(\x0b2\x1a.CVirtualControllerElementR\x08e\
    lements\x12.\n\x05color\x18\x05\x20\x01(\x0b2\x18.CVirtualControllerColo\
    rR\x05color\"\xf8\x03\n\x19CVirtualControllerLayouts\x123\n\x07layouts\
    \x18\x01\x20\x03(\x0b2\x19.CVirtualControllerLayoutR\x07layouts\x12B\n\n\
    input_mode\x18\x02\x20\x01(\x0e2\x0b.EInputMode:\x16k_EInputModeControll\
    erR\tinputMode\x12?\n\nmouse_mode\x18\x03\x20\x01(\x0e2\x0b.EMouseMode:\
    \x13k_EMouseModeUnknownR\tmouseMode\x124\n\x14trackpad_sensitivity\x18\
    \x04\x20\x01(\x02:\x011R\x13trackpadSensitivity\x123\n\x12pinch_zoom_ena\
    bled\x18\x05\x20\x01(\x08:\x05falseR\x10pinchZoomEnabled\x12#\n\x0cpinch\
    _zoom_x\x18\x06\x20\x01(\x02:\x010R\npinchZoomX\x12#\n\x0cpinch_zoom_y\
    \x18\x07\x20\x01(\x02:\x010R\npinchZoomY\x12+\n\x10pinch_zoom_scale\x18\
    \x08\x20\x01(\x02:\x011R\x0epinchZoomScale\x12\x16\n\x06shaken\x18\t\x20\
    \x01(\x08R\x06shaken\x12'\n\x0fmouse_offscreen\x18\n\x20\x01(\x08R\x0emo\
    useOffscreen\"\x98\x07\n\x18CVirtualControllerConfig\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12C\n\nactionsets\x18\x02\x20\x03(\x0b2#.C\
    VirtualControllerConfig.ActionSetR\nactionsets\x12U\n\x12default_mouse_m\
    ode\x18\x03\x20\x01(\x0e2\x0b.EMouseMode:\x1ak_EMouseModeAbsoluteCursorR\
    \x10defaultMouseMode\x1a\xbd\x04\n\x07Control\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x12\n\x04icon\x18\x02\x20\x01(\tR\x04icon\x12!\
    \n\x0cinput_source\x18\x03\x20\x01(\x05R\x0binputSource\x12\x1d\n\ninput\
    _mode\x18\x04\x20\x01(\x05R\tinputMode\x12#\n\rinput_element\x18\x05\x20\
    \x01(\x05R\x0cinputElement\x12%\n\x0eoutput_gamepad\x18\x06\x20\x01(\x05\
    R\routputGamepad\x12'\n\x0foutput_keyboard\x18\x07\x20\x01(\x05R\x0eoutp\
    utKeyboard\x12!\n\x0coutput_mouse\x18\x08\x20\x01(\x05R\x0boutputMouse\
    \x12'\n\x0ficon_foreground\x18\t\x20\x01(\tR\x0eiconForeground\x12'\n\
    \x0ficon_background\x18\n\x20\x01(\tR\x0eiconBackground\x12!\n\x0cinput_\
    toggle\x18\x0b\x20\x01(\x08R\x0binputToggle\x12F\n\x20input_activate_sti\
    ck_or_trackpad\x18\x0c\x20\x01(\x05R\x1cinputActivateStickOrTrackpad\x12\
    '\n\x0factivation_type\x18\r\x20\x01(\x05R\x0eactivationType\x12\"\n\rlo\
    ng_press_ms\x18\x0e\x20\x01(\x05R\x0blongPressMs\x12&\n\x0fdouble_press_\
    ms\x18\x0f\x20\x01(\x05R\rdoublePressMs\x1a\x8b\x01\n\tActionSet\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x1b\n\tparent_id\x18\x02\x20\
    \x01(\x05R\x08parentId\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\
    =\n\x08controls\x18\x04\x20\x03(\x0b2!.CVirtualControllerConfig.ControlR\
    \x08controls\"\x8c\x02\n\x1fCVirtualControllerLayoutPackage\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07creator\x18\x02\x20\
    \x01(\x04R\x07creator\x12)\n\x10initial_revision\x18\x03\x20\x01(\rR\x0f\
    initialRevision\x12%\n\x0esaved_revision\x18\x04\x20\x01(\rR\rsavedRevis\
    ion\x121\n\x06config\x18\x05\x20\x01(\x0b2\x19.CVirtualControllerConfigR\
    \x06config\x124\n\x07layouts\x18\x06\x20\x01(\x0b2\x1a.CVirtualControlle\
    rLayoutsR\x07layouts\"\x8b\x02\n\x1eCVirtualControllerGlobalConfig\x12)\
    \n\x10feedback_enabled\x18\x01\x20\x01(\x08R\x0ffeedbackEnabled\x121\n\
    \x11gyroscope_enabled\x18\x02\x20\x01(\x08:\x04trueR\x10gyroscopeEnabled\
    \x120\n\x11auto_fade_enabled\x18\x03\x20\x01(\x08:\x04trueR\x0fautoFadeE\
    nabled\x12+\n\x0erumble_enabled\x18\x04\x20\x01(\x08:\x04trueR\rrumbleEn\
    abled\x12,\n\x12shake_fade_enabled\x18\x05\x20\x01(\x08R\x10shakeFadeEna\
    bled*|\n\nEInputMode\x12\x17\n\x13k_EInputModeUnknown\x10\0\x12\x15\n\
    \x11k_EInputModeMouse\x10\x01\x12\x1a\n\x16k_EInputModeController\x10\
    \x02\x12\"\n\x1ek_EInputModeMouseAndController\x10\x03*\x96\x01\n\nEMous\
    eMode\x12\x17\n\x13k_EMouseModeUnknown\x10\0\x12\x1e\n\x1ak_EMouseModeRe\
    lativeCursor\x10\x01\x12\x1e\n\x1ak_EMouseModeAbsoluteCursor\x10\x02\x12\
    \x15\n\x11k_EMouseModeTouch\x10\x03\x12\x18\n\x14k_EMouseModeRelative\
    \x10\x04*\xa6\x0c\n\x16EControllerElementType\x12)\n\x1ck_EControllerEle\
    mentTypeNone\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12!\n\x1dk_ECo\
    ntrollerElementTypeThumb\x10\0\x12'\n#k_EControllerElementTypeButtonStea\
    m\x10\x01\x12(\n$k_EControllerElementTypeJoystickLeft\x10\x02\x12.\n*k_E\
    ControllerElementTypeButtonJoystickLeft\x10\x03\x12)\n%k_EControllerElem\
    entTypeJoystickRight\x10\x04\x12/\n+k_EControllerElementTypeButtonJoysti\
    ckRight\x10\x05\x12\x20\n\x1ck_EControllerElementTypeDPad\x10\x06\x12#\n\
    \x1fk_EControllerElementTypeButtonA\x10\x07\x12#\n\x1fk_EControllerEleme\
    ntTypeButtonB\x10\x08\x12#\n\x1fk_EControllerElementTypeButtonX\x10\t\
    \x12#\n\x1fk_EControllerElementTypeButtonY\x10\n\x12(\n$k_EControllerEle\
    mentTypeButtonSelect\x10\x0b\x12'\n#k_EControllerElementTypeButtonStart\
    \x10\x0c\x12-\n)k_EControllerElementTypeButtonTriggerLeft\x10\r\x12.\n*k\
    _EControllerElementTypeButtonTriggerRight\x10\x0e\x12,\n(k_EControllerEl\
    ementTypeButtonBumperLeft\x10\x0f\x12-\n)k_EControllerElementTypeButtonB\
    umperRight\x10\x10\x12(\n$k_EControllerElementTypeButtonMacro0\x10\x11\
    \x12(\n$k_EControllerElementTypeButtonMacro1\x10\x12\x12(\n$k_EControlle\
    rElementTypeButtonMacro2\x10\x13\x12(\n$k_EControllerElementTypeButtonMa\
    cro3\x10\x14\x12(\n$k_EControllerElementTypeButtonMacro4\x10\x15\x12(\n$\
    k_EControllerElementTypeButtonMacro5\x10\x16\x12(\n$k_EControllerElement\
    TypeButtonMacro6\x10\x17\x12(\n$k_EControllerElementTypeButtonMacro7\x10\
    \x18\x12*\n&k_EControllerElementTypeTrackpadCenter\x10\x19\x12(\n$k_ECon\
    trollerElementTypeTrackpadLeft\x10\x1a\x12)\n%k_EControllerElementTypeTr\
    ackpadRight\x10\x1b\x12$\n\x20k_EControllerElementTypeKeyboard\x10\x1c\
    \x12+\n'k_EControllerElementTypeMagnifyingGlass\x10\x1d\x12.\n*k_EContro\
    llerElementTypeButtonMacro1Finger\x10\x1e\x12.\n*k_EControllerElementTyp\
    eButtonMacro2Finger\x10\x1f\x12'\n#k_EControllerElementTypeRecordInput\
    \x10\x20\x12)\n%k_EControllerElementTypePlaybackInput\x10!\x12!\n\x1dk_E\
    ControllerElementTypePaste\x10\"\x12\x1f\n\x1bk_EControllerElementTypeMa\
    x\x10#\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(CVirtualControllerElement::generated_message_descriptor_data());
            messages.push(CVirtualControllerColor::generated_message_descriptor_data());
            messages.push(CVirtualControllerLayout::generated_message_descriptor_data());
            messages.push(CVirtualControllerLayouts::generated_message_descriptor_data());
            messages.push(CVirtualControllerConfig::generated_message_descriptor_data());
            messages.push(CVirtualControllerLayoutPackage::generated_message_descriptor_data());
            messages.push(CVirtualControllerGlobalConfig::generated_message_descriptor_data());
            messages.push(cvirtual_controller_config::Control::generated_message_descriptor_data());
            messages.push(cvirtual_controller_config::ActionSet::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(EInputMode::generated_enum_descriptor_data());
            enums.push(EMouseMode::generated_enum_descriptor_data());
            enums.push(EControllerElementType::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
