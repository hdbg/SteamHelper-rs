// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_linkfilter.steamclient.proto`

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashPrefixes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashPrefixes_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Request.hit_type)
    pub hit_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Request.count)
    pub count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Request.start)
    pub start: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashPrefixes_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashPrefixes_Request {
    fn default() -> &'a CCommunity_GetLinkFilterHashPrefixes_Request {
        <CCommunity_GetLinkFilterHashPrefixes_Request as crate::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashPrefixes_Request {
    pub fn new() -> CCommunity_GetLinkFilterHashPrefixes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;

    pub fn hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }

    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 2;

    pub fn count(&self) -> u32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint64 start = 3;

    pub fn start(&self) -> u64 {
        self.start.unwrap_or(0)
    }

    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hit_type",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.hit_type },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.hit_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.count },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.count },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "start",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Request| { &m.start },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Request| { &mut m.start },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashPrefixes_Request>(
            "CCommunity_GetLinkFilterHashPrefixes_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCommunity_GetLinkFilterHashPrefixes_Request {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashPrefixes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.count = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.start = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.count {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.start {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.start {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashPrefixes_Request {
        CCommunity_GetLinkFilterHashPrefixes_Request::new()
    }

    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashPrefixes_Request {
        static instance: CCommunity_GetLinkFilterHashPrefixes_Request = CCommunity_GetLinkFilterHashPrefixes_Request {
            hit_type: ::std::option::Option::None,
            count: ::std::option::Option::None,
            start: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashPrefixes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashPrefixes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCommunity_GetLinkFilterHashPrefixes_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashPrefixes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashPrefixes_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
    pub hash_prefixes: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashPrefixes_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashPrefixes_Response {
    fn default() -> &'a CCommunity_GetLinkFilterHashPrefixes_Response {
        <CCommunity_GetLinkFilterHashPrefixes_Response as crate::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashPrefixes_Response {
    pub fn new() -> CCommunity_GetLinkFilterHashPrefixes_Response {
        ::std::default::Default::default()
    }

    // repeated uint32 hash_prefixes = 1;

    pub fn hash_prefixes(&self) -> &[u32] {
        &self.hash_prefixes
    }

    pub fn clear_hash_prefixes(&mut self) {
        self.hash_prefixes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash_prefixes(&mut self, v: ::std::vec::Vec<u32>) {
        self.hash_prefixes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hash_prefixes(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.hash_prefixes
    }

    // Take field
    pub fn take_hash_prefixes(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.hash_prefixes, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "hash_prefixes",
            |m: &CCommunity_GetLinkFilterHashPrefixes_Response| { &m.hash_prefixes },
            |m: &mut CCommunity_GetLinkFilterHashPrefixes_Response| { &mut m.hash_prefixes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashPrefixes_Response>(
            "CCommunity_GetLinkFilterHashPrefixes_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCommunity_GetLinkFilterHashPrefixes_Response {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashPrefixes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.hash_prefixes)?;
                },
                8 => {
                    self.hash_prefixes.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.hash_prefixes {
            my_size += crate::rt::uint32_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.hash_prefixes {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashPrefixes_Response {
        CCommunity_GetLinkFilterHashPrefixes_Response::new()
    }

    fn clear(&mut self) {
        self.hash_prefixes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashPrefixes_Response {
        static instance: CCommunity_GetLinkFilterHashPrefixes_Response = CCommunity_GetLinkFilterHashPrefixes_Response {
            hash_prefixes: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashPrefixes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashPrefixes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCommunity_GetLinkFilterHashPrefixes_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashes_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Request.hit_type)
    pub hit_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Request.count)
    pub count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Request.start)
    pub start: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashes_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashes_Request {
    fn default() -> &'a CCommunity_GetLinkFilterHashes_Request {
        <CCommunity_GetLinkFilterHashes_Request as crate::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashes_Request {
    pub fn new() -> CCommunity_GetLinkFilterHashes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;

    pub fn hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }

    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 2;

    pub fn count(&self) -> u32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint64 start = 3;

    pub fn start(&self) -> u64 {
        self.start.unwrap_or(0)
    }

    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hit_type",
            |m: &CCommunity_GetLinkFilterHashes_Request| { &m.hit_type },
            |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.hit_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCommunity_GetLinkFilterHashes_Request| { &m.count },
            |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.count },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "start",
            |m: &CCommunity_GetLinkFilterHashes_Request| { &m.start },
            |m: &mut CCommunity_GetLinkFilterHashes_Request| { &mut m.start },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashes_Request>(
            "CCommunity_GetLinkFilterHashes_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCommunity_GetLinkFilterHashes_Request {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.count = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.start = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.count {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.start {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.start {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashes_Request {
        CCommunity_GetLinkFilterHashes_Request::new()
    }

    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashes_Request {
        static instance: CCommunity_GetLinkFilterHashes_Request = CCommunity_GetLinkFilterHashes_Request {
            hit_type: ::std::option::Option::None,
            count: ::std::option::Option::None,
            start: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCommunity_GetLinkFilterHashes_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCommunity_GetLinkFilterHashes_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterHashes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterHashes_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterHashes_Response.hashes)
    pub hashes: ::std::vec::Vec<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterHashes_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterHashes_Response {
    fn default() -> &'a CCommunity_GetLinkFilterHashes_Response {
        <CCommunity_GetLinkFilterHashes_Response as crate::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterHashes_Response {
    pub fn new() -> CCommunity_GetLinkFilterHashes_Response {
        ::std::default::Default::default()
    }

    // repeated bytes hashes = 1;

    pub fn hashes(&self) -> &[::bytes::Bytes] {
        &self.hashes
    }

    pub fn clear_hashes(&mut self) {
        self.hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hashes(&mut self, v: ::std::vec::Vec<::bytes::Bytes>) {
        self.hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hashes(&mut self) -> &mut ::std::vec::Vec<::bytes::Bytes> {
        &mut self.hashes
    }

    // Take field
    pub fn take_hashes(&mut self) -> ::std::vec::Vec<::bytes::Bytes> {
        ::std::mem::replace(&mut self.hashes, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "hashes",
            |m: &CCommunity_GetLinkFilterHashes_Response| { &m.hashes },
            |m: &mut CCommunity_GetLinkFilterHashes_Response| { &mut m.hashes },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterHashes_Response>(
            "CCommunity_GetLinkFilterHashes_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCommunity_GetLinkFilterHashes_Response {
    const NAME: &'static str = "CCommunity_GetLinkFilterHashes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hashes.push(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.hashes {
            my_size += crate::rt::bytes_size(1, &value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.hashes {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterHashes_Response {
        CCommunity_GetLinkFilterHashes_Response::new()
    }

    fn clear(&mut self) {
        self.hashes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterHashes_Response {
        static instance: CCommunity_GetLinkFilterHashes_Response = CCommunity_GetLinkFilterHashes_Response {
            hashes: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCommunity_GetLinkFilterHashes_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterHashes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterHashes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCommunity_GetLinkFilterHashes_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterListVersion_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterListVersion_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterListVersion_Request.hit_type)
    pub hit_type: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterListVersion_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterListVersion_Request {
    fn default() -> &'a CCommunity_GetLinkFilterListVersion_Request {
        <CCommunity_GetLinkFilterListVersion_Request as crate::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterListVersion_Request {
    pub fn new() -> CCommunity_GetLinkFilterListVersion_Request {
        ::std::default::Default::default()
    }

    // optional uint32 hit_type = 1;

    pub fn hit_type(&self) -> u32 {
        self.hit_type.unwrap_or(0)
    }

    pub fn clear_hit_type(&mut self) {
        self.hit_type = ::std::option::Option::None;
    }

    pub fn has_hit_type(&self) -> bool {
        self.hit_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hit_type(&mut self, v: u32) {
        self.hit_type = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hit_type",
            |m: &CCommunity_GetLinkFilterListVersion_Request| { &m.hit_type },
            |m: &mut CCommunity_GetLinkFilterListVersion_Request| { &mut m.hit_type },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterListVersion_Request>(
            "CCommunity_GetLinkFilterListVersion_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCommunity_GetLinkFilterListVersion_Request {
    const NAME: &'static str = "CCommunity_GetLinkFilterListVersion_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hit_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hit_type {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.hit_type {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterListVersion_Request {
        CCommunity_GetLinkFilterListVersion_Request::new()
    }

    fn clear(&mut self) {
        self.hit_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterListVersion_Request {
        static instance: CCommunity_GetLinkFilterListVersion_Request = CCommunity_GetLinkFilterListVersion_Request {
            hit_type: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCommunity_GetLinkFilterListVersion_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterListVersion_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterListVersion_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCommunity_GetLinkFilterListVersion_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetLinkFilterListVersion_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetLinkFilterListVersion_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterListVersion_Response.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetLinkFilterListVersion_Response.count)
    pub count: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetLinkFilterListVersion_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetLinkFilterListVersion_Response {
    fn default() -> &'a CCommunity_GetLinkFilterListVersion_Response {
        <CCommunity_GetLinkFilterListVersion_Response as crate::Message>::default_instance()
    }
}

impl CCommunity_GetLinkFilterListVersion_Response {
    pub fn new() -> CCommunity_GetLinkFilterListVersion_Response {
        ::std::default::Default::default()
    }

    // optional string version = 1;

    pub fn version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 count = 2;

    pub fn count(&self) -> u64 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CCommunity_GetLinkFilterListVersion_Response| { &m.version },
            |m: &mut CCommunity_GetLinkFilterListVersion_Response| { &mut m.version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCommunity_GetLinkFilterListVersion_Response| { &m.count },
            |m: &mut CCommunity_GetLinkFilterListVersion_Response| { &mut m.count },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetLinkFilterListVersion_Response>(
            "CCommunity_GetLinkFilterListVersion_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCommunity_GetLinkFilterListVersion_Response {
    const NAME: &'static str = "CCommunity_GetLinkFilterListVersion_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.count = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.count {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetLinkFilterListVersion_Response {
        CCommunity_GetLinkFilterListVersion_Response::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetLinkFilterListVersion_Response {
        static instance: CCommunity_GetLinkFilterListVersion_Response = CCommunity_GetLinkFilterListVersion_Response {
            version: ::std::option::Option::None,
            count: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCommunity_GetLinkFilterListVersion_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetLinkFilterListVersion_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetLinkFilterListVersion_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCommunity_GetLinkFilterListVersion_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*steammessages_linkfilter.steamclient.proto\x1a\x18steammessages_base.\
    proto\x1a,steammessages_unified_base.steamclient.proto\"u\n,CCommunity_G\
    etLinkFilterHashPrefixes_Request\x12\x19\n\x08hit_type\x18\x01\x20\x01(\
    \rR\x07hitType\x12\x14\n\x05count\x18\x02\x20\x01(\rR\x05count\x12\x14\n\
    \x05start\x18\x03\x20\x01(\x04R\x05start\"T\n-CCommunity_GetLinkFilterHa\
    shPrefixes_Response\x12#\n\rhash_prefixes\x18\x01\x20\x03(\rR\x0chashPre\
    fixes\"o\n&CCommunity_GetLinkFilterHashes_Request\x12\x19\n\x08hit_type\
    \x18\x01\x20\x01(\rR\x07hitType\x12\x14\n\x05count\x18\x02\x20\x01(\rR\
    \x05count\x12\x14\n\x05start\x18\x03\x20\x01(\x04R\x05start\"A\n'CCommun\
    ity_GetLinkFilterHashes_Response\x12\x16\n\x06hashes\x18\x01\x20\x03(\
    \x0cR\x06hashes\"H\n+CCommunity_GetLinkFilterListVersion_Request\x12\x19\
    \n\x08hit_type\x18\x01\x20\x01(\rR\x07hitType\"^\n,CCommunity_GetLinkFil\
    terListVersion_Response\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07vers\
    ion\x12\x14\n\x05count\x18\x02\x20\x01(\x04R\x05count2\xf4\x02\n\x13Comm\
    unityLinkFilter\x12z\n\x19GetLinkFilterHashPrefixes\x12-.CCommunity_GetL\
    inkFilterHashPrefixes_Request\x1a..CCommunity_GetLinkFilterHashPrefixes_\
    Response\x12h\n\x13GetLinkFilterHashes\x12'.CCommunity_GetLinkFilterHash\
    es_Request\x1a(.CCommunity_GetLinkFilterHashes_Response\x12w\n\x18GetLin\
    kFilterListVersion\x12,.CCommunity_GetLinkFilterListVersion_Request\x1a-\
    .CCommunity_GetLinkFilterListVersion_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CCommunity_GetLinkFilterHashPrefixes_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterHashPrefixes_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterHashes_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterHashes_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterListVersion_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetLinkFilterListVersion_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
