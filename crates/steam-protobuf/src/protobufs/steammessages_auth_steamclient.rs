// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_auth.steamclient.proto`

// @@protoc_insertion_point(message:CAuthentication_GetPasswordRSAPublicKey_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_GetPasswordRSAPublicKey_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_GetPasswordRSAPublicKey_Request.account_name)
    pub account_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_GetPasswordRSAPublicKey_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetPasswordRSAPublicKey_Request {
    fn default() -> &'a CAuthentication_GetPasswordRSAPublicKey_Request {
        <CAuthentication_GetPasswordRSAPublicKey_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_GetPasswordRSAPublicKey_Request {
    pub fn new() -> CAuthentication_GetPasswordRSAPublicKey_Request {
        ::std::default::Default::default()
    }

    // optional string account_name = 1;

    pub fn account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_name(&mut self) {
        self.account_name = ::std::option::Option::None;
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_name",
            |m: &CAuthentication_GetPasswordRSAPublicKey_Request| { &m.account_name },
            |m: &mut CAuthentication_GetPasswordRSAPublicKey_Request| { &mut m.account_name },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_GetPasswordRSAPublicKey_Request>(
            "CAuthentication_GetPasswordRSAPublicKey_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_GetPasswordRSAPublicKey_Request {
    const NAME: &'static str = "CAuthentication_GetPasswordRSAPublicKey_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.account_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_name.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.account_name.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_GetPasswordRSAPublicKey_Request {
        CAuthentication_GetPasswordRSAPublicKey_Request::new()
    }

    fn clear(&mut self) {
        self.account_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_GetPasswordRSAPublicKey_Request {
        static instance: CAuthentication_GetPasswordRSAPublicKey_Request = CAuthentication_GetPasswordRSAPublicKey_Request {
            account_name: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_GetPasswordRSAPublicKey_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_GetPasswordRSAPublicKey_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_GetPasswordRSAPublicKey_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_GetPasswordRSAPublicKey_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_GetPasswordRSAPublicKey_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_GetPasswordRSAPublicKey_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_GetPasswordRSAPublicKey_Response.publickey_mod)
    pub publickey_mod: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetPasswordRSAPublicKey_Response.publickey_exp)
    pub publickey_exp: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetPasswordRSAPublicKey_Response.timestamp)
    pub timestamp: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_GetPasswordRSAPublicKey_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetPasswordRSAPublicKey_Response {
    fn default() -> &'a CAuthentication_GetPasswordRSAPublicKey_Response {
        <CAuthentication_GetPasswordRSAPublicKey_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_GetPasswordRSAPublicKey_Response {
    pub fn new() -> CAuthentication_GetPasswordRSAPublicKey_Response {
        ::std::default::Default::default()
    }

    // optional string publickey_mod = 1;

    pub fn publickey_mod(&self) -> &str {
        match self.publickey_mod.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_publickey_mod(&mut self) {
        self.publickey_mod = ::std::option::Option::None;
    }

    pub fn has_publickey_mod(&self) -> bool {
        self.publickey_mod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publickey_mod(&mut self, v: ::std::string::String) {
        self.publickey_mod = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publickey_mod(&mut self) -> &mut ::std::string::String {
        if self.publickey_mod.is_none() {
            self.publickey_mod = ::std::option::Option::Some(::std::string::String::new());
        }
        self.publickey_mod.as_mut().unwrap()
    }

    // Take field
    pub fn take_publickey_mod(&mut self) -> ::std::string::String {
        self.publickey_mod.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string publickey_exp = 2;

    pub fn publickey_exp(&self) -> &str {
        match self.publickey_exp.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_publickey_exp(&mut self) {
        self.publickey_exp = ::std::option::Option::None;
    }

    pub fn has_publickey_exp(&self) -> bool {
        self.publickey_exp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publickey_exp(&mut self, v: ::std::string::String) {
        self.publickey_exp = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publickey_exp(&mut self) -> &mut ::std::string::String {
        if self.publickey_exp.is_none() {
            self.publickey_exp = ::std::option::Option::Some(::std::string::String::new());
        }
        self.publickey_exp.as_mut().unwrap()
    }

    // Take field
    pub fn take_publickey_exp(&mut self) -> ::std::string::String {
        self.publickey_exp.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 timestamp = 3;

    pub fn timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publickey_mod",
            |m: &CAuthentication_GetPasswordRSAPublicKey_Response| { &m.publickey_mod },
            |m: &mut CAuthentication_GetPasswordRSAPublicKey_Response| { &mut m.publickey_mod },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publickey_exp",
            |m: &CAuthentication_GetPasswordRSAPublicKey_Response| { &m.publickey_exp },
            |m: &mut CAuthentication_GetPasswordRSAPublicKey_Response| { &mut m.publickey_exp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CAuthentication_GetPasswordRSAPublicKey_Response| { &m.timestamp },
            |m: &mut CAuthentication_GetPasswordRSAPublicKey_Response| { &mut m.timestamp },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_GetPasswordRSAPublicKey_Response>(
            "CAuthentication_GetPasswordRSAPublicKey_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_GetPasswordRSAPublicKey_Response {
    const NAME: &'static str = "CAuthentication_GetPasswordRSAPublicKey_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.publickey_mod = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.publickey_exp = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publickey_mod.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.publickey_exp.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.publickey_mod.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publickey_exp.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_GetPasswordRSAPublicKey_Response {
        CAuthentication_GetPasswordRSAPublicKey_Response::new()
    }

    fn clear(&mut self) {
        self.publickey_mod = ::std::option::Option::None;
        self.publickey_exp = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_GetPasswordRSAPublicKey_Response {
        static instance: CAuthentication_GetPasswordRSAPublicKey_Response = CAuthentication_GetPasswordRSAPublicKey_Response {
            publickey_mod: ::std::option::Option::None,
            publickey_exp: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_GetPasswordRSAPublicKey_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_GetPasswordRSAPublicKey_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_GetPasswordRSAPublicKey_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_GetPasswordRSAPublicKey_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_DeviceDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_DeviceDetails {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_DeviceDetails.device_friendly_name)
    pub device_friendly_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_DeviceDetails.platform_type)
    pub platform_type: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenPlatformType>>,
    // @@protoc_insertion_point(field:CAuthentication_DeviceDetails.os_type)
    pub os_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAuthentication_DeviceDetails.gaming_device_type)
    pub gaming_device_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAuthentication_DeviceDetails.client_count)
    pub client_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAuthentication_DeviceDetails.machine_id)
    pub machine_id: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_DeviceDetails.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_DeviceDetails {
    fn default() -> &'a CAuthentication_DeviceDetails {
        <CAuthentication_DeviceDetails as crate::Message>::default_instance()
    }
}

impl CAuthentication_DeviceDetails {
    pub fn new() -> CAuthentication_DeviceDetails {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;

    pub fn device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenPlatformType platform_type = 2;

    pub fn platform_type(&self) -> EAuthTokenPlatformType {
        match self.platform_type {
            Some(e) => e.enum_value_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            None => EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
        }
    }

    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional int32 os_type = 3;

    pub fn os_type(&self) -> i32 {
        self.os_type.unwrap_or(0)
    }

    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: i32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 gaming_device_type = 4;

    pub fn gaming_device_type(&self) -> u32 {
        self.gaming_device_type.unwrap_or(0)
    }

    pub fn clear_gaming_device_type(&mut self) {
        self.gaming_device_type = ::std::option::Option::None;
    }

    pub fn has_gaming_device_type(&self) -> bool {
        self.gaming_device_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gaming_device_type(&mut self, v: u32) {
        self.gaming_device_type = ::std::option::Option::Some(v);
    }

    // optional uint32 client_count = 5;

    pub fn client_count(&self) -> u32 {
        self.client_count.unwrap_or(0)
    }

    pub fn clear_client_count(&mut self) {
        self.client_count = ::std::option::Option::None;
    }

    pub fn has_client_count(&self) -> bool {
        self.client_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_count(&mut self, v: u32) {
        self.client_count = ::std::option::Option::Some(v);
    }

    // optional bytes machine_id = 6;

    pub fn machine_id(&self) -> &[u8] {
        match self.machine_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_machine_id(&mut self) {
        self.machine_id = ::std::option::Option::None;
    }

    pub fn has_machine_id(&self) -> bool {
        self.machine_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine_id(&mut self, v: ::bytes::Bytes) {
        self.machine_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine_id(&mut self) -> &mut ::bytes::Bytes {
        if self.machine_id.is_none() {
            self.machine_id = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.machine_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine_id(&mut self) -> ::bytes::Bytes {
        self.machine_id.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_friendly_name",
            |m: &CAuthentication_DeviceDetails| { &m.device_friendly_name },
            |m: &mut CAuthentication_DeviceDetails| { &mut m.device_friendly_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform_type",
            |m: &CAuthentication_DeviceDetails| { &m.platform_type },
            |m: &mut CAuthentication_DeviceDetails| { &mut m.platform_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "os_type",
            |m: &CAuthentication_DeviceDetails| { &m.os_type },
            |m: &mut CAuthentication_DeviceDetails| { &mut m.os_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gaming_device_type",
            |m: &CAuthentication_DeviceDetails| { &m.gaming_device_type },
            |m: &mut CAuthentication_DeviceDetails| { &mut m.gaming_device_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_count",
            |m: &CAuthentication_DeviceDetails| { &m.client_count },
            |m: &mut CAuthentication_DeviceDetails| { &mut m.client_count },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "machine_id",
            |m: &CAuthentication_DeviceDetails| { &m.machine_id },
            |m: &mut CAuthentication_DeviceDetails| { &mut m.machine_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_DeviceDetails>(
            "CAuthentication_DeviceDetails",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_DeviceDetails {
    const NAME: &'static str = "CAuthentication_DeviceDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device_friendly_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.platform_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.os_type = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.gaming_device_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.client_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    self.machine_id = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device_friendly_name.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.platform_type {
            my_size += crate::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.os_type {
            my_size += crate::rt::int32_size(3, v);
        }
        if let Some(v) = self.gaming_device_type {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.client_count {
            my_size += crate::rt::uint32_size(5, v);
        }
        if let Some(v) = self.machine_id.as_ref() {
            my_size += crate::rt::bytes_size(6, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.device_friendly_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(2, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.os_type {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.gaming_device_type {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.client_count {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.machine_id.as_ref() {
            os.write_bytes(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_DeviceDetails {
        CAuthentication_DeviceDetails::new()
    }

    fn clear(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.gaming_device_type = ::std::option::Option::None;
        self.client_count = ::std::option::Option::None;
        self.machine_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_DeviceDetails {
        static instance: CAuthentication_DeviceDetails = CAuthentication_DeviceDetails {
            device_friendly_name: ::std::option::Option::None,
            platform_type: ::std::option::Option::None,
            os_type: ::std::option::Option::None,
            gaming_device_type: ::std::option::Option::None,
            client_count: ::std::option::Option::None,
            machine_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_DeviceDetails {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_DeviceDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_DeviceDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_DeviceDetails {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_BeginAuthSessionViaQR_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_BeginAuthSessionViaQR_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Request.device_friendly_name)
    pub device_friendly_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Request.platform_type)
    pub platform_type: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenPlatformType>>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Request.device_details)
    pub device_details: crate::MessageField<CAuthentication_DeviceDetails>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Request.website_id)
    pub website_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_BeginAuthSessionViaQR_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaQR_Request {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaQR_Request {
        <CAuthentication_BeginAuthSessionViaQR_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaQR_Request {
    pub fn new() -> CAuthentication_BeginAuthSessionViaQR_Request {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;

    pub fn device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenPlatformType platform_type = 2;

    pub fn platform_type(&self) -> EAuthTokenPlatformType {
        match self.platform_type {
            Some(e) => e.enum_value_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            None => EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
        }
    }

    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .CAuthentication_DeviceDetails device_details = 3;

    pub fn device_details(&self) -> &CAuthentication_DeviceDetails {
        self.device_details.as_ref().unwrap_or_else(|| <CAuthentication_DeviceDetails as crate::Message>::default_instance())
    }

    pub fn clear_device_details(&mut self) {
        self.device_details.clear();
    }

    pub fn has_device_details(&self) -> bool {
        self.device_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_details(&mut self, v: CAuthentication_DeviceDetails) {
        self.device_details = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_details(&mut self) -> &mut CAuthentication_DeviceDetails {
        self.device_details.mut_or_insert_default()
    }

    // Take field
    pub fn take_device_details(&mut self) -> CAuthentication_DeviceDetails {
        self.device_details.take().unwrap_or_else(|| CAuthentication_DeviceDetails::new())
    }

    // optional string website_id = 4;

    pub fn website_id(&self) -> &str {
        match self.website_id.as_ref() {
            Some(v) => v,
            None => "Unknown",
        }
    }

    pub fn clear_website_id(&mut self) {
        self.website_id = ::std::option::Option::None;
    }

    pub fn has_website_id(&self) -> bool {
        self.website_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_website_id(&mut self, v: ::std::string::String) {
        self.website_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website_id(&mut self) -> &mut ::std::string::String {
        if self.website_id.is_none() {
            self.website_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.website_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_website_id(&mut self) -> ::std::string::String {
        self.website_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_friendly_name",
            |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.device_friendly_name },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.device_friendly_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform_type",
            |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.platform_type },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.platform_type },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CAuthentication_DeviceDetails>(
            "device_details",
            |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.device_details },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.device_details },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "website_id",
            |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.website_id },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.website_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_BeginAuthSessionViaQR_Request>(
            "CAuthentication_BeginAuthSessionViaQR_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_BeginAuthSessionViaQR_Request {
    const NAME: &'static str = "CAuthentication_BeginAuthSessionViaQR_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device_friendly_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.platform_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.device_details)?;
                },
                34 => {
                    self.website_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device_friendly_name.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.platform_type {
            my_size += crate::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.device_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.website_id.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.device_friendly_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(2, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.device_details.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.website_id.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_BeginAuthSessionViaQR_Request {
        CAuthentication_BeginAuthSessionViaQR_Request::new()
    }

    fn clear(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.device_details.clear();
        self.website_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaQR_Request {
        static instance: CAuthentication_BeginAuthSessionViaQR_Request = CAuthentication_BeginAuthSessionViaQR_Request {
            device_friendly_name: ::std::option::Option::None,
            platform_type: ::std::option::Option::None,
            device_details: crate::MessageField::none(),
            website_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_BeginAuthSessionViaQR_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_BeginAuthSessionViaQR_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_BeginAuthSessionViaQR_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaQR_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_AllowedConfirmation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_AllowedConfirmation {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_AllowedConfirmation.confirmation_type)
    pub confirmation_type: ::std::option::Option<crate::EnumOrUnknown<EAuthSessionGuardType>>,
    // @@protoc_insertion_point(field:CAuthentication_AllowedConfirmation.associated_message)
    pub associated_message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_AllowedConfirmation.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_AllowedConfirmation {
    fn default() -> &'a CAuthentication_AllowedConfirmation {
        <CAuthentication_AllowedConfirmation as crate::Message>::default_instance()
    }
}

impl CAuthentication_AllowedConfirmation {
    pub fn new() -> CAuthentication_AllowedConfirmation {
        ::std::default::Default::default()
    }

    // optional .EAuthSessionGuardType confirmation_type = 1;

    pub fn confirmation_type(&self) -> EAuthSessionGuardType {
        match self.confirmation_type {
            Some(e) => e.enum_value_or(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown),
            None => EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown,
        }
    }

    pub fn clear_confirmation_type(&mut self) {
        self.confirmation_type = ::std::option::Option::None;
    }

    pub fn has_confirmation_type(&self) -> bool {
        self.confirmation_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_confirmation_type(&mut self, v: EAuthSessionGuardType) {
        self.confirmation_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string associated_message = 2;

    pub fn associated_message(&self) -> &str {
        match self.associated_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_associated_message(&mut self) {
        self.associated_message = ::std::option::Option::None;
    }

    pub fn has_associated_message(&self) -> bool {
        self.associated_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_associated_message(&mut self, v: ::std::string::String) {
        self.associated_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_associated_message(&mut self) -> &mut ::std::string::String {
        if self.associated_message.is_none() {
            self.associated_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.associated_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_associated_message(&mut self) -> ::std::string::String {
        self.associated_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "confirmation_type",
            |m: &CAuthentication_AllowedConfirmation| { &m.confirmation_type },
            |m: &mut CAuthentication_AllowedConfirmation| { &mut m.confirmation_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "associated_message",
            |m: &CAuthentication_AllowedConfirmation| { &m.associated_message },
            |m: &mut CAuthentication_AllowedConfirmation| { &mut m.associated_message },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_AllowedConfirmation>(
            "CAuthentication_AllowedConfirmation",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_AllowedConfirmation {
    const NAME: &'static str = "CAuthentication_AllowedConfirmation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.confirmation_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.associated_message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.confirmation_type {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.associated_message.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.confirmation_type {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.associated_message.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_AllowedConfirmation {
        CAuthentication_AllowedConfirmation::new()
    }

    fn clear(&mut self) {
        self.confirmation_type = ::std::option::Option::None;
        self.associated_message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_AllowedConfirmation {
        static instance: CAuthentication_AllowedConfirmation = CAuthentication_AllowedConfirmation {
            confirmation_type: ::std::option::Option::None,
            associated_message: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_AllowedConfirmation {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_AllowedConfirmation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_AllowedConfirmation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_AllowedConfirmation {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_BeginAuthSessionViaQR_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_BeginAuthSessionViaQR_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Response.client_id)
    pub client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Response.challenge_url)
    pub challenge_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Response.request_id)
    pub request_id: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Response.interval)
    pub interval: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Response.allowed_confirmations)
    pub allowed_confirmations: ::std::vec::Vec<CAuthentication_AllowedConfirmation>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaQR_Response.version)
    pub version: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_BeginAuthSessionViaQR_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaQR_Response {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaQR_Response {
        <CAuthentication_BeginAuthSessionViaQR_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaQR_Response {
    pub fn new() -> CAuthentication_BeginAuthSessionViaQR_Response {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;

    pub fn client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }

    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional string challenge_url = 2;

    pub fn challenge_url(&self) -> &str {
        match self.challenge_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_challenge_url(&mut self) {
        self.challenge_url = ::std::option::Option::None;
    }

    pub fn has_challenge_url(&self) -> bool {
        self.challenge_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_url(&mut self, v: ::std::string::String) {
        self.challenge_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge_url(&mut self) -> &mut ::std::string::String {
        if self.challenge_url.is_none() {
            self.challenge_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.challenge_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge_url(&mut self) -> ::std::string::String {
        self.challenge_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes request_id = 3;

    pub fn request_id(&self) -> &[u8] {
        match self.request_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request_id(&mut self) {
        self.request_id = ::std::option::Option::None;
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::bytes::Bytes) {
        self.request_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::bytes::Bytes {
        if self.request_id.is_none() {
            self.request_id = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::bytes::Bytes {
        self.request_id.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional float interval = 4;

    pub fn interval(&self) -> f32 {
        self.interval.unwrap_or(0.)
    }

    pub fn clear_interval(&mut self) {
        self.interval = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: f32) {
        self.interval = ::std::option::Option::Some(v);
    }

    // repeated .CAuthentication_AllowedConfirmation allowed_confirmations = 5;

    pub fn allowed_confirmations(&self) -> &[CAuthentication_AllowedConfirmation] {
        &self.allowed_confirmations
    }

    pub fn clear_allowed_confirmations(&mut self) {
        self.allowed_confirmations.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_confirmations(&mut self, v: ::std::vec::Vec<CAuthentication_AllowedConfirmation>) {
        self.allowed_confirmations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_confirmations(&mut self) -> &mut ::std::vec::Vec<CAuthentication_AllowedConfirmation> {
        &mut self.allowed_confirmations
    }

    // Take field
    pub fn take_allowed_confirmations(&mut self) -> ::std::vec::Vec<CAuthentication_AllowedConfirmation> {
        ::std::mem::replace(&mut self.allowed_confirmations, ::std::vec::Vec::new())
    }

    // optional int32 version = 6;

    pub fn version(&self) -> i32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_id",
            |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.client_id },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_url",
            |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.challenge_url },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.challenge_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_id",
            |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.request_id },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.request_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "interval",
            |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.interval },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.interval },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_confirmations",
            |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.allowed_confirmations },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.allowed_confirmations },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.version },
            |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.version },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_BeginAuthSessionViaQR_Response>(
            "CAuthentication_BeginAuthSessionViaQR_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_BeginAuthSessionViaQR_Response {
    const NAME: &'static str = "CAuthentication_BeginAuthSessionViaQR_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.challenge_url = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.request_id = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                37 => {
                    self.interval = ::std::option::Option::Some(is.read_float()?);
                },
                42 => {
                    self.allowed_confirmations.push(is.read_message()?);
                },
                48 => {
                    self.version = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.challenge_url.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.request_id.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.interval {
            my_size += 1 + 4;
        }
        for value in &self.allowed_confirmations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.version {
            my_size += crate::rt::int32_size(6, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.challenge_url.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.request_id.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.interval {
            os.write_float(4, v)?;
        }
        for v in &self.allowed_confirmations {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.version {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_BeginAuthSessionViaQR_Response {
        CAuthentication_BeginAuthSessionViaQR_Response::new()
    }

    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.challenge_url = ::std::option::Option::None;
        self.request_id = ::std::option::Option::None;
        self.interval = ::std::option::Option::None;
        self.allowed_confirmations.clear();
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaQR_Response {
        static instance: CAuthentication_BeginAuthSessionViaQR_Response = CAuthentication_BeginAuthSessionViaQR_Response {
            client_id: ::std::option::Option::None,
            challenge_url: ::std::option::Option::None,
            request_id: ::std::option::Option::None,
            interval: ::std::option::Option::None,
            allowed_confirmations: ::std::vec::Vec::new(),
            version: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_BeginAuthSessionViaQR_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_BeginAuthSessionViaQR_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_BeginAuthSessionViaQR_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaQR_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_BeginAuthSessionViaCredentials_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_BeginAuthSessionViaCredentials_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.device_friendly_name)
    pub device_friendly_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.account_name)
    pub account_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.encrypted_password)
    pub encrypted_password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.encryption_timestamp)
    pub encryption_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.remember_login)
    pub remember_login: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.platform_type)
    pub platform_type: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenPlatformType>>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.persistence)
    pub persistence: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESessionPersistence>>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.website_id)
    pub website_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.device_details)
    pub device_details: crate::MessageField<CAuthentication_DeviceDetails>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.guard_data)
    pub guard_data: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.language)
    pub language: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Request.qos_level)
    pub qos_level: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_BeginAuthSessionViaCredentials_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaCredentials_Request {
        <CAuthentication_BeginAuthSessionViaCredentials_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaCredentials_Request {
    pub fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Request {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;

    pub fn device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string account_name = 2;

    pub fn account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_name(&mut self) {
        self.account_name = ::std::option::Option::None;
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string encrypted_password = 3;

    pub fn encrypted_password(&self) -> &str {
        match self.encrypted_password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_encrypted_password(&mut self) {
        self.encrypted_password = ::std::option::Option::None;
    }

    pub fn has_encrypted_password(&self) -> bool {
        self.encrypted_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_password(&mut self, v: ::std::string::String) {
        self.encrypted_password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_password(&mut self) -> &mut ::std::string::String {
        if self.encrypted_password.is_none() {
            self.encrypted_password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.encrypted_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_password(&mut self) -> ::std::string::String {
        self.encrypted_password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 encryption_timestamp = 4;

    pub fn encryption_timestamp(&self) -> u64 {
        self.encryption_timestamp.unwrap_or(0)
    }

    pub fn clear_encryption_timestamp(&mut self) {
        self.encryption_timestamp = ::std::option::Option::None;
    }

    pub fn has_encryption_timestamp(&self) -> bool {
        self.encryption_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_timestamp(&mut self, v: u64) {
        self.encryption_timestamp = ::std::option::Option::Some(v);
    }

    // optional bool remember_login = 5;

    pub fn remember_login(&self) -> bool {
        self.remember_login.unwrap_or(false)
    }

    pub fn clear_remember_login(&mut self) {
        self.remember_login = ::std::option::Option::None;
    }

    pub fn has_remember_login(&self) -> bool {
        self.remember_login.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remember_login(&mut self, v: bool) {
        self.remember_login = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenPlatformType platform_type = 6;

    pub fn platform_type(&self) -> EAuthTokenPlatformType {
        match self.platform_type {
            Some(e) => e.enum_value_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            None => EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
        }
    }

    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .ESessionPersistence persistence = 7;

    pub fn persistence(&self) -> super::enums::ESessionPersistence {
        match self.persistence {
            Some(e) => e.enum_value_or(super::enums::ESessionPersistence::k_ESessionPersistence_Persistent),
            None => super::enums::ESessionPersistence::k_ESessionPersistence_Persistent,
        }
    }

    pub fn clear_persistence(&mut self) {
        self.persistence = ::std::option::Option::None;
    }

    pub fn has_persistence(&self) -> bool {
        self.persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.persistence = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string website_id = 8;

    pub fn website_id(&self) -> &str {
        match self.website_id.as_ref() {
            Some(v) => v,
            None => "Unknown",
        }
    }

    pub fn clear_website_id(&mut self) {
        self.website_id = ::std::option::Option::None;
    }

    pub fn has_website_id(&self) -> bool {
        self.website_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_website_id(&mut self, v: ::std::string::String) {
        self.website_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website_id(&mut self) -> &mut ::std::string::String {
        if self.website_id.is_none() {
            self.website_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.website_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_website_id(&mut self) -> ::std::string::String {
        self.website_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CAuthentication_DeviceDetails device_details = 9;

    pub fn device_details(&self) -> &CAuthentication_DeviceDetails {
        self.device_details.as_ref().unwrap_or_else(|| <CAuthentication_DeviceDetails as crate::Message>::default_instance())
    }

    pub fn clear_device_details(&mut self) {
        self.device_details.clear();
    }

    pub fn has_device_details(&self) -> bool {
        self.device_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_details(&mut self, v: CAuthentication_DeviceDetails) {
        self.device_details = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_details(&mut self) -> &mut CAuthentication_DeviceDetails {
        self.device_details.mut_or_insert_default()
    }

    // Take field
    pub fn take_device_details(&mut self) -> CAuthentication_DeviceDetails {
        self.device_details.take().unwrap_or_else(|| CAuthentication_DeviceDetails::new())
    }

    // optional string guard_data = 10;

    pub fn guard_data(&self) -> &str {
        match self.guard_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_guard_data(&mut self) {
        self.guard_data = ::std::option::Option::None;
    }

    pub fn has_guard_data(&self) -> bool {
        self.guard_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guard_data(&mut self, v: ::std::string::String) {
        self.guard_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guard_data(&mut self) -> &mut ::std::string::String {
        if self.guard_data.is_none() {
            self.guard_data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.guard_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_guard_data(&mut self) -> ::std::string::String {
        self.guard_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 language = 11;

    pub fn language(&self) -> u32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: u32) {
        self.language = ::std::option::Option::Some(v);
    }

    // optional int32 qos_level = 12;

    pub fn qos_level(&self) -> i32 {
        self.qos_level.unwrap_or(2i32)
    }

    pub fn clear_qos_level(&mut self) {
        self.qos_level = ::std::option::Option::None;
    }

    pub fn has_qos_level(&self) -> bool {
        self.qos_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_qos_level(&mut self, v: i32) {
        self.qos_level = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_friendly_name",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.device_friendly_name },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.device_friendly_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_name",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.account_name },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.account_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encrypted_password",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.encrypted_password },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.encrypted_password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encryption_timestamp",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.encryption_timestamp },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.encryption_timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "remember_login",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.remember_login },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.remember_login },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform_type",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.platform_type },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.platform_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "persistence",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.persistence },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.persistence },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "website_id",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.website_id },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.website_id },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CAuthentication_DeviceDetails>(
            "device_details",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.device_details },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.device_details },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "guard_data",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.guard_data },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.guard_data },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.language },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "qos_level",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.qos_level },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.qos_level },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_BeginAuthSessionViaCredentials_Request>(
            "CAuthentication_BeginAuthSessionViaCredentials_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_BeginAuthSessionViaCredentials_Request {
    const NAME: &'static str = "CAuthentication_BeginAuthSessionViaCredentials_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device_friendly_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.account_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.encrypted_password = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.encryption_timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.remember_login = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.platform_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.persistence = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                66 => {
                    self.website_id = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.device_details)?;
                },
                82 => {
                    self.guard_data = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.language = ::std::option::Option::Some(is.read_uint32()?);
                },
                96 => {
                    self.qos_level = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device_friendly_name.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.account_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.encrypted_password.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.encryption_timestamp {
            my_size += crate::rt::uint64_size(4, v);
        }
        if let Some(v) = self.remember_login {
            my_size += 1 + 1;
        }
        if let Some(v) = self.platform_type {
            my_size += crate::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.persistence {
            my_size += crate::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.website_id.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        if let Some(v) = self.device_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.guard_data.as_ref() {
            my_size += crate::rt::string_size(10, &v);
        }
        if let Some(v) = self.language {
            my_size += crate::rt::uint32_size(11, v);
        }
        if let Some(v) = self.qos_level {
            my_size += crate::rt::int32_size(12, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.device_friendly_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.account_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.encrypted_password.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.encryption_timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.remember_login {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(6, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.persistence {
            os.write_enum(7, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.website_id.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.device_details.as_ref() {
            crate::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.guard_data.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.language {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.qos_level {
            os.write_int32(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Request {
        CAuthentication_BeginAuthSessionViaCredentials_Request::new()
    }

    fn clear(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
        self.account_name = ::std::option::Option::None;
        self.encrypted_password = ::std::option::Option::None;
        self.encryption_timestamp = ::std::option::Option::None;
        self.remember_login = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.persistence = ::std::option::Option::None;
        self.website_id = ::std::option::Option::None;
        self.device_details.clear();
        self.guard_data = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.qos_level = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaCredentials_Request {
        static instance: CAuthentication_BeginAuthSessionViaCredentials_Request = CAuthentication_BeginAuthSessionViaCredentials_Request {
            device_friendly_name: ::std::option::Option::None,
            account_name: ::std::option::Option::None,
            encrypted_password: ::std::option::Option::None,
            encryption_timestamp: ::std::option::Option::None,
            remember_login: ::std::option::Option::None,
            platform_type: ::std::option::Option::None,
            persistence: ::std::option::Option::None,
            website_id: ::std::option::Option::None,
            device_details: crate::MessageField::none(),
            guard_data: ::std::option::Option::None,
            language: ::std::option::Option::None,
            qos_level: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_BeginAuthSessionViaCredentials_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaCredentials_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_BeginAuthSessionViaCredentials_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_BeginAuthSessionViaCredentials_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.client_id)
    pub client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.request_id)
    pub request_id: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.interval)
    pub interval: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.allowed_confirmations)
    pub allowed_confirmations: ::std::vec::Vec<CAuthentication_AllowedConfirmation>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.weak_token)
    pub weak_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.agreement_session_url)
    pub agreement_session_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_BeginAuthSessionViaCredentials_Response.extended_error_message)
    pub extended_error_message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_BeginAuthSessionViaCredentials_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaCredentials_Response {
        <CAuthentication_BeginAuthSessionViaCredentials_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaCredentials_Response {
    pub fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Response {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;

    pub fn client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }

    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional bytes request_id = 2;

    pub fn request_id(&self) -> &[u8] {
        match self.request_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request_id(&mut self) {
        self.request_id = ::std::option::Option::None;
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::bytes::Bytes) {
        self.request_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::bytes::Bytes {
        if self.request_id.is_none() {
            self.request_id = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::bytes::Bytes {
        self.request_id.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional float interval = 3;

    pub fn interval(&self) -> f32 {
        self.interval.unwrap_or(0.)
    }

    pub fn clear_interval(&mut self) {
        self.interval = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: f32) {
        self.interval = ::std::option::Option::Some(v);
    }

    // repeated .CAuthentication_AllowedConfirmation allowed_confirmations = 4;

    pub fn allowed_confirmations(&self) -> &[CAuthentication_AllowedConfirmation] {
        &self.allowed_confirmations
    }

    pub fn clear_allowed_confirmations(&mut self) {
        self.allowed_confirmations.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_confirmations(&mut self, v: ::std::vec::Vec<CAuthentication_AllowedConfirmation>) {
        self.allowed_confirmations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_confirmations(&mut self) -> &mut ::std::vec::Vec<CAuthentication_AllowedConfirmation> {
        &mut self.allowed_confirmations
    }

    // Take field
    pub fn take_allowed_confirmations(&mut self) -> ::std::vec::Vec<CAuthentication_AllowedConfirmation> {
        ::std::mem::replace(&mut self.allowed_confirmations, ::std::vec::Vec::new())
    }

    // optional uint64 steamid = 5;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string weak_token = 6;

    pub fn weak_token(&self) -> &str {
        match self.weak_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_weak_token(&mut self) {
        self.weak_token = ::std::option::Option::None;
    }

    pub fn has_weak_token(&self) -> bool {
        self.weak_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weak_token(&mut self, v: ::std::string::String) {
        self.weak_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weak_token(&mut self) -> &mut ::std::string::String {
        if self.weak_token.is_none() {
            self.weak_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.weak_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_weak_token(&mut self) -> ::std::string::String {
        self.weak_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string agreement_session_url = 7;

    pub fn agreement_session_url(&self) -> &str {
        match self.agreement_session_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_agreement_session_url(&mut self) {
        self.agreement_session_url = ::std::option::Option::None;
    }

    pub fn has_agreement_session_url(&self) -> bool {
        self.agreement_session_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_session_url(&mut self, v: ::std::string::String) {
        self.agreement_session_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_session_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_session_url.is_none() {
            self.agreement_session_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.agreement_session_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_session_url(&mut self) -> ::std::string::String {
        self.agreement_session_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string extended_error_message = 8;

    pub fn extended_error_message(&self) -> &str {
        match self.extended_error_message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_extended_error_message(&mut self) {
        self.extended_error_message = ::std::option::Option::None;
    }

    pub fn has_extended_error_message(&self) -> bool {
        self.extended_error_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extended_error_message(&mut self, v: ::std::string::String) {
        self.extended_error_message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extended_error_message(&mut self) -> &mut ::std::string::String {
        if self.extended_error_message.is_none() {
            self.extended_error_message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.extended_error_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_extended_error_message(&mut self) -> ::std::string::String {
        self.extended_error_message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_id",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.client_id },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_id",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.request_id },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.request_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "interval",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.interval },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.interval },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_confirmations",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.allowed_confirmations },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.allowed_confirmations },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.steamid },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "weak_token",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.weak_token },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.weak_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "agreement_session_url",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.agreement_session_url },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.agreement_session_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "extended_error_message",
            |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.extended_error_message },
            |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.extended_error_message },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_BeginAuthSessionViaCredentials_Response>(
            "CAuthentication_BeginAuthSessionViaCredentials_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_BeginAuthSessionViaCredentials_Response {
    const NAME: &'static str = "CAuthentication_BeginAuthSessionViaCredentials_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.request_id = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                29 => {
                    self.interval = ::std::option::Option::Some(is.read_float()?);
                },
                34 => {
                    self.allowed_confirmations.push(is.read_message()?);
                },
                40 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.weak_token = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.agreement_session_url = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.extended_error_message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.request_id.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.interval {
            my_size += 1 + 4;
        }
        for value in &self.allowed_confirmations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(5, v);
        }
        if let Some(v) = self.weak_token.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.agreement_session_url.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        if let Some(v) = self.extended_error_message.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.request_id.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.interval {
            os.write_float(3, v)?;
        }
        for v in &self.allowed_confirmations {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.weak_token.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.agreement_session_url.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.extended_error_message.as_ref() {
            os.write_string(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Response {
        CAuthentication_BeginAuthSessionViaCredentials_Response::new()
    }

    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.request_id = ::std::option::Option::None;
        self.interval = ::std::option::Option::None;
        self.allowed_confirmations.clear();
        self.steamid = ::std::option::Option::None;
        self.weak_token = ::std::option::Option::None;
        self.agreement_session_url = ::std::option::Option::None;
        self.extended_error_message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaCredentials_Response {
        static instance: CAuthentication_BeginAuthSessionViaCredentials_Response = CAuthentication_BeginAuthSessionViaCredentials_Response {
            client_id: ::std::option::Option::None,
            request_id: ::std::option::Option::None,
            interval: ::std::option::Option::None,
            allowed_confirmations: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            weak_token: ::std::option::Option::None,
            agreement_session_url: ::std::option::Option::None,
            extended_error_message: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_BeginAuthSessionViaCredentials_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaCredentials_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_PollAuthSessionStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_PollAuthSessionStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Request.client_id)
    pub client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Request.request_id)
    pub request_id: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Request.token_to_revoke)
    pub token_to_revoke: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_PollAuthSessionStatus_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_PollAuthSessionStatus_Request {
    fn default() -> &'a CAuthentication_PollAuthSessionStatus_Request {
        <CAuthentication_PollAuthSessionStatus_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_PollAuthSessionStatus_Request {
    pub fn new() -> CAuthentication_PollAuthSessionStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;

    pub fn client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }

    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional bytes request_id = 2;

    pub fn request_id(&self) -> &[u8] {
        match self.request_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request_id(&mut self) {
        self.request_id = ::std::option::Option::None;
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::bytes::Bytes) {
        self.request_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::bytes::Bytes {
        if self.request_id.is_none() {
            self.request_id = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::bytes::Bytes {
        self.request_id.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional fixed64 token_to_revoke = 3;

    pub fn token_to_revoke(&self) -> u64 {
        self.token_to_revoke.unwrap_or(0)
    }

    pub fn clear_token_to_revoke(&mut self) {
        self.token_to_revoke = ::std::option::Option::None;
    }

    pub fn has_token_to_revoke(&self) -> bool {
        self.token_to_revoke.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_to_revoke(&mut self, v: u64) {
        self.token_to_revoke = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_id",
            |m: &CAuthentication_PollAuthSessionStatus_Request| { &m.client_id },
            |m: &mut CAuthentication_PollAuthSessionStatus_Request| { &mut m.client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_id",
            |m: &CAuthentication_PollAuthSessionStatus_Request| { &m.request_id },
            |m: &mut CAuthentication_PollAuthSessionStatus_Request| { &mut m.request_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_to_revoke",
            |m: &CAuthentication_PollAuthSessionStatus_Request| { &m.token_to_revoke },
            |m: &mut CAuthentication_PollAuthSessionStatus_Request| { &mut m.token_to_revoke },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_PollAuthSessionStatus_Request>(
            "CAuthentication_PollAuthSessionStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_PollAuthSessionStatus_Request {
    const NAME: &'static str = "CAuthentication_PollAuthSessionStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.request_id = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                25 => {
                    self.token_to_revoke = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.request_id.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.token_to_revoke {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.request_id.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.token_to_revoke {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_PollAuthSessionStatus_Request {
        CAuthentication_PollAuthSessionStatus_Request::new()
    }

    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.request_id = ::std::option::Option::None;
        self.token_to_revoke = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_PollAuthSessionStatus_Request {
        static instance: CAuthentication_PollAuthSessionStatus_Request = CAuthentication_PollAuthSessionStatus_Request {
            client_id: ::std::option::Option::None,
            request_id: ::std::option::Option::None,
            token_to_revoke: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_PollAuthSessionStatus_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_PollAuthSessionStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_PollAuthSessionStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_PollAuthSessionStatus_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_PollAuthSessionStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_PollAuthSessionStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.new_client_id)
    pub new_client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.new_challenge_url)
    pub new_challenge_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.refresh_token)
    pub refresh_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.access_token)
    pub access_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.had_remote_interaction)
    pub had_remote_interaction: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.account_name)
    pub account_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.new_guard_data)
    pub new_guard_data: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_PollAuthSessionStatus_Response.agreement_session_url)
    pub agreement_session_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_PollAuthSessionStatus_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_PollAuthSessionStatus_Response {
    fn default() -> &'a CAuthentication_PollAuthSessionStatus_Response {
        <CAuthentication_PollAuthSessionStatus_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_PollAuthSessionStatus_Response {
    pub fn new() -> CAuthentication_PollAuthSessionStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint64 new_client_id = 1;

    pub fn new_client_id(&self) -> u64 {
        self.new_client_id.unwrap_or(0)
    }

    pub fn clear_new_client_id(&mut self) {
        self.new_client_id = ::std::option::Option::None;
    }

    pub fn has_new_client_id(&self) -> bool {
        self.new_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_client_id(&mut self, v: u64) {
        self.new_client_id = ::std::option::Option::Some(v);
    }

    // optional string new_challenge_url = 2;

    pub fn new_challenge_url(&self) -> &str {
        match self.new_challenge_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_new_challenge_url(&mut self) {
        self.new_challenge_url = ::std::option::Option::None;
    }

    pub fn has_new_challenge_url(&self) -> bool {
        self.new_challenge_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_challenge_url(&mut self, v: ::std::string::String) {
        self.new_challenge_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_challenge_url(&mut self) -> &mut ::std::string::String {
        if self.new_challenge_url.is_none() {
            self.new_challenge_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.new_challenge_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_challenge_url(&mut self) -> ::std::string::String {
        self.new_challenge_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string refresh_token = 3;

    pub fn refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_refresh_token(&mut self) {
        self.refresh_token = ::std::option::Option::None;
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string access_token = 4;

    pub fn access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool had_remote_interaction = 5;

    pub fn had_remote_interaction(&self) -> bool {
        self.had_remote_interaction.unwrap_or(false)
    }

    pub fn clear_had_remote_interaction(&mut self) {
        self.had_remote_interaction = ::std::option::Option::None;
    }

    pub fn has_had_remote_interaction(&self) -> bool {
        self.had_remote_interaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_had_remote_interaction(&mut self, v: bool) {
        self.had_remote_interaction = ::std::option::Option::Some(v);
    }

    // optional string account_name = 6;

    pub fn account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_name(&mut self) {
        self.account_name = ::std::option::Option::None;
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string new_guard_data = 7;

    pub fn new_guard_data(&self) -> &str {
        match self.new_guard_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_new_guard_data(&mut self) {
        self.new_guard_data = ::std::option::Option::None;
    }

    pub fn has_new_guard_data(&self) -> bool {
        self.new_guard_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_guard_data(&mut self, v: ::std::string::String) {
        self.new_guard_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_guard_data(&mut self) -> &mut ::std::string::String {
        if self.new_guard_data.is_none() {
            self.new_guard_data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.new_guard_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_guard_data(&mut self) -> ::std::string::String {
        self.new_guard_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string agreement_session_url = 8;

    pub fn agreement_session_url(&self) -> &str {
        match self.agreement_session_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_agreement_session_url(&mut self) {
        self.agreement_session_url = ::std::option::Option::None;
    }

    pub fn has_agreement_session_url(&self) -> bool {
        self.agreement_session_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_session_url(&mut self, v: ::std::string::String) {
        self.agreement_session_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_session_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_session_url.is_none() {
            self.agreement_session_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.agreement_session_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_session_url(&mut self) -> ::std::string::String {
        self.agreement_session_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_client_id",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.new_client_id },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.new_client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_challenge_url",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.new_challenge_url },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.new_challenge_url },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "refresh_token",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.refresh_token },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.refresh_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "access_token",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.access_token },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.access_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "had_remote_interaction",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.had_remote_interaction },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.had_remote_interaction },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_name",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.account_name },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.account_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_guard_data",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.new_guard_data },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.new_guard_data },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "agreement_session_url",
            |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.agreement_session_url },
            |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.agreement_session_url },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_PollAuthSessionStatus_Response>(
            "CAuthentication_PollAuthSessionStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_PollAuthSessionStatus_Response {
    const NAME: &'static str = "CAuthentication_PollAuthSessionStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.new_client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.new_challenge_url = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.refresh_token = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.access_token = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.had_remote_interaction = ::std::option::Option::Some(is.read_bool()?);
                },
                50 => {
                    self.account_name = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.new_guard_data = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.agreement_session_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.new_client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.new_challenge_url.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.refresh_token.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.access_token.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.had_remote_interaction {
            my_size += 1 + 1;
        }
        if let Some(v) = self.account_name.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.new_guard_data.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        if let Some(v) = self.agreement_session_url.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.new_client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.new_challenge_url.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.refresh_token.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.access_token.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.had_remote_interaction {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.account_name.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.new_guard_data.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.agreement_session_url.as_ref() {
            os.write_string(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_PollAuthSessionStatus_Response {
        CAuthentication_PollAuthSessionStatus_Response::new()
    }

    fn clear(&mut self) {
        self.new_client_id = ::std::option::Option::None;
        self.new_challenge_url = ::std::option::Option::None;
        self.refresh_token = ::std::option::Option::None;
        self.access_token = ::std::option::Option::None;
        self.had_remote_interaction = ::std::option::Option::None;
        self.account_name = ::std::option::Option::None;
        self.new_guard_data = ::std::option::Option::None;
        self.agreement_session_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_PollAuthSessionStatus_Response {
        static instance: CAuthentication_PollAuthSessionStatus_Response = CAuthentication_PollAuthSessionStatus_Response {
            new_client_id: ::std::option::Option::None,
            new_challenge_url: ::std::option::Option::None,
            refresh_token: ::std::option::Option::None,
            access_token: ::std::option::Option::None,
            had_remote_interaction: ::std::option::Option::None,
            account_name: ::std::option::Option::None,
            new_guard_data: ::std::option::Option::None,
            agreement_session_url: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_PollAuthSessionStatus_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_PollAuthSessionStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_PollAuthSessionStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_PollAuthSessionStatus_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_GetAuthSessionInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_GetAuthSessionInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Request.client_id)
    pub client_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_GetAuthSessionInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionInfo_Request {
    fn default() -> &'a CAuthentication_GetAuthSessionInfo_Request {
        <CAuthentication_GetAuthSessionInfo_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionInfo_Request {
    pub fn new() -> CAuthentication_GetAuthSessionInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;

    pub fn client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }

    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_id",
            |m: &CAuthentication_GetAuthSessionInfo_Request| { &m.client_id },
            |m: &mut CAuthentication_GetAuthSessionInfo_Request| { &mut m.client_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_GetAuthSessionInfo_Request>(
            "CAuthentication_GetAuthSessionInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_GetAuthSessionInfo_Request {
    const NAME: &'static str = "CAuthentication_GetAuthSessionInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_GetAuthSessionInfo_Request {
        CAuthentication_GetAuthSessionInfo_Request::new()
    }

    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionInfo_Request {
        static instance: CAuthentication_GetAuthSessionInfo_Request = CAuthentication_GetAuthSessionInfo_Request {
            client_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_GetAuthSessionInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_GetAuthSessionInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_GetAuthSessionInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_GetAuthSessionInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_GetAuthSessionInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_GetAuthSessionInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.ip)
    pub ip: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.geoloc)
    pub geoloc: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.city)
    pub city: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.state)
    pub state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.country)
    pub country: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.platform_type)
    pub platform_type: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenPlatformType>>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.device_friendly_name)
    pub device_friendly_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.version)
    pub version: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.login_history)
    pub login_history: ::std::option::Option<crate::EnumOrUnknown<EAuthSessionSecurityHistory>>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.requestor_location_mismatch)
    pub requestor_location_mismatch: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.high_usage_login)
    pub high_usage_login: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionInfo_Response.requested_persistence)
    pub requested_persistence: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESessionPersistence>>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_GetAuthSessionInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionInfo_Response {
    fn default() -> &'a CAuthentication_GetAuthSessionInfo_Response {
        <CAuthentication_GetAuthSessionInfo_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionInfo_Response {
    pub fn new() -> CAuthentication_GetAuthSessionInfo_Response {
        ::std::default::Default::default()
    }

    // optional string ip = 1;

    pub fn ip(&self) -> &str {
        match self.ip.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        if self.ip.is_none() {
            self.ip = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        self.ip.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string geoloc = 2;

    pub fn geoloc(&self) -> &str {
        match self.geoloc.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_geoloc(&mut self) {
        self.geoloc = ::std::option::Option::None;
    }

    pub fn has_geoloc(&self) -> bool {
        self.geoloc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_geoloc(&mut self, v: ::std::string::String) {
        self.geoloc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_geoloc(&mut self) -> &mut ::std::string::String {
        if self.geoloc.is_none() {
            self.geoloc = ::std::option::Option::Some(::std::string::String::new());
        }
        self.geoloc.as_mut().unwrap()
    }

    // Take field
    pub fn take_geoloc(&mut self) -> ::std::string::String {
        self.geoloc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string city = 3;

    pub fn city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_city(&mut self) {
        self.city = ::std::option::Option::None;
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city = ::std::option::Option::Some(::std::string::String::new());
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string state = 4;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string country = 5;

    pub fn country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country(&mut self) {
        self.country = ::std::option::Option::None;
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenPlatformType platform_type = 6;

    pub fn platform_type(&self) -> EAuthTokenPlatformType {
        match self.platform_type {
            Some(e) => e.enum_value_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            None => EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
        }
    }

    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string device_friendly_name = 7;

    pub fn device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name = ::std::option::Option::None;
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 version = 8;

    pub fn version(&self) -> i32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional .EAuthSessionSecurityHistory login_history = 9;

    pub fn login_history(&self) -> EAuthSessionSecurityHistory {
        match self.login_history {
            Some(e) => e.enum_value_or(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid),
            None => EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid,
        }
    }

    pub fn clear_login_history(&mut self) {
        self.login_history = ::std::option::Option::None;
    }

    pub fn has_login_history(&self) -> bool {
        self.login_history.is_some()
    }

    // Param is passed by value, moved
    pub fn set_login_history(&mut self, v: EAuthSessionSecurityHistory) {
        self.login_history = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool requestor_location_mismatch = 10;

    pub fn requestor_location_mismatch(&self) -> bool {
        self.requestor_location_mismatch.unwrap_or(false)
    }

    pub fn clear_requestor_location_mismatch(&mut self) {
        self.requestor_location_mismatch = ::std::option::Option::None;
    }

    pub fn has_requestor_location_mismatch(&self) -> bool {
        self.requestor_location_mismatch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestor_location_mismatch(&mut self, v: bool) {
        self.requestor_location_mismatch = ::std::option::Option::Some(v);
    }

    // optional bool high_usage_login = 11;

    pub fn high_usage_login(&self) -> bool {
        self.high_usage_login.unwrap_or(false)
    }

    pub fn clear_high_usage_login(&mut self) {
        self.high_usage_login = ::std::option::Option::None;
    }

    pub fn has_high_usage_login(&self) -> bool {
        self.high_usage_login.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_usage_login(&mut self, v: bool) {
        self.high_usage_login = ::std::option::Option::Some(v);
    }

    // optional .ESessionPersistence requested_persistence = 12;

    pub fn requested_persistence(&self) -> super::enums::ESessionPersistence {
        match self.requested_persistence {
            Some(e) => e.enum_value_or(super::enums::ESessionPersistence::k_ESessionPersistence_Invalid),
            None => super::enums::ESessionPersistence::k_ESessionPersistence_Invalid,
        }
    }

    pub fn clear_requested_persistence(&mut self) {
        self.requested_persistence = ::std::option::Option::None;
    }

    pub fn has_requested_persistence(&self) -> bool {
        self.requested_persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requested_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.requested_persistence = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.ip },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.ip },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "geoloc",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.geoloc },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.geoloc },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "city",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.city },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.city },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.state },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.state },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "country",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.country },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.country },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform_type",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.platform_type },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.platform_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_friendly_name",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.device_friendly_name },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.device_friendly_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.version },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "login_history",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.login_history },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.login_history },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestor_location_mismatch",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.requestor_location_mismatch },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.requestor_location_mismatch },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "high_usage_login",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.high_usage_login },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.high_usage_login },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requested_persistence",
            |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.requested_persistence },
            |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.requested_persistence },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_GetAuthSessionInfo_Response>(
            "CAuthentication_GetAuthSessionInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_GetAuthSessionInfo_Response {
    const NAME: &'static str = "CAuthentication_GetAuthSessionInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ip = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.geoloc = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.city = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.country = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.platform_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                58 => {
                    self.device_friendly_name = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.version = ::std::option::Option::Some(is.read_int32()?);
                },
                72 => {
                    self.login_history = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                80 => {
                    self.requestor_location_mismatch = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.high_usage_login = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.requested_persistence = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ip.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.geoloc.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.city.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.state.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.country.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.platform_type {
            my_size += crate::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.device_friendly_name.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        if let Some(v) = self.version {
            my_size += crate::rt::int32_size(8, v);
        }
        if let Some(v) = self.login_history {
            my_size += crate::rt::int32_size(9, v.value());
        }
        if let Some(v) = self.requestor_location_mismatch {
            my_size += 1 + 1;
        }
        if let Some(v) = self.high_usage_login {
            my_size += 1 + 1;
        }
        if let Some(v) = self.requested_persistence {
            my_size += crate::rt::int32_size(12, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.ip.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.geoloc.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.city.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.country.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(6, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.device_friendly_name.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.version {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.login_history {
            os.write_enum(9, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.requestor_location_mismatch {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.high_usage_login {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.requested_persistence {
            os.write_enum(12, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_GetAuthSessionInfo_Response {
        CAuthentication_GetAuthSessionInfo_Response::new()
    }

    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.geoloc = ::std::option::Option::None;
        self.city = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.country = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.device_friendly_name = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.login_history = ::std::option::Option::None;
        self.requestor_location_mismatch = ::std::option::Option::None;
        self.high_usage_login = ::std::option::Option::None;
        self.requested_persistence = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionInfo_Response {
        static instance: CAuthentication_GetAuthSessionInfo_Response = CAuthentication_GetAuthSessionInfo_Response {
            ip: ::std::option::Option::None,
            geoloc: ::std::option::Option::None,
            city: ::std::option::Option::None,
            state: ::std::option::Option::None,
            country: ::std::option::Option::None,
            platform_type: ::std::option::Option::None,
            device_friendly_name: ::std::option::Option::None,
            version: ::std::option::Option::None,
            login_history: ::std::option::Option::None,
            requestor_location_mismatch: ::std::option::Option::None,
            high_usage_login: ::std::option::Option::None,
            requested_persistence: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_GetAuthSessionInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_GetAuthSessionInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_GetAuthSessionInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_GetAuthSessionInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.version)
    pub version: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.client_id)
    pub client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.signature)
    pub signature: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.confirm)
    pub confirm: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.persistence)
    pub persistence: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESessionPersistence>>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        <CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        ::std::default::Default::default()
    }

    // optional int32 version = 1;

    pub fn version(&self) -> i32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint64 client_id = 2;

    pub fn client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }

    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes signature = 4;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::bytes::Bytes) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::bytes::Bytes {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::bytes::Bytes {
        self.signature.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bool confirm = 5;

    pub fn confirm(&self) -> bool {
        self.confirm.unwrap_or(false)
    }

    pub fn clear_confirm(&mut self) {
        self.confirm = ::std::option::Option::None;
    }

    pub fn has_confirm(&self) -> bool {
        self.confirm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_confirm(&mut self, v: bool) {
        self.confirm = ::std::option::Option::Some(v);
    }

    // optional .ESessionPersistence persistence = 6;

    pub fn persistence(&self) -> super::enums::ESessionPersistence {
        match self.persistence {
            Some(e) => e.enum_value_or(super::enums::ESessionPersistence::k_ESessionPersistence_Persistent),
            None => super::enums::ESessionPersistence::k_ESessionPersistence_Persistent,
        }
    }

    pub fn clear_persistence(&mut self) {
        self.persistence = ::std::option::Option::None;
    }

    pub fn has_persistence(&self) -> bool {
        self.persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.persistence = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.version },
            |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_id",
            |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.client_id },
            |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.steamid },
            |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.signature },
            |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.signature },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "confirm",
            |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.confirm },
            |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.confirm },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "persistence",
            |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.persistence },
            |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.persistence },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request>(
            "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    const NAME: &'static str = "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    self.signature = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                40 => {
                    self.confirm = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.persistence = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.client_id {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += crate::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.confirm {
            my_size += 1 + 1;
        }
        if let Some(v) = self.persistence {
            my_size += crate::rt::int32_size(6, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.version {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.client_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.confirm {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.persistence {
            os.write_enum(6, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.client_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.confirm = ::std::option::Option::None;
        self.persistence = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        static instance: CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request = CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
            version: ::std::option::Option::None,
            client_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            confirm: ::std::option::Option::None,
            persistence: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        <CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response>(
            "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    const NAME: &'static str = "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        static instance: CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response = CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.client_id)
    pub client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.code)
    pub code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.code_type)
    pub code_type: ::std::option::Option<crate::EnumOrUnknown<EAuthSessionGuardType>>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        <CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;

    pub fn client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }

    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string code = 3;

    pub fn code(&self) -> &str {
        match self.code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        if self.code.is_none() {
            self.code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.code.as_mut().unwrap()
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        self.code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthSessionGuardType code_type = 4;

    pub fn code_type(&self) -> EAuthSessionGuardType {
        match self.code_type {
            Some(e) => e.enum_value_or(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown),
            None => EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown,
        }
    }

    pub fn clear_code_type(&mut self) {
        self.code_type = ::std::option::Option::None;
    }

    pub fn has_code_type(&self) -> bool {
        self.code_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code_type(&mut self, v: EAuthSessionGuardType) {
        self.code_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_id",
            |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.client_id },
            |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.steamid },
            |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "code",
            |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.code },
            |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "code_type",
            |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.code_type },
            |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.code_type },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request>(
            "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    const NAME: &'static str = "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.code = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.code_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.code.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.code_type {
            my_size += crate::rt::int32_size(4, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.code_type {
            os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request::new()
    }

    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.code = ::std::option::Option::None;
        self.code_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        static instance: CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request = CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
            client_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            code: ::std::option::Option::None,
            code_type: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response.agreement_session_url)
    pub agreement_session_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        <CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        ::std::default::Default::default()
    }

    // optional string agreement_session_url = 7;

    pub fn agreement_session_url(&self) -> &str {
        match self.agreement_session_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_agreement_session_url(&mut self) {
        self.agreement_session_url = ::std::option::Option::None;
    }

    pub fn has_agreement_session_url(&self) -> bool {
        self.agreement_session_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_session_url(&mut self, v: ::std::string::String) {
        self.agreement_session_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_session_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_session_url.is_none() {
            self.agreement_session_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.agreement_session_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_session_url(&mut self) -> ::std::string::String {
        self.agreement_session_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "agreement_session_url",
            |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response| { &m.agreement_session_url },
            |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response| { &mut m.agreement_session_url },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response>(
            "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    const NAME: &'static str = "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.agreement_session_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.agreement_session_url.as_ref() {
            my_size += crate::rt::string_size(7, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.agreement_session_url.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response::new()
    }

    fn clear(&mut self) {
        self.agreement_session_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        static instance: CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response = CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
            agreement_session_url: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_AccessToken_GenerateForApp_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_AccessToken_GenerateForApp_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_AccessToken_GenerateForApp_Request.refresh_token)
    pub refresh_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_AccessToken_GenerateForApp_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_AccessToken_GenerateForApp_Request.renewal_type)
    pub renewal_type: ::std::option::Option<crate::EnumOrUnknown<ETokenRenewalType>>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_AccessToken_GenerateForApp_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_AccessToken_GenerateForApp_Request {
    fn default() -> &'a CAuthentication_AccessToken_GenerateForApp_Request {
        <CAuthentication_AccessToken_GenerateForApp_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_AccessToken_GenerateForApp_Request {
    pub fn new() -> CAuthentication_AccessToken_GenerateForApp_Request {
        ::std::default::Default::default()
    }

    // optional string refresh_token = 1;

    pub fn refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_refresh_token(&mut self) {
        self.refresh_token = ::std::option::Option::None;
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .ETokenRenewalType renewal_type = 3;

    pub fn renewal_type(&self) -> ETokenRenewalType {
        match self.renewal_type {
            Some(e) => e.enum_value_or(ETokenRenewalType::k_ETokenRenewalType_None),
            None => ETokenRenewalType::k_ETokenRenewalType_None,
        }
    }

    pub fn clear_renewal_type(&mut self) {
        self.renewal_type = ::std::option::Option::None;
    }

    pub fn has_renewal_type(&self) -> bool {
        self.renewal_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_renewal_type(&mut self, v: ETokenRenewalType) {
        self.renewal_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "refresh_token",
            |m: &CAuthentication_AccessToken_GenerateForApp_Request| { &m.refresh_token },
            |m: &mut CAuthentication_AccessToken_GenerateForApp_Request| { &mut m.refresh_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthentication_AccessToken_GenerateForApp_Request| { &m.steamid },
            |m: &mut CAuthentication_AccessToken_GenerateForApp_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "renewal_type",
            |m: &CAuthentication_AccessToken_GenerateForApp_Request| { &m.renewal_type },
            |m: &mut CAuthentication_AccessToken_GenerateForApp_Request| { &mut m.renewal_type },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_AccessToken_GenerateForApp_Request>(
            "CAuthentication_AccessToken_GenerateForApp_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_AccessToken_GenerateForApp_Request {
    const NAME: &'static str = "CAuthentication_AccessToken_GenerateForApp_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.refresh_token = ::std::option::Option::Some(is.read_string()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.renewal_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.refresh_token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.renewal_type {
            my_size += crate::rt::int32_size(3, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.refresh_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.renewal_type {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_AccessToken_GenerateForApp_Request {
        CAuthentication_AccessToken_GenerateForApp_Request::new()
    }

    fn clear(&mut self) {
        self.refresh_token = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.renewal_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_AccessToken_GenerateForApp_Request {
        static instance: CAuthentication_AccessToken_GenerateForApp_Request = CAuthentication_AccessToken_GenerateForApp_Request {
            refresh_token: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            renewal_type: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_AccessToken_GenerateForApp_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_AccessToken_GenerateForApp_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_AccessToken_GenerateForApp_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_AccessToken_GenerateForApp_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_AccessToken_GenerateForApp_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_AccessToken_GenerateForApp_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_AccessToken_GenerateForApp_Response.access_token)
    pub access_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_AccessToken_GenerateForApp_Response.refresh_token)
    pub refresh_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_AccessToken_GenerateForApp_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_AccessToken_GenerateForApp_Response {
    fn default() -> &'a CAuthentication_AccessToken_GenerateForApp_Response {
        <CAuthentication_AccessToken_GenerateForApp_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_AccessToken_GenerateForApp_Response {
    pub fn new() -> CAuthentication_AccessToken_GenerateForApp_Response {
        ::std::default::Default::default()
    }

    // optional string access_token = 1;

    pub fn access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string refresh_token = 2;

    pub fn refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_refresh_token(&mut self) {
        self.refresh_token = ::std::option::Option::None;
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "access_token",
            |m: &CAuthentication_AccessToken_GenerateForApp_Response| { &m.access_token },
            |m: &mut CAuthentication_AccessToken_GenerateForApp_Response| { &mut m.access_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "refresh_token",
            |m: &CAuthentication_AccessToken_GenerateForApp_Response| { &m.refresh_token },
            |m: &mut CAuthentication_AccessToken_GenerateForApp_Response| { &mut m.refresh_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_AccessToken_GenerateForApp_Response>(
            "CAuthentication_AccessToken_GenerateForApp_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_AccessToken_GenerateForApp_Response {
    const NAME: &'static str = "CAuthentication_AccessToken_GenerateForApp_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.access_token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.refresh_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.access_token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.refresh_token.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.access_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.refresh_token.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_AccessToken_GenerateForApp_Response {
        CAuthentication_AccessToken_GenerateForApp_Response::new()
    }

    fn clear(&mut self) {
        self.access_token = ::std::option::Option::None;
        self.refresh_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_AccessToken_GenerateForApp_Response {
        static instance: CAuthentication_AccessToken_GenerateForApp_Response = CAuthentication_AccessToken_GenerateForApp_Response {
            access_token: ::std::option::Option::None,
            refresh_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_AccessToken_GenerateForApp_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_AccessToken_GenerateForApp_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_AccessToken_GenerateForApp_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_AccessToken_GenerateForApp_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_RefreshToken_Enumerate_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_RefreshToken_Enumerate_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_RefreshToken_Enumerate_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Enumerate_Request {
    fn default() -> &'a CAuthentication_RefreshToken_Enumerate_Request {
        <CAuthentication_RefreshToken_Enumerate_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Enumerate_Request {
    pub fn new() -> CAuthentication_RefreshToken_Enumerate_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_RefreshToken_Enumerate_Request>(
            "CAuthentication_RefreshToken_Enumerate_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_RefreshToken_Enumerate_Request {
    const NAME: &'static str = "CAuthentication_RefreshToken_Enumerate_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_RefreshToken_Enumerate_Request {
        CAuthentication_RefreshToken_Enumerate_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Enumerate_Request {
        static instance: CAuthentication_RefreshToken_Enumerate_Request = CAuthentication_RefreshToken_Enumerate_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_RefreshToken_Enumerate_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_RefreshToken_Enumerate_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_RefreshToken_Enumerate_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_RefreshToken_Enumerate_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_RefreshToken_Enumerate_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_RefreshToken_Enumerate_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.refresh_tokens)
    pub refresh_tokens: ::std::vec::Vec<cauthentication_refresh_token_enumerate_response::RefreshTokenDescription>,
    // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.requesting_token)
    pub requesting_token: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_RefreshToken_Enumerate_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Enumerate_Response {
    fn default() -> &'a CAuthentication_RefreshToken_Enumerate_Response {
        <CAuthentication_RefreshToken_Enumerate_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Enumerate_Response {
    pub fn new() -> CAuthentication_RefreshToken_Enumerate_Response {
        ::std::default::Default::default()
    }

    // repeated .CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription refresh_tokens = 1;

    pub fn refresh_tokens(&self) -> &[cauthentication_refresh_token_enumerate_response::RefreshTokenDescription] {
        &self.refresh_tokens
    }

    pub fn clear_refresh_tokens(&mut self) {
        self.refresh_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_tokens(&mut self, v: ::std::vec::Vec<cauthentication_refresh_token_enumerate_response::RefreshTokenDescription>) {
        self.refresh_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_tokens(&mut self) -> &mut ::std::vec::Vec<cauthentication_refresh_token_enumerate_response::RefreshTokenDescription> {
        &mut self.refresh_tokens
    }

    // Take field
    pub fn take_refresh_tokens(&mut self) -> ::std::vec::Vec<cauthentication_refresh_token_enumerate_response::RefreshTokenDescription> {
        ::std::mem::replace(&mut self.refresh_tokens, ::std::vec::Vec::new())
    }

    // optional fixed64 requesting_token = 2;

    pub fn requesting_token(&self) -> u64 {
        self.requesting_token.unwrap_or(0)
    }

    pub fn clear_requesting_token(&mut self) {
        self.requesting_token = ::std::option::Option::None;
    }

    pub fn has_requesting_token(&self) -> bool {
        self.requesting_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requesting_token(&mut self, v: u64) {
        self.requesting_token = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "refresh_tokens",
            |m: &CAuthentication_RefreshToken_Enumerate_Response| { &m.refresh_tokens },
            |m: &mut CAuthentication_RefreshToken_Enumerate_Response| { &mut m.refresh_tokens },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requesting_token",
            |m: &CAuthentication_RefreshToken_Enumerate_Response| { &m.requesting_token },
            |m: &mut CAuthentication_RefreshToken_Enumerate_Response| { &mut m.requesting_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_RefreshToken_Enumerate_Response>(
            "CAuthentication_RefreshToken_Enumerate_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_RefreshToken_Enumerate_Response {
    const NAME: &'static str = "CAuthentication_RefreshToken_Enumerate_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.refresh_tokens.push(is.read_message()?);
                },
                17 => {
                    self.requesting_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.refresh_tokens {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.requesting_token {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.refresh_tokens {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.requesting_token {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_RefreshToken_Enumerate_Response {
        CAuthentication_RefreshToken_Enumerate_Response::new()
    }

    fn clear(&mut self) {
        self.refresh_tokens.clear();
        self.requesting_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Enumerate_Response {
        static instance: CAuthentication_RefreshToken_Enumerate_Response = CAuthentication_RefreshToken_Enumerate_Response {
            refresh_tokens: ::std::vec::Vec::new(),
            requesting_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_RefreshToken_Enumerate_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_RefreshToken_Enumerate_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_RefreshToken_Enumerate_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_RefreshToken_Enumerate_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAuthentication_RefreshToken_Enumerate_Response`
pub mod cauthentication_refresh_token_enumerate_response {
    // @@protoc_insertion_point(message:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TokenUsageEvent {
        // message fields
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.time)
        pub time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.ip)
        pub ip: crate::MessageField<super::super::steammessages_base::CMsgIPAddress>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.locale)
        pub locale: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.country)
        pub country: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.state)
        pub state: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.city)
        pub city: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TokenUsageEvent {
        fn default() -> &'a TokenUsageEvent {
            <TokenUsageEvent as crate::Message>::default_instance()
        }
    }

    impl TokenUsageEvent {
        pub fn new() -> TokenUsageEvent {
            ::std::default::Default::default()
        }

        // optional uint32 time = 1;

        pub fn time(&self) -> u32 {
            self.time.unwrap_or(0)
        }

        pub fn clear_time(&mut self) {
            self.time = ::std::option::Option::None;
        }

        pub fn has_time(&self) -> bool {
            self.time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time(&mut self, v: u32) {
            self.time = ::std::option::Option::Some(v);
        }

        // optional .CMsgIPAddress ip = 2;

        pub fn ip(&self) -> &super::super::steammessages_base::CMsgIPAddress {
            self.ip.as_ref().unwrap_or_else(|| <super::super::steammessages_base::CMsgIPAddress as crate::Message>::default_instance())
        }

        pub fn clear_ip(&mut self) {
            self.ip.clear();
        }

        pub fn has_ip(&self) -> bool {
            self.ip.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ip(&mut self, v: super::super::steammessages_base::CMsgIPAddress) {
            self.ip = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_ip(&mut self) -> &mut super::super::steammessages_base::CMsgIPAddress {
            self.ip.mut_or_insert_default()
        }

        // Take field
        pub fn take_ip(&mut self) -> super::super::steammessages_base::CMsgIPAddress {
            self.ip.take().unwrap_or_else(|| super::super::steammessages_base::CMsgIPAddress::new())
        }

        // optional string locale = 3;

        pub fn locale(&self) -> &str {
            match self.locale.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_locale(&mut self) {
            self.locale = ::std::option::Option::None;
        }

        pub fn has_locale(&self) -> bool {
            self.locale.is_some()
        }

        // Param is passed by value, moved
        pub fn set_locale(&mut self, v: ::std::string::String) {
            self.locale = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_locale(&mut self) -> &mut ::std::string::String {
            if self.locale.is_none() {
                self.locale = ::std::option::Option::Some(::std::string::String::new());
            }
            self.locale.as_mut().unwrap()
        }

        // Take field
        pub fn take_locale(&mut self) -> ::std::string::String {
            self.locale.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string country = 4;

        pub fn country(&self) -> &str {
            match self.country.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_country(&mut self) {
            self.country = ::std::option::Option::None;
        }

        pub fn has_country(&self) -> bool {
            self.country.is_some()
        }

        // Param is passed by value, moved
        pub fn set_country(&mut self, v: ::std::string::String) {
            self.country = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_country(&mut self) -> &mut ::std::string::String {
            if self.country.is_none() {
                self.country = ::std::option::Option::Some(::std::string::String::new());
            }
            self.country.as_mut().unwrap()
        }

        // Take field
        pub fn take_country(&mut self) -> ::std::string::String {
            self.country.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string state = 5;

        pub fn state(&self) -> &str {
            match self.state.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_state(&mut self) {
            self.state = ::std::option::Option::None;
        }

        pub fn has_state(&self) -> bool {
            self.state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_state(&mut self, v: ::std::string::String) {
            self.state = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_state(&mut self) -> &mut ::std::string::String {
            if self.state.is_none() {
                self.state = ::std::option::Option::Some(::std::string::String::new());
            }
            self.state.as_mut().unwrap()
        }

        // Take field
        pub fn take_state(&mut self) -> ::std::string::String {
            self.state.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string city = 6;

        pub fn city(&self) -> &str {
            match self.city.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_city(&mut self) {
            self.city = ::std::option::Option::None;
        }

        pub fn has_city(&self) -> bool {
            self.city.is_some()
        }

        // Param is passed by value, moved
        pub fn set_city(&mut self, v: ::std::string::String) {
            self.city = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_city(&mut self) -> &mut ::std::string::String {
            if self.city.is_none() {
                self.city = ::std::option::Option::Some(::std::string::String::new());
            }
            self.city.as_mut().unwrap()
        }

        // Take field
        pub fn take_city(&mut self) -> ::std::string::String {
            self.city.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time",
                |m: &TokenUsageEvent| { &m.time },
                |m: &mut TokenUsageEvent| { &mut m.time },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::super::steammessages_base::CMsgIPAddress>(
                "ip",
                |m: &TokenUsageEvent| { &m.ip },
                |m: &mut TokenUsageEvent| { &mut m.ip },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "locale",
                |m: &TokenUsageEvent| { &m.locale },
                |m: &mut TokenUsageEvent| { &mut m.locale },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "country",
                |m: &TokenUsageEvent| { &m.country },
                |m: &mut TokenUsageEvent| { &mut m.country },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "state",
                |m: &TokenUsageEvent| { &m.state },
                |m: &mut TokenUsageEvent| { &mut m.state },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "city",
                |m: &TokenUsageEvent| { &m.city },
                |m: &mut TokenUsageEvent| { &mut m.city },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<TokenUsageEvent>(
                "CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for TokenUsageEvent {
        const NAME: &'static str = "TokenUsageEvent";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.ip)?;
                    },
                    26 => {
                        self.locale = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.country = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.state = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.city = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.time {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.ip.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.locale.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.country.as_ref() {
                my_size += crate::rt::string_size(4, &v);
            }
            if let Some(v) = self.state.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.city.as_ref() {
                my_size += crate::rt::string_size(6, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.time {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.ip.as_ref() {
                crate::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.locale.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.country.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.state.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.city.as_ref() {
                os.write_string(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TokenUsageEvent {
            TokenUsageEvent::new()
        }

        fn clear(&mut self) {
            self.time = ::std::option::Option::None;
            self.ip.clear();
            self.locale = ::std::option::Option::None;
            self.country = ::std::option::Option::None;
            self.state = ::std::option::Option::None;
            self.city = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TokenUsageEvent {
            static instance: TokenUsageEvent = TokenUsageEvent {
                time: ::std::option::Option::None,
                ip: crate::MessageField::none(),
                locale: ::std::option::Option::None,
                country: ::std::option::Option::None,
                state: ::std::option::Option::None,
                city: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for TokenUsageEvent {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TokenUsageEvent {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for TokenUsageEvent {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RefreshTokenDescription {
        // message fields
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.token_id)
        pub token_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.token_description)
        pub token_description: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.time_updated)
        pub time_updated: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.platform_type)
        pub platform_type: ::std::option::Option<crate::EnumOrUnknown<super::EAuthTokenPlatformType>>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.logged_in)
        pub logged_in: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.os_platform)
        pub os_platform: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.auth_type)
        pub auth_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.gaming_device_type)
        pub gaming_device_type: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.first_seen)
        pub first_seen: crate::MessageField<TokenUsageEvent>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.last_seen)
        pub last_seen: crate::MessageField<TokenUsageEvent>,
        // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.os_type)
        pub os_type: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RefreshTokenDescription {
        fn default() -> &'a RefreshTokenDescription {
            <RefreshTokenDescription as crate::Message>::default_instance()
        }
    }

    impl RefreshTokenDescription {
        pub fn new() -> RefreshTokenDescription {
            ::std::default::Default::default()
        }

        // optional fixed64 token_id = 1;

        pub fn token_id(&self) -> u64 {
            self.token_id.unwrap_or(0)
        }

        pub fn clear_token_id(&mut self) {
            self.token_id = ::std::option::Option::None;
        }

        pub fn has_token_id(&self) -> bool {
            self.token_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_id(&mut self, v: u64) {
            self.token_id = ::std::option::Option::Some(v);
        }

        // optional string token_description = 2;

        pub fn token_description(&self) -> &str {
            match self.token_description.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_token_description(&mut self) {
            self.token_description = ::std::option::Option::None;
        }

        pub fn has_token_description(&self) -> bool {
            self.token_description.is_some()
        }

        // Param is passed by value, moved
        pub fn set_token_description(&mut self, v: ::std::string::String) {
            self.token_description = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_token_description(&mut self) -> &mut ::std::string::String {
            if self.token_description.is_none() {
                self.token_description = ::std::option::Option::Some(::std::string::String::new());
            }
            self.token_description.as_mut().unwrap()
        }

        // Take field
        pub fn take_token_description(&mut self) -> ::std::string::String {
            self.token_description.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 time_updated = 3;

        pub fn time_updated(&self) -> u32 {
            self.time_updated.unwrap_or(0)
        }

        pub fn clear_time_updated(&mut self) {
            self.time_updated = ::std::option::Option::None;
        }

        pub fn has_time_updated(&self) -> bool {
            self.time_updated.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_updated(&mut self, v: u32) {
            self.time_updated = ::std::option::Option::Some(v);
        }

        // optional .EAuthTokenPlatformType platform_type = 4;

        pub fn platform_type(&self) -> super::EAuthTokenPlatformType {
            match self.platform_type {
                Some(e) => e.enum_value_or(super::EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
                None => super::EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
            }
        }

        pub fn clear_platform_type(&mut self) {
            self.platform_type = ::std::option::Option::None;
        }

        pub fn has_platform_type(&self) -> bool {
            self.platform_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_platform_type(&mut self, v: super::EAuthTokenPlatformType) {
            self.platform_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        // optional bool logged_in = 5;

        pub fn logged_in(&self) -> bool {
            self.logged_in.unwrap_or(false)
        }

        pub fn clear_logged_in(&mut self) {
            self.logged_in = ::std::option::Option::None;
        }

        pub fn has_logged_in(&self) -> bool {
            self.logged_in.is_some()
        }

        // Param is passed by value, moved
        pub fn set_logged_in(&mut self, v: bool) {
            self.logged_in = ::std::option::Option::Some(v);
        }

        // optional uint32 os_platform = 6;

        pub fn os_platform(&self) -> u32 {
            self.os_platform.unwrap_or(0)
        }

        pub fn clear_os_platform(&mut self) {
            self.os_platform = ::std::option::Option::None;
        }

        pub fn has_os_platform(&self) -> bool {
            self.os_platform.is_some()
        }

        // Param is passed by value, moved
        pub fn set_os_platform(&mut self, v: u32) {
            self.os_platform = ::std::option::Option::Some(v);
        }

        // optional uint32 auth_type = 7;

        pub fn auth_type(&self) -> u32 {
            self.auth_type.unwrap_or(0)
        }

        pub fn clear_auth_type(&mut self) {
            self.auth_type = ::std::option::Option::None;
        }

        pub fn has_auth_type(&self) -> bool {
            self.auth_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_auth_type(&mut self, v: u32) {
            self.auth_type = ::std::option::Option::Some(v);
        }

        // optional uint32 gaming_device_type = 8;

        pub fn gaming_device_type(&self) -> u32 {
            self.gaming_device_type.unwrap_or(0)
        }

        pub fn clear_gaming_device_type(&mut self) {
            self.gaming_device_type = ::std::option::Option::None;
        }

        pub fn has_gaming_device_type(&self) -> bool {
            self.gaming_device_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gaming_device_type(&mut self, v: u32) {
            self.gaming_device_type = ::std::option::Option::Some(v);
        }

        // optional .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent first_seen = 9;

        pub fn first_seen(&self) -> &TokenUsageEvent {
            self.first_seen.as_ref().unwrap_or_else(|| <TokenUsageEvent as crate::Message>::default_instance())
        }

        pub fn clear_first_seen(&mut self) {
            self.first_seen.clear();
        }

        pub fn has_first_seen(&self) -> bool {
            self.first_seen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_first_seen(&mut self, v: TokenUsageEvent) {
            self.first_seen = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_first_seen(&mut self) -> &mut TokenUsageEvent {
            self.first_seen.mut_or_insert_default()
        }

        // Take field
        pub fn take_first_seen(&mut self) -> TokenUsageEvent {
            self.first_seen.take().unwrap_or_else(|| TokenUsageEvent::new())
        }

        // optional .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent last_seen = 10;

        pub fn last_seen(&self) -> &TokenUsageEvent {
            self.last_seen.as_ref().unwrap_or_else(|| <TokenUsageEvent as crate::Message>::default_instance())
        }

        pub fn clear_last_seen(&mut self) {
            self.last_seen.clear();
        }

        pub fn has_last_seen(&self) -> bool {
            self.last_seen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_seen(&mut self, v: TokenUsageEvent) {
            self.last_seen = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_last_seen(&mut self) -> &mut TokenUsageEvent {
            self.last_seen.mut_or_insert_default()
        }

        // Take field
        pub fn take_last_seen(&mut self) -> TokenUsageEvent {
            self.last_seen.take().unwrap_or_else(|| TokenUsageEvent::new())
        }

        // optional int32 os_type = 11;

        pub fn os_type(&self) -> i32 {
            self.os_type.unwrap_or(0)
        }

        pub fn clear_os_type(&mut self) {
            self.os_type = ::std::option::Option::None;
        }

        pub fn has_os_type(&self) -> bool {
            self.os_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_os_type(&mut self, v: i32) {
            self.os_type = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(11);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "token_id",
                |m: &RefreshTokenDescription| { &m.token_id },
                |m: &mut RefreshTokenDescription| { &mut m.token_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "token_description",
                |m: &RefreshTokenDescription| { &m.token_description },
                |m: &mut RefreshTokenDescription| { &mut m.token_description },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_updated",
                |m: &RefreshTokenDescription| { &m.time_updated },
                |m: &mut RefreshTokenDescription| { &mut m.time_updated },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "platform_type",
                |m: &RefreshTokenDescription| { &m.platform_type },
                |m: &mut RefreshTokenDescription| { &mut m.platform_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "logged_in",
                |m: &RefreshTokenDescription| { &m.logged_in },
                |m: &mut RefreshTokenDescription| { &mut m.logged_in },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "os_platform",
                |m: &RefreshTokenDescription| { &m.os_platform },
                |m: &mut RefreshTokenDescription| { &mut m.os_platform },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "auth_type",
                |m: &RefreshTokenDescription| { &m.auth_type },
                |m: &mut RefreshTokenDescription| { &mut m.auth_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "gaming_device_type",
                |m: &RefreshTokenDescription| { &m.gaming_device_type },
                |m: &mut RefreshTokenDescription| { &mut m.gaming_device_type },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, TokenUsageEvent>(
                "first_seen",
                |m: &RefreshTokenDescription| { &m.first_seen },
                |m: &mut RefreshTokenDescription| { &mut m.first_seen },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, TokenUsageEvent>(
                "last_seen",
                |m: &RefreshTokenDescription| { &m.last_seen },
                |m: &mut RefreshTokenDescription| { &mut m.last_seen },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "os_type",
                |m: &RefreshTokenDescription| { &m.os_type },
                |m: &mut RefreshTokenDescription| { &mut m.os_type },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<RefreshTokenDescription>(
                "CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for RefreshTokenDescription {
        const NAME: &'static str = "RefreshTokenDescription";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.token_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.token_description = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.time_updated = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.platform_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    40 => {
                        self.logged_in = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.os_platform = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.auth_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.gaming_device_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    74 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.first_seen)?;
                    },
                    82 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.last_seen)?;
                    },
                    88 => {
                        self.os_type = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.token_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.token_description.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.time_updated {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.platform_type {
                my_size += crate::rt::int32_size(4, v.value());
            }
            if let Some(v) = self.logged_in {
                my_size += 1 + 1;
            }
            if let Some(v) = self.os_platform {
                my_size += crate::rt::uint32_size(6, v);
            }
            if let Some(v) = self.auth_type {
                my_size += crate::rt::uint32_size(7, v);
            }
            if let Some(v) = self.gaming_device_type {
                my_size += crate::rt::uint32_size(8, v);
            }
            if let Some(v) = self.first_seen.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.last_seen.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.os_type {
                my_size += crate::rt::int32_size(11, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.token_id {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.token_description.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.time_updated {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.platform_type {
                os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.logged_in {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.os_platform {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.auth_type {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.gaming_device_type {
                os.write_uint32(8, v)?;
            }
            if let Some(v) = self.first_seen.as_ref() {
                crate::rt::write_message_field_with_cached_size(9, v, os)?;
            }
            if let Some(v) = self.last_seen.as_ref() {
                crate::rt::write_message_field_with_cached_size(10, v, os)?;
            }
            if let Some(v) = self.os_type {
                os.write_int32(11, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RefreshTokenDescription {
            RefreshTokenDescription::new()
        }

        fn clear(&mut self) {
            self.token_id = ::std::option::Option::None;
            self.token_description = ::std::option::Option::None;
            self.time_updated = ::std::option::Option::None;
            self.platform_type = ::std::option::Option::None;
            self.logged_in = ::std::option::Option::None;
            self.os_platform = ::std::option::Option::None;
            self.auth_type = ::std::option::Option::None;
            self.gaming_device_type = ::std::option::Option::None;
            self.first_seen.clear();
            self.last_seen.clear();
            self.os_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RefreshTokenDescription {
            static instance: RefreshTokenDescription = RefreshTokenDescription {
                token_id: ::std::option::Option::None,
                token_description: ::std::option::Option::None,
                time_updated: ::std::option::Option::None,
                platform_type: ::std::option::Option::None,
                logged_in: ::std::option::Option::None,
                os_platform: ::std::option::Option::None,
                auth_type: ::std::option::Option::None,
                gaming_device_type: ::std::option::Option::None,
                first_seen: crate::MessageField::none(),
                last_seen: crate::MessageField::none(),
                os_type: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for RefreshTokenDescription {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RefreshTokenDescription {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for RefreshTokenDescription {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CAuthentication_GetAuthSessionsForAccount_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_GetAuthSessionsForAccount_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_GetAuthSessionsForAccount_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionsForAccount_Request {
    fn default() -> &'a CAuthentication_GetAuthSessionsForAccount_Request {
        <CAuthentication_GetAuthSessionsForAccount_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionsForAccount_Request {
    pub fn new() -> CAuthentication_GetAuthSessionsForAccount_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_GetAuthSessionsForAccount_Request>(
            "CAuthentication_GetAuthSessionsForAccount_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_GetAuthSessionsForAccount_Request {
    const NAME: &'static str = "CAuthentication_GetAuthSessionsForAccount_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_GetAuthSessionsForAccount_Request {
        CAuthentication_GetAuthSessionsForAccount_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionsForAccount_Request {
        static instance: CAuthentication_GetAuthSessionsForAccount_Request = CAuthentication_GetAuthSessionsForAccount_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_GetAuthSessionsForAccount_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_GetAuthSessionsForAccount_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_GetAuthSessionsForAccount_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_GetAuthSessionsForAccount_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_GetAuthSessionsForAccount_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_GetAuthSessionsForAccount_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_GetAuthSessionsForAccount_Response.client_ids)
    pub client_ids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_GetAuthSessionsForAccount_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionsForAccount_Response {
    fn default() -> &'a CAuthentication_GetAuthSessionsForAccount_Response {
        <CAuthentication_GetAuthSessionsForAccount_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionsForAccount_Response {
    pub fn new() -> CAuthentication_GetAuthSessionsForAccount_Response {
        ::std::default::Default::default()
    }

    // repeated uint64 client_ids = 1;

    pub fn client_ids(&self) -> &[u64] {
        &self.client_ids
    }

    pub fn clear_client_ids(&mut self) {
        self.client_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.client_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_client_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.client_ids
    }

    // Take field
    pub fn take_client_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.client_ids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "client_ids",
            |m: &CAuthentication_GetAuthSessionsForAccount_Response| { &m.client_ids },
            |m: &mut CAuthentication_GetAuthSessionsForAccount_Response| { &mut m.client_ids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_GetAuthSessionsForAccount_Response>(
            "CAuthentication_GetAuthSessionsForAccount_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_GetAuthSessionsForAccount_Response {
    const NAME: &'static str = "CAuthentication_GetAuthSessionsForAccount_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.client_ids)?;
                },
                8 => {
                    self.client_ids.push(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.client_ids {
            my_size += crate::rt::uint64_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.client_ids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_GetAuthSessionsForAccount_Response {
        CAuthentication_GetAuthSessionsForAccount_Response::new()
    }

    fn clear(&mut self) {
        self.client_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionsForAccount_Response {
        static instance: CAuthentication_GetAuthSessionsForAccount_Response = CAuthentication_GetAuthSessionsForAccount_Response {
            client_ids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_GetAuthSessionsForAccount_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_GetAuthSessionsForAccount_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_GetAuthSessionsForAccount_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_GetAuthSessionsForAccount_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_MigrateMobileSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_MigrateMobileSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_MigrateMobileSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_MigrateMobileSession_Request.token)
    pub token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_MigrateMobileSession_Request.signature)
    pub signature: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_MigrateMobileSession_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_MigrateMobileSession_Request {
    fn default() -> &'a CAuthentication_MigrateMobileSession_Request {
        <CAuthentication_MigrateMobileSession_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_MigrateMobileSession_Request {
    pub fn new() -> CAuthentication_MigrateMobileSession_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string token = 2;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string signature = 3;

    pub fn signature(&self) -> &str {
        match self.signature.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        self.signature.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthentication_MigrateMobileSession_Request| { &m.steamid },
            |m: &mut CAuthentication_MigrateMobileSession_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CAuthentication_MigrateMobileSession_Request| { &m.token },
            |m: &mut CAuthentication_MigrateMobileSession_Request| { &mut m.token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CAuthentication_MigrateMobileSession_Request| { &m.signature },
            |m: &mut CAuthentication_MigrateMobileSession_Request| { &mut m.signature },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_MigrateMobileSession_Request>(
            "CAuthentication_MigrateMobileSession_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_MigrateMobileSession_Request {
    const NAME: &'static str = "CAuthentication_MigrateMobileSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.signature = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.token.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.token.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_MigrateMobileSession_Request {
        CAuthentication_MigrateMobileSession_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.token = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_MigrateMobileSession_Request {
        static instance: CAuthentication_MigrateMobileSession_Request = CAuthentication_MigrateMobileSession_Request {
            steamid: ::std::option::Option::None,
            token: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_MigrateMobileSession_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_MigrateMobileSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_MigrateMobileSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_MigrateMobileSession_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_MigrateMobileSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_MigrateMobileSession_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_MigrateMobileSession_Response.refresh_token)
    pub refresh_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_MigrateMobileSession_Response.access_token)
    pub access_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_MigrateMobileSession_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_MigrateMobileSession_Response {
    fn default() -> &'a CAuthentication_MigrateMobileSession_Response {
        <CAuthentication_MigrateMobileSession_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_MigrateMobileSession_Response {
    pub fn new() -> CAuthentication_MigrateMobileSession_Response {
        ::std::default::Default::default()
    }

    // optional string refresh_token = 1;

    pub fn refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_refresh_token(&mut self) {
        self.refresh_token = ::std::option::Option::None;
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string access_token = 2;

    pub fn access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "refresh_token",
            |m: &CAuthentication_MigrateMobileSession_Response| { &m.refresh_token },
            |m: &mut CAuthentication_MigrateMobileSession_Response| { &mut m.refresh_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "access_token",
            |m: &CAuthentication_MigrateMobileSession_Response| { &m.access_token },
            |m: &mut CAuthentication_MigrateMobileSession_Response| { &mut m.access_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_MigrateMobileSession_Response>(
            "CAuthentication_MigrateMobileSession_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_MigrateMobileSession_Response {
    const NAME: &'static str = "CAuthentication_MigrateMobileSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.refresh_token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.access_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.refresh_token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.access_token.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.refresh_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.access_token.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_MigrateMobileSession_Response {
        CAuthentication_MigrateMobileSession_Response::new()
    }

    fn clear(&mut self) {
        self.refresh_token = ::std::option::Option::None;
        self.access_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_MigrateMobileSession_Response {
        static instance: CAuthentication_MigrateMobileSession_Response = CAuthentication_MigrateMobileSession_Response {
            refresh_token: ::std::option::Option::None,
            access_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_MigrateMobileSession_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_MigrateMobileSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_MigrateMobileSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_MigrateMobileSession_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_Token_Revoke_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_Token_Revoke_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_Token_Revoke_Request.token)
    pub token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAuthentication_Token_Revoke_Request.revoke_action)
    pub revoke_action: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenRevokeAction>>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_Token_Revoke_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_Token_Revoke_Request {
    fn default() -> &'a CAuthentication_Token_Revoke_Request {
        <CAuthentication_Token_Revoke_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_Token_Revoke_Request {
    pub fn new() -> CAuthentication_Token_Revoke_Request {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenRevokeAction revoke_action = 2;

    pub fn revoke_action(&self) -> EAuthTokenRevokeAction {
        match self.revoke_action {
            Some(e) => e.enum_value_or(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent),
            None => EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent,
        }
    }

    pub fn clear_revoke_action(&mut self) {
        self.revoke_action = ::std::option::Option::None;
    }

    pub fn has_revoke_action(&self) -> bool {
        self.revoke_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revoke_action(&mut self, v: EAuthTokenRevokeAction) {
        self.revoke_action = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CAuthentication_Token_Revoke_Request| { &m.token },
            |m: &mut CAuthentication_Token_Revoke_Request| { &mut m.token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "revoke_action",
            |m: &CAuthentication_Token_Revoke_Request| { &m.revoke_action },
            |m: &mut CAuthentication_Token_Revoke_Request| { &mut m.revoke_action },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_Token_Revoke_Request>(
            "CAuthentication_Token_Revoke_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_Token_Revoke_Request {
    const NAME: &'static str = "CAuthentication_Token_Revoke_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.revoke_action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.revoke_action {
            my_size += crate::rt::int32_size(2, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.revoke_action {
            os.write_enum(2, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_Token_Revoke_Request {
        CAuthentication_Token_Revoke_Request::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.revoke_action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_Token_Revoke_Request {
        static instance: CAuthentication_Token_Revoke_Request = CAuthentication_Token_Revoke_Request {
            token: ::std::option::Option::None,
            revoke_action: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_Token_Revoke_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_Token_Revoke_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_Token_Revoke_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_Token_Revoke_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_Token_Revoke_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_Token_Revoke_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_Token_Revoke_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_Token_Revoke_Response {
    fn default() -> &'a CAuthentication_Token_Revoke_Response {
        <CAuthentication_Token_Revoke_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_Token_Revoke_Response {
    pub fn new() -> CAuthentication_Token_Revoke_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_Token_Revoke_Response>(
            "CAuthentication_Token_Revoke_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_Token_Revoke_Response {
    const NAME: &'static str = "CAuthentication_Token_Revoke_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_Token_Revoke_Response {
        CAuthentication_Token_Revoke_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_Token_Revoke_Response {
        static instance: CAuthentication_Token_Revoke_Response = CAuthentication_Token_Revoke_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_Token_Revoke_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_Token_Revoke_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_Token_Revoke_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_Token_Revoke_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_RefreshToken_Revoke_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_RefreshToken_Revoke_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Revoke_Request.token_id)
    pub token_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Revoke_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Revoke_Request.revoke_action)
    pub revoke_action: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenRevokeAction>>,
    // @@protoc_insertion_point(field:CAuthentication_RefreshToken_Revoke_Request.signature)
    pub signature: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_RefreshToken_Revoke_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Revoke_Request {
    fn default() -> &'a CAuthentication_RefreshToken_Revoke_Request {
        <CAuthentication_RefreshToken_Revoke_Request as crate::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Revoke_Request {
    pub fn new() -> CAuthentication_RefreshToken_Revoke_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;

    pub fn token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }

    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenRevokeAction revoke_action = 3;

    pub fn revoke_action(&self) -> EAuthTokenRevokeAction {
        match self.revoke_action {
            Some(e) => e.enum_value_or(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent),
            None => EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent,
        }
    }

    pub fn clear_revoke_action(&mut self) {
        self.revoke_action = ::std::option::Option::None;
    }

    pub fn has_revoke_action(&self) -> bool {
        self.revoke_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revoke_action(&mut self, v: EAuthTokenRevokeAction) {
        self.revoke_action = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bytes signature = 4;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::bytes::Bytes) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::bytes::Bytes {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::bytes::Bytes {
        self.signature.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_id",
            |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.token_id },
            |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.token_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.steamid },
            |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "revoke_action",
            |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.revoke_action },
            |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.revoke_action },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.signature },
            |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.signature },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_RefreshToken_Revoke_Request>(
            "CAuthentication_RefreshToken_Revoke_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_RefreshToken_Revoke_Request {
    const NAME: &'static str = "CAuthentication_RefreshToken_Revoke_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.token_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.revoke_action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.signature = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.revoke_action {
            my_size += crate::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += crate::rt::bytes_size(4, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.revoke_action {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_RefreshToken_Revoke_Request {
        CAuthentication_RefreshToken_Revoke_Request::new()
    }

    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.revoke_action = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Revoke_Request {
        static instance: CAuthentication_RefreshToken_Revoke_Request = CAuthentication_RefreshToken_Revoke_Request {
            token_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            revoke_action: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_RefreshToken_Revoke_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_RefreshToken_Revoke_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_RefreshToken_Revoke_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_RefreshToken_Revoke_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthentication_RefreshToken_Revoke_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthentication_RefreshToken_Revoke_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAuthentication_RefreshToken_Revoke_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Revoke_Response {
    fn default() -> &'a CAuthentication_RefreshToken_Revoke_Response {
        <CAuthentication_RefreshToken_Revoke_Response as crate::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Revoke_Response {
    pub fn new() -> CAuthentication_RefreshToken_Revoke_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthentication_RefreshToken_Revoke_Response>(
            "CAuthentication_RefreshToken_Revoke_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthentication_RefreshToken_Revoke_Response {
    const NAME: &'static str = "CAuthentication_RefreshToken_Revoke_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthentication_RefreshToken_Revoke_Response {
        CAuthentication_RefreshToken_Revoke_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Revoke_Response {
        static instance: CAuthentication_RefreshToken_Revoke_Response = CAuthentication_RefreshToken_Revoke_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthentication_RefreshToken_Revoke_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthentication_RefreshToken_Revoke_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthentication_RefreshToken_Revoke_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthentication_RefreshToken_Revoke_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_QueryRefreshTokensByAccount_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_QueryRefreshTokensByAccount_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthenticationSupport_QueryRefreshTokensByAccount_Request.include_revoked_tokens)
    pub include_revoked_tokens: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_QueryRefreshTokensByAccount_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        <CAuthenticationSupport_QueryRefreshTokensByAccount_Request as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_revoked_tokens = 2;

    pub fn include_revoked_tokens(&self) -> bool {
        self.include_revoked_tokens.unwrap_or(false)
    }

    pub fn clear_include_revoked_tokens(&mut self) {
        self.include_revoked_tokens = ::std::option::Option::None;
    }

    pub fn has_include_revoked_tokens(&self) -> bool {
        self.include_revoked_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_revoked_tokens(&mut self, v: bool) {
        self.include_revoked_tokens = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &m.steamid },
            |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_revoked_tokens",
            |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &m.include_revoked_tokens },
            |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &mut m.include_revoked_tokens },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_QueryRefreshTokensByAccount_Request>(
            "CAuthenticationSupport_QueryRefreshTokensByAccount_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    const NAME: &'static str = "CAuthenticationSupport_QueryRefreshTokensByAccount_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_revoked_tokens = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_revoked_tokens {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_revoked_tokens {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        CAuthenticationSupport_QueryRefreshTokensByAccount_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_revoked_tokens = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        static instance: CAuthenticationSupport_QueryRefreshTokensByAccount_Request = CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
            steamid: ::std::option::Option::None,
            include_revoked_tokens: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_QueryRefreshTokensByAccount_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSupportRefreshTokenDescription)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSupportRefreshTokenDescription {
    // message fields
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.token_id)
    pub token_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.token_description)
    pub token_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.time_updated)
    pub time_updated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.platform_type)
    pub platform_type: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenPlatformType>>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.token_state)
    pub token_state: ::std::option::Option<crate::EnumOrUnknown<EAuthTokenState>>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.owner_steamid)
    pub owner_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.os_platform)
    pub os_platform: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.os_type)
    pub os_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.auth_type)
    pub auth_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.gaming_device_type)
    pub gaming_device_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.first_seen)
    pub first_seen: crate::MessageField<csupport_refresh_token_description::TokenUsageEvent>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.last_seen)
    pub last_seen: crate::MessageField<csupport_refresh_token_description::TokenUsageEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:CSupportRefreshTokenDescription.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSupportRefreshTokenDescription {
    fn default() -> &'a CSupportRefreshTokenDescription {
        <CSupportRefreshTokenDescription as crate::Message>::default_instance()
    }
}

impl CSupportRefreshTokenDescription {
    pub fn new() -> CSupportRefreshTokenDescription {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;

    pub fn token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }

    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional string token_description = 2;

    pub fn token_description(&self) -> &str {
        match self.token_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token_description(&mut self) {
        self.token_description = ::std::option::Option::None;
    }

    pub fn has_token_description(&self) -> bool {
        self.token_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_description(&mut self, v: ::std::string::String) {
        self.token_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_description(&mut self) -> &mut ::std::string::String {
        if self.token_description.is_none() {
            self.token_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_description(&mut self) -> ::std::string::String {
        self.token_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_updated = 3;

    pub fn time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }

    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenPlatformType platform_type = 4;

    pub fn platform_type(&self) -> EAuthTokenPlatformType {
        match self.platform_type {
            Some(e) => e.enum_value_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            None => EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
        }
    }

    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .EAuthTokenState token_state = 5;

    pub fn token_state(&self) -> EAuthTokenState {
        match self.token_state {
            Some(e) => e.enum_value_or(EAuthTokenState::k_EAuthTokenState_Invalid),
            None => EAuthTokenState::k_EAuthTokenState_Invalid,
        }
    }

    pub fn clear_token_state(&mut self) {
        self.token_state = ::std::option::Option::None;
    }

    pub fn has_token_state(&self) -> bool {
        self.token_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_state(&mut self, v: EAuthTokenState) {
        self.token_state = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional fixed64 owner_steamid = 6;

    pub fn owner_steamid(&self) -> u64 {
        self.owner_steamid.unwrap_or(0)
    }

    pub fn clear_owner_steamid(&mut self) {
        self.owner_steamid = ::std::option::Option::None;
    }

    pub fn has_owner_steamid(&self) -> bool {
        self.owner_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_steamid(&mut self, v: u64) {
        self.owner_steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 os_platform = 7;

    pub fn os_platform(&self) -> u32 {
        self.os_platform.unwrap_or(0)
    }

    pub fn clear_os_platform(&mut self) {
        self.os_platform = ::std::option::Option::None;
    }

    pub fn has_os_platform(&self) -> bool {
        self.os_platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_platform(&mut self, v: u32) {
        self.os_platform = ::std::option::Option::Some(v);
    }

    // optional int32 os_type = 8;

    pub fn os_type(&self) -> i32 {
        self.os_type.unwrap_or(0)
    }

    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: i32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 auth_type = 9;

    pub fn auth_type(&self) -> u32 {
        self.auth_type.unwrap_or(0)
    }

    pub fn clear_auth_type(&mut self) {
        self.auth_type = ::std::option::Option::None;
    }

    pub fn has_auth_type(&self) -> bool {
        self.auth_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_type(&mut self, v: u32) {
        self.auth_type = ::std::option::Option::Some(v);
    }

    // optional uint32 gaming_device_type = 10;

    pub fn gaming_device_type(&self) -> u32 {
        self.gaming_device_type.unwrap_or(0)
    }

    pub fn clear_gaming_device_type(&mut self) {
        self.gaming_device_type = ::std::option::Option::None;
    }

    pub fn has_gaming_device_type(&self) -> bool {
        self.gaming_device_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gaming_device_type(&mut self, v: u32) {
        self.gaming_device_type = ::std::option::Option::Some(v);
    }

    // optional .CSupportRefreshTokenDescription.TokenUsageEvent first_seen = 11;

    pub fn first_seen(&self) -> &csupport_refresh_token_description::TokenUsageEvent {
        self.first_seen.as_ref().unwrap_or_else(|| <csupport_refresh_token_description::TokenUsageEvent as crate::Message>::default_instance())
    }

    pub fn clear_first_seen(&mut self) {
        self.first_seen.clear();
    }

    pub fn has_first_seen(&self) -> bool {
        self.first_seen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_seen(&mut self, v: csupport_refresh_token_description::TokenUsageEvent) {
        self.first_seen = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_seen(&mut self) -> &mut csupport_refresh_token_description::TokenUsageEvent {
        self.first_seen.mut_or_insert_default()
    }

    // Take field
    pub fn take_first_seen(&mut self) -> csupport_refresh_token_description::TokenUsageEvent {
        self.first_seen.take().unwrap_or_else(|| csupport_refresh_token_description::TokenUsageEvent::new())
    }

    // optional .CSupportRefreshTokenDescription.TokenUsageEvent last_seen = 12;

    pub fn last_seen(&self) -> &csupport_refresh_token_description::TokenUsageEvent {
        self.last_seen.as_ref().unwrap_or_else(|| <csupport_refresh_token_description::TokenUsageEvent as crate::Message>::default_instance())
    }

    pub fn clear_last_seen(&mut self) {
        self.last_seen.clear();
    }

    pub fn has_last_seen(&self) -> bool {
        self.last_seen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_seen(&mut self, v: csupport_refresh_token_description::TokenUsageEvent) {
        self.last_seen = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_seen(&mut self) -> &mut csupport_refresh_token_description::TokenUsageEvent {
        self.last_seen.mut_or_insert_default()
    }

    // Take field
    pub fn take_last_seen(&mut self) -> csupport_refresh_token_description::TokenUsageEvent {
        self.last_seen.take().unwrap_or_else(|| csupport_refresh_token_description::TokenUsageEvent::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_id",
            |m: &CSupportRefreshTokenDescription| { &m.token_id },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.token_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_description",
            |m: &CSupportRefreshTokenDescription| { &m.token_description },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.token_description },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_updated",
            |m: &CSupportRefreshTokenDescription| { &m.time_updated },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.time_updated },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform_type",
            |m: &CSupportRefreshTokenDescription| { &m.platform_type },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.platform_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_state",
            |m: &CSupportRefreshTokenDescription| { &m.token_state },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.token_state },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "owner_steamid",
            |m: &CSupportRefreshTokenDescription| { &m.owner_steamid },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.owner_steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "os_platform",
            |m: &CSupportRefreshTokenDescription| { &m.os_platform },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.os_platform },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "os_type",
            |m: &CSupportRefreshTokenDescription| { &m.os_type },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.os_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_type",
            |m: &CSupportRefreshTokenDescription| { &m.auth_type },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.auth_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gaming_device_type",
            |m: &CSupportRefreshTokenDescription| { &m.gaming_device_type },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.gaming_device_type },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, csupport_refresh_token_description::TokenUsageEvent>(
            "first_seen",
            |m: &CSupportRefreshTokenDescription| { &m.first_seen },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.first_seen },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, csupport_refresh_token_description::TokenUsageEvent>(
            "last_seen",
            |m: &CSupportRefreshTokenDescription| { &m.last_seen },
            |m: &mut CSupportRefreshTokenDescription| { &mut m.last_seen },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSupportRefreshTokenDescription>(
            "CSupportRefreshTokenDescription",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSupportRefreshTokenDescription {
    const NAME: &'static str = "CSupportRefreshTokenDescription";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.token_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.token_description = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.time_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.platform_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.token_state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                49 => {
                    self.owner_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                56 => {
                    self.os_platform = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.os_type = ::std::option::Option::Some(is.read_int32()?);
                },
                72 => {
                    self.auth_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.gaming_device_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.first_seen)?;
                },
                98 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.last_seen)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.token_description.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.time_updated {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.platform_type {
            my_size += crate::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.token_state {
            my_size += crate::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.owner_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.os_platform {
            my_size += crate::rt::uint32_size(7, v);
        }
        if let Some(v) = self.os_type {
            my_size += crate::rt::int32_size(8, v);
        }
        if let Some(v) = self.auth_type {
            my_size += crate::rt::uint32_size(9, v);
        }
        if let Some(v) = self.gaming_device_type {
            my_size += crate::rt::uint32_size(10, v);
        }
        if let Some(v) = self.first_seen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_seen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.token_description.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.token_state {
            os.write_enum(5, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.owner_steamid {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.os_platform {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.auth_type {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.gaming_device_type {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.first_seen.as_ref() {
            crate::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.last_seen.as_ref() {
            crate::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSupportRefreshTokenDescription {
        CSupportRefreshTokenDescription::new()
    }

    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.token_description = ::std::option::Option::None;
        self.time_updated = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.token_state = ::std::option::Option::None;
        self.owner_steamid = ::std::option::Option::None;
        self.os_platform = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.auth_type = ::std::option::Option::None;
        self.gaming_device_type = ::std::option::Option::None;
        self.first_seen.clear();
        self.last_seen.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSupportRefreshTokenDescription {
        static instance: CSupportRefreshTokenDescription = CSupportRefreshTokenDescription {
            token_id: ::std::option::Option::None,
            token_description: ::std::option::Option::None,
            time_updated: ::std::option::Option::None,
            platform_type: ::std::option::Option::None,
            token_state: ::std::option::Option::None,
            owner_steamid: ::std::option::Option::None,
            os_platform: ::std::option::Option::None,
            os_type: ::std::option::Option::None,
            auth_type: ::std::option::Option::None,
            gaming_device_type: ::std::option::Option::None,
            first_seen: crate::MessageField::none(),
            last_seen: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSupportRefreshTokenDescription {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSupportRefreshTokenDescription").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSupportRefreshTokenDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSupportRefreshTokenDescription {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CSupportRefreshTokenDescription`
pub mod csupport_refresh_token_description {
    // @@protoc_insertion_point(message:CSupportRefreshTokenDescription.TokenUsageEvent)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TokenUsageEvent {
        // message fields
        // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.TokenUsageEvent.time)
        pub time: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.TokenUsageEvent.ip)
        pub ip: crate::MessageField<super::super::steammessages_base::CMsgIPAddress>,
        // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.TokenUsageEvent.country)
        pub country: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.TokenUsageEvent.state)
        pub state: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CSupportRefreshTokenDescription.TokenUsageEvent.city)
        pub city: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CSupportRefreshTokenDescription.TokenUsageEvent.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TokenUsageEvent {
        fn default() -> &'a TokenUsageEvent {
            <TokenUsageEvent as crate::Message>::default_instance()
        }
    }

    impl TokenUsageEvent {
        pub fn new() -> TokenUsageEvent {
            ::std::default::Default::default()
        }

        // optional uint32 time = 1;

        pub fn time(&self) -> u32 {
            self.time.unwrap_or(0)
        }

        pub fn clear_time(&mut self) {
            self.time = ::std::option::Option::None;
        }

        pub fn has_time(&self) -> bool {
            self.time.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time(&mut self, v: u32) {
            self.time = ::std::option::Option::Some(v);
        }

        // optional .CMsgIPAddress ip = 2;

        pub fn ip(&self) -> &super::super::steammessages_base::CMsgIPAddress {
            self.ip.as_ref().unwrap_or_else(|| <super::super::steammessages_base::CMsgIPAddress as crate::Message>::default_instance())
        }

        pub fn clear_ip(&mut self) {
            self.ip.clear();
        }

        pub fn has_ip(&self) -> bool {
            self.ip.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ip(&mut self, v: super::super::steammessages_base::CMsgIPAddress) {
            self.ip = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_ip(&mut self) -> &mut super::super::steammessages_base::CMsgIPAddress {
            self.ip.mut_or_insert_default()
        }

        // Take field
        pub fn take_ip(&mut self) -> super::super::steammessages_base::CMsgIPAddress {
            self.ip.take().unwrap_or_else(|| super::super::steammessages_base::CMsgIPAddress::new())
        }

        // optional string country = 3;

        pub fn country(&self) -> &str {
            match self.country.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_country(&mut self) {
            self.country = ::std::option::Option::None;
        }

        pub fn has_country(&self) -> bool {
            self.country.is_some()
        }

        // Param is passed by value, moved
        pub fn set_country(&mut self, v: ::std::string::String) {
            self.country = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_country(&mut self) -> &mut ::std::string::String {
            if self.country.is_none() {
                self.country = ::std::option::Option::Some(::std::string::String::new());
            }
            self.country.as_mut().unwrap()
        }

        // Take field
        pub fn take_country(&mut self) -> ::std::string::String {
            self.country.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string state = 4;

        pub fn state(&self) -> &str {
            match self.state.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_state(&mut self) {
            self.state = ::std::option::Option::None;
        }

        pub fn has_state(&self) -> bool {
            self.state.is_some()
        }

        // Param is passed by value, moved
        pub fn set_state(&mut self, v: ::std::string::String) {
            self.state = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_state(&mut self) -> &mut ::std::string::String {
            if self.state.is_none() {
                self.state = ::std::option::Option::Some(::std::string::String::new());
            }
            self.state.as_mut().unwrap()
        }

        // Take field
        pub fn take_state(&mut self) -> ::std::string::String {
            self.state.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string city = 5;

        pub fn city(&self) -> &str {
            match self.city.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_city(&mut self) {
            self.city = ::std::option::Option::None;
        }

        pub fn has_city(&self) -> bool {
            self.city.is_some()
        }

        // Param is passed by value, moved
        pub fn set_city(&mut self, v: ::std::string::String) {
            self.city = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_city(&mut self) -> &mut ::std::string::String {
            if self.city.is_none() {
                self.city = ::std::option::Option::Some(::std::string::String::new());
            }
            self.city.as_mut().unwrap()
        }

        // Take field
        pub fn take_city(&mut self) -> ::std::string::String {
            self.city.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time",
                |m: &TokenUsageEvent| { &m.time },
                |m: &mut TokenUsageEvent| { &mut m.time },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::super::steammessages_base::CMsgIPAddress>(
                "ip",
                |m: &TokenUsageEvent| { &m.ip },
                |m: &mut TokenUsageEvent| { &mut m.ip },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "country",
                |m: &TokenUsageEvent| { &m.country },
                |m: &mut TokenUsageEvent| { &mut m.country },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "state",
                |m: &TokenUsageEvent| { &m.state },
                |m: &mut TokenUsageEvent| { &mut m.state },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "city",
                |m: &TokenUsageEvent| { &m.city },
                |m: &mut TokenUsageEvent| { &mut m.city },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<TokenUsageEvent>(
                "CSupportRefreshTokenDescription.TokenUsageEvent",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for TokenUsageEvent {
        const NAME: &'static str = "TokenUsageEvent";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.time = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.ip)?;
                    },
                    26 => {
                        self.country = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.state = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.city = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.time {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.ip.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.country.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.state.as_ref() {
                my_size += crate::rt::string_size(4, &v);
            }
            if let Some(v) = self.city.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.time {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.ip.as_ref() {
                crate::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.country.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.state.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.city.as_ref() {
                os.write_string(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TokenUsageEvent {
            TokenUsageEvent::new()
        }

        fn clear(&mut self) {
            self.time = ::std::option::Option::None;
            self.ip.clear();
            self.country = ::std::option::Option::None;
            self.state = ::std::option::Option::None;
            self.city = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TokenUsageEvent {
            static instance: TokenUsageEvent = TokenUsageEvent {
                time: ::std::option::Option::None,
                ip: crate::MessageField::none(),
                country: ::std::option::Option::None,
                state: ::std::option::Option::None,
                city: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for TokenUsageEvent {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CSupportRefreshTokenDescription.TokenUsageEvent").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TokenUsageEvent {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for TokenUsageEvent {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CAuthenticationSupport_QueryRefreshTokensByAccount_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_QueryRefreshTokensByAccount_Response.refresh_tokens)
    pub refresh_tokens: ::std::vec::Vec<CSupportRefreshTokenDescription>,
    // @@protoc_insertion_point(field:CAuthenticationSupport_QueryRefreshTokensByAccount_Response.last_token_reset)
    pub last_token_reset: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_QueryRefreshTokensByAccount_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        <CAuthenticationSupport_QueryRefreshTokensByAccount_Response as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        ::std::default::Default::default()
    }

    // repeated .CSupportRefreshTokenDescription refresh_tokens = 1;

    pub fn refresh_tokens(&self) -> &[CSupportRefreshTokenDescription] {
        &self.refresh_tokens
    }

    pub fn clear_refresh_tokens(&mut self) {
        self.refresh_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_tokens(&mut self, v: ::std::vec::Vec<CSupportRefreshTokenDescription>) {
        self.refresh_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_tokens(&mut self) -> &mut ::std::vec::Vec<CSupportRefreshTokenDescription> {
        &mut self.refresh_tokens
    }

    // Take field
    pub fn take_refresh_tokens(&mut self) -> ::std::vec::Vec<CSupportRefreshTokenDescription> {
        ::std::mem::replace(&mut self.refresh_tokens, ::std::vec::Vec::new())
    }

    // optional int32 last_token_reset = 2;

    pub fn last_token_reset(&self) -> i32 {
        self.last_token_reset.unwrap_or(0)
    }

    pub fn clear_last_token_reset(&mut self) {
        self.last_token_reset = ::std::option::Option::None;
    }

    pub fn has_last_token_reset(&self) -> bool {
        self.last_token_reset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_token_reset(&mut self, v: i32) {
        self.last_token_reset = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "refresh_tokens",
            |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &m.refresh_tokens },
            |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &mut m.refresh_tokens },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_token_reset",
            |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &m.last_token_reset },
            |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &mut m.last_token_reset },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_QueryRefreshTokensByAccount_Response>(
            "CAuthenticationSupport_QueryRefreshTokensByAccount_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    const NAME: &'static str = "CAuthenticationSupport_QueryRefreshTokensByAccount_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.refresh_tokens.push(is.read_message()?);
                },
                16 => {
                    self.last_token_reset = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.refresh_tokens {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.last_token_reset {
            my_size += crate::rt::int32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.refresh_tokens {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.last_token_reset {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        CAuthenticationSupport_QueryRefreshTokensByAccount_Response::new()
    }

    fn clear(&mut self) {
        self.refresh_tokens.clear();
        self.last_token_reset = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        static instance: CAuthenticationSupport_QueryRefreshTokensByAccount_Response = CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
            refresh_tokens: ::std::vec::Vec::new(),
            last_token_reset: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_QueryRefreshTokensByAccount_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_QueryRefreshTokenByID_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_QueryRefreshTokenByID_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_QueryRefreshTokenByID_Request.token_id)
    pub token_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_QueryRefreshTokenByID_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokenByID_Request {
        <CAuthenticationSupport_QueryRefreshTokenByID_Request as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokenByID_Request {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;

    pub fn token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }

    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_id",
            |m: &CAuthenticationSupport_QueryRefreshTokenByID_Request| { &m.token_id },
            |m: &mut CAuthenticationSupport_QueryRefreshTokenByID_Request| { &mut m.token_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_QueryRefreshTokenByID_Request>(
            "CAuthenticationSupport_QueryRefreshTokenByID_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    const NAME: &'static str = "CAuthenticationSupport_QueryRefreshTokenByID_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.token_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Request {
        CAuthenticationSupport_QueryRefreshTokenByID_Request::new()
    }

    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokenByID_Request {
        static instance: CAuthenticationSupport_QueryRefreshTokenByID_Request = CAuthenticationSupport_QueryRefreshTokenByID_Request {
            token_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_QueryRefreshTokenByID_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_QueryRefreshTokenByID_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_QueryRefreshTokenByID_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_QueryRefreshTokenByID_Response.refresh_tokens)
    pub refresh_tokens: ::std::vec::Vec<CSupportRefreshTokenDescription>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_QueryRefreshTokenByID_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokenByID_Response {
        <CAuthenticationSupport_QueryRefreshTokenByID_Response as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokenByID_Response {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Response {
        ::std::default::Default::default()
    }

    // repeated .CSupportRefreshTokenDescription refresh_tokens = 1;

    pub fn refresh_tokens(&self) -> &[CSupportRefreshTokenDescription] {
        &self.refresh_tokens
    }

    pub fn clear_refresh_tokens(&mut self) {
        self.refresh_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_tokens(&mut self, v: ::std::vec::Vec<CSupportRefreshTokenDescription>) {
        self.refresh_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_tokens(&mut self) -> &mut ::std::vec::Vec<CSupportRefreshTokenDescription> {
        &mut self.refresh_tokens
    }

    // Take field
    pub fn take_refresh_tokens(&mut self) -> ::std::vec::Vec<CSupportRefreshTokenDescription> {
        ::std::mem::replace(&mut self.refresh_tokens, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "refresh_tokens",
            |m: &CAuthenticationSupport_QueryRefreshTokenByID_Response| { &m.refresh_tokens },
            |m: &mut CAuthenticationSupport_QueryRefreshTokenByID_Response| { &mut m.refresh_tokens },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_QueryRefreshTokenByID_Response>(
            "CAuthenticationSupport_QueryRefreshTokenByID_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    const NAME: &'static str = "CAuthenticationSupport_QueryRefreshTokenByID_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.refresh_tokens.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.refresh_tokens {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.refresh_tokens {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Response {
        CAuthenticationSupport_QueryRefreshTokenByID_Response::new()
    }

    fn clear(&mut self) {
        self.refresh_tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokenByID_Response {
        static instance: CAuthenticationSupport_QueryRefreshTokenByID_Response = CAuthenticationSupport_QueryRefreshTokenByID_Response {
            refresh_tokens: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_QueryRefreshTokenByID_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_RevokeToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_RevokeToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_RevokeToken_Request.token_id)
    pub token_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAuthenticationSupport_RevokeToken_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_RevokeToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_RevokeToken_Request {
    fn default() -> &'a CAuthenticationSupport_RevokeToken_Request {
        <CAuthenticationSupport_RevokeToken_Request as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_RevokeToken_Request {
    pub fn new() -> CAuthenticationSupport_RevokeToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;

    pub fn token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }

    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_id",
            |m: &CAuthenticationSupport_RevokeToken_Request| { &m.token_id },
            |m: &mut CAuthenticationSupport_RevokeToken_Request| { &mut m.token_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CAuthenticationSupport_RevokeToken_Request| { &m.steamid },
            |m: &mut CAuthenticationSupport_RevokeToken_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_RevokeToken_Request>(
            "CAuthenticationSupport_RevokeToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_RevokeToken_Request {
    const NAME: &'static str = "CAuthenticationSupport_RevokeToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.token_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_RevokeToken_Request {
        CAuthenticationSupport_RevokeToken_Request::new()
    }

    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_RevokeToken_Request {
        static instance: CAuthenticationSupport_RevokeToken_Request = CAuthenticationSupport_RevokeToken_Request {
            token_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_RevokeToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_RevokeToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_RevokeToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_RevokeToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_RevokeToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_RevokeToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_RevokeToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_RevokeToken_Response {
    fn default() -> &'a CAuthenticationSupport_RevokeToken_Response {
        <CAuthenticationSupport_RevokeToken_Response as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_RevokeToken_Response {
    pub fn new() -> CAuthenticationSupport_RevokeToken_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_RevokeToken_Response>(
            "CAuthenticationSupport_RevokeToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_RevokeToken_Response {
    const NAME: &'static str = "CAuthenticationSupport_RevokeToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_RevokeToken_Response {
        CAuthenticationSupport_RevokeToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_RevokeToken_Response {
        static instance: CAuthenticationSupport_RevokeToken_Response = CAuthenticationSupport_RevokeToken_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_RevokeToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_RevokeToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_RevokeToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_RevokeToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_GetTokenHistory_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_GetTokenHistory_Request {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_GetTokenHistory_Request.token_id)
    pub token_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_GetTokenHistory_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_GetTokenHistory_Request {
    fn default() -> &'a CAuthenticationSupport_GetTokenHistory_Request {
        <CAuthenticationSupport_GetTokenHistory_Request as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_GetTokenHistory_Request {
    pub fn new() -> CAuthenticationSupport_GetTokenHistory_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;

    pub fn token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }

    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token_id",
            |m: &CAuthenticationSupport_GetTokenHistory_Request| { &m.token_id },
            |m: &mut CAuthenticationSupport_GetTokenHistory_Request| { &mut m.token_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_GetTokenHistory_Request>(
            "CAuthenticationSupport_GetTokenHistory_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_GetTokenHistory_Request {
    const NAME: &'static str = "CAuthenticationSupport_GetTokenHistory_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.token_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_GetTokenHistory_Request {
        CAuthenticationSupport_GetTokenHistory_Request::new()
    }

    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_GetTokenHistory_Request {
        static instance: CAuthenticationSupport_GetTokenHistory_Request = CAuthenticationSupport_GetTokenHistory_Request {
            token_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_GetTokenHistory_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_GetTokenHistory_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_GetTokenHistory_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_GetTokenHistory_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSupportRefreshTokenAudit)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSupportRefreshTokenAudit {
    // message fields
    // @@protoc_insertion_point(field:CSupportRefreshTokenAudit.action)
    pub action: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenAudit.time)
    pub time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenAudit.ip)
    pub ip: crate::MessageField<super::steammessages_base::CMsgIPAddress>,
    // @@protoc_insertion_point(field:CSupportRefreshTokenAudit.actor)
    pub actor: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CSupportRefreshTokenAudit.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSupportRefreshTokenAudit {
    fn default() -> &'a CSupportRefreshTokenAudit {
        <CSupportRefreshTokenAudit as crate::Message>::default_instance()
    }
}

impl CSupportRefreshTokenAudit {
    pub fn new() -> CSupportRefreshTokenAudit {
        ::std::default::Default::default()
    }

    // optional int32 action = 1;

    pub fn action(&self) -> i32 {
        self.action.unwrap_or(0)
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: i32) {
        self.action = ::std::option::Option::Some(v);
    }

    // optional uint32 time = 2;

    pub fn time(&self) -> u32 {
        self.time.unwrap_or(0)
    }

    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional .CMsgIPAddress ip = 3;

    pub fn ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.ip.as_ref().unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as crate::Message>::default_instance())
    }

    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.ip = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        self.ip.mut_or_insert_default()
    }

    // Take field
    pub fn take_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.ip.take().unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional fixed64 actor = 4;

    pub fn actor(&self) -> u64 {
        self.actor.unwrap_or(0)
    }

    pub fn clear_actor(&mut self) {
        self.actor = ::std::option::Option::None;
    }

    pub fn has_actor(&self) -> bool {
        self.actor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actor(&mut self, v: u64) {
        self.actor = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &CSupportRefreshTokenAudit| { &m.action },
            |m: &mut CSupportRefreshTokenAudit| { &mut m.action },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time",
            |m: &CSupportRefreshTokenAudit| { &m.time },
            |m: &mut CSupportRefreshTokenAudit| { &mut m.time },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steammessages_base::CMsgIPAddress>(
            "ip",
            |m: &CSupportRefreshTokenAudit| { &m.ip },
            |m: &mut CSupportRefreshTokenAudit| { &mut m.ip },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "actor",
            |m: &CSupportRefreshTokenAudit| { &m.actor },
            |m: &mut CSupportRefreshTokenAudit| { &mut m.actor },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CSupportRefreshTokenAudit>(
            "CSupportRefreshTokenAudit",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CSupportRefreshTokenAudit {
    const NAME: &'static str = "CSupportRefreshTokenAudit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.action = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.time = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.ip)?;
                },
                33 => {
                    self.actor = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.action {
            my_size += crate::rt::int32_size(1, v);
        }
        if let Some(v) = self.time {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.actor {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.action {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.time {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.ip.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.actor {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSupportRefreshTokenAudit {
        CSupportRefreshTokenAudit::new()
    }

    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.time = ::std::option::Option::None;
        self.ip.clear();
        self.actor = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSupportRefreshTokenAudit {
        static instance: CSupportRefreshTokenAudit = CSupportRefreshTokenAudit {
            action: ::std::option::Option::None,
            time: ::std::option::Option::None,
            ip: crate::MessageField::none(),
            actor: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CSupportRefreshTokenAudit {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSupportRefreshTokenAudit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSupportRefreshTokenAudit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CSupportRefreshTokenAudit {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAuthenticationSupport_GetTokenHistory_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAuthenticationSupport_GetTokenHistory_Response {
    // message fields
    // @@protoc_insertion_point(field:CAuthenticationSupport_GetTokenHistory_Response.history)
    pub history: ::std::vec::Vec<CSupportRefreshTokenAudit>,
    // special fields
    // @@protoc_insertion_point(special_field:CAuthenticationSupport_GetTokenHistory_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_GetTokenHistory_Response {
    fn default() -> &'a CAuthenticationSupport_GetTokenHistory_Response {
        <CAuthenticationSupport_GetTokenHistory_Response as crate::Message>::default_instance()
    }
}

impl CAuthenticationSupport_GetTokenHistory_Response {
    pub fn new() -> CAuthenticationSupport_GetTokenHistory_Response {
        ::std::default::Default::default()
    }

    // repeated .CSupportRefreshTokenAudit history = 1;

    pub fn history(&self) -> &[CSupportRefreshTokenAudit] {
        &self.history
    }

    pub fn clear_history(&mut self) {
        self.history.clear();
    }

    // Param is passed by value, moved
    pub fn set_history(&mut self, v: ::std::vec::Vec<CSupportRefreshTokenAudit>) {
        self.history = v;
    }

    // Mutable pointer to the field.
    pub fn mut_history(&mut self) -> &mut ::std::vec::Vec<CSupportRefreshTokenAudit> {
        &mut self.history
    }

    // Take field
    pub fn take_history(&mut self) -> ::std::vec::Vec<CSupportRefreshTokenAudit> {
        ::std::mem::replace(&mut self.history, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "history",
            |m: &CAuthenticationSupport_GetTokenHistory_Response| { &m.history },
            |m: &mut CAuthenticationSupport_GetTokenHistory_Response| { &mut m.history },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAuthenticationSupport_GetTokenHistory_Response>(
            "CAuthenticationSupport_GetTokenHistory_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAuthenticationSupport_GetTokenHistory_Response {
    const NAME: &'static str = "CAuthenticationSupport_GetTokenHistory_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.history.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.history {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.history {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAuthenticationSupport_GetTokenHistory_Response {
        CAuthenticationSupport_GetTokenHistory_Response::new()
    }

    fn clear(&mut self) {
        self.history.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAuthenticationSupport_GetTokenHistory_Response {
        static instance: CAuthenticationSupport_GetTokenHistory_Response = CAuthenticationSupport_GetTokenHistory_Response {
            history: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAuthenticationSupport_GetTokenHistory_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAuthenticationSupport_GetTokenHistory_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAuthenticationSupport_GetTokenHistory_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAuthenticationSupport_GetTokenHistory_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_CreateNonce_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_CreateNonce_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Request.platform)
    pub platform: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_CreateNonce_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_CreateNonce_Request {
    fn default() -> &'a CCloudGaming_CreateNonce_Request {
        <CCloudGaming_CreateNonce_Request as crate::Message>::default_instance()
    }
}

impl CCloudGaming_CreateNonce_Request {
    pub fn new() -> CCloudGaming_CreateNonce_Request {
        ::std::default::Default::default()
    }

    // optional string platform = 1;

    pub fn platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_platform(&mut self) {
        self.platform = ::std::option::Option::None;
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform = ::std::option::Option::Some(::std::string::String::new());
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform",
            |m: &CCloudGaming_CreateNonce_Request| { &m.platform },
            |m: &mut CCloudGaming_CreateNonce_Request| { &mut m.platform },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloudGaming_CreateNonce_Request| { &m.appid },
            |m: &mut CCloudGaming_CreateNonce_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_CreateNonce_Request>(
            "CCloudGaming_CreateNonce_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCloudGaming_CreateNonce_Request {
    const NAME: &'static str = "CCloudGaming_CreateNonce_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.platform = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.platform.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.platform.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_CreateNonce_Request {
        CCloudGaming_CreateNonce_Request::new()
    }

    fn clear(&mut self) {
        self.platform = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_CreateNonce_Request {
        static instance: CCloudGaming_CreateNonce_Request = CCloudGaming_CreateNonce_Request {
            platform: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCloudGaming_CreateNonce_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_CreateNonce_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_CreateNonce_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCloudGaming_CreateNonce_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_CreateNonce_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_CreateNonce_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Response.nonce)
    pub nonce: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloudGaming_CreateNonce_Response.expiry)
    pub expiry: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_CreateNonce_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_CreateNonce_Response {
    fn default() -> &'a CCloudGaming_CreateNonce_Response {
        <CCloudGaming_CreateNonce_Response as crate::Message>::default_instance()
    }
}

impl CCloudGaming_CreateNonce_Response {
    pub fn new() -> CCloudGaming_CreateNonce_Response {
        ::std::default::Default::default()
    }

    // optional string nonce = 1;

    pub fn nonce(&self) -> &str {
        match self.nonce.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        if self.nonce.is_none() {
            self.nonce = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        self.nonce.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 expiry = 2;

    pub fn expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }

    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "nonce",
            |m: &CCloudGaming_CreateNonce_Response| { &m.nonce },
            |m: &mut CCloudGaming_CreateNonce_Response| { &mut m.nonce },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiry",
            |m: &CCloudGaming_CreateNonce_Response| { &m.expiry },
            |m: &mut CCloudGaming_CreateNonce_Response| { &mut m.expiry },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_CreateNonce_Response>(
            "CCloudGaming_CreateNonce_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCloudGaming_CreateNonce_Response {
    const NAME: &'static str = "CCloudGaming_CreateNonce_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.nonce = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.expiry = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.nonce.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.expiry {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.nonce.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_CreateNonce_Response {
        CCloudGaming_CreateNonce_Response::new()
    }

    fn clear(&mut self) {
        self.nonce = ::std::option::Option::None;
        self.expiry = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_CreateNonce_Response {
        static instance: CCloudGaming_CreateNonce_Response = CCloudGaming_CreateNonce_Response {
            nonce: ::std::option::Option::None,
            expiry: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCloudGaming_CreateNonce_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_CreateNonce_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_CreateNonce_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCloudGaming_CreateNonce_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_GetTimeRemaining_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_GetTimeRemaining_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_GetTimeRemaining_Request.platform)
    pub platform: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloudGaming_GetTimeRemaining_Request.appid_list)
    pub appid_list: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_GetTimeRemaining_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_GetTimeRemaining_Request {
    fn default() -> &'a CCloudGaming_GetTimeRemaining_Request {
        <CCloudGaming_GetTimeRemaining_Request as crate::Message>::default_instance()
    }
}

impl CCloudGaming_GetTimeRemaining_Request {
    pub fn new() -> CCloudGaming_GetTimeRemaining_Request {
        ::std::default::Default::default()
    }

    // optional string platform = 1;

    pub fn platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_platform(&mut self) {
        self.platform = ::std::option::Option::None;
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform = ::std::option::Option::Some(::std::string::String::new());
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 appid_list = 2;

    pub fn appid_list(&self) -> &[u32] {
        &self.appid_list
    }

    pub fn clear_appid_list(&mut self) {
        self.appid_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_appid_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.appid_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appid_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appid_list
    }

    // Take field
    pub fn take_appid_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appid_list, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform",
            |m: &CCloudGaming_GetTimeRemaining_Request| { &m.platform },
            |m: &mut CCloudGaming_GetTimeRemaining_Request| { &mut m.platform },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appid_list",
            |m: &CCloudGaming_GetTimeRemaining_Request| { &m.appid_list },
            |m: &mut CCloudGaming_GetTimeRemaining_Request| { &mut m.appid_list },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_GetTimeRemaining_Request>(
            "CCloudGaming_GetTimeRemaining_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCloudGaming_GetTimeRemaining_Request {
    const NAME: &'static str = "CCloudGaming_GetTimeRemaining_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.platform = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.appid_list)?;
                },
                16 => {
                    self.appid_list.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.platform.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        for value in &self.appid_list {
            my_size += crate::rt::uint32_size(2, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.platform.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.appid_list {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_GetTimeRemaining_Request {
        CCloudGaming_GetTimeRemaining_Request::new()
    }

    fn clear(&mut self) {
        self.platform = ::std::option::Option::None;
        self.appid_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_GetTimeRemaining_Request {
        static instance: CCloudGaming_GetTimeRemaining_Request = CCloudGaming_GetTimeRemaining_Request {
            platform: ::std::option::Option::None,
            appid_list: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCloudGaming_GetTimeRemaining_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_GetTimeRemaining_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_GetTimeRemaining_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCloudGaming_GetTimeRemaining_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_TimeRemaining)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_TimeRemaining {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_TimeRemaining.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCloudGaming_TimeRemaining.minutes_remaining)
    pub minutes_remaining: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_TimeRemaining.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_TimeRemaining {
    fn default() -> &'a CCloudGaming_TimeRemaining {
        <CCloudGaming_TimeRemaining as crate::Message>::default_instance()
    }
}

impl CCloudGaming_TimeRemaining {
    pub fn new() -> CCloudGaming_TimeRemaining {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_remaining = 2;

    pub fn minutes_remaining(&self) -> u32 {
        self.minutes_remaining.unwrap_or(0)
    }

    pub fn clear_minutes_remaining(&mut self) {
        self.minutes_remaining = ::std::option::Option::None;
    }

    pub fn has_minutes_remaining(&self) -> bool {
        self.minutes_remaining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_remaining(&mut self, v: u32) {
        self.minutes_remaining = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloudGaming_TimeRemaining| { &m.appid },
            |m: &mut CCloudGaming_TimeRemaining| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "minutes_remaining",
            |m: &CCloudGaming_TimeRemaining| { &m.minutes_remaining },
            |m: &mut CCloudGaming_TimeRemaining| { &mut m.minutes_remaining },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_TimeRemaining>(
            "CCloudGaming_TimeRemaining",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCloudGaming_TimeRemaining {
    const NAME: &'static str = "CCloudGaming_TimeRemaining";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.minutes_remaining = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.minutes_remaining {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.minutes_remaining {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_TimeRemaining {
        CCloudGaming_TimeRemaining::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.minutes_remaining = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_TimeRemaining {
        static instance: CCloudGaming_TimeRemaining = CCloudGaming_TimeRemaining {
            appid: ::std::option::Option::None,
            minutes_remaining: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCloudGaming_TimeRemaining {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_TimeRemaining").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_TimeRemaining {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCloudGaming_TimeRemaining {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloudGaming_GetTimeRemaining_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloudGaming_GetTimeRemaining_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloudGaming_GetTimeRemaining_Response.entries)
    pub entries: ::std::vec::Vec<CCloudGaming_TimeRemaining>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloudGaming_GetTimeRemaining_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_GetTimeRemaining_Response {
    fn default() -> &'a CCloudGaming_GetTimeRemaining_Response {
        <CCloudGaming_GetTimeRemaining_Response as crate::Message>::default_instance()
    }
}

impl CCloudGaming_GetTimeRemaining_Response {
    pub fn new() -> CCloudGaming_GetTimeRemaining_Response {
        ::std::default::Default::default()
    }

    // repeated .CCloudGaming_TimeRemaining entries = 2;

    pub fn entries(&self) -> &[CCloudGaming_TimeRemaining] {
        &self.entries
    }

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::std::vec::Vec<CCloudGaming_TimeRemaining>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::std::vec::Vec<CCloudGaming_TimeRemaining> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::std::vec::Vec<CCloudGaming_TimeRemaining> {
        ::std::mem::replace(&mut self.entries, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CCloudGaming_GetTimeRemaining_Response| { &m.entries },
            |m: &mut CCloudGaming_GetTimeRemaining_Response| { &mut m.entries },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCloudGaming_GetTimeRemaining_Response>(
            "CCloudGaming_GetTimeRemaining_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCloudGaming_GetTimeRemaining_Response {
    const NAME: &'static str = "CCloudGaming_GetTimeRemaining_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.entries {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloudGaming_GetTimeRemaining_Response {
        CCloudGaming_GetTimeRemaining_Response::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloudGaming_GetTimeRemaining_Response {
        static instance: CCloudGaming_GetTimeRemaining_Response = CCloudGaming_GetTimeRemaining_Response {
            entries: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCloudGaming_GetTimeRemaining_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloudGaming_GetTimeRemaining_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloudGaming_GetTimeRemaining_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCloudGaming_GetTimeRemaining_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAuthTokenPlatformType)
pub enum EAuthTokenPlatformType {
    // @@protoc_insertion_point(enum_value:EAuthTokenPlatformType.k_EAuthTokenPlatformType_Unknown)
    k_EAuthTokenPlatformType_Unknown = 0,
    // @@protoc_insertion_point(enum_value:EAuthTokenPlatformType.k_EAuthTokenPlatformType_SteamClient)
    k_EAuthTokenPlatformType_SteamClient = 1,
    // @@protoc_insertion_point(enum_value:EAuthTokenPlatformType.k_EAuthTokenPlatformType_WebBrowser)
    k_EAuthTokenPlatformType_WebBrowser = 2,
    // @@protoc_insertion_point(enum_value:EAuthTokenPlatformType.k_EAuthTokenPlatformType_MobileApp)
    k_EAuthTokenPlatformType_MobileApp = 3,
}

impl crate::Enum for EAuthTokenPlatformType {
    const NAME: &'static str = "EAuthTokenPlatformType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthTokenPlatformType> {
        match value {
            0 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            1 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_SteamClient),
            2 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_WebBrowser),
            3 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_MobileApp),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAuthTokenPlatformType> {
        match str {
            "k_EAuthTokenPlatformType_Unknown" => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            "k_EAuthTokenPlatformType_SteamClient" => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_SteamClient),
            "k_EAuthTokenPlatformType_WebBrowser" => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_WebBrowser),
            "k_EAuthTokenPlatformType_MobileApp" => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_MobileApp),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAuthTokenPlatformType] = &[
        EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
        EAuthTokenPlatformType::k_EAuthTokenPlatformType_SteamClient,
        EAuthTokenPlatformType::k_EAuthTokenPlatformType_WebBrowser,
        EAuthTokenPlatformType::k_EAuthTokenPlatformType_MobileApp,
    ];
}

impl crate::EnumFull for EAuthTokenPlatformType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAuthTokenPlatformType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAuthTokenPlatformType {
    fn default() -> Self {
        EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown
    }
}

impl EAuthTokenPlatformType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAuthTokenPlatformType>("EAuthTokenPlatformType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAuthSessionGuardType)
pub enum EAuthSessionGuardType {
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_Unknown)
    k_EAuthSessionGuardType_Unknown = 0,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_None)
    k_EAuthSessionGuardType_None = 1,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_EmailCode)
    k_EAuthSessionGuardType_EmailCode = 2,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_DeviceCode)
    k_EAuthSessionGuardType_DeviceCode = 3,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_DeviceConfirmation)
    k_EAuthSessionGuardType_DeviceConfirmation = 4,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_EmailConfirmation)
    k_EAuthSessionGuardType_EmailConfirmation = 5,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_MachineToken)
    k_EAuthSessionGuardType_MachineToken = 6,
    // @@protoc_insertion_point(enum_value:EAuthSessionGuardType.k_EAuthSessionGuardType_LegacyMachineAuth)
    k_EAuthSessionGuardType_LegacyMachineAuth = 7,
}

impl crate::Enum for EAuthSessionGuardType {
    const NAME: &'static str = "EAuthSessionGuardType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthSessionGuardType> {
        match value {
            0 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown),
            1 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_None),
            2 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_EmailCode),
            3 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceCode),
            4 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceConfirmation),
            5 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_EmailConfirmation),
            6 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_MachineToken),
            7 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_LegacyMachineAuth),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAuthSessionGuardType> {
        match str {
            "k_EAuthSessionGuardType_Unknown" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown),
            "k_EAuthSessionGuardType_None" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_None),
            "k_EAuthSessionGuardType_EmailCode" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_EmailCode),
            "k_EAuthSessionGuardType_DeviceCode" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceCode),
            "k_EAuthSessionGuardType_DeviceConfirmation" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceConfirmation),
            "k_EAuthSessionGuardType_EmailConfirmation" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_EmailConfirmation),
            "k_EAuthSessionGuardType_MachineToken" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_MachineToken),
            "k_EAuthSessionGuardType_LegacyMachineAuth" => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_LegacyMachineAuth),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAuthSessionGuardType] = &[
        EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown,
        EAuthSessionGuardType::k_EAuthSessionGuardType_None,
        EAuthSessionGuardType::k_EAuthSessionGuardType_EmailCode,
        EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceCode,
        EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceConfirmation,
        EAuthSessionGuardType::k_EAuthSessionGuardType_EmailConfirmation,
        EAuthSessionGuardType::k_EAuthSessionGuardType_MachineToken,
        EAuthSessionGuardType::k_EAuthSessionGuardType_LegacyMachineAuth,
    ];
}

impl crate::EnumFull for EAuthSessionGuardType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAuthSessionGuardType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAuthSessionGuardType {
    fn default() -> Self {
        EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown
    }
}

impl EAuthSessionGuardType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAuthSessionGuardType>("EAuthSessionGuardType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAuthSessionSecurityHistory)
pub enum EAuthSessionSecurityHistory {
    // @@protoc_insertion_point(enum_value:EAuthSessionSecurityHistory.k_EAuthSessionSecurityHistory_Invalid)
    k_EAuthSessionSecurityHistory_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EAuthSessionSecurityHistory.k_EAuthSessionSecurityHistory_UsedPreviously)
    k_EAuthSessionSecurityHistory_UsedPreviously = 1,
    // @@protoc_insertion_point(enum_value:EAuthSessionSecurityHistory.k_EAuthSessionSecurityHistory_NoPriorHistory)
    k_EAuthSessionSecurityHistory_NoPriorHistory = 2,
}

impl crate::Enum for EAuthSessionSecurityHistory {
    const NAME: &'static str = "EAuthSessionSecurityHistory";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthSessionSecurityHistory> {
        match value {
            0 => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid),
            1 => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_UsedPreviously),
            2 => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_NoPriorHistory),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAuthSessionSecurityHistory> {
        match str {
            "k_EAuthSessionSecurityHistory_Invalid" => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid),
            "k_EAuthSessionSecurityHistory_UsedPreviously" => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_UsedPreviously),
            "k_EAuthSessionSecurityHistory_NoPriorHistory" => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_NoPriorHistory),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAuthSessionSecurityHistory] = &[
        EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid,
        EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_UsedPreviously,
        EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_NoPriorHistory,
    ];
}

impl crate::EnumFull for EAuthSessionSecurityHistory {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAuthSessionSecurityHistory").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAuthSessionSecurityHistory {
    fn default() -> Self {
        EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid
    }
}

impl EAuthSessionSecurityHistory {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAuthSessionSecurityHistory>("EAuthSessionSecurityHistory")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ETokenRenewalType)
pub enum ETokenRenewalType {
    // @@protoc_insertion_point(enum_value:ETokenRenewalType.k_ETokenRenewalType_None)
    k_ETokenRenewalType_None = 0,
    // @@protoc_insertion_point(enum_value:ETokenRenewalType.k_ETokenRenewalType_Allow)
    k_ETokenRenewalType_Allow = 1,
}

impl crate::Enum for ETokenRenewalType {
    const NAME: &'static str = "ETokenRenewalType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETokenRenewalType> {
        match value {
            0 => ::std::option::Option::Some(ETokenRenewalType::k_ETokenRenewalType_None),
            1 => ::std::option::Option::Some(ETokenRenewalType::k_ETokenRenewalType_Allow),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ETokenRenewalType> {
        match str {
            "k_ETokenRenewalType_None" => ::std::option::Option::Some(ETokenRenewalType::k_ETokenRenewalType_None),
            "k_ETokenRenewalType_Allow" => ::std::option::Option::Some(ETokenRenewalType::k_ETokenRenewalType_Allow),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ETokenRenewalType] = &[
        ETokenRenewalType::k_ETokenRenewalType_None,
        ETokenRenewalType::k_ETokenRenewalType_Allow,
    ];
}

impl crate::EnumFull for ETokenRenewalType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ETokenRenewalType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ETokenRenewalType {
    fn default() -> Self {
        ETokenRenewalType::k_ETokenRenewalType_None
    }
}

impl ETokenRenewalType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<ETokenRenewalType>("ETokenRenewalType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAuthTokenRevokeAction)
pub enum EAuthTokenRevokeAction {
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeLogout)
    k_EAuthTokenRevokeLogout = 0,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokePermanent)
    k_EAuthTokenRevokePermanent = 1,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeReplaced)
    k_EAuthTokenRevokeReplaced = 2,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeSupport)
    k_EAuthTokenRevokeSupport = 3,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeConsume)
    k_EAuthTokenRevokeConsume = 4,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeNonRememberedLogout)
    k_EAuthTokenRevokeNonRememberedLogout = 5,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeNonRememberedPermanent)
    k_EAuthTokenRevokeNonRememberedPermanent = 6,
    // @@protoc_insertion_point(enum_value:EAuthTokenRevokeAction.k_EAuthTokenRevokeAutomatic)
    k_EAuthTokenRevokeAutomatic = 7,
}

impl crate::Enum for EAuthTokenRevokeAction {
    const NAME: &'static str = "EAuthTokenRevokeAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthTokenRevokeAction> {
        match value {
            0 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout),
            1 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent),
            2 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeReplaced),
            3 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeSupport),
            4 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeConsume),
            5 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedLogout),
            6 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedPermanent),
            7 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeAutomatic),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAuthTokenRevokeAction> {
        match str {
            "k_EAuthTokenRevokeLogout" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout),
            "k_EAuthTokenRevokePermanent" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent),
            "k_EAuthTokenRevokeReplaced" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeReplaced),
            "k_EAuthTokenRevokeSupport" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeSupport),
            "k_EAuthTokenRevokeConsume" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeConsume),
            "k_EAuthTokenRevokeNonRememberedLogout" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedLogout),
            "k_EAuthTokenRevokeNonRememberedPermanent" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedPermanent),
            "k_EAuthTokenRevokeAutomatic" => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeAutomatic),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAuthTokenRevokeAction] = &[
        EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout,
        EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent,
        EAuthTokenRevokeAction::k_EAuthTokenRevokeReplaced,
        EAuthTokenRevokeAction::k_EAuthTokenRevokeSupport,
        EAuthTokenRevokeAction::k_EAuthTokenRevokeConsume,
        EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedLogout,
        EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedPermanent,
        EAuthTokenRevokeAction::k_EAuthTokenRevokeAutomatic,
    ];
}

impl crate::EnumFull for EAuthTokenRevokeAction {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAuthTokenRevokeAction").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAuthTokenRevokeAction {
    fn default() -> Self {
        EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout
    }
}

impl EAuthTokenRevokeAction {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAuthTokenRevokeAction>("EAuthTokenRevokeAction")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAuthTokenState)
pub enum EAuthTokenState {
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_Invalid)
    k_EAuthTokenState_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_New)
    k_EAuthTokenState_New = 1,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_Confirmed)
    k_EAuthTokenState_Confirmed = 2,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_Issued)
    k_EAuthTokenState_Issued = 3,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_Denied)
    k_EAuthTokenState_Denied = 4,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_LoggedOut)
    k_EAuthTokenState_LoggedOut = 5,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_Consumed)
    k_EAuthTokenState_Consumed = 6,
    // @@protoc_insertion_point(enum_value:EAuthTokenState.k_EAuthTokenState_Revoked)
    k_EAuthTokenState_Revoked = 99,
}

impl crate::Enum for EAuthTokenState {
    const NAME: &'static str = "EAuthTokenState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthTokenState> {
        match value {
            0 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Invalid),
            1 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_New),
            2 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Confirmed),
            3 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Issued),
            4 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Denied),
            5 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_LoggedOut),
            6 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Consumed),
            99 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Revoked),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAuthTokenState> {
        match str {
            "k_EAuthTokenState_Invalid" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Invalid),
            "k_EAuthTokenState_New" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_New),
            "k_EAuthTokenState_Confirmed" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Confirmed),
            "k_EAuthTokenState_Issued" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Issued),
            "k_EAuthTokenState_Denied" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Denied),
            "k_EAuthTokenState_LoggedOut" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_LoggedOut),
            "k_EAuthTokenState_Consumed" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Consumed),
            "k_EAuthTokenState_Revoked" => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Revoked),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAuthTokenState] = &[
        EAuthTokenState::k_EAuthTokenState_Invalid,
        EAuthTokenState::k_EAuthTokenState_New,
        EAuthTokenState::k_EAuthTokenState_Confirmed,
        EAuthTokenState::k_EAuthTokenState_Issued,
        EAuthTokenState::k_EAuthTokenState_Denied,
        EAuthTokenState::k_EAuthTokenState_LoggedOut,
        EAuthTokenState::k_EAuthTokenState_Consumed,
        EAuthTokenState::k_EAuthTokenState_Revoked,
    ];
}

impl crate::EnumFull for EAuthTokenState {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAuthTokenState").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EAuthTokenState::k_EAuthTokenState_Invalid => 0,
            EAuthTokenState::k_EAuthTokenState_New => 1,
            EAuthTokenState::k_EAuthTokenState_Confirmed => 2,
            EAuthTokenState::k_EAuthTokenState_Issued => 3,
            EAuthTokenState::k_EAuthTokenState_Denied => 4,
            EAuthTokenState::k_EAuthTokenState_LoggedOut => 5,
            EAuthTokenState::k_EAuthTokenState_Consumed => 6,
            EAuthTokenState::k_EAuthTokenState_Revoked => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAuthTokenState {
    fn default() -> Self {
        EAuthTokenState::k_EAuthTokenState_Invalid
    }
}

impl EAuthTokenState {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAuthTokenState>("EAuthTokenState")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_auth.steamclient.proto\x1a\x18steammessages_base.proto\
    \x1a,steammessages_unified_base.steamclient.proto\x1a\x0benums.proto\"T\
    \n/CAuthentication_GetPasswordRSAPublicKey_Request\x12!\n\x0caccount_nam\
    e\x18\x01\x20\x01(\tR\x0baccountName\"\x9a\x01\n0CAuthentication_GetPass\
    wordRSAPublicKey_Response\x12#\n\rpublickey_mod\x18\x01\x20\x01(\tR\x0cp\
    ublickeyMod\x12#\n\rpublickey_exp\x18\x02\x20\x01(\tR\x0cpublickeyExp\
    \x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp\"\xba\x02\n\x1dCA\
    uthentication_DeviceDetails\x120\n\x14device_friendly_name\x18\x01\x20\
    \x01(\tR\x12deviceFriendlyName\x12^\n\rplatform_type\x18\x02\x20\x01(\
    \x0e2\x17.EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_UnknownR\
    \x0cplatformType\x12\x17\n\x07os_type\x18\x03\x20\x01(\x05R\x06osType\
    \x12,\n\x12gaming_device_type\x18\x04\x20\x01(\rR\x10gamingDeviceType\
    \x12!\n\x0cclient_count\x18\x05\x20\x01(\rR\x0bclientCount\x12\x1d\n\nma\
    chine_id\x18\x06\x20\x01(\x0cR\tmachineId\"\xb0\x02\n-CAuthentication_Be\
    ginAuthSessionViaQR_Request\x120\n\x14device_friendly_name\x18\x01\x20\
    \x01(\tR\x12deviceFriendlyName\x12^\n\rplatform_type\x18\x02\x20\x01(\
    \x0e2\x17.EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_UnknownR\
    \x0cplatformType\x12E\n\x0edevice_details\x18\x03\x20\x01(\x0b2\x1e.CAut\
    hentication_DeviceDetailsR\rdeviceDetails\x12&\n\nwebsite_id\x18\x04\x20\
    \x01(\t:\x07UnknownR\twebsiteId\"\xba\x01\n#CAuthentication_AllowedConfi\
    rmation\x12d\n\x11confirmation_type\x18\x01\x20\x01(\x0e2\x16.EAuthSessi\
    onGuardType:\x1fk_EAuthSessionGuardType_UnknownR\x10confirmationType\x12\
    -\n\x12associated_message\x18\x02\x20\x01(\tR\x11associatedMessage\"\xa2\
    \x02\n.CAuthentication_BeginAuthSessionViaQR_Response\x12\x1b\n\tclient_\
    id\x18\x01\x20\x01(\x04R\x08clientId\x12#\n\rchallenge_url\x18\x02\x20\
    \x01(\tR\x0cchallengeUrl\x12\x1d\n\nrequest_id\x18\x03\x20\x01(\x0cR\tre\
    questId\x12\x1a\n\x08interval\x18\x04\x20\x01(\x02R\x08interval\x12Y\n\
    \x15allowed_confirmations\x18\x05\x20\x03(\x0b2$.CAuthentication_Allowed\
    ConfirmationR\x14allowedConfirmations\x12\x18\n\x07version\x18\x06\x20\
    \x01(\x05R\x07version\"\x9a\x05\n6CAuthentication_BeginAuthSessionViaCre\
    dentials_Request\x120\n\x14device_friendly_name\x18\x01\x20\x01(\tR\x12d\
    eviceFriendlyName\x12!\n\x0caccount_name\x18\x02\x20\x01(\tR\x0baccountN\
    ame\x12-\n\x12encrypted_password\x18\x03\x20\x01(\tR\x11encryptedPasswor\
    d\x121\n\x14encryption_timestamp\x18\x04\x20\x01(\x04R\x13encryptionTime\
    stamp\x12%\n\x0eremember_login\x18\x05\x20\x01(\x08R\rrememberLogin\x12^\
    \n\rplatform_type\x18\x06\x20\x01(\x0e2\x17.EAuthTokenPlatformType:\x20k\
    _EAuthTokenPlatformType_UnknownR\x0cplatformType\x12X\n\x0bpersistence\
    \x18\x07\x20\x01(\x0e2\x14.ESessionPersistence:\x20k_ESessionPersistence\
    _PersistentR\x0bpersistence\x12&\n\nwebsite_id\x18\x08\x20\x01(\t:\x07Un\
    knownR\twebsiteId\x12E\n\x0edevice_details\x18\t\x20\x01(\x0b2\x1e.CAuth\
    entication_DeviceDetailsR\rdeviceDetails\x12\x1d\n\nguard_data\x18\n\x20\
    \x01(\tR\tguardData\x12\x1a\n\x08language\x18\x0b\x20\x01(\rR\x08languag\
    e\x12\x1e\n\tqos_level\x18\x0c\x20\x01(\x05:\x012R\x08qosLevel\"\x8f\x03\
    \n7CAuthentication_BeginAuthSessionViaCredentials_Response\x12\x1b\n\tcl\
    ient_id\x18\x01\x20\x01(\x04R\x08clientId\x12\x1d\n\nrequest_id\x18\x02\
    \x20\x01(\x0cR\trequestId\x12\x1a\n\x08interval\x18\x03\x20\x01(\x02R\
    \x08interval\x12Y\n\x15allowed_confirmations\x18\x04\x20\x03(\x0b2$.CAut\
    hentication_AllowedConfirmationR\x14allowedConfirmations\x12\x18\n\x07st\
    eamid\x18\x05\x20\x01(\x04R\x07steamid\x12\x1d\n\nweak_token\x18\x06\x20\
    \x01(\tR\tweakToken\x122\n\x15agreement_session_url\x18\x07\x20\x01(\tR\
    \x13agreementSessionUrl\x124\n\x16extended_error_message\x18\x08\x20\x01\
    (\tR\x14extendedErrorMessage\"\x93\x01\n-CAuthentication_PollAuthSession\
    Status_Request\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientId\
    \x12\x1d\n\nrequest_id\x18\x02\x20\x01(\x0cR\trequestId\x12&\n\x0ftoken_\
    to_revoke\x18\x03\x20\x01(\x06R\rtokenToRevoke\"\xfb\x02\n.CAuthenticati\
    on_PollAuthSessionStatus_Response\x12\"\n\rnew_client_id\x18\x01\x20\x01\
    (\x04R\x0bnewClientId\x12*\n\x11new_challenge_url\x18\x02\x20\x01(\tR\
    \x0fnewChallengeUrl\x12#\n\rrefresh_token\x18\x03\x20\x01(\tR\x0crefresh\
    Token\x12!\n\x0caccess_token\x18\x04\x20\x01(\tR\x0baccessToken\x124\n\
    \x16had_remote_interaction\x18\x05\x20\x01(\x08R\x14hadRemoteInteraction\
    \x12!\n\x0caccount_name\x18\x06\x20\x01(\tR\x0baccountName\x12$\n\x0enew\
    _guard_data\x18\x07\x20\x01(\tR\x0cnewGuardData\x122\n\x15agreement_sess\
    ion_url\x18\x08\x20\x01(\tR\x13agreementSessionUrl\"I\n*CAuthentication_\
    GetAuthSessionInfo_Request\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\
    \x08clientId\"\x83\x05\n+CAuthentication_GetAuthSessionInfo_Response\x12\
    \x0e\n\x02ip\x18\x01\x20\x01(\tR\x02ip\x12\x16\n\x06geoloc\x18\x02\x20\
    \x01(\tR\x06geoloc\x12\x12\n\x04city\x18\x03\x20\x01(\tR\x04city\x12\x14\
    \n\x05state\x18\x04\x20\x01(\tR\x05state\x12\x18\n\x07country\x18\x05\
    \x20\x01(\tR\x07country\x12^\n\rplatform_type\x18\x06\x20\x01(\x0e2\x17.\
    EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_UnknownR\x0cplatform\
    Type\x120\n\x14device_friendly_name\x18\x07\x20\x01(\tR\x12deviceFriendl\
    yName\x12\x18\n\x07version\x18\x08\x20\x01(\x05R\x07version\x12h\n\rlogi\
    n_history\x18\t\x20\x01(\x0e2\x1c.EAuthSessionSecurityHistory:%k_EAuthSe\
    ssionSecurityHistory_InvalidR\x0cloginHistory\x12>\n\x1brequestor_locati\
    on_mismatch\x18\n\x20\x01(\x08R\x19requestorLocationMismatch\x12(\n\x10h\
    igh_usage_login\x18\x0b\x20\x01(\x08R\x0ehighUsageLogin\x12h\n\x15reques\
    ted_persistence\x18\x0c\x20\x01(\x0e2\x14.ESessionPersistence:\x1dk_ESes\
    sionPersistence_InvalidR\x14requestedPersistence\"\xab\x02\n?CAuthentica\
    tion_UpdateAuthSessionWithMobileConfirmation_Request\x12\x18\n\x07versio\
    n\x18\x01\x20\x01(\x05R\x07version\x12\x1b\n\tclient_id\x18\x02\x20\x01(\
    \x04R\x08clientId\x12\x18\n\x07steamid\x18\x03\x20\x01(\x06R\x07steamid\
    \x12\x1c\n\tsignature\x18\x04\x20\x01(\x0cR\tsignature\x12\x1f\n\x07conf\
    irm\x18\x05\x20\x01(\x08:\x05falseR\x07confirm\x12X\n\x0bpersistence\x18\
    \x06\x20\x01(\x0e2\x14.ESessionPersistence:\x20k_ESessionPersistence_Per\
    sistentR\x0bpersistence\"B\n@CAuthentication_UpdateAuthSessionWithMobile\
    Confirmation_Response\"\xde\x01\n;CAuthentication_UpdateAuthSessionWithS\
    teamGuardCode_Request\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08clie\
    ntId\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamid\x12\x12\n\x04\
    code\x18\x03\x20\x01(\tR\x04code\x12T\n\tcode_type\x18\x04\x20\x01(\x0e2\
    \x16.EAuthSessionGuardType:\x1fk_EAuthSessionGuardType_UnknownR\x08codeT\
    ype\"r\n<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response\
    \x122\n\x15agreement_session_url\x18\x07\x20\x01(\tR\x13agreementSession\
    Url\"\xc4\x01\n2CAuthentication_AccessToken_GenerateForApp_Request\x12#\
    \n\rrefresh_token\x18\x01\x20\x01(\tR\x0crefreshToken\x12\x18\n\x07steam\
    id\x18\x02\x20\x01(\x06R\x07steamid\x12O\n\x0crenewal_type\x18\x03\x20\
    \x01(\x0e2\x12.ETokenRenewalType:\x18k_ETokenRenewalType_NoneR\x0brenewa\
    lType\"}\n3CAuthentication_AccessToken_GenerateForApp_Response\x12!\n\
    \x0caccess_token\x18\x01\x20\x01(\tR\x0baccessToken\x12#\n\rrefresh_toke\
    n\x18\x02\x20\x01(\tR\x0crefreshToken\"0\n.CAuthentication_RefreshToken_\
    Enumerate_Request\"\xba\x07\n/CAuthentication_RefreshToken_Enumerate_Res\
    ponse\x12o\n\x0erefresh_tokens\x18\x01\x20\x03(\x0b2H.CAuthentication_Re\
    freshToken_Enumerate_Response.RefreshTokenDescriptionR\rrefreshTokens\
    \x12)\n\x10requesting_token\x18\x02\x20\x01(\x06R\x0frequestingToken\x1a\
    \xa1\x01\n\x0fTokenUsageEvent\x12\x12\n\x04time\x18\x01\x20\x01(\rR\x04t\
    ime\x12\x1e\n\x02ip\x18\x02\x20\x01(\x0b2\x0e.CMsgIPAddressR\x02ip\x12\
    \x16\n\x06locale\x18\x03\x20\x01(\tR\x06locale\x12\x18\n\x07country\x18\
    \x04\x20\x01(\tR\x07country\x12\x14\n\x05state\x18\x05\x20\x01(\tR\x05st\
    ate\x12\x12\n\x04city\x18\x06\x20\x01(\tR\x04city\x1a\xc6\x04\n\x17Refre\
    shTokenDescription\x12\x19\n\x08token_id\x18\x01\x20\x01(\x06R\x07tokenI\
    d\x12+\n\x11token_description\x18\x02\x20\x01(\tR\x10tokenDescription\
    \x12!\n\x0ctime_updated\x18\x03\x20\x01(\rR\x0btimeUpdated\x12^\n\rplatf\
    orm_type\x18\x04\x20\x01(\x0e2\x17.EAuthTokenPlatformType:\x20k_EAuthTok\
    enPlatformType_UnknownR\x0cplatformType\x12\x1b\n\tlogged_in\x18\x05\x20\
    \x01(\x08R\x08loggedIn\x12\x1f\n\x0bos_platform\x18\x06\x20\x01(\rR\nosP\
    latform\x12\x1b\n\tauth_type\x18\x07\x20\x01(\rR\x08authType\x12,\n\x12g\
    aming_device_type\x18\x08\x20\x01(\rR\x10gamingDeviceType\x12_\n\nfirst_\
    seen\x18\t\x20\x01(\x0b2@.CAuthentication_RefreshToken_Enumerate_Respons\
    e.TokenUsageEventR\tfirstSeen\x12]\n\tlast_seen\x18\n\x20\x01(\x0b2@.CAu\
    thentication_RefreshToken_Enumerate_Response.TokenUsageEventR\x08lastSee\
    n\x12\x17\n\x07os_type\x18\x0b\x20\x01(\x05R\x06osType\"3\n1CAuthenticat\
    ion_GetAuthSessionsForAccount_Request\"S\n2CAuthentication_GetAuthSessio\
    nsForAccount_Response\x12\x1d\n\nclient_ids\x18\x01\x20\x03(\x04R\tclien\
    tIds\"|\n,CAuthentication_MigrateMobileSession_Request\x12\x18\n\x07stea\
    mid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05token\x18\x02\x20\x01(\
    \tR\x05token\x12\x1c\n\tsignature\x18\x03\x20\x01(\tR\tsignature\"w\n-CA\
    uthentication_MigrateMobileSession_Response\x12#\n\rrefresh_token\x18\
    \x01\x20\x01(\tR\x0crefreshToken\x12!\n\x0caccess_token\x18\x02\x20\x01(\
    \tR\x0baccessToken\"\x97\x01\n$CAuthentication_Token_Revoke_Request\x12\
    \x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12Y\n\rrevoke_action\x18\
    \x02\x20\x01(\x0e2\x17.EAuthTokenRevokeAction:\x1bk_EAuthTokenRevokePerm\
    anentR\x0crevokeAction\"'\n%CAuthentication_Token_Revoke_Response\"\xdb\
    \x01\n+CAuthentication_RefreshToken_Revoke_Request\x12\x19\n\x08token_id\
    \x18\x01\x20\x01(\x06R\x07tokenId\x12\x18\n\x07steamid\x18\x02\x20\x01(\
    \x06R\x07steamid\x12Y\n\rrevoke_action\x18\x03\x20\x01(\x0e2\x17.EAuthTo\
    kenRevokeAction:\x1bk_EAuthTokenRevokePermanentR\x0crevokeAction\x12\x1c\
    \n\tsignature\x18\x04\x20\x01(\x0cR\tsignature\".\n,CAuthentication_Refr\
    eshToken_Revoke_Response\"\x8c\x01\n:CAuthenticationSupport_QueryRefresh\
    TokensByAccount_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07st\
    eamid\x124\n\x16include_revoked_tokens\x18\x02\x20\x01(\x08R\x14includeR\
    evokedTokens\"\x90\x06\n\x1fCSupportRefreshTokenDescription\x12\x19\n\
    \x08token_id\x18\x01\x20\x01(\x06R\x07tokenId\x12+\n\x11token_descriptio\
    n\x18\x02\x20\x01(\tR\x10tokenDescription\x12!\n\x0ctime_updated\x18\x03\
    \x20\x01(\rR\x0btimeUpdated\x12^\n\rplatform_type\x18\x04\x20\x01(\x0e2\
    \x17.EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_UnknownR\x0cpla\
    tformType\x12L\n\x0btoken_state\x18\x05\x20\x01(\x0e2\x10.EAuthTokenStat\
    e:\x19k_EAuthTokenState_InvalidR\ntokenState\x12#\n\rowner_steamid\x18\
    \x06\x20\x01(\x06R\x0cownerSteamid\x12\x1f\n\x0bos_platform\x18\x07\x20\
    \x01(\rR\nosPlatform\x12\x17\n\x07os_type\x18\x08\x20\x01(\x05R\x06osTyp\
    e\x12\x1b\n\tauth_type\x18\t\x20\x01(\rR\x08authType\x12,\n\x12gaming_de\
    vice_type\x18\n\x20\x01(\rR\x10gamingDeviceType\x12O\n\nfirst_seen\x18\
    \x0b\x20\x01(\x0b20.CSupportRefreshTokenDescription.TokenUsageEventR\tfi\
    rstSeen\x12M\n\tlast_seen\x18\x0c\x20\x01(\x0b20.CSupportRefreshTokenDes\
    cription.TokenUsageEventR\x08lastSeen\x1a\x89\x01\n\x0fTokenUsageEvent\
    \x12\x12\n\x04time\x18\x01\x20\x01(\rR\x04time\x12\x1e\n\x02ip\x18\x02\
    \x20\x01(\x0b2\x0e.CMsgIPAddressR\x02ip\x12\x18\n\x07country\x18\x03\x20\
    \x01(\tR\x07country\x12\x14\n\x05state\x18\x04\x20\x01(\tR\x05state\x12\
    \x12\n\x04city\x18\x05\x20\x01(\tR\x04city\"\xb0\x01\n;CAuthenticationSu\
    pport_QueryRefreshTokensByAccount_Response\x12G\n\x0erefresh_tokens\x18\
    \x01\x20\x03(\x0b2\x20.CSupportRefreshTokenDescriptionR\rrefreshTokens\
    \x12(\n\x10last_token_reset\x18\x02\x20\x01(\x05R\x0elastTokenReset\"Q\n\
    4CAuthenticationSupport_QueryRefreshTokenByID_Request\x12\x19\n\x08token\
    _id\x18\x01\x20\x01(\x06R\x07tokenId\"\x80\x01\n5CAuthenticationSupport_\
    QueryRefreshTokenByID_Response\x12G\n\x0erefresh_tokens\x18\x01\x20\x03(\
    \x0b2\x20.CSupportRefreshTokenDescriptionR\rrefreshTokens\"a\n*CAuthenti\
    cationSupport_RevokeToken_Request\x12\x19\n\x08token_id\x18\x01\x20\x01(\
    \x06R\x07tokenId\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamid\"\
    -\n+CAuthenticationSupport_RevokeToken_Response\"K\n.CAuthenticationSupp\
    ort_GetTokenHistory_Request\x12\x19\n\x08token_id\x18\x01\x20\x01(\x06R\
    \x07tokenId\"}\n\x19CSupportRefreshTokenAudit\x12\x16\n\x06action\x18\
    \x01\x20\x01(\x05R\x06action\x12\x12\n\x04time\x18\x02\x20\x01(\rR\x04ti\
    me\x12\x1e\n\x02ip\x18\x03\x20\x01(\x0b2\x0e.CMsgIPAddressR\x02ip\x12\
    \x14\n\x05actor\x18\x04\x20\x01(\x06R\x05actor\"g\n/CAuthenticationSuppo\
    rt_GetTokenHistory_Response\x124\n\x07history\x18\x01\x20\x03(\x0b2\x1a.\
    CSupportRefreshTokenAuditR\x07history\"T\n\x20CCloudGaming_CreateNonce_R\
    equest\x12\x1a\n\x08platform\x18\x01\x20\x01(\tR\x08platform\x12\x14\n\
    \x05appid\x18\x02\x20\x01(\rR\x05appid\"Q\n!CCloudGaming_CreateNonce_Res\
    ponse\x12\x14\n\x05nonce\x18\x01\x20\x01(\tR\x05nonce\x12\x16\n\x06expir\
    y\x18\x02\x20\x01(\rR\x06expiry\"b\n%CCloudGaming_GetTimeRemaining_Reque\
    st\x12\x1a\n\x08platform\x18\x01\x20\x01(\tR\x08platform\x12\x1d\n\nappi\
    d_list\x18\x02\x20\x03(\rR\tappidList\"_\n\x1aCCloudGaming_TimeRemaining\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12+\n\x11minutes_remai\
    ning\x18\x02\x20\x01(\rR\x10minutesRemaining\"_\n&CCloudGaming_GetTimeRe\
    maining_Response\x125\n\x07entries\x18\x02\x20\x03(\x0b2\x1b.CCloudGamin\
    g_TimeRemainingR\x07entries*\xb9\x01\n\x16EAuthTokenPlatformType\x12$\n\
    \x20k_EAuthTokenPlatformType_Unknown\x10\0\x12(\n$k_EAuthTokenPlatformTy\
    pe_SteamClient\x10\x01\x12'\n#k_EAuthTokenPlatformType_WebBrowser\x10\
    \x02\x12&\n\"k_EAuthTokenPlatformType_MobileApp\x10\x03*\xe5\x02\n\x15EA\
    uthSessionGuardType\x12#\n\x1fk_EAuthSessionGuardType_Unknown\x10\0\x12\
    \x20\n\x1ck_EAuthSessionGuardType_None\x10\x01\x12%\n!k_EAuthSessionGuar\
    dType_EmailCode\x10\x02\x12&\n\"k_EAuthSessionGuardType_DeviceCode\x10\
    \x03\x12.\n*k_EAuthSessionGuardType_DeviceConfirmation\x10\x04\x12-\n)k_\
    EAuthSessionGuardType_EmailConfirmation\x10\x05\x12(\n$k_EAuthSessionGua\
    rdType_MachineToken\x10\x06\x12-\n)k_EAuthSessionGuardType_LegacyMachine\
    Auth\x10\x07*\xac\x01\n\x1bEAuthSessionSecurityHistory\x12)\n%k_EAuthSes\
    sionSecurityHistory_Invalid\x10\0\x120\n,k_EAuthSessionSecurityHistory_U\
    sedPreviously\x10\x01\x120\n,k_EAuthSessionSecurityHistory_NoPriorHistor\
    y\x10\x02*P\n\x11ETokenRenewalType\x12\x1c\n\x18k_ETokenRenewalType_None\
    \x10\0\x12\x1d\n\x19k_ETokenRenewalType_Allow\x10\x01*\xaf\x02\n\x16EAut\
    hTokenRevokeAction\x12\x1c\n\x18k_EAuthTokenRevokeLogout\x10\0\x12\x1f\n\
    \x1bk_EAuthTokenRevokePermanent\x10\x01\x12\x1e\n\x1ak_EAuthTokenRevokeR\
    eplaced\x10\x02\x12\x1d\n\x19k_EAuthTokenRevokeSupport\x10\x03\x12\x1d\n\
    \x19k_EAuthTokenRevokeConsume\x10\x04\x12)\n%k_EAuthTokenRevokeNonRememb\
    eredLogout\x10\x05\x12,\n(k_EAuthTokenRevokeNonRememberedPermanent\x10\
    \x06\x12\x1f\n\x1bk_EAuthTokenRevokeAutomatic\x10\x07*\x88\x02\n\x0fEAut\
    hTokenState\x12\x1d\n\x19k_EAuthTokenState_Invalid\x10\0\x12\x19\n\x15k_\
    EAuthTokenState_New\x10\x01\x12\x1f\n\x1bk_EAuthTokenState_Confirmed\x10\
    \x02\x12\x1c\n\x18k_EAuthTokenState_Issued\x10\x03\x12\x1c\n\x18k_EAuthT\
    okenState_Denied\x10\x04\x12\x1f\n\x1bk_EAuthTokenState_LoggedOut\x10\
    \x05\x12\x1e\n\x1ak_EAuthTokenState_Consumed\x10\x06\x12\x1d\n\x19k_EAut\
    hTokenState_Revoked\x10c2\xaf\r\n\x0eAuthentication\x12~\n\x17GetPasswor\
    dRSAPublicKey\x120.CAuthentication_GetPasswordRSAPublicKey_Request\x1a1.\
    CAuthentication_GetPasswordRSAPublicKey_Response\x12x\n\x15BeginAuthSess\
    ionViaQR\x12..CAuthentication_BeginAuthSessionViaQR_Request\x1a/.CAuthen\
    tication_BeginAuthSessionViaQR_Response\x12\x93\x01\n\x1eBeginAuthSessio\
    nViaCredentials\x127.CAuthentication_BeginAuthSessionViaCredentials_Requ\
    est\x1a8.CAuthentication_BeginAuthSessionViaCredentials_Response\x12x\n\
    \x15PollAuthSessionStatus\x12..CAuthentication_PollAuthSessionStatus_Req\
    uest\x1a/.CAuthentication_PollAuthSessionStatus_Response\x12o\n\x12GetAu\
    thSessionInfo\x12+.CAuthentication_GetAuthSessionInfo_Request\x1a,.CAuth\
    entication_GetAuthSessionInfo_Response\x12\xae\x01\n'UpdateAuthSessionWi\
    thMobileConfirmation\x12@.CAuthentication_UpdateAuthSessionWithMobileCon\
    firmation_Request\x1aA.CAuthentication_UpdateAuthSessionWithMobileConfir\
    mation_Response\x12\xa2\x01\n#UpdateAuthSessionWithSteamGuardCode\x12<.C\
    Authentication_UpdateAuthSessionWithSteamGuardCode_Request\x1a=.CAuthent\
    ication_UpdateAuthSessionWithSteamGuardCode_Response\x12\x86\x01\n\x19Ge\
    nerateAccessTokenForApp\x123.CAuthentication_AccessToken_GenerateForApp_\
    Request\x1a4.CAuthentication_AccessToken_GenerateForApp_Response\x12t\n\
    \x0fEnumerateTokens\x12/.CAuthentication_RefreshToken_Enumerate_Request\
    \x1a0.CAuthentication_RefreshToken_Enumerate_Response\x12\x84\x01\n\x19G\
    etAuthSessionsForAccount\x122.CAuthentication_GetAuthSessionsForAccount_\
    Request\x1a3.CAuthentication_GetAuthSessionsForAccount_Response\x12u\n\
    \x14MigrateMobileSession\x12-.CAuthentication_MigrateMobileSession_Reque\
    st\x1a..CAuthentication_MigrateMobileSession_Response\x12\\\n\x0bRevokeT\
    oken\x12%.CAuthentication_Token_Revoke_Request\x1a&.CAuthentication_Toke\
    n_Revoke_Response\x12q\n\x12RevokeRefreshToken\x12,.CAuthentication_Refr\
    eshToken_Revoke_Request\x1a-.CAuthentication_RefreshToken_Revoke_Respons\
    e2\x9b\x04\n\x15AuthenticationSupport\x12\x98\x01\n\x1bQueryRefreshToken\
    sByAccount\x12;.CAuthenticationSupport_QueryRefreshTokensByAccount_Reque\
    st\x1a<.CAuthenticationSupport_QueryRefreshTokensByAccount_Response\x12\
    \x86\x01\n\x15QueryRefreshTokenByID\x125.CAuthenticationSupport_QueryRef\
    reshTokenByID_Request\x1a6.CAuthenticationSupport_QueryRefreshTokenByID_\
    Response\x12h\n\x0bRevokeToken\x12+.CAuthenticationSupport_RevokeToken_R\
    equest\x1a,.CAuthenticationSupport_RevokeToken_Response\x12t\n\x0fGetTok\
    enHistory\x12/.CAuthenticationSupport_GetTokenHistory_Request\x1a0.CAuth\
    enticationSupport_GetTokenHistory_Response2\xc8\x01\n\x0bCloudGaming\x12\
    T\n\x0bCreateNonce\x12!.CCloudGaming_CreateNonce_Request\x1a\".CCloudGam\
    ing_CreateNonce_Response\x12c\n\x10GetTimeRemaining\x12&.CCloudGaming_Ge\
    tTimeRemaining_Request\x1a'.CCloudGaming_GetTimeRemaining_ResponseB\x03\
    \x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            deps.push(super::enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(46);
            messages.push(CAuthentication_GetPasswordRSAPublicKey_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_GetPasswordRSAPublicKey_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_DeviceDetails::generated_message_descriptor_data());
            messages.push(CAuthentication_BeginAuthSessionViaQR_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_AllowedConfirmation::generated_message_descriptor_data());
            messages.push(CAuthentication_BeginAuthSessionViaQR_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_BeginAuthSessionViaCredentials_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_BeginAuthSessionViaCredentials_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_PollAuthSessionStatus_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_PollAuthSessionStatus_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_GetAuthSessionInfo_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_GetAuthSessionInfo_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_AccessToken_GenerateForApp_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_AccessToken_GenerateForApp_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_RefreshToken_Enumerate_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_RefreshToken_Enumerate_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_GetAuthSessionsForAccount_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_GetAuthSessionsForAccount_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_MigrateMobileSession_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_MigrateMobileSession_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_Token_Revoke_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_Token_Revoke_Response::generated_message_descriptor_data());
            messages.push(CAuthentication_RefreshToken_Revoke_Request::generated_message_descriptor_data());
            messages.push(CAuthentication_RefreshToken_Revoke_Response::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_QueryRefreshTokensByAccount_Request::generated_message_descriptor_data());
            messages.push(CSupportRefreshTokenDescription::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_QueryRefreshTokensByAccount_Response::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_QueryRefreshTokenByID_Request::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_QueryRefreshTokenByID_Response::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_RevokeToken_Request::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_RevokeToken_Response::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_GetTokenHistory_Request::generated_message_descriptor_data());
            messages.push(CSupportRefreshTokenAudit::generated_message_descriptor_data());
            messages.push(CAuthenticationSupport_GetTokenHistory_Response::generated_message_descriptor_data());
            messages.push(CCloudGaming_CreateNonce_Request::generated_message_descriptor_data());
            messages.push(CCloudGaming_CreateNonce_Response::generated_message_descriptor_data());
            messages.push(CCloudGaming_GetTimeRemaining_Request::generated_message_descriptor_data());
            messages.push(CCloudGaming_TimeRemaining::generated_message_descriptor_data());
            messages.push(CCloudGaming_GetTimeRemaining_Response::generated_message_descriptor_data());
            messages.push(cauthentication_refresh_token_enumerate_response::TokenUsageEvent::generated_message_descriptor_data());
            messages.push(cauthentication_refresh_token_enumerate_response::RefreshTokenDescription::generated_message_descriptor_data());
            messages.push(csupport_refresh_token_description::TokenUsageEvent::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(EAuthTokenPlatformType::generated_enum_descriptor_data());
            enums.push(EAuthSessionGuardType::generated_enum_descriptor_data());
            enums.push(EAuthSessionSecurityHistory::generated_enum_descriptor_data());
            enums.push(ETokenRenewalType::generated_enum_descriptor_data());
            enums.push(EAuthTokenRevokeAction::generated_enum_descriptor_data());
            enums.push(EAuthTokenState::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
