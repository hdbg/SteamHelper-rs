// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_inventory.steamclient.proto`

// @@protoc_insertion_point(message:CInventory_GetInventory_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetInventory_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_GetInventory_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_GetInventory_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetInventory_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetInventory_Request {
    fn default() -> &'a CInventory_GetInventory_Request {
        <CInventory_GetInventory_Request as crate::Message>::default_instance()
    }
}

impl CInventory_GetInventory_Request {
    pub fn new() -> CInventory_GetInventory_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_GetInventory_Request| { &m.appid },
            |m: &mut CInventory_GetInventory_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_GetInventory_Request| { &m.steamid },
            |m: &mut CInventory_GetInventory_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetInventory_Request>(
            "CInventory_GetInventory_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetInventory_Request {
    const NAME: &'static str = "CInventory_GetInventory_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetInventory_Request {
        CInventory_GetInventory_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetInventory_Request {
        static instance: CInventory_GetInventory_Request = CInventory_GetInventory_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetInventory_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetInventory_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetInventory_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetInventory_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_Response {
    // message fields
    // @@protoc_insertion_point(field:CInventory_Response.etag)
    pub etag: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CInventory_Response.removeditemids)
    pub removeditemids: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CInventory_Response.item_json)
    pub item_json: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CInventory_Response.itemdef_json)
    pub itemdef_json: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CInventory_Response.ticket)
    pub ticket: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CInventory_Response.replayed)
    pub replayed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_Response {
    fn default() -> &'a CInventory_Response {
        <CInventory_Response as crate::Message>::default_instance()
    }
}

impl CInventory_Response {
    pub fn new() -> CInventory_Response {
        ::std::default::Default::default()
    }

    // optional string etag = 1;

    pub fn etag(&self) -> &str {
        match self.etag.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_etag(&mut self) {
        self.etag = ::std::option::Option::None;
    }

    pub fn has_etag(&self) -> bool {
        self.etag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        if self.etag.is_none() {
            self.etag = ::std::option::Option::Some(::std::string::String::new());
        }
        self.etag.as_mut().unwrap()
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        self.etag.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint64 removeditemids = 2;

    pub fn removeditemids(&self) -> &[u64] {
        &self.removeditemids
    }

    pub fn clear_removeditemids(&mut self) {
        self.removeditemids.clear();
    }

    // Param is passed by value, moved
    pub fn set_removeditemids(&mut self, v: ::std::vec::Vec<u64>) {
        self.removeditemids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removeditemids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.removeditemids
    }

    // Take field
    pub fn take_removeditemids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.removeditemids, ::std::vec::Vec::new())
    }

    // optional string item_json = 3;

    pub fn item_json(&self) -> &str {
        match self.item_json.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_item_json(&mut self) {
        self.item_json = ::std::option::Option::None;
    }

    pub fn has_item_json(&self) -> bool {
        self.item_json.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_json(&mut self, v: ::std::string::String) {
        self.item_json = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item_json(&mut self) -> &mut ::std::string::String {
        if self.item_json.is_none() {
            self.item_json = ::std::option::Option::Some(::std::string::String::new());
        }
        self.item_json.as_mut().unwrap()
    }

    // Take field
    pub fn take_item_json(&mut self) -> ::std::string::String {
        self.item_json.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string itemdef_json = 4;

    pub fn itemdef_json(&self) -> &str {
        match self.itemdef_json.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_itemdef_json(&mut self) {
        self.itemdef_json = ::std::option::Option::None;
    }

    pub fn has_itemdef_json(&self) -> bool {
        self.itemdef_json.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemdef_json(&mut self, v: ::std::string::String) {
        self.itemdef_json = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_itemdef_json(&mut self) -> &mut ::std::string::String {
        if self.itemdef_json.is_none() {
            self.itemdef_json = ::std::option::Option::Some(::std::string::String::new());
        }
        self.itemdef_json.as_mut().unwrap()
    }

    // Take field
    pub fn take_itemdef_json(&mut self) -> ::std::string::String {
        self.itemdef_json.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes ticket = 5;

    pub fn ticket(&self) -> &[u8] {
        match self.ticket.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ticket(&mut self) {
        self.ticket = ::std::option::Option::None;
    }

    pub fn has_ticket(&self) -> bool {
        self.ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticket(&mut self, v: ::bytes::Bytes) {
        self.ticket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticket(&mut self) -> &mut ::bytes::Bytes {
        if self.ticket.is_none() {
            self.ticket = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_ticket(&mut self) -> ::bytes::Bytes {
        self.ticket.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bool replayed = 6;

    pub fn replayed(&self) -> bool {
        self.replayed.unwrap_or(false)
    }

    pub fn clear_replayed(&mut self) {
        self.replayed = ::std::option::Option::None;
    }

    pub fn has_replayed(&self) -> bool {
        self.replayed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replayed(&mut self, v: bool) {
        self.replayed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "etag",
            |m: &CInventory_Response| { &m.etag },
            |m: &mut CInventory_Response| { &mut m.etag },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "removeditemids",
            |m: &CInventory_Response| { &m.removeditemids },
            |m: &mut CInventory_Response| { &mut m.removeditemids },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_json",
            |m: &CInventory_Response| { &m.item_json },
            |m: &mut CInventory_Response| { &mut m.item_json },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemdef_json",
            |m: &CInventory_Response| { &m.itemdef_json },
            |m: &mut CInventory_Response| { &mut m.itemdef_json },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ticket",
            |m: &CInventory_Response| { &m.ticket },
            |m: &mut CInventory_Response| { &mut m.ticket },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "replayed",
            |m: &CInventory_Response| { &m.replayed },
            |m: &mut CInventory_Response| { &mut m.replayed },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_Response>(
            "CInventory_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_Response {
    const NAME: &'static str = "CInventory_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.etag = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.removeditemids)?;
                },
                16 => {
                    self.removeditemids.push(is.read_uint64()?);
                },
                26 => {
                    self.item_json = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.itemdef_json = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.ticket = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                48 => {
                    self.replayed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.etag.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        for value in &self.removeditemids {
            my_size += crate::rt::uint64_size(2, *value);
        };
        if let Some(v) = self.item_json.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.itemdef_json.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.ticket.as_ref() {
            my_size += crate::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.replayed {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.etag.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.removeditemids {
            os.write_uint64(2, *v)?;
        };
        if let Some(v) = self.item_json.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.itemdef_json.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.ticket.as_ref() {
            os.write_bytes(5, v)?;
        }
        if let Some(v) = self.replayed {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_Response {
        CInventory_Response::new()
    }

    fn clear(&mut self) {
        self.etag = ::std::option::Option::None;
        self.removeditemids.clear();
        self.item_json = ::std::option::Option::None;
        self.itemdef_json = ::std::option::Option::None;
        self.ticket = ::std::option::Option::None;
        self.replayed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_Response {
        static instance: CInventory_Response = CInventory_Response {
            etag: ::std::option::Option::None,
            removeditemids: ::std::vec::Vec::new(),
            item_json: ::std::option::Option::None,
            itemdef_json: ::std::option::Option::None,
            ticket: ::std::option::Option::None,
            replayed: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_ExchangeItem_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_ExchangeItem_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_ExchangeItem_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_ExchangeItem_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_ExchangeItem_Request.materialsitemid)
    pub materialsitemid: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CInventory_ExchangeItem_Request.materialsquantity)
    pub materialsquantity: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CInventory_ExchangeItem_Request.outputitemdefid)
    pub outputitemdefid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_ExchangeItem_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_ExchangeItem_Request {
    fn default() -> &'a CInventory_ExchangeItem_Request {
        <CInventory_ExchangeItem_Request as crate::Message>::default_instance()
    }
}

impl CInventory_ExchangeItem_Request {
    pub fn new() -> CInventory_ExchangeItem_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // repeated uint64 materialsitemid = 3;

    pub fn materialsitemid(&self) -> &[u64] {
        &self.materialsitemid
    }

    pub fn clear_materialsitemid(&mut self) {
        self.materialsitemid.clear();
    }

    // Param is passed by value, moved
    pub fn set_materialsitemid(&mut self, v: ::std::vec::Vec<u64>) {
        self.materialsitemid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_materialsitemid(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.materialsitemid
    }

    // Take field
    pub fn take_materialsitemid(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.materialsitemid, ::std::vec::Vec::new())
    }

    // repeated uint32 materialsquantity = 4;

    pub fn materialsquantity(&self) -> &[u32] {
        &self.materialsquantity
    }

    pub fn clear_materialsquantity(&mut self) {
        self.materialsquantity.clear();
    }

    // Param is passed by value, moved
    pub fn set_materialsquantity(&mut self, v: ::std::vec::Vec<u32>) {
        self.materialsquantity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_materialsquantity(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.materialsquantity
    }

    // Take field
    pub fn take_materialsquantity(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.materialsquantity, ::std::vec::Vec::new())
    }

    // optional uint64 outputitemdefid = 5;

    pub fn outputitemdefid(&self) -> u64 {
        self.outputitemdefid.unwrap_or(0)
    }

    pub fn clear_outputitemdefid(&mut self) {
        self.outputitemdefid = ::std::option::Option::None;
    }

    pub fn has_outputitemdefid(&self) -> bool {
        self.outputitemdefid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outputitemdefid(&mut self, v: u64) {
        self.outputitemdefid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_ExchangeItem_Request| { &m.appid },
            |m: &mut CInventory_ExchangeItem_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_ExchangeItem_Request| { &m.steamid },
            |m: &mut CInventory_ExchangeItem_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "materialsitemid",
            |m: &CInventory_ExchangeItem_Request| { &m.materialsitemid },
            |m: &mut CInventory_ExchangeItem_Request| { &mut m.materialsitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "materialsquantity",
            |m: &CInventory_ExchangeItem_Request| { &m.materialsquantity },
            |m: &mut CInventory_ExchangeItem_Request| { &mut m.materialsquantity },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "outputitemdefid",
            |m: &CInventory_ExchangeItem_Request| { &m.outputitemdefid },
            |m: &mut CInventory_ExchangeItem_Request| { &mut m.outputitemdefid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_ExchangeItem_Request>(
            "CInventory_ExchangeItem_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_ExchangeItem_Request {
    const NAME: &'static str = "CInventory_ExchangeItem_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    is.read_repeated_packed_uint64_into(&mut self.materialsitemid)?;
                },
                24 => {
                    self.materialsitemid.push(is.read_uint64()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.materialsquantity)?;
                },
                32 => {
                    self.materialsquantity.push(is.read_uint32()?);
                },
                40 => {
                    self.outputitemdefid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        for value in &self.materialsitemid {
            my_size += crate::rt::uint64_size(3, *value);
        };
        for value in &self.materialsquantity {
            my_size += crate::rt::uint32_size(4, *value);
        };
        if let Some(v) = self.outputitemdefid {
            my_size += crate::rt::uint64_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        for v in &self.materialsitemid {
            os.write_uint64(3, *v)?;
        };
        for v in &self.materialsquantity {
            os.write_uint32(4, *v)?;
        };
        if let Some(v) = self.outputitemdefid {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_ExchangeItem_Request {
        CInventory_ExchangeItem_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.materialsitemid.clear();
        self.materialsquantity.clear();
        self.outputitemdefid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_ExchangeItem_Request {
        static instance: CInventory_ExchangeItem_Request = CInventory_ExchangeItem_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            materialsitemid: ::std::vec::Vec::new(),
            materialsquantity: ::std::vec::Vec::new(),
            outputitemdefid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_ExchangeItem_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_ExchangeItem_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_ExchangeItem_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_ExchangeItem_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_GetEligiblePromoItemDefIDs_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetEligiblePromoItemDefIDs_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_GetEligiblePromoItemDefIDs_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_GetEligiblePromoItemDefIDs_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetEligiblePromoItemDefIDs_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetEligiblePromoItemDefIDs_Request {
    fn default() -> &'a CInventory_GetEligiblePromoItemDefIDs_Request {
        <CInventory_GetEligiblePromoItemDefIDs_Request as crate::Message>::default_instance()
    }
}

impl CInventory_GetEligiblePromoItemDefIDs_Request {
    pub fn new() -> CInventory_GetEligiblePromoItemDefIDs_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_GetEligiblePromoItemDefIDs_Request| { &m.appid },
            |m: &mut CInventory_GetEligiblePromoItemDefIDs_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_GetEligiblePromoItemDefIDs_Request| { &m.steamid },
            |m: &mut CInventory_GetEligiblePromoItemDefIDs_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetEligiblePromoItemDefIDs_Request>(
            "CInventory_GetEligiblePromoItemDefIDs_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetEligiblePromoItemDefIDs_Request {
    const NAME: &'static str = "CInventory_GetEligiblePromoItemDefIDs_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetEligiblePromoItemDefIDs_Request {
        CInventory_GetEligiblePromoItemDefIDs_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetEligiblePromoItemDefIDs_Request {
        static instance: CInventory_GetEligiblePromoItemDefIDs_Request = CInventory_GetEligiblePromoItemDefIDs_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetEligiblePromoItemDefIDs_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetEligiblePromoItemDefIDs_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetEligiblePromoItemDefIDs_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetEligiblePromoItemDefIDs_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_GetEligiblePromoItemDefIDs_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetEligiblePromoItemDefIDs_Response {
    // message fields
    // @@protoc_insertion_point(field:CInventory_GetEligiblePromoItemDefIDs_Response.itemdefids)
    pub itemdefids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetEligiblePromoItemDefIDs_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetEligiblePromoItemDefIDs_Response {
    fn default() -> &'a CInventory_GetEligiblePromoItemDefIDs_Response {
        <CInventory_GetEligiblePromoItemDefIDs_Response as crate::Message>::default_instance()
    }
}

impl CInventory_GetEligiblePromoItemDefIDs_Response {
    pub fn new() -> CInventory_GetEligiblePromoItemDefIDs_Response {
        ::std::default::Default::default()
    }

    // repeated uint64 itemdefids = 1;

    pub fn itemdefids(&self) -> &[u64] {
        &self.itemdefids
    }

    pub fn clear_itemdefids(&mut self) {
        self.itemdefids.clear();
    }

    // Param is passed by value, moved
    pub fn set_itemdefids(&mut self, v: ::std::vec::Vec<u64>) {
        self.itemdefids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_itemdefids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.itemdefids
    }

    // Take field
    pub fn take_itemdefids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.itemdefids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "itemdefids",
            |m: &CInventory_GetEligiblePromoItemDefIDs_Response| { &m.itemdefids },
            |m: &mut CInventory_GetEligiblePromoItemDefIDs_Response| { &mut m.itemdefids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetEligiblePromoItemDefIDs_Response>(
            "CInventory_GetEligiblePromoItemDefIDs_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetEligiblePromoItemDefIDs_Response {
    const NAME: &'static str = "CInventory_GetEligiblePromoItemDefIDs_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.itemdefids)?;
                },
                8 => {
                    self.itemdefids.push(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.itemdefids {
            my_size += crate::rt::uint64_size(1, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.itemdefids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetEligiblePromoItemDefIDs_Response {
        CInventory_GetEligiblePromoItemDefIDs_Response::new()
    }

    fn clear(&mut self) {
        self.itemdefids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetEligiblePromoItemDefIDs_Response {
        static instance: CInventory_GetEligiblePromoItemDefIDs_Response = CInventory_GetEligiblePromoItemDefIDs_Response {
            itemdefids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetEligiblePromoItemDefIDs_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetEligiblePromoItemDefIDs_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetEligiblePromoItemDefIDs_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetEligiblePromoItemDefIDs_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_AddItem_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_AddItem_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.itemdefid)
    pub itemdefid: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.itempropsjson)
    pub itempropsjson: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.notify)
    pub notify: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.trade_restriction)
    pub trade_restriction: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CInventory_AddItem_Request.is_purchase)
    pub is_purchase: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_AddItem_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_AddItem_Request {
    fn default() -> &'a CInventory_AddItem_Request {
        <CInventory_AddItem_Request as crate::Message>::default_instance()
    }
}

impl CInventory_AddItem_Request {
    pub fn new() -> CInventory_AddItem_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // repeated uint64 itemdefid = 2;

    pub fn itemdefid(&self) -> &[u64] {
        &self.itemdefid
    }

    pub fn clear_itemdefid(&mut self) {
        self.itemdefid.clear();
    }

    // Param is passed by value, moved
    pub fn set_itemdefid(&mut self, v: ::std::vec::Vec<u64>) {
        self.itemdefid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_itemdefid(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.itemdefid
    }

    // Take field
    pub fn take_itemdefid(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.itemdefid, ::std::vec::Vec::new())
    }

    // repeated string itempropsjson = 3;

    pub fn itempropsjson(&self) -> &[::std::string::String] {
        &self.itempropsjson
    }

    pub fn clear_itempropsjson(&mut self) {
        self.itempropsjson.clear();
    }

    // Param is passed by value, moved
    pub fn set_itempropsjson(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.itempropsjson = v;
    }

    // Mutable pointer to the field.
    pub fn mut_itempropsjson(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.itempropsjson
    }

    // Take field
    pub fn take_itempropsjson(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.itempropsjson, ::std::vec::Vec::new())
    }

    // optional uint64 steamid = 4;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool notify = 5;

    pub fn notify(&self) -> bool {
        self.notify.unwrap_or(false)
    }

    pub fn clear_notify(&mut self) {
        self.notify = ::std::option::Option::None;
    }

    pub fn has_notify(&self) -> bool {
        self.notify.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notify(&mut self, v: bool) {
        self.notify = ::std::option::Option::Some(v);
    }

    // optional uint64 requestid = 6;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional bool trade_restriction = 7;

    pub fn trade_restriction(&self) -> bool {
        self.trade_restriction.unwrap_or(false)
    }

    pub fn clear_trade_restriction(&mut self) {
        self.trade_restriction = ::std::option::Option::None;
    }

    pub fn has_trade_restriction(&self) -> bool {
        self.trade_restriction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trade_restriction(&mut self, v: bool) {
        self.trade_restriction = ::std::option::Option::Some(v);
    }

    // optional bool is_purchase = 8;

    pub fn is_purchase(&self) -> bool {
        self.is_purchase.unwrap_or(false)
    }

    pub fn clear_is_purchase(&mut self) {
        self.is_purchase = ::std::option::Option::None;
    }

    pub fn has_is_purchase(&self) -> bool {
        self.is_purchase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_purchase(&mut self, v: bool) {
        self.is_purchase = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_AddItem_Request| { &m.appid },
            |m: &mut CInventory_AddItem_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "itemdefid",
            |m: &CInventory_AddItem_Request| { &m.itemdefid },
            |m: &mut CInventory_AddItem_Request| { &mut m.itemdefid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "itempropsjson",
            |m: &CInventory_AddItem_Request| { &m.itempropsjson },
            |m: &mut CInventory_AddItem_Request| { &mut m.itempropsjson },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_AddItem_Request| { &m.steamid },
            |m: &mut CInventory_AddItem_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "notify",
            |m: &CInventory_AddItem_Request| { &m.notify },
            |m: &mut CInventory_AddItem_Request| { &mut m.notify },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &CInventory_AddItem_Request| { &m.requestid },
            |m: &mut CInventory_AddItem_Request| { &mut m.requestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "trade_restriction",
            |m: &CInventory_AddItem_Request| { &m.trade_restriction },
            |m: &mut CInventory_AddItem_Request| { &mut m.trade_restriction },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_purchase",
            |m: &CInventory_AddItem_Request| { &m.is_purchase },
            |m: &mut CInventory_AddItem_Request| { &mut m.is_purchase },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_AddItem_Request>(
            "CInventory_AddItem_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_AddItem_Request {
    const NAME: &'static str = "CInventory_AddItem_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.itemdefid)?;
                },
                16 => {
                    self.itemdefid.push(is.read_uint64()?);
                },
                26 => {
                    self.itempropsjson.push(is.read_string()?);
                },
                32 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.notify = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.requestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.trade_restriction = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_purchase = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.itemdefid {
            my_size += crate::rt::uint64_size(2, *value);
        };
        for value in &self.itempropsjson {
            my_size += crate::rt::string_size(3, &value);
        };
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(4, v);
        }
        if let Some(v) = self.notify {
            my_size += 1 + 1;
        }
        if let Some(v) = self.requestid {
            my_size += crate::rt::uint64_size(6, v);
        }
        if let Some(v) = self.trade_restriction {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_purchase {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        for v in &self.itemdefid {
            os.write_uint64(2, *v)?;
        };
        for v in &self.itempropsjson {
            os.write_string(3, &v)?;
        };
        if let Some(v) = self.steamid {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.notify {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.requestid {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.trade_restriction {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_purchase {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_AddItem_Request {
        CInventory_AddItem_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.itemdefid.clear();
        self.itempropsjson.clear();
        self.steamid = ::std::option::Option::None;
        self.notify = ::std::option::Option::None;
        self.requestid = ::std::option::Option::None;
        self.trade_restriction = ::std::option::Option::None;
        self.is_purchase = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_AddItem_Request {
        static instance: CInventory_AddItem_Request = CInventory_AddItem_Request {
            appid: ::std::option::Option::None,
            itemdefid: ::std::vec::Vec::new(),
            itempropsjson: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            notify: ::std::option::Option::None,
            requestid: ::std::option::Option::None,
            trade_restriction: ::std::option::Option::None,
            is_purchase: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_AddItem_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_AddItem_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_AddItem_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_AddItem_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_ModifyItems_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_ModifyItems_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.updates)
    pub updates: ::std::vec::Vec<cinventory_modify_items_request::ItemPropertyUpdate>,
    // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_ModifyItems_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_ModifyItems_Request {
    fn default() -> &'a CInventory_ModifyItems_Request {
        <CInventory_ModifyItems_Request as crate::Message>::default_instance()
    }
}

impl CInventory_ModifyItems_Request {
    pub fn new() -> CInventory_ModifyItems_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // repeated .CInventory_ModifyItems_Request.ItemPropertyUpdate updates = 3;

    pub fn updates(&self) -> &[cinventory_modify_items_request::ItemPropertyUpdate] {
        &self.updates
    }

    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::std::vec::Vec<cinventory_modify_items_request::ItemPropertyUpdate>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::std::vec::Vec<cinventory_modify_items_request::ItemPropertyUpdate> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::std::vec::Vec<cinventory_modify_items_request::ItemPropertyUpdate> {
        ::std::mem::replace(&mut self.updates, ::std::vec::Vec::new())
    }

    // optional uint32 timestamp = 4;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_ModifyItems_Request| { &m.appid },
            |m: &mut CInventory_ModifyItems_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_ModifyItems_Request| { &m.steamid },
            |m: &mut CInventory_ModifyItems_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "updates",
            |m: &CInventory_ModifyItems_Request| { &m.updates },
            |m: &mut CInventory_ModifyItems_Request| { &mut m.updates },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CInventory_ModifyItems_Request| { &m.timestamp },
            |m: &mut CInventory_ModifyItems_Request| { &mut m.timestamp },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_ModifyItems_Request>(
            "CInventory_ModifyItems_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_ModifyItems_Request {
    const NAME: &'static str = "CInventory_ModifyItems_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.updates.push(is.read_message()?);
                },
                32 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.timestamp {
            my_size += crate::rt::uint32_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        for v in &self.updates {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.timestamp {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_ModifyItems_Request {
        CInventory_ModifyItems_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.updates.clear();
        self.timestamp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_ModifyItems_Request {
        static instance: CInventory_ModifyItems_Request = CInventory_ModifyItems_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            updates: ::std::vec::Vec::new(),
            timestamp: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_ModifyItems_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_ModifyItems_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_ModifyItems_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_ModifyItems_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CInventory_ModifyItems_Request`
pub mod cinventory_modify_items_request {
    // @@protoc_insertion_point(message:CInventory_ModifyItems_Request.ItemPropertyUpdate)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ItemPropertyUpdate {
        // message fields
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.itemid)
        pub itemid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.remove_property)
        pub remove_property: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_name)
        pub property_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_bool)
        pub property_value_bool: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_int)
        pub property_value_int: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_string)
        pub property_value_string: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CInventory_ModifyItems_Request.ItemPropertyUpdate.property_value_float)
        pub property_value_float: ::std::option::Option<f32>,
        // special fields
        // @@protoc_insertion_point(special_field:CInventory_ModifyItems_Request.ItemPropertyUpdate.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ItemPropertyUpdate {
        fn default() -> &'a ItemPropertyUpdate {
            <ItemPropertyUpdate as crate::Message>::default_instance()
        }
    }

    impl ItemPropertyUpdate {
        pub fn new() -> ItemPropertyUpdate {
            ::std::default::Default::default()
        }

        // optional uint64 itemid = 1;

        pub fn itemid(&self) -> u64 {
            self.itemid.unwrap_or(0)
        }

        pub fn clear_itemid(&mut self) {
            self.itemid = ::std::option::Option::None;
        }

        pub fn has_itemid(&self) -> bool {
            self.itemid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_itemid(&mut self, v: u64) {
            self.itemid = ::std::option::Option::Some(v);
        }

        // optional bool remove_property = 2;

        pub fn remove_property(&self) -> bool {
            self.remove_property.unwrap_or(false)
        }

        pub fn clear_remove_property(&mut self) {
            self.remove_property = ::std::option::Option::None;
        }

        pub fn has_remove_property(&self) -> bool {
            self.remove_property.is_some()
        }

        // Param is passed by value, moved
        pub fn set_remove_property(&mut self, v: bool) {
            self.remove_property = ::std::option::Option::Some(v);
        }

        // optional string property_name = 3;

        pub fn property_name(&self) -> &str {
            match self.property_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_property_name(&mut self) {
            self.property_name = ::std::option::Option::None;
        }

        pub fn has_property_name(&self) -> bool {
            self.property_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_property_name(&mut self, v: ::std::string::String) {
            self.property_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_property_name(&mut self) -> &mut ::std::string::String {
            if self.property_name.is_none() {
                self.property_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.property_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_property_name(&mut self) -> ::std::string::String {
            self.property_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool property_value_bool = 4;

        pub fn property_value_bool(&self) -> bool {
            self.property_value_bool.unwrap_or(false)
        }

        pub fn clear_property_value_bool(&mut self) {
            self.property_value_bool = ::std::option::Option::None;
        }

        pub fn has_property_value_bool(&self) -> bool {
            self.property_value_bool.is_some()
        }

        // Param is passed by value, moved
        pub fn set_property_value_bool(&mut self, v: bool) {
            self.property_value_bool = ::std::option::Option::Some(v);
        }

        // optional int64 property_value_int = 5;

        pub fn property_value_int(&self) -> i64 {
            self.property_value_int.unwrap_or(0)
        }

        pub fn clear_property_value_int(&mut self) {
            self.property_value_int = ::std::option::Option::None;
        }

        pub fn has_property_value_int(&self) -> bool {
            self.property_value_int.is_some()
        }

        // Param is passed by value, moved
        pub fn set_property_value_int(&mut self, v: i64) {
            self.property_value_int = ::std::option::Option::Some(v);
        }

        // optional string property_value_string = 6;

        pub fn property_value_string(&self) -> &str {
            match self.property_value_string.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_property_value_string(&mut self) {
            self.property_value_string = ::std::option::Option::None;
        }

        pub fn has_property_value_string(&self) -> bool {
            self.property_value_string.is_some()
        }

        // Param is passed by value, moved
        pub fn set_property_value_string(&mut self, v: ::std::string::String) {
            self.property_value_string = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_property_value_string(&mut self) -> &mut ::std::string::String {
            if self.property_value_string.is_none() {
                self.property_value_string = ::std::option::Option::Some(::std::string::String::new());
            }
            self.property_value_string.as_mut().unwrap()
        }

        // Take field
        pub fn take_property_value_string(&mut self) -> ::std::string::String {
            self.property_value_string.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional float property_value_float = 7;

        pub fn property_value_float(&self) -> f32 {
            self.property_value_float.unwrap_or(0.)
        }

        pub fn clear_property_value_float(&mut self) {
            self.property_value_float = ::std::option::Option::None;
        }

        pub fn has_property_value_float(&self) -> bool {
            self.property_value_float.is_some()
        }

        // Param is passed by value, moved
        pub fn set_property_value_float(&mut self, v: f32) {
            self.property_value_float = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "itemid",
                |m: &ItemPropertyUpdate| { &m.itemid },
                |m: &mut ItemPropertyUpdate| { &mut m.itemid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "remove_property",
                |m: &ItemPropertyUpdate| { &m.remove_property },
                |m: &mut ItemPropertyUpdate| { &mut m.remove_property },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "property_name",
                |m: &ItemPropertyUpdate| { &m.property_name },
                |m: &mut ItemPropertyUpdate| { &mut m.property_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "property_value_bool",
                |m: &ItemPropertyUpdate| { &m.property_value_bool },
                |m: &mut ItemPropertyUpdate| { &mut m.property_value_bool },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "property_value_int",
                |m: &ItemPropertyUpdate| { &m.property_value_int },
                |m: &mut ItemPropertyUpdate| { &mut m.property_value_int },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "property_value_string",
                |m: &ItemPropertyUpdate| { &m.property_value_string },
                |m: &mut ItemPropertyUpdate| { &mut m.property_value_string },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "property_value_float",
                |m: &ItemPropertyUpdate| { &m.property_value_float },
                |m: &mut ItemPropertyUpdate| { &mut m.property_value_float },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ItemPropertyUpdate>(
                "CInventory_ModifyItems_Request.ItemPropertyUpdate",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ItemPropertyUpdate {
        const NAME: &'static str = "ItemPropertyUpdate";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.itemid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.remove_property = ::std::option::Option::Some(is.read_bool()?);
                    },
                    26 => {
                        self.property_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.property_value_bool = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.property_value_int = ::std::option::Option::Some(is.read_int64()?);
                    },
                    50 => {
                        self.property_value_string = ::std::option::Option::Some(is.read_string()?);
                    },
                    61 => {
                        self.property_value_float = ::std::option::Option::Some(is.read_float()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.itemid {
                my_size += crate::rt::uint64_size(1, v);
            }
            if let Some(v) = self.remove_property {
                my_size += 1 + 1;
            }
            if let Some(v) = self.property_name.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.property_value_bool {
                my_size += 1 + 1;
            }
            if let Some(v) = self.property_value_int {
                my_size += crate::rt::int64_size(5, v);
            }
            if let Some(v) = self.property_value_string.as_ref() {
                my_size += crate::rt::string_size(6, &v);
            }
            if let Some(v) = self.property_value_float {
                my_size += 1 + 4;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.itemid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.remove_property {
                os.write_bool(2, v)?;
            }
            if let Some(v) = self.property_name.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.property_value_bool {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.property_value_int {
                os.write_int64(5, v)?;
            }
            if let Some(v) = self.property_value_string.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.property_value_float {
                os.write_float(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ItemPropertyUpdate {
            ItemPropertyUpdate::new()
        }

        fn clear(&mut self) {
            self.itemid = ::std::option::Option::None;
            self.remove_property = ::std::option::Option::None;
            self.property_name = ::std::option::Option::None;
            self.property_value_bool = ::std::option::Option::None;
            self.property_value_int = ::std::option::Option::None;
            self.property_value_string = ::std::option::Option::None;
            self.property_value_float = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ItemPropertyUpdate {
            static instance: ItemPropertyUpdate = ItemPropertyUpdate {
                itemid: ::std::option::Option::None,
                remove_property: ::std::option::Option::None,
                property_name: ::std::option::Option::None,
                property_value_bool: ::std::option::Option::None,
                property_value_int: ::std::option::Option::None,
                property_value_string: ::std::option::Option::None,
                property_value_float: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ItemPropertyUpdate {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CInventory_ModifyItems_Request.ItemPropertyUpdate").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ItemPropertyUpdate {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ItemPropertyUpdate {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CInventory_ConsumePlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_ConsumePlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_ConsumePlaytime_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_ConsumePlaytime_Request.itemdefid)
    pub itemdefid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_ConsumePlaytime_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_ConsumePlaytime_Request {
    fn default() -> &'a CInventory_ConsumePlaytime_Request {
        <CInventory_ConsumePlaytime_Request as crate::Message>::default_instance()
    }
}

impl CInventory_ConsumePlaytime_Request {
    pub fn new() -> CInventory_ConsumePlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 itemdefid = 2;

    pub fn itemdefid(&self) -> u64 {
        self.itemdefid.unwrap_or(0)
    }

    pub fn clear_itemdefid(&mut self) {
        self.itemdefid = ::std::option::Option::None;
    }

    pub fn has_itemdefid(&self) -> bool {
        self.itemdefid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemdefid(&mut self, v: u64) {
        self.itemdefid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_ConsumePlaytime_Request| { &m.appid },
            |m: &mut CInventory_ConsumePlaytime_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemdefid",
            |m: &CInventory_ConsumePlaytime_Request| { &m.itemdefid },
            |m: &mut CInventory_ConsumePlaytime_Request| { &mut m.itemdefid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_ConsumePlaytime_Request>(
            "CInventory_ConsumePlaytime_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_ConsumePlaytime_Request {
    const NAME: &'static str = "CInventory_ConsumePlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.itemdefid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.itemdefid {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.itemdefid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_ConsumePlaytime_Request {
        CInventory_ConsumePlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.itemdefid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_ConsumePlaytime_Request {
        static instance: CInventory_ConsumePlaytime_Request = CInventory_ConsumePlaytime_Request {
            appid: ::std::option::Option::None,
            itemdefid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_ConsumePlaytime_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_ConsumePlaytime_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_ConsumePlaytime_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_ConsumePlaytime_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_ConsumeItem_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_ConsumeItem_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_ConsumeItem_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_ConsumeItem_Request.itemid)
    pub itemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_ConsumeItem_Request.quantity)
    pub quantity: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_ConsumeItem_Request.timestamp)
    pub timestamp: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CInventory_ConsumeItem_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_ConsumeItem_Request.requestid)
    pub requestid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_ConsumeItem_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_ConsumeItem_Request {
    fn default() -> &'a CInventory_ConsumeItem_Request {
        <CInventory_ConsumeItem_Request as crate::Message>::default_instance()
    }
}

impl CInventory_ConsumeItem_Request {
    pub fn new() -> CInventory_ConsumeItem_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 itemid = 2;

    pub fn itemid(&self) -> u64 {
        self.itemid.unwrap_or(0)
    }

    pub fn clear_itemid(&mut self) {
        self.itemid = ::std::option::Option::None;
    }

    pub fn has_itemid(&self) -> bool {
        self.itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = ::std::option::Option::Some(v);
    }

    // optional uint32 quantity = 3;

    pub fn quantity(&self) -> u32 {
        self.quantity.unwrap_or(0)
    }

    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: u32) {
        self.quantity = ::std::option::Option::Some(v);
    }

    // optional string timestamp = 4;

    pub fn timestamp(&self) -> &str {
        match self.timestamp.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        if self.timestamp.is_none() {
            self.timestamp = ::std::option::Option::Some(::std::string::String::new());
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        self.timestamp.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 steamid = 5;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 requestid = 6;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_ConsumeItem_Request| { &m.appid },
            |m: &mut CInventory_ConsumeItem_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemid",
            |m: &CInventory_ConsumeItem_Request| { &m.itemid },
            |m: &mut CInventory_ConsumeItem_Request| { &mut m.itemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "quantity",
            |m: &CInventory_ConsumeItem_Request| { &m.quantity },
            |m: &mut CInventory_ConsumeItem_Request| { &mut m.quantity },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CInventory_ConsumeItem_Request| { &m.timestamp },
            |m: &mut CInventory_ConsumeItem_Request| { &mut m.timestamp },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_ConsumeItem_Request| { &m.steamid },
            |m: &mut CInventory_ConsumeItem_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "requestid",
            |m: &CInventory_ConsumeItem_Request| { &m.requestid },
            |m: &mut CInventory_ConsumeItem_Request| { &mut m.requestid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_ConsumeItem_Request>(
            "CInventory_ConsumeItem_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_ConsumeItem_Request {
    const NAME: &'static str = "CInventory_ConsumeItem_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.itemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.timestamp = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.requestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.itemid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.quantity {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.timestamp.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(5, v);
        }
        if let Some(v) = self.requestid {
            my_size += crate::rt::uint64_size(6, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.itemid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.requestid {
            os.write_uint64(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_ConsumeItem_Request {
        CInventory_ConsumeItem_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.itemid = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.requestid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_ConsumeItem_Request {
        static instance: CInventory_ConsumeItem_Request = CInventory_ConsumeItem_Request {
            appid: ::std::option::Option::None,
            itemid: ::std::option::Option::None,
            quantity: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            requestid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_ConsumeItem_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_ConsumeItem_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_ConsumeItem_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_ConsumeItem_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_DevSetNextDrop_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_DevSetNextDrop_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_DevSetNextDrop_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_DevSetNextDrop_Request.itemdefid)
    pub itemdefid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_DevSetNextDrop_Request.droptime)
    pub droptime: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_DevSetNextDrop_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_DevSetNextDrop_Request {
    fn default() -> &'a CInventory_DevSetNextDrop_Request {
        <CInventory_DevSetNextDrop_Request as crate::Message>::default_instance()
    }
}

impl CInventory_DevSetNextDrop_Request {
    pub fn new() -> CInventory_DevSetNextDrop_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 itemdefid = 2;

    pub fn itemdefid(&self) -> u64 {
        self.itemdefid.unwrap_or(0)
    }

    pub fn clear_itemdefid(&mut self) {
        self.itemdefid = ::std::option::Option::None;
    }

    pub fn has_itemdefid(&self) -> bool {
        self.itemdefid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemdefid(&mut self, v: u64) {
        self.itemdefid = ::std::option::Option::Some(v);
    }

    // optional string droptime = 3;

    pub fn droptime(&self) -> &str {
        match self.droptime.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_droptime(&mut self) {
        self.droptime = ::std::option::Option::None;
    }

    pub fn has_droptime(&self) -> bool {
        self.droptime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_droptime(&mut self, v: ::std::string::String) {
        self.droptime = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_droptime(&mut self) -> &mut ::std::string::String {
        if self.droptime.is_none() {
            self.droptime = ::std::option::Option::Some(::std::string::String::new());
        }
        self.droptime.as_mut().unwrap()
    }

    // Take field
    pub fn take_droptime(&mut self) -> ::std::string::String {
        self.droptime.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_DevSetNextDrop_Request| { &m.appid },
            |m: &mut CInventory_DevSetNextDrop_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemdefid",
            |m: &CInventory_DevSetNextDrop_Request| { &m.itemdefid },
            |m: &mut CInventory_DevSetNextDrop_Request| { &mut m.itemdefid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "droptime",
            |m: &CInventory_DevSetNextDrop_Request| { &m.droptime },
            |m: &mut CInventory_DevSetNextDrop_Request| { &mut m.droptime },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_DevSetNextDrop_Request>(
            "CInventory_DevSetNextDrop_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_DevSetNextDrop_Request {
    const NAME: &'static str = "CInventory_DevSetNextDrop_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.itemdefid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.droptime = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.itemdefid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.droptime.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.itemdefid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.droptime.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_DevSetNextDrop_Request {
        CInventory_DevSetNextDrop_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.itemdefid = ::std::option::Option::None;
        self.droptime = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_DevSetNextDrop_Request {
        static instance: CInventory_DevSetNextDrop_Request = CInventory_DevSetNextDrop_Request {
            appid: ::std::option::Option::None,
            itemdefid: ::std::option::Option::None,
            droptime: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_DevSetNextDrop_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_DevSetNextDrop_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_DevSetNextDrop_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_DevSetNextDrop_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_SplitItemStack_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_SplitItemStack_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_SplitItemStack_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_SplitItemStack_Request.itemid)
    pub itemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_SplitItemStack_Request.quantity)
    pub quantity: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_SplitItemStack_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_SplitItemStack_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_SplitItemStack_Request {
    fn default() -> &'a CInventory_SplitItemStack_Request {
        <CInventory_SplitItemStack_Request as crate::Message>::default_instance()
    }
}

impl CInventory_SplitItemStack_Request {
    pub fn new() -> CInventory_SplitItemStack_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 itemid = 2;

    pub fn itemid(&self) -> u64 {
        self.itemid.unwrap_or(0)
    }

    pub fn clear_itemid(&mut self) {
        self.itemid = ::std::option::Option::None;
    }

    pub fn has_itemid(&self) -> bool {
        self.itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = ::std::option::Option::Some(v);
    }

    // optional uint32 quantity = 3;

    pub fn quantity(&self) -> u32 {
        self.quantity.unwrap_or(0)
    }

    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: u32) {
        self.quantity = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 5;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_SplitItemStack_Request| { &m.appid },
            |m: &mut CInventory_SplitItemStack_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemid",
            |m: &CInventory_SplitItemStack_Request| { &m.itemid },
            |m: &mut CInventory_SplitItemStack_Request| { &mut m.itemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "quantity",
            |m: &CInventory_SplitItemStack_Request| { &m.quantity },
            |m: &mut CInventory_SplitItemStack_Request| { &mut m.quantity },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_SplitItemStack_Request| { &m.steamid },
            |m: &mut CInventory_SplitItemStack_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_SplitItemStack_Request>(
            "CInventory_SplitItemStack_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_SplitItemStack_Request {
    const NAME: &'static str = "CInventory_SplitItemStack_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.itemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.itemid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.quantity {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.itemid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_SplitItemStack_Request {
        CInventory_SplitItemStack_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.itemid = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_SplitItemStack_Request {
        static instance: CInventory_SplitItemStack_Request = CInventory_SplitItemStack_Request {
            appid: ::std::option::Option::None,
            itemid: ::std::option::Option::None,
            quantity: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_SplitItemStack_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_SplitItemStack_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_SplitItemStack_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_SplitItemStack_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_CombineItemStacks_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_CombineItemStacks_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_CombineItemStacks_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_CombineItemStacks_Request.fromitemid)
    pub fromitemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_CombineItemStacks_Request.destitemid)
    pub destitemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_CombineItemStacks_Request.quantity)
    pub quantity: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_CombineItemStacks_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_CombineItemStacks_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_CombineItemStacks_Request {
    fn default() -> &'a CInventory_CombineItemStacks_Request {
        <CInventory_CombineItemStacks_Request as crate::Message>::default_instance()
    }
}

impl CInventory_CombineItemStacks_Request {
    pub fn new() -> CInventory_CombineItemStacks_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 fromitemid = 2;

    pub fn fromitemid(&self) -> u64 {
        self.fromitemid.unwrap_or(0)
    }

    pub fn clear_fromitemid(&mut self) {
        self.fromitemid = ::std::option::Option::None;
    }

    pub fn has_fromitemid(&self) -> bool {
        self.fromitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fromitemid(&mut self, v: u64) {
        self.fromitemid = ::std::option::Option::Some(v);
    }

    // optional uint64 destitemid = 3;

    pub fn destitemid(&self) -> u64 {
        self.destitemid.unwrap_or(0)
    }

    pub fn clear_destitemid(&mut self) {
        self.destitemid = ::std::option::Option::None;
    }

    pub fn has_destitemid(&self) -> bool {
        self.destitemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destitemid(&mut self, v: u64) {
        self.destitemid = ::std::option::Option::Some(v);
    }

    // optional uint32 quantity = 4;

    pub fn quantity(&self) -> u32 {
        self.quantity.unwrap_or(0)
    }

    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: u32) {
        self.quantity = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 7;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_CombineItemStacks_Request| { &m.appid },
            |m: &mut CInventory_CombineItemStacks_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "fromitemid",
            |m: &CInventory_CombineItemStacks_Request| { &m.fromitemid },
            |m: &mut CInventory_CombineItemStacks_Request| { &mut m.fromitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "destitemid",
            |m: &CInventory_CombineItemStacks_Request| { &m.destitemid },
            |m: &mut CInventory_CombineItemStacks_Request| { &mut m.destitemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "quantity",
            |m: &CInventory_CombineItemStacks_Request| { &m.quantity },
            |m: &mut CInventory_CombineItemStacks_Request| { &mut m.quantity },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CInventory_CombineItemStacks_Request| { &m.steamid },
            |m: &mut CInventory_CombineItemStacks_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_CombineItemStacks_Request>(
            "CInventory_CombineItemStacks_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_CombineItemStacks_Request {
    const NAME: &'static str = "CInventory_CombineItemStacks_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.fromitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.destitemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                },
                57 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.fromitemid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.destitemid {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.quantity {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.fromitemid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.destitemid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_CombineItemStacks_Request {
        CInventory_CombineItemStacks_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.fromitemid = ::std::option::Option::None;
        self.destitemid = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_CombineItemStacks_Request {
        static instance: CInventory_CombineItemStacks_Request = CInventory_CombineItemStacks_Request {
            appid: ::std::option::Option::None,
            fromitemid: ::std::option::Option::None,
            destitemid: ::std::option::Option::None,
            quantity: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_CombineItemStacks_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_CombineItemStacks_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_CombineItemStacks_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_CombineItemStacks_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_GetItemDefMeta_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetItemDefMeta_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_GetItemDefMeta_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetItemDefMeta_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetItemDefMeta_Request {
    fn default() -> &'a CInventory_GetItemDefMeta_Request {
        <CInventory_GetItemDefMeta_Request as crate::Message>::default_instance()
    }
}

impl CInventory_GetItemDefMeta_Request {
    pub fn new() -> CInventory_GetItemDefMeta_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_GetItemDefMeta_Request| { &m.appid },
            |m: &mut CInventory_GetItemDefMeta_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetItemDefMeta_Request>(
            "CInventory_GetItemDefMeta_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetItemDefMeta_Request {
    const NAME: &'static str = "CInventory_GetItemDefMeta_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetItemDefMeta_Request {
        CInventory_GetItemDefMeta_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetItemDefMeta_Request {
        static instance: CInventory_GetItemDefMeta_Request = CInventory_GetItemDefMeta_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetItemDefMeta_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetItemDefMeta_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetItemDefMeta_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetItemDefMeta_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_GetItemDefMeta_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetItemDefMeta_Response {
    // message fields
    // @@protoc_insertion_point(field:CInventory_GetItemDefMeta_Response.modified)
    pub modified: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_GetItemDefMeta_Response.digest)
    pub digest: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetItemDefMeta_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetItemDefMeta_Response {
    fn default() -> &'a CInventory_GetItemDefMeta_Response {
        <CInventory_GetItemDefMeta_Response as crate::Message>::default_instance()
    }
}

impl CInventory_GetItemDefMeta_Response {
    pub fn new() -> CInventory_GetItemDefMeta_Response {
        ::std::default::Default::default()
    }

    // optional uint32 modified = 1;

    pub fn modified(&self) -> u32 {
        self.modified.unwrap_or(0)
    }

    pub fn clear_modified(&mut self) {
        self.modified = ::std::option::Option::None;
    }

    pub fn has_modified(&self) -> bool {
        self.modified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modified(&mut self, v: u32) {
        self.modified = ::std::option::Option::Some(v);
    }

    // optional string digest = 2;

    pub fn digest(&self) -> &str {
        match self.digest.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_digest(&mut self) {
        self.digest = ::std::option::Option::None;
    }

    pub fn has_digest(&self) -> bool {
        self.digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: ::std::string::String) {
        self.digest = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut ::std::string::String {
        if self.digest.is_none() {
            self.digest = ::std::option::Option::Some(::std::string::String::new());
        }
        self.digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_digest(&mut self) -> ::std::string::String {
        self.digest.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "modified",
            |m: &CInventory_GetItemDefMeta_Response| { &m.modified },
            |m: &mut CInventory_GetItemDefMeta_Response| { &mut m.modified },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "digest",
            |m: &CInventory_GetItemDefMeta_Response| { &m.digest },
            |m: &mut CInventory_GetItemDefMeta_Response| { &mut m.digest },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetItemDefMeta_Response>(
            "CInventory_GetItemDefMeta_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetItemDefMeta_Response {
    const NAME: &'static str = "CInventory_GetItemDefMeta_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.modified = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.digest = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.modified {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.digest.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.modified {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.digest.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetItemDefMeta_Response {
        CInventory_GetItemDefMeta_Response::new()
    }

    fn clear(&mut self) {
        self.modified = ::std::option::Option::None;
        self.digest = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetItemDefMeta_Response {
        static instance: CInventory_GetItemDefMeta_Response = CInventory_GetItemDefMeta_Response {
            modified: ::std::option::Option::None,
            digest: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetItemDefMeta_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetItemDefMeta_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetItemDefMeta_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetItemDefMeta_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_GetUserPurchaseInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetUserPurchaseInfo_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetUserPurchaseInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetUserPurchaseInfo_Request {
    fn default() -> &'a CInventory_GetUserPurchaseInfo_Request {
        <CInventory_GetUserPurchaseInfo_Request as crate::Message>::default_instance()
    }
}

impl CInventory_GetUserPurchaseInfo_Request {
    pub fn new() -> CInventory_GetUserPurchaseInfo_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetUserPurchaseInfo_Request>(
            "CInventory_GetUserPurchaseInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetUserPurchaseInfo_Request {
    const NAME: &'static str = "CInventory_GetUserPurchaseInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetUserPurchaseInfo_Request {
        CInventory_GetUserPurchaseInfo_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetUserPurchaseInfo_Request {
        static instance: CInventory_GetUserPurchaseInfo_Request = CInventory_GetUserPurchaseInfo_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetUserPurchaseInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetUserPurchaseInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetUserPurchaseInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetUserPurchaseInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_GetUserPurchaseInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_GetUserPurchaseInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CInventory_GetUserPurchaseInfo_Response.ecurrency)
    pub ecurrency: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_GetUserPurchaseInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_GetUserPurchaseInfo_Response {
    fn default() -> &'a CInventory_GetUserPurchaseInfo_Response {
        <CInventory_GetUserPurchaseInfo_Response as crate::Message>::default_instance()
    }
}

impl CInventory_GetUserPurchaseInfo_Response {
    pub fn new() -> CInventory_GetUserPurchaseInfo_Response {
        ::std::default::Default::default()
    }

    // optional int32 ecurrency = 1;

    pub fn ecurrency(&self) -> i32 {
        self.ecurrency.unwrap_or(0)
    }

    pub fn clear_ecurrency(&mut self) {
        self.ecurrency = ::std::option::Option::None;
    }

    pub fn has_ecurrency(&self) -> bool {
        self.ecurrency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecurrency(&mut self, v: i32) {
        self.ecurrency = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ecurrency",
            |m: &CInventory_GetUserPurchaseInfo_Response| { &m.ecurrency },
            |m: &mut CInventory_GetUserPurchaseInfo_Response| { &mut m.ecurrency },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_GetUserPurchaseInfo_Response>(
            "CInventory_GetUserPurchaseInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_GetUserPurchaseInfo_Response {
    const NAME: &'static str = "CInventory_GetUserPurchaseInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ecurrency = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ecurrency {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.ecurrency {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_GetUserPurchaseInfo_Response {
        CInventory_GetUserPurchaseInfo_Response::new()
    }

    fn clear(&mut self) {
        self.ecurrency = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_GetUserPurchaseInfo_Response {
        static instance: CInventory_GetUserPurchaseInfo_Response = CInventory_GetUserPurchaseInfo_Response {
            ecurrency: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_GetUserPurchaseInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_GetUserPurchaseInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_GetUserPurchaseInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_GetUserPurchaseInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_PurchaseInit_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_PurchaseInit_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_PurchaseInit_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_PurchaseInit_Request.language)
    pub language: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CInventory_PurchaseInit_Request.line_items)
    pub line_items: ::std::vec::Vec<cinventory_purchase_init_request::LineItem>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_PurchaseInit_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_PurchaseInit_Request {
    fn default() -> &'a CInventory_PurchaseInit_Request {
        <CInventory_PurchaseInit_Request as crate::Message>::default_instance()
    }
}

impl CInventory_PurchaseInit_Request {
    pub fn new() -> CInventory_PurchaseInit_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional int32 language = 2;

    pub fn language(&self) -> i32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: i32) {
        self.language = ::std::option::Option::Some(v);
    }

    // repeated .CInventory_PurchaseInit_Request.LineItem line_items = 3;

    pub fn line_items(&self) -> &[cinventory_purchase_init_request::LineItem] {
        &self.line_items
    }

    pub fn clear_line_items(&mut self) {
        self.line_items.clear();
    }

    // Param is passed by value, moved
    pub fn set_line_items(&mut self, v: ::std::vec::Vec<cinventory_purchase_init_request::LineItem>) {
        self.line_items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_line_items(&mut self) -> &mut ::std::vec::Vec<cinventory_purchase_init_request::LineItem> {
        &mut self.line_items
    }

    // Take field
    pub fn take_line_items(&mut self) -> ::std::vec::Vec<cinventory_purchase_init_request::LineItem> {
        ::std::mem::replace(&mut self.line_items, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_PurchaseInit_Request| { &m.appid },
            |m: &mut CInventory_PurchaseInit_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CInventory_PurchaseInit_Request| { &m.language },
            |m: &mut CInventory_PurchaseInit_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "line_items",
            |m: &CInventory_PurchaseInit_Request| { &m.line_items },
            |m: &mut CInventory_PurchaseInit_Request| { &mut m.line_items },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_PurchaseInit_Request>(
            "CInventory_PurchaseInit_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_PurchaseInit_Request {
    const NAME: &'static str = "CInventory_PurchaseInit_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.language = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    self.line_items.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.language {
            my_size += crate::rt::int32_size(2, v);
        }
        for value in &self.line_items {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.language {
            os.write_int32(2, v)?;
        }
        for v in &self.line_items {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_PurchaseInit_Request {
        CInventory_PurchaseInit_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.line_items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_PurchaseInit_Request {
        static instance: CInventory_PurchaseInit_Request = CInventory_PurchaseInit_Request {
            appid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            line_items: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_PurchaseInit_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_PurchaseInit_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_PurchaseInit_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_PurchaseInit_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CInventory_PurchaseInit_Request`
pub mod cinventory_purchase_init_request {
    // @@protoc_insertion_point(message:CInventory_PurchaseInit_Request.LineItem)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LineItem {
        // message fields
        // @@protoc_insertion_point(field:CInventory_PurchaseInit_Request.LineItem.itemdefid)
        pub itemdefid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CInventory_PurchaseInit_Request.LineItem.quantity)
        pub quantity: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CInventory_PurchaseInit_Request.LineItem.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LineItem {
        fn default() -> &'a LineItem {
            <LineItem as crate::Message>::default_instance()
        }
    }

    impl LineItem {
        pub fn new() -> LineItem {
            ::std::default::Default::default()
        }

        // optional uint64 itemdefid = 1;

        pub fn itemdefid(&self) -> u64 {
            self.itemdefid.unwrap_or(0)
        }

        pub fn clear_itemdefid(&mut self) {
            self.itemdefid = ::std::option::Option::None;
        }

        pub fn has_itemdefid(&self) -> bool {
            self.itemdefid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_itemdefid(&mut self, v: u64) {
            self.itemdefid = ::std::option::Option::Some(v);
        }

        // optional uint32 quantity = 2;

        pub fn quantity(&self) -> u32 {
            self.quantity.unwrap_or(0)
        }

        pub fn clear_quantity(&mut self) {
            self.quantity = ::std::option::Option::None;
        }

        pub fn has_quantity(&self) -> bool {
            self.quantity.is_some()
        }

        // Param is passed by value, moved
        pub fn set_quantity(&mut self, v: u32) {
            self.quantity = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "itemdefid",
                |m: &LineItem| { &m.itemdefid },
                |m: &mut LineItem| { &mut m.itemdefid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "quantity",
                |m: &LineItem| { &m.quantity },
                |m: &mut LineItem| { &mut m.quantity },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<LineItem>(
                "CInventory_PurchaseInit_Request.LineItem",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for LineItem {
        const NAME: &'static str = "LineItem";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.itemdefid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.quantity = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.itemdefid {
                my_size += crate::rt::uint64_size(1, v);
            }
            if let Some(v) = self.quantity {
                my_size += crate::rt::uint32_size(2, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.itemdefid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.quantity {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LineItem {
            LineItem::new()
        }

        fn clear(&mut self) {
            self.itemdefid = ::std::option::Option::None;
            self.quantity = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LineItem {
            static instance: LineItem = LineItem {
                itemdefid: ::std::option::Option::None,
                quantity: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for LineItem {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CInventory_PurchaseInit_Request.LineItem").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LineItem {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for LineItem {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CInventory_PurchaseInit_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_PurchaseInit_Response {
    // message fields
    // @@protoc_insertion_point(field:CInventory_PurchaseInit_Response.orderid)
    pub orderid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_PurchaseInit_Response.transid)
    pub transid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_PurchaseInit_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_PurchaseInit_Response {
    fn default() -> &'a CInventory_PurchaseInit_Response {
        <CInventory_PurchaseInit_Response as crate::Message>::default_instance()
    }
}

impl CInventory_PurchaseInit_Response {
    pub fn new() -> CInventory_PurchaseInit_Response {
        ::std::default::Default::default()
    }

    // optional uint64 orderid = 1;

    pub fn orderid(&self) -> u64 {
        self.orderid.unwrap_or(0)
    }

    pub fn clear_orderid(&mut self) {
        self.orderid = ::std::option::Option::None;
    }

    pub fn has_orderid(&self) -> bool {
        self.orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orderid(&mut self, v: u64) {
        self.orderid = ::std::option::Option::Some(v);
    }

    // optional uint64 transid = 2;

    pub fn transid(&self) -> u64 {
        self.transid.unwrap_or(0)
    }

    pub fn clear_transid(&mut self) {
        self.transid = ::std::option::Option::None;
    }

    pub fn has_transid(&self) -> bool {
        self.transid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transid(&mut self, v: u64) {
        self.transid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "orderid",
            |m: &CInventory_PurchaseInit_Response| { &m.orderid },
            |m: &mut CInventory_PurchaseInit_Response| { &mut m.orderid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "transid",
            |m: &CInventory_PurchaseInit_Response| { &m.transid },
            |m: &mut CInventory_PurchaseInit_Response| { &mut m.transid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_PurchaseInit_Response>(
            "CInventory_PurchaseInit_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_PurchaseInit_Response {
    const NAME: &'static str = "CInventory_PurchaseInit_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.orderid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.transid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.orderid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.transid {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.orderid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.transid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_PurchaseInit_Response {
        CInventory_PurchaseInit_Response::new()
    }

    fn clear(&mut self) {
        self.orderid = ::std::option::Option::None;
        self.transid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_PurchaseInit_Response {
        static instance: CInventory_PurchaseInit_Response = CInventory_PurchaseInit_Response {
            orderid: ::std::option::Option::None,
            transid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_PurchaseInit_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_PurchaseInit_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_PurchaseInit_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_PurchaseInit_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_PurchaseFinalize_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_PurchaseFinalize_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_PurchaseFinalize_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventory_PurchaseFinalize_Request.language)
    pub language: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CInventory_PurchaseFinalize_Request.orderid)
    pub orderid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_PurchaseFinalize_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_PurchaseFinalize_Request {
    fn default() -> &'a CInventory_PurchaseFinalize_Request {
        <CInventory_PurchaseFinalize_Request as crate::Message>::default_instance()
    }
}

impl CInventory_PurchaseFinalize_Request {
    pub fn new() -> CInventory_PurchaseFinalize_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional int32 language = 2;

    pub fn language(&self) -> i32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: i32) {
        self.language = ::std::option::Option::Some(v);
    }

    // optional uint64 orderid = 3;

    pub fn orderid(&self) -> u64 {
        self.orderid.unwrap_or(0)
    }

    pub fn clear_orderid(&mut self) {
        self.orderid = ::std::option::Option::None;
    }

    pub fn has_orderid(&self) -> bool {
        self.orderid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orderid(&mut self, v: u64) {
        self.orderid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventory_PurchaseFinalize_Request| { &m.appid },
            |m: &mut CInventory_PurchaseFinalize_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CInventory_PurchaseFinalize_Request| { &m.language },
            |m: &mut CInventory_PurchaseFinalize_Request| { &mut m.language },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "orderid",
            |m: &CInventory_PurchaseFinalize_Request| { &m.orderid },
            |m: &mut CInventory_PurchaseFinalize_Request| { &mut m.orderid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_PurchaseFinalize_Request>(
            "CInventory_PurchaseFinalize_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_PurchaseFinalize_Request {
    const NAME: &'static str = "CInventory_PurchaseFinalize_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.language = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.orderid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.language {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.orderid {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.language {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.orderid {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_PurchaseFinalize_Request {
        CInventory_PurchaseFinalize_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.orderid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_PurchaseFinalize_Request {
        static instance: CInventory_PurchaseFinalize_Request = CInventory_PurchaseFinalize_Request {
            appid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            orderid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_PurchaseFinalize_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_PurchaseFinalize_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_PurchaseFinalize_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_PurchaseFinalize_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventory_InspectItem_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventory_InspectItem_Request {
    // message fields
    // @@protoc_insertion_point(field:CInventory_InspectItem_Request.itemdefid)
    pub itemdefid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_InspectItem_Request.itemid)
    pub itemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInventory_InspectItem_Request.tags)
    pub tags: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventory_InspectItem_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventory_InspectItem_Request {
    fn default() -> &'a CInventory_InspectItem_Request {
        <CInventory_InspectItem_Request as crate::Message>::default_instance()
    }
}

impl CInventory_InspectItem_Request {
    pub fn new() -> CInventory_InspectItem_Request {
        ::std::default::Default::default()
    }

    // optional uint64 itemdefid = 1;

    pub fn itemdefid(&self) -> u64 {
        self.itemdefid.unwrap_or(0)
    }

    pub fn clear_itemdefid(&mut self) {
        self.itemdefid = ::std::option::Option::None;
    }

    pub fn has_itemdefid(&self) -> bool {
        self.itemdefid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemdefid(&mut self, v: u64) {
        self.itemdefid = ::std::option::Option::Some(v);
    }

    // optional fixed64 itemid = 2;

    pub fn itemid(&self) -> u64 {
        self.itemid.unwrap_or(0)
    }

    pub fn clear_itemid(&mut self) {
        self.itemid = ::std::option::Option::None;
    }

    pub fn has_itemid(&self) -> bool {
        self.itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = ::std::option::Option::Some(v);
    }

    // optional string tags = 3;

    pub fn tags(&self) -> &str {
        match self.tags.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tags(&mut self) {
        self.tags = ::std::option::Option::None;
    }

    pub fn has_tags(&self) -> bool {
        self.tags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::string::String) {
        self.tags = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tags(&mut self) -> &mut ::std::string::String {
        if self.tags.is_none() {
            self.tags = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tags.as_mut().unwrap()
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::string::String {
        self.tags.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemdefid",
            |m: &CInventory_InspectItem_Request| { &m.itemdefid },
            |m: &mut CInventory_InspectItem_Request| { &mut m.itemdefid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "itemid",
            |m: &CInventory_InspectItem_Request| { &m.itemid },
            |m: &mut CInventory_InspectItem_Request| { &mut m.itemid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "tags",
            |m: &CInventory_InspectItem_Request| { &m.tags },
            |m: &mut CInventory_InspectItem_Request| { &mut m.tags },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventory_InspectItem_Request>(
            "CInventory_InspectItem_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventory_InspectItem_Request {
    const NAME: &'static str = "CInventory_InspectItem_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.itemdefid = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.itemid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.tags = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.itemdefid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.itemid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.tags.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.itemdefid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.itemid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.tags.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventory_InspectItem_Request {
        CInventory_InspectItem_Request::new()
    }

    fn clear(&mut self) {
        self.itemdefid = ::std::option::Option::None;
        self.itemid = ::std::option::Option::None;
        self.tags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventory_InspectItem_Request {
        static instance: CInventory_InspectItem_Request = CInventory_InspectItem_Request {
            itemdefid: ::std::option::Option::None,
            itemid: ::std::option::Option::None,
            tags: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventory_InspectItem_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventory_InspectItem_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventory_InspectItem_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventory_InspectItem_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CInventoryClient_NewItems_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInventoryClient_NewItems_Notification {
    // message fields
    // @@protoc_insertion_point(field:CInventoryClient_NewItems_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CInventoryClient_NewItems_Notification.inventory_response)
    pub inventory_response: crate::MessageField<CInventory_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CInventoryClient_NewItems_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInventoryClient_NewItems_Notification {
    fn default() -> &'a CInventoryClient_NewItems_Notification {
        <CInventoryClient_NewItems_Notification as crate::Message>::default_instance()
    }
}

impl CInventoryClient_NewItems_Notification {
    pub fn new() -> CInventoryClient_NewItems_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .CInventory_Response inventory_response = 2;

    pub fn inventory_response(&self) -> &CInventory_Response {
        self.inventory_response.as_ref().unwrap_or_else(|| <CInventory_Response as crate::Message>::default_instance())
    }

    pub fn clear_inventory_response(&mut self) {
        self.inventory_response.clear();
    }

    pub fn has_inventory_response(&self) -> bool {
        self.inventory_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inventory_response(&mut self, v: CInventory_Response) {
        self.inventory_response = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inventory_response(&mut self) -> &mut CInventory_Response {
        self.inventory_response.mut_or_insert_default()
    }

    // Take field
    pub fn take_inventory_response(&mut self) -> CInventory_Response {
        self.inventory_response.take().unwrap_or_else(|| CInventory_Response::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CInventoryClient_NewItems_Notification| { &m.appid },
            |m: &mut CInventoryClient_NewItems_Notification| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CInventory_Response>(
            "inventory_response",
            |m: &CInventoryClient_NewItems_Notification| { &m.inventory_response },
            |m: &mut CInventoryClient_NewItems_Notification| { &mut m.inventory_response },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CInventoryClient_NewItems_Notification>(
            "CInventoryClient_NewItems_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CInventoryClient_NewItems_Notification {
    const NAME: &'static str = "CInventoryClient_NewItems_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.inventory_response)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.inventory_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.inventory_response.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInventoryClient_NewItems_Notification {
        CInventoryClient_NewItems_Notification::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.inventory_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInventoryClient_NewItems_Notification {
        static instance: CInventoryClient_NewItems_Notification = CInventoryClient_NewItems_Notification {
            appid: ::std::option::Option::None,
            inventory_response: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CInventoryClient_NewItems_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInventoryClient_NewItems_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInventoryClient_NewItems_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CInventoryClient_NewItems_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)steammessages_inventory.steamclient.proto\x1a\x18steammessages_base.p\
    roto\x1a,steammessages_unified_base.steamclient.proto\"Q\n\x1fCInventory\
    _GetInventory_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\"\xc5\x01\n\x13CI\
    nventory_Response\x12\x12\n\x04etag\x18\x01\x20\x01(\tR\x04etag\x12&\n\
    \x0eremoveditemids\x18\x02\x20\x03(\x04R\x0eremoveditemids\x12\x1b\n\tit\
    em_json\x18\x03\x20\x01(\tR\x08itemJson\x12!\n\x0citemdef_json\x18\x04\
    \x20\x01(\tR\x0bitemdefJson\x12\x16\n\x06ticket\x18\x05\x20\x01(\x0cR\
    \x06ticket\x12\x1a\n\x08replayed\x18\x06\x20\x01(\x08R\x08replayed\"\xd3\
    \x01\n\x1fCInventory_ExchangeItem_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\
    \x12(\n\x0fmaterialsitemid\x18\x03\x20\x03(\x04R\x0fmaterialsitemid\x12,\
    \n\x11materialsquantity\x18\x04\x20\x03(\rR\x11materialsquantity\x12(\n\
    \x0foutputitemdefid\x18\x05\x20\x01(\x04R\x0foutputitemdefid\"_\n-CInven\
    tory_GetEligiblePromoItemDefIDs_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\
    \"P\n.CInventory_GetEligiblePromoItemDefIDs_Response\x12\x1e\n\nitemdefi\
    ds\x18\x01\x20\x03(\x04R\nitemdefids\"\x9b\x02\n\x1aCInventory_AddItem_R\
    equest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1c\n\titemde\
    fid\x18\x02\x20\x03(\x04R\titemdefid\x12$\n\ritempropsjson\x18\x03\x20\
    \x03(\tR\ritempropsjson\x12\x18\n\x07steamid\x18\x04\x20\x01(\x04R\x07st\
    eamid\x12\x16\n\x06notify\x18\x05\x20\x01(\x08R\x06notify\x12\x1c\n\treq\
    uestid\x18\x06\x20\x01(\x04R\trequestid\x12+\n\x11trade_restriction\x18\
    \x07\x20\x01(\x08R\x10tradeRestriction\x12&\n\x0bis_purchase\x18\x08\x20\
    \x01(\x08:\x05falseR\nisPurchase\"\xfd\x03\n\x1eCInventory_ModifyItems_R\
    equest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07stea\
    mid\x18\x02\x20\x01(\x04R\x07steamid\x12L\n\x07updates\x18\x03\x20\x03(\
    \x0b22.CInventory_ModifyItems_Request.ItemPropertyUpdateR\x07updates\x12\
    \x1c\n\ttimestamp\x18\x04\x20\x01(\rR\ttimestamp\x1a\xbe\x02\n\x12ItemPr\
    opertyUpdate\x12\x16\n\x06itemid\x18\x01\x20\x01(\x04R\x06itemid\x12'\n\
    \x0fremove_property\x18\x02\x20\x01(\x08R\x0eremoveProperty\x12#\n\rprop\
    erty_name\x18\x03\x20\x01(\tR\x0cpropertyName\x12.\n\x13property_value_b\
    ool\x18\x04\x20\x01(\x08R\x11propertyValueBool\x12,\n\x12property_value_\
    int\x18\x05\x20\x01(\x03R\x10propertyValueInt\x122\n\x15property_value_s\
    tring\x18\x06\x20\x01(\tR\x13propertyValueString\x120\n\x14property_valu\
    e_float\x18\x07\x20\x01(\x02R\x12propertyValueFloat\"X\n\"CInventory_Con\
    sumePlaytime_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\
    \x1c\n\titemdefid\x18\x02\x20\x01(\x04R\titemdefid\"\xc0\x01\n\x1eCInven\
    tory_ConsumeItem_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\
    \x12\x16\n\x06itemid\x18\x02\x20\x01(\x04R\x06itemid\x12\x1a\n\x08quanti\
    ty\x18\x03\x20\x01(\rR\x08quantity\x12\x1c\n\ttimestamp\x18\x04\x20\x01(\
    \tR\ttimestamp\x12\x18\n\x07steamid\x18\x05\x20\x01(\x04R\x07steamid\x12\
    \x1c\n\trequestid\x18\x06\x20\x01(\x04R\trequestid\"s\n!CInventory_DevSe\
    tNextDrop_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\
    \x1c\n\titemdefid\x18\x02\x20\x01(\x04R\titemdefid\x12\x1a\n\x08droptime\
    \x18\x03\x20\x01(\tR\x08droptime\"\x87\x01\n!CInventory_SplitItemStack_R\
    equest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x16\n\x06item\
    id\x18\x02\x20\x01(\x04R\x06itemid\x12\x1a\n\x08quantity\x18\x03\x20\x01\
    (\rR\x08quantity\x12\x18\n\x07steamid\x18\x05\x20\x01(\x04R\x07steamid\"\
    \xb2\x01\n$CInventory_CombineItemStacks_Request\x12\x14\n\x05appid\x18\
    \x01\x20\x01(\rR\x05appid\x12\x1e\n\nfromitemid\x18\x02\x20\x01(\x04R\nf\
    romitemid\x12\x1e\n\ndestitemid\x18\x03\x20\x01(\x04R\ndestitemid\x12\
    \x1a\n\x08quantity\x18\x04\x20\x01(\rR\x08quantity\x12\x18\n\x07steamid\
    \x18\x07\x20\x01(\x06R\x07steamid\"9\n!CInventory_GetItemDefMeta_Request\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"X\n\"CInventory_GetIte\
    mDefMeta_Response\x12\x1a\n\x08modified\x18\x01\x20\x01(\rR\x08modified\
    \x12\x16\n\x06digest\x18\x02\x20\x01(\tR\x06digest\"(\n&CInventory_GetUs\
    erPurchaseInfo_Request\"G\n'CInventory_GetUserPurchaseInfo_Response\x12\
    \x1c\n\tecurrency\x18\x01\x20\x01(\x05R\tecurrency\"\xe3\x01\n\x1fCInven\
    tory_PurchaseInit_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appi\
    d\x12\x1a\n\x08language\x18\x02\x20\x01(\x05R\x08language\x12H\n\nline_i\
    tems\x18\x03\x20\x03(\x0b2).CInventory_PurchaseInit_Request.LineItemR\tl\
    ineItems\x1aD\n\x08LineItem\x12\x1c\n\titemdefid\x18\x01\x20\x01(\x04R\t\
    itemdefid\x12\x1a\n\x08quantity\x18\x02\x20\x01(\rR\x08quantity\"V\n\x20\
    CInventory_PurchaseInit_Response\x12\x18\n\x07orderid\x18\x01\x20\x01(\
    \x04R\x07orderid\x12\x18\n\x07transid\x18\x02\x20\x01(\x04R\x07transid\"\
    q\n#CInventory_PurchaseFinalize_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12\x1a\n\x08language\x18\x02\x20\x01(\x05R\x08languag\
    e\x12\x18\n\x07orderid\x18\x03\x20\x01(\x04R\x07orderid\"j\n\x1eCInvento\
    ry_InspectItem_Request\x12\x1c\n\titemdefid\x18\x01\x20\x01(\x04R\titemd\
    efid\x12\x16\n\x06itemid\x18\x02\x20\x01(\x06R\x06itemid\x12\x12\n\x04ta\
    gs\x18\x03\x20\x01(\tR\x04tags\"\x83\x01\n&CInventoryClient_NewItems_Not\
    ification\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12C\n\x12inve\
    ntory_response\x18\x02\x20\x01(\x0b2\x14.CInventory_ResponseR\x11invento\
    ryResponse2\x9b\n\n\tInventory\x12F\n\x0cGetInventory\x12\x20.CInventory\
    _GetInventory_Request\x1a\x14.CInventory_Response\x12F\n\x0cExchangeItem\
    \x12\x20.CInventory_ExchangeItem_Request\x1a\x14.CInventory_Response\x12\
    }\n\x1aGetEligiblePromoItemDefIDs\x12..CInventory_GetEligiblePromoItemDe\
    fIDs_Request\x1a/.CInventory_GetEligiblePromoItemDefIDs_Response\x12A\n\
    \x0cAddPromoItem\x12\x1b.CInventory_AddItem_Request\x1a\x14.CInventory_R\
    esponse\x12H\n\x0fSafeModifyItems\x12\x1f.CInventory_ModifyItems_Request\
    \x1a\x14.CInventory_Response\x12L\n\x0fConsumePlaytime\x12#.CInventory_C\
    onsumePlaytime_Request\x1a\x14.CInventory_Response\x12D\n\x0bConsumeItem\
    \x12\x1f.CInventory_ConsumeItem_Request\x1a\x14.CInventory_Response\x12D\
    \n\x0fDevGenerateItem\x12\x1b.CInventory_AddItem_Request\x1a\x14.CInvent\
    ory_Response\x12J\n\x0eDevSetNextDrop\x12\".CInventory_DevSetNextDrop_Re\
    quest\x1a\x14.CInventory_Response\x12J\n\x0eSplitItemStack\x12\".CInvent\
    ory_SplitItemStack_Request\x1a\x14.CInventory_Response\x12P\n\x11Combine\
    ItemStacks\x12%.CInventory_CombineItemStacks_Request\x1a\x14.CInventory_\
    Response\x12Y\n\x0eGetItemDefMeta\x12\".CInventory_GetItemDefMeta_Reques\
    t\x1a#.CInventory_GetItemDefMeta_Response\x12h\n\x13GetUserPurchaseInfo\
    \x12'.CInventory_GetUserPurchaseInfo_Request\x1a(.CInventory_GetUserPurc\
    haseInfo_Response\x12S\n\x0cPurchaseInit\x12\x20.CInventory_PurchaseInit\
    _Request\x1a!.CInventory_PurchaseInit_Response\x12N\n\x10PurchaseFinaliz\
    e\x12$.CInventory_PurchaseFinalize_Request\x1a\x14.CInventory_Response\
    \x12D\n\x0bInspectItem\x12\x1f.CInventory_InspectItem_Request\x1a\x14.CI\
    nventory_Response2_\n\x0fInventoryClient\x12F\n\x0eNotifyNewItems\x12'.C\
    InventoryClient_NewItems_Notification\x1a\x0b.NoResponse\x1a\x04\xc0\xb5\
    \x18\x02B\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(23);
            messages.push(CInventory_GetInventory_Request::generated_message_descriptor_data());
            messages.push(CInventory_Response::generated_message_descriptor_data());
            messages.push(CInventory_ExchangeItem_Request::generated_message_descriptor_data());
            messages.push(CInventory_GetEligiblePromoItemDefIDs_Request::generated_message_descriptor_data());
            messages.push(CInventory_GetEligiblePromoItemDefIDs_Response::generated_message_descriptor_data());
            messages.push(CInventory_AddItem_Request::generated_message_descriptor_data());
            messages.push(CInventory_ModifyItems_Request::generated_message_descriptor_data());
            messages.push(CInventory_ConsumePlaytime_Request::generated_message_descriptor_data());
            messages.push(CInventory_ConsumeItem_Request::generated_message_descriptor_data());
            messages.push(CInventory_DevSetNextDrop_Request::generated_message_descriptor_data());
            messages.push(CInventory_SplitItemStack_Request::generated_message_descriptor_data());
            messages.push(CInventory_CombineItemStacks_Request::generated_message_descriptor_data());
            messages.push(CInventory_GetItemDefMeta_Request::generated_message_descriptor_data());
            messages.push(CInventory_GetItemDefMeta_Response::generated_message_descriptor_data());
            messages.push(CInventory_GetUserPurchaseInfo_Request::generated_message_descriptor_data());
            messages.push(CInventory_GetUserPurchaseInfo_Response::generated_message_descriptor_data());
            messages.push(CInventory_PurchaseInit_Request::generated_message_descriptor_data());
            messages.push(CInventory_PurchaseInit_Response::generated_message_descriptor_data());
            messages.push(CInventory_PurchaseFinalize_Request::generated_message_descriptor_data());
            messages.push(CInventory_InspectItem_Request::generated_message_descriptor_data());
            messages.push(CInventoryClient_NewItems_Notification::generated_message_descriptor_data());
            messages.push(cinventory_modify_items_request::ItemPropertyUpdate::generated_message_descriptor_data());
            messages.push(cinventory_purchase_init_request::LineItem::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
