// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_gamenotes.proto`

// @@protoc_insertion_point(message:CGameNotes_UploadImage_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotes_UploadImage_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotes_UploadImage_Request.file_prefix)
    pub file_prefix: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotes_UploadImage_Request.mime_type)
    pub mime_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotes_UploadImage_Request.data)
    pub data: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotes_UploadImage_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotes_UploadImage_Request {
    fn default() -> &'a CGameNotes_UploadImage_Request {
        <CGameNotes_UploadImage_Request as crate::Message>::default_instance()
    }
}

impl CGameNotes_UploadImage_Request {
    pub fn new() -> CGameNotes_UploadImage_Request {
        ::std::default::Default::default()
    }

    // optional string file_prefix = 1;

    pub fn file_prefix(&self) -> &str {
        match self.file_prefix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_prefix(&mut self) {
        self.file_prefix = ::std::option::Option::None;
    }

    pub fn has_file_prefix(&self) -> bool {
        self.file_prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_prefix(&mut self, v: ::std::string::String) {
        self.file_prefix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_prefix(&mut self) -> &mut ::std::string::String {
        if self.file_prefix.is_none() {
            self.file_prefix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_prefix(&mut self) -> ::std::string::String {
        self.file_prefix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string mime_type = 2;

    pub fn mime_type(&self) -> &str {
        match self.mime_type.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mime_type(&mut self) {
        self.mime_type = ::std::option::Option::None;
    }

    pub fn has_mime_type(&self) -> bool {
        self.mime_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mime_type(&mut self, v: ::std::string::String) {
        self.mime_type = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mime_type(&mut self) -> &mut ::std::string::String {
        if self.mime_type.is_none() {
            self.mime_type = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mime_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_mime_type(&mut self) -> ::std::string::String {
        self.mime_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes data = 3;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        self.data.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_prefix",
            |m: &CGameNotes_UploadImage_Request| { &m.file_prefix },
            |m: &mut CGameNotes_UploadImage_Request| { &mut m.file_prefix },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mime_type",
            |m: &CGameNotes_UploadImage_Request| { &m.mime_type },
            |m: &mut CGameNotes_UploadImage_Request| { &mut m.mime_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &CGameNotes_UploadImage_Request| { &m.data },
            |m: &mut CGameNotes_UploadImage_Request| { &mut m.data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotes_UploadImage_Request>(
            "CGameNotes_UploadImage_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotes_UploadImage_Request {
    const NAME: &'static str = "CGameNotes_UploadImage_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_prefix = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.mime_type = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.data = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_prefix.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.mime_type.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.file_prefix.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.mime_type.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotes_UploadImage_Request {
        CGameNotes_UploadImage_Request::new()
    }

    fn clear(&mut self) {
        self.file_prefix = ::std::option::Option::None;
        self.mime_type = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotes_UploadImage_Request {
        static instance: CGameNotes_UploadImage_Request = CGameNotes_UploadImage_Request {
            file_prefix: ::std::option::Option::None,
            mime_type: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotes_UploadImage_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotes_UploadImage_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotes_UploadImage_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotes_UploadImage_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotes_UploadImage_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotes_UploadImage_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotes_UploadImage_Response.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotes_UploadImage_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotes_UploadImage_Response {
    fn default() -> &'a CGameNotes_UploadImage_Response {
        <CGameNotes_UploadImage_Response as crate::Message>::default_instance()
    }
}

impl CGameNotes_UploadImage_Response {
    pub fn new() -> CGameNotes_UploadImage_Response {
        ::std::default::Default::default()
    }

    // optional string filename = 1;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CGameNotes_UploadImage_Response| { &m.filename },
            |m: &mut CGameNotes_UploadImage_Response| { &mut m.filename },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotes_UploadImage_Response>(
            "CGameNotes_UploadImage_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotes_UploadImage_Response {
    const NAME: &'static str = "CGameNotes_UploadImage_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filename.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.filename.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotes_UploadImage_Response {
        CGameNotes_UploadImage_Response::new()
    }

    fn clear(&mut self) {
        self.filename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotes_UploadImage_Response {
        static instance: CGameNotes_UploadImage_Response = CGameNotes_UploadImage_Response {
            filename: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotes_UploadImage_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotes_UploadImage_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotes_UploadImage_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotes_UploadImage_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dwebuimessages_gamenotes.proto\x1a\x18steammessages_base.proto\x1a\
    \x18webuimessages_base.proto\"r\n\x1eCGameNotes_UploadImage_Request\x12\
    \x1f\n\x0bfile_prefix\x18\x01\x20\x01(\tR\nfilePrefix\x12\x1b\n\tmime_ty\
    pe\x18\x02\x20\x01(\tR\x08mimeType\x12\x12\n\x04data\x18\x03\x20\x01(\
    \x0cR\x04data\"=\n\x1fCGameNotes_UploadImage_Response\x12\x1a\n\x08filen\
    ame\x18\x01\x20\x01(\tR\x08filename2c\n\tGameNotes\x12P\n\x0bUploadImage\
    \x12\x1f.CGameNotes_UploadImage_Request\x1a\x20.CGameNotes_UploadImage_R\
    esponse\x1a\x04\x80\x97\"\x01B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CGameNotes_UploadImage_Request::generated_message_descriptor_data());
            messages.push(CGameNotes_UploadImage_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
