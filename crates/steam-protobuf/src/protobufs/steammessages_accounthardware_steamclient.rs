// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_accounthardware.steamclient.proto`

// @@protoc_insertion_point(message:CAccountHardware_RegisterSteamController_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterSteamController_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_RegisterSteamController_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterSteamController_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterSteamController_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterSteamController_Request {
    fn default() -> &'a CAccountHardware_RegisterSteamController_Request {
        <CAccountHardware_RegisterSteamController_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterSteamController_Request {
    pub fn new() -> CAccountHardware_RegisterSteamController_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_RegisterSteamController_Request| { &m.serial_number },
            |m: &mut CAccountHardware_RegisterSteamController_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_RegisterSteamController_Request| { &m.controller_code },
            |m: &mut CAccountHardware_RegisterSteamController_Request| { &mut m.controller_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterSteamController_Request>(
            "CAccountHardware_RegisterSteamController_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_RegisterSteamController_Request {
    const NAME: &'static str = "CAccountHardware_RegisterSteamController_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterSteamController_Request {
        CAccountHardware_RegisterSteamController_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterSteamController_Request {
        static instance: CAccountHardware_RegisterSteamController_Request = CAccountHardware_RegisterSteamController_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_RegisterSteamController_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterSteamController_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterSteamController_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_RegisterSteamController_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterSteamController_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterSteamController_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterSteamController_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterSteamController_Response {
    fn default() -> &'a CAccountHardware_RegisterSteamController_Response {
        <CAccountHardware_RegisterSteamController_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterSteamController_Response {
    pub fn new() -> CAccountHardware_RegisterSteamController_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterSteamController_Response>(
            "CAccountHardware_RegisterSteamController_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_RegisterSteamController_Response {
    const NAME: &'static str = "CAccountHardware_RegisterSteamController_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterSteamController_Response {
        CAccountHardware_RegisterSteamController_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterSteamController_Response {
        static instance: CAccountHardware_RegisterSteamController_Response = CAccountHardware_RegisterSteamController_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_RegisterSteamController_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterSteamController_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterSteamController_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_RegisterSteamController_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_CompleteSteamControllerRegistration_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_CompleteSteamControllerRegistration_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_CompleteSteamControllerRegistration_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn default() -> &'a CAccountHardware_CompleteSteamControllerRegistration_Request {
        <CAccountHardware_CompleteSteamControllerRegistration_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_CompleteSteamControllerRegistration_Request {
    pub fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_CompleteSteamControllerRegistration_Request| { &m.serial_number },
            |m: &mut CAccountHardware_CompleteSteamControllerRegistration_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_CompleteSteamControllerRegistration_Request| { &m.controller_code },
            |m: &mut CAccountHardware_CompleteSteamControllerRegistration_Request| { &mut m.controller_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_CompleteSteamControllerRegistration_Request>(
            "CAccountHardware_CompleteSteamControllerRegistration_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_CompleteSteamControllerRegistration_Request {
    const NAME: &'static str = "CAccountHardware_CompleteSteamControllerRegistration_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Request {
        CAccountHardware_CompleteSteamControllerRegistration_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_CompleteSteamControllerRegistration_Request {
        static instance: CAccountHardware_CompleteSteamControllerRegistration_Request = CAccountHardware_CompleteSteamControllerRegistration_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_CompleteSteamControllerRegistration_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_CompleteSteamControllerRegistration_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_CompleteSteamControllerRegistration_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_CompleteSteamControllerRegistration_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_CompleteSteamControllerRegistration_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn default() -> &'a CAccountHardware_CompleteSteamControllerRegistration_Response {
        <CAccountHardware_CompleteSteamControllerRegistration_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_CompleteSteamControllerRegistration_Response {
    pub fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_CompleteSteamControllerRegistration_Response>(
            "CAccountHardware_CompleteSteamControllerRegistration_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_CompleteSteamControllerRegistration_Response {
    const NAME: &'static str = "CAccountHardware_CompleteSteamControllerRegistration_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Response {
        CAccountHardware_CompleteSteamControllerRegistration_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_CompleteSteamControllerRegistration_Response {
        static instance: CAccountHardware_CompleteSteamControllerRegistration_Response = CAccountHardware_CompleteSteamControllerRegistration_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_CompleteSteamControllerRegistration_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_CompleteSteamControllerRegistration_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &m.serial_number },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &m.controller_code },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Request| { &mut m.controller_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_QueryAccountsRegisteredToSerial_Request>(
            "CAccountHardware_QueryAccountsRegisteredToSerial_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        CAccountHardware_QueryAccountsRegisteredToSerial_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Request = CAccountHardware_QueryAccountsRegisteredToSerial_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_QueryAccountsRegisteredToSerial_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
    pub registration_complete: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Accounts as crate::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional bool registration_complete = 2;

    pub fn registration_complete(&self) -> bool {
        self.registration_complete.unwrap_or(false)
    }

    pub fn clear_registration_complete(&mut self) {
        self.registration_complete = ::std::option::Option::None;
    }

    pub fn has_registration_complete(&self) -> bool {
        self.registration_complete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_registration_complete(&mut self, v: bool) {
        self.registration_complete = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &m.accountid },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "registration_complete",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &m.registration_complete },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Accounts| { &mut m.registration_complete },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>(
            "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.registration_complete = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.registration_complete {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.registration_complete {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.registration_complete = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Accounts = CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
            accountid: ::std::option::Option::None,
            registration_complete: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_QueryAccountsRegisteredToSerial_Accounts").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
    pub accounts: ::std::vec::Vec<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        ::std::default::Default::default()
    }

    // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;

    pub fn accounts(&self) -> &[CAccountHardware_QueryAccountsRegisteredToSerial_Accounts] {
        &self.accounts
    }

    pub fn clear_accounts(&mut self) {
        self.accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_accounts(&mut self, v: ::std::vec::Vec<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>) {
        self.accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_accounts(&mut self) -> &mut ::std::vec::Vec<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts> {
        &mut self.accounts
    }

    // Take field
    pub fn take_accounts(&mut self) -> ::std::vec::Vec<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts> {
        ::std::mem::replace(&mut self.accounts, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accounts",
            |m: &CAccountHardware_QueryAccountsRegisteredToSerial_Response| { &m.accounts },
            |m: &mut CAccountHardware_QueryAccountsRegisteredToSerial_Response| { &mut m.accounts },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_QueryAccountsRegisteredToSerial_Response>(
            "CAccountHardware_QueryAccountsRegisteredToSerial_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.accounts.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.accounts {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        CAccountHardware_QueryAccountsRegisteredToSerial_Response::new()
    }

    fn clear(&mut self) {
        self.accounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Response = CAccountHardware_QueryAccountsRegisteredToSerial_Response {
            accounts: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_QueryAccountsRegisteredToSerial_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
    pub templatename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        <CAccountHardware_SteamControllerSetConfig_ControllerConfig as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        ::std::default::Default::default()
    }

    // optional string appidorname = 1;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string templatename = 3;

    pub fn templatename(&self) -> &str {
        match self.templatename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_templatename(&mut self) {
        self.templatename = ::std::option::Option::None;
    }

    pub fn has_templatename(&self) -> bool {
        self.templatename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_templatename(&mut self, v: ::std::string::String) {
        self.templatename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_templatename(&mut self) -> &mut ::std::string::String {
        if self.templatename.is_none() {
            self.templatename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.templatename.as_mut().unwrap()
    }

    // Take field
    pub fn take_templatename(&mut self) -> ::std::string::String {
        self.templatename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appidorname",
            |m: &CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &m.appidorname },
            |m: &mut CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &mut m.appidorname },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &m.publishedfileid },
            |m: &mut CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &mut m.publishedfileid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "templatename",
            |m: &CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &m.templatename },
            |m: &mut CAccountHardware_SteamControllerSetConfig_ControllerConfig| { &mut m.templatename },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerSetConfig_ControllerConfig>(
            "CAccountHardware_SteamControllerSetConfig_ControllerConfig",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.templatename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appidorname.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.templatename.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.templatename.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        CAccountHardware_SteamControllerSetConfig_ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.appidorname = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.templatename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        static instance: CAccountHardware_SteamControllerSetConfig_ControllerConfig = CAccountHardware_SteamControllerSetConfig_ControllerConfig {
            appidorname: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            templatename: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerSetConfig_ControllerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.configurations)
    pub configurations: ::std::vec::Vec<CAccountHardware_SteamControllerSetConfig_ControllerConfig>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.controller_type)
    pub controller_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.only_for_this_serial)
    pub only_for_this_serial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_Request {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_Request {
        <CAccountHardware_SteamControllerSetConfig_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_Request {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;

    pub fn configurations(&self) -> &[CAccountHardware_SteamControllerSetConfig_ControllerConfig] {
        &self.configurations
    }

    pub fn clear_configurations(&mut self) {
        self.configurations.clear();
    }

    // Param is passed by value, moved
    pub fn set_configurations(&mut self, v: ::std::vec::Vec<CAccountHardware_SteamControllerSetConfig_ControllerConfig>) {
        self.configurations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_configurations(&mut self) -> &mut ::std::vec::Vec<CAccountHardware_SteamControllerSetConfig_ControllerConfig> {
        &mut self.configurations
    }

    // Take field
    pub fn take_configurations(&mut self) -> ::std::vec::Vec<CAccountHardware_SteamControllerSetConfig_ControllerConfig> {
        ::std::mem::replace(&mut self.configurations, ::std::vec::Vec::new())
    }

    // optional int32 controller_type = 5;

    pub fn controller_type(&self) -> i32 {
        self.controller_type.unwrap_or(2i32)
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: i32) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // optional bool only_for_this_serial = 6;

    pub fn only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.unwrap_or(false)
    }

    pub fn clear_only_for_this_serial(&mut self) {
        self.only_for_this_serial = ::std::option::Option::None;
    }

    pub fn has_only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_only_for_this_serial(&mut self, v: bool) {
        self.only_for_this_serial = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.serial_number },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.controller_code },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.controller_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.accountid },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "configurations",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.configurations },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.configurations },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_type",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.controller_type },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.controller_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "only_for_this_serial",
            |m: &CAccountHardware_SteamControllerSetConfig_Request| { &m.only_for_this_serial },
            |m: &mut CAccountHardware_SteamControllerSetConfig_Request| { &mut m.only_for_this_serial },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerSetConfig_Request>(
            "CAccountHardware_SteamControllerSetConfig_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SteamControllerSetConfig_Request {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.configurations.push(is.read_message()?);
                },
                40 => {
                    self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.only_for_this_serial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(3, v);
        }
        for value in &self.configurations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.controller_type {
            my_size += crate::rt::int32_size(5, v);
        }
        if let Some(v) = self.only_for_this_serial {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        for v in &self.configurations {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.controller_type {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.only_for_this_serial {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_Request {
        CAccountHardware_SteamControllerSetConfig_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.configurations.clear();
        self.controller_type = ::std::option::Option::None;
        self.only_for_this_serial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_Request {
        static instance: CAccountHardware_SteamControllerSetConfig_Request = CAccountHardware_SteamControllerSetConfig_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            configurations: ::std::vec::Vec::new(),
            controller_type: ::std::option::Option::None,
            only_for_this_serial: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SteamControllerSetConfig_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerSetConfig_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerSetConfig_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SteamControllerSetConfig_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_Response {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_Response {
        <CAccountHardware_SteamControllerSetConfig_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_Response {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerSetConfig_Response>(
            "CAccountHardware_SteamControllerSetConfig_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SteamControllerSetConfig_Response {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_Response {
        CAccountHardware_SteamControllerSetConfig_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_Response {
        static instance: CAccountHardware_SteamControllerSetConfig_Response = CAccountHardware_SteamControllerSetConfig_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SteamControllerSetConfig_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerSetConfig_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerSetConfig_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SteamControllerSetConfig_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.controller_type)
    pub controller_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.only_for_this_serial)
    pub only_for_this_serial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_Request {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_Request {
        <CAccountHardware_SteamControllerGetConfig_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_Request {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional string appidorname = 4;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 controller_type = 5;

    pub fn controller_type(&self) -> i32 {
        self.controller_type.unwrap_or(2i32)
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: i32) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // optional bool only_for_this_serial = 6;

    pub fn only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.unwrap_or(false)
    }

    pub fn clear_only_for_this_serial(&mut self) {
        self.only_for_this_serial = ::std::option::Option::None;
    }

    pub fn has_only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_only_for_this_serial(&mut self, v: bool) {
        self.only_for_this_serial = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.serial_number },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.controller_code },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.controller_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.accountid },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.accountid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appidorname",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.appidorname },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.appidorname },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_type",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.controller_type },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.controller_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "only_for_this_serial",
            |m: &CAccountHardware_SteamControllerGetConfig_Request| { &m.only_for_this_serial },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Request| { &mut m.only_for_this_serial },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerGetConfig_Request>(
            "CAccountHardware_SteamControllerGetConfig_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SteamControllerGetConfig_Request {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.only_for_this_serial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.appidorname.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.controller_type {
            my_size += crate::rt::int32_size(5, v);
        }
        if let Some(v) = self.only_for_this_serial {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.controller_type {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.only_for_this_serial {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_Request {
        CAccountHardware_SteamControllerGetConfig_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.appidorname = ::std::option::Option::None;
        self.controller_type = ::std::option::Option::None;
        self.only_for_this_serial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_Request {
        static instance: CAccountHardware_SteamControllerGetConfig_Request = CAccountHardware_SteamControllerGetConfig_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            appidorname: ::std::option::Option::None,
            controller_type: ::std::option::Option::None,
            only_for_this_serial: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SteamControllerGetConfig_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerGetConfig_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerGetConfig_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SteamControllerGetConfig_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
    pub templatename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.autosave)
    pub autosave: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        <CAccountHardware_SteamControllerGetConfig_ControllerConfig as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        ::std::default::Default::default()
    }

    // optional string appidorname = 1;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string templatename = 3;

    pub fn templatename(&self) -> &str {
        match self.templatename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_templatename(&mut self) {
        self.templatename = ::std::option::Option::None;
    }

    pub fn has_templatename(&self) -> bool {
        self.templatename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_templatename(&mut self, v: ::std::string::String) {
        self.templatename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_templatename(&mut self) -> &mut ::std::string::String {
        if self.templatename.is_none() {
            self.templatename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.templatename.as_mut().unwrap()
    }

    // Take field
    pub fn take_templatename(&mut self) -> ::std::string::String {
        self.templatename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string serial_number = 4;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool autosave = 5;

    pub fn autosave(&self) -> bool {
        self.autosave.unwrap_or(false)
    }

    pub fn clear_autosave(&mut self) {
        self.autosave = ::std::option::Option::None;
    }

    pub fn has_autosave(&self) -> bool {
        self.autosave.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autosave(&mut self, v: bool) {
        self.autosave = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appidorname",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.appidorname },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.appidorname },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.publishedfileid },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.publishedfileid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "templatename",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.templatename },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.templatename },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.serial_number },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "autosave",
            |m: &CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &m.autosave },
            |m: &mut CAccountHardware_SteamControllerGetConfig_ControllerConfig| { &mut m.autosave },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerGetConfig_ControllerConfig>(
            "CAccountHardware_SteamControllerGetConfig_ControllerConfig",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.templatename = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.autosave = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appidorname.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.templatename.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.autosave {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.templatename.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.autosave {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        CAccountHardware_SteamControllerGetConfig_ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.appidorname = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.templatename = ::std::option::Option::None;
        self.serial_number = ::std::option::Option::None;
        self.autosave = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        static instance: CAccountHardware_SteamControllerGetConfig_ControllerConfig = CAccountHardware_SteamControllerGetConfig_ControllerConfig {
            appidorname: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            templatename: ::std::option::Option::None,
            serial_number: ::std::option::Option::None,
            autosave: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerGetConfig_ControllerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Response.configurations)
    pub configurations: ::std::vec::Vec<CAccountHardware_SteamControllerGetConfig_ControllerConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_Response {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_Response {
        <CAccountHardware_SteamControllerGetConfig_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_Response {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_Response {
        ::std::default::Default::default()
    }

    // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;

    pub fn configurations(&self) -> &[CAccountHardware_SteamControllerGetConfig_ControllerConfig] {
        &self.configurations
    }

    pub fn clear_configurations(&mut self) {
        self.configurations.clear();
    }

    // Param is passed by value, moved
    pub fn set_configurations(&mut self, v: ::std::vec::Vec<CAccountHardware_SteamControllerGetConfig_ControllerConfig>) {
        self.configurations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_configurations(&mut self) -> &mut ::std::vec::Vec<CAccountHardware_SteamControllerGetConfig_ControllerConfig> {
        &mut self.configurations
    }

    // Take field
    pub fn take_configurations(&mut self) -> ::std::vec::Vec<CAccountHardware_SteamControllerGetConfig_ControllerConfig> {
        ::std::mem::replace(&mut self.configurations, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "configurations",
            |m: &CAccountHardware_SteamControllerGetConfig_Response| { &m.configurations },
            |m: &mut CAccountHardware_SteamControllerGetConfig_Response| { &mut m.configurations },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SteamControllerGetConfig_Response>(
            "CAccountHardware_SteamControllerGetConfig_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SteamControllerGetConfig_Response {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.configurations.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.configurations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.configurations {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_Response {
        CAccountHardware_SteamControllerGetConfig_Response::new()
    }

    fn clear(&mut self) {
        self.configurations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_Response {
        static instance: CAccountHardware_SteamControllerGetConfig_Response = CAccountHardware_SteamControllerGetConfig_Response {
            configurations: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SteamControllerGetConfig_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SteamControllerGetConfig_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SteamControllerGetConfig_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SteamControllerGetConfig_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_DeRegisterSteamController_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_DeRegisterSteamController_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_DeRegisterSteamController_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_DeRegisterSteamController_Request {
    fn default() -> &'a CAccountHardware_DeRegisterSteamController_Request {
        <CAccountHardware_DeRegisterSteamController_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_DeRegisterSteamController_Request {
    pub fn new() -> CAccountHardware_DeRegisterSteamController_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_DeRegisterSteamController_Request| { &m.serial_number },
            |m: &mut CAccountHardware_DeRegisterSteamController_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_DeRegisterSteamController_Request| { &m.controller_code },
            |m: &mut CAccountHardware_DeRegisterSteamController_Request| { &mut m.controller_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_DeRegisterSteamController_Request| { &m.accountid },
            |m: &mut CAccountHardware_DeRegisterSteamController_Request| { &mut m.accountid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_DeRegisterSteamController_Request>(
            "CAccountHardware_DeRegisterSteamController_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_DeRegisterSteamController_Request {
    const NAME: &'static str = "CAccountHardware_DeRegisterSteamController_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_DeRegisterSteamController_Request {
        CAccountHardware_DeRegisterSteamController_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_DeRegisterSteamController_Request {
        static instance: CAccountHardware_DeRegisterSteamController_Request = CAccountHardware_DeRegisterSteamController_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_DeRegisterSteamController_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_DeRegisterSteamController_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_DeRegisterSteamController_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_DeRegisterSteamController_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_DeRegisterSteamController_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_DeRegisterSteamController_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_DeRegisterSteamController_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_DeRegisterSteamController_Response {
    fn default() -> &'a CAccountHardware_DeRegisterSteamController_Response {
        <CAccountHardware_DeRegisterSteamController_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_DeRegisterSteamController_Response {
    pub fn new() -> CAccountHardware_DeRegisterSteamController_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_DeRegisterSteamController_Response>(
            "CAccountHardware_DeRegisterSteamController_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_DeRegisterSteamController_Response {
    const NAME: &'static str = "CAccountHardware_DeRegisterSteamController_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_DeRegisterSteamController_Response {
        CAccountHardware_DeRegisterSteamController_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_DeRegisterSteamController_Response {
        static instance: CAccountHardware_DeRegisterSteamController_Response = CAccountHardware_DeRegisterSteamController_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_DeRegisterSteamController_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_DeRegisterSteamController_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_DeRegisterSteamController_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_DeRegisterSteamController_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SetPersonalizationFile_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SetPersonalizationFile_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SetPersonalizationFile_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SetPersonalizationFile_Request {
    fn default() -> &'a CAccountHardware_SetPersonalizationFile_Request {
        <CAccountHardware_SetPersonalizationFile_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SetPersonalizationFile_Request {
    pub fn new() -> CAccountHardware_SetPersonalizationFile_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_SetPersonalizationFile_Request| { &m.serial_number },
            |m: &mut CAccountHardware_SetPersonalizationFile_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_SetPersonalizationFile_Request| { &m.publishedfileid },
            |m: &mut CAccountHardware_SetPersonalizationFile_Request| { &mut m.publishedfileid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_SetPersonalizationFile_Request| { &m.accountid },
            |m: &mut CAccountHardware_SetPersonalizationFile_Request| { &mut m.accountid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SetPersonalizationFile_Request>(
            "CAccountHardware_SetPersonalizationFile_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SetPersonalizationFile_Request {
    const NAME: &'static str = "CAccountHardware_SetPersonalizationFile_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SetPersonalizationFile_Request {
        CAccountHardware_SetPersonalizationFile_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SetPersonalizationFile_Request {
        static instance: CAccountHardware_SetPersonalizationFile_Request = CAccountHardware_SetPersonalizationFile_Request {
            serial_number: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SetPersonalizationFile_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SetPersonalizationFile_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SetPersonalizationFile_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SetPersonalizationFile_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_SetPersonalizationFile_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SetPersonalizationFile_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SetPersonalizationFile_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SetPersonalizationFile_Response {
    fn default() -> &'a CAccountHardware_SetPersonalizationFile_Response {
        <CAccountHardware_SetPersonalizationFile_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_SetPersonalizationFile_Response {
    pub fn new() -> CAccountHardware_SetPersonalizationFile_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_SetPersonalizationFile_Response>(
            "CAccountHardware_SetPersonalizationFile_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_SetPersonalizationFile_Response {
    const NAME: &'static str = "CAccountHardware_SetPersonalizationFile_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SetPersonalizationFile_Response {
        CAccountHardware_SetPersonalizationFile_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SetPersonalizationFile_Response {
        static instance: CAccountHardware_SetPersonalizationFile_Response = CAccountHardware_SetPersonalizationFile_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_SetPersonalizationFile_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_SetPersonalizationFile_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_SetPersonalizationFile_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_SetPersonalizationFile_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_GetPersonalizationFile_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetPersonalizationFile_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetPersonalizationFile_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetPersonalizationFile_Request {
    fn default() -> &'a CAccountHardware_GetPersonalizationFile_Request {
        <CAccountHardware_GetPersonalizationFile_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_GetPersonalizationFile_Request {
    pub fn new() -> CAccountHardware_GetPersonalizationFile_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 2;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_GetPersonalizationFile_Request| { &m.serial_number },
            |m: &mut CAccountHardware_GetPersonalizationFile_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CAccountHardware_GetPersonalizationFile_Request| { &m.accountid },
            |m: &mut CAccountHardware_GetPersonalizationFile_Request| { &mut m.accountid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_GetPersonalizationFile_Request>(
            "CAccountHardware_GetPersonalizationFile_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_GetPersonalizationFile_Request {
    const NAME: &'static str = "CAccountHardware_GetPersonalizationFile_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.accountid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetPersonalizationFile_Request {
        CAccountHardware_GetPersonalizationFile_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetPersonalizationFile_Request {
        static instance: CAccountHardware_GetPersonalizationFile_Request = CAccountHardware_GetPersonalizationFile_Request {
            serial_number: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_GetPersonalizationFile_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_GetPersonalizationFile_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_GetPersonalizationFile_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_GetPersonalizationFile_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_GetPersonalizationFile_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetPersonalizationFile_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Response.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetPersonalizationFile_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetPersonalizationFile_Response {
    fn default() -> &'a CAccountHardware_GetPersonalizationFile_Response {
        <CAccountHardware_GetPersonalizationFile_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_GetPersonalizationFile_Response {
    pub fn new() -> CAccountHardware_GetPersonalizationFile_Response {
        ::std::default::Default::default()
    }

    // optional uint64 publishedfileid = 1;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CAccountHardware_GetPersonalizationFile_Response| { &m.publishedfileid },
            |m: &mut CAccountHardware_GetPersonalizationFile_Response| { &mut m.publishedfileid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_GetPersonalizationFile_Response>(
            "CAccountHardware_GetPersonalizationFile_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_GetPersonalizationFile_Response {
    const NAME: &'static str = "CAccountHardware_GetPersonalizationFile_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publishedfileid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.publishedfileid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetPersonalizationFile_Response {
        CAccountHardware_GetPersonalizationFile_Response::new()
    }

    fn clear(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetPersonalizationFile_Response {
        static instance: CAccountHardware_GetPersonalizationFile_Response = CAccountHardware_GetPersonalizationFile_Response {
            publishedfileid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_GetPersonalizationFile_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_GetPersonalizationFile_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_GetPersonalizationFile_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_GetPersonalizationFile_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_VRCompatibilityCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.product_name)
    pub product_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.values)
    pub values: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_request::Pair>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_VRCompatibilityCheck_Request {
    fn default() -> &'a CAccountHardware_VRCompatibilityCheck_Request {
        <CAccountHardware_VRCompatibilityCheck_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_VRCompatibilityCheck_Request {
    pub fn new() -> CAccountHardware_VRCompatibilityCheck_Request {
        ::std::default::Default::default()
    }

    // optional string product_name = 1;

    pub fn product_name(&self) -> &str {
        match self.product_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_product_name(&mut self) {
        self.product_name = ::std::option::Option::None;
    }

    pub fn has_product_name(&self) -> bool {
        self.product_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product_name(&mut self, v: ::std::string::String) {
        self.product_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_name(&mut self) -> &mut ::std::string::String {
        if self.product_name.is_none() {
            self.product_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.product_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_product_name(&mut self) -> ::std::string::String {
        self.product_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CAccountHardware_VRCompatibilityCheck_Request.Pair values = 2;

    pub fn values(&self) -> &[caccount_hardware_vrcompatibility_check_request::Pair] {
        &self.values
    }

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_request::Pair>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::std::vec::Vec<caccount_hardware_vrcompatibility_check_request::Pair> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::std::vec::Vec<caccount_hardware_vrcompatibility_check_request::Pair> {
        ::std::mem::replace(&mut self.values, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "product_name",
            |m: &CAccountHardware_VRCompatibilityCheck_Request| { &m.product_name },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Request| { &mut m.product_name },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &CAccountHardware_VRCompatibilityCheck_Request| { &m.values },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Request| { &mut m.values },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_VRCompatibilityCheck_Request>(
            "CAccountHardware_VRCompatibilityCheck_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_VRCompatibilityCheck_Request {
    const NAME: &'static str = "CAccountHardware_VRCompatibilityCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.product_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.product_name.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.product_name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.values {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_VRCompatibilityCheck_Request {
        CAccountHardware_VRCompatibilityCheck_Request::new()
    }

    fn clear(&mut self) {
        self.product_name = ::std::option::Option::None;
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_VRCompatibilityCheck_Request {
        static instance: CAccountHardware_VRCompatibilityCheck_Request = CAccountHardware_VRCompatibilityCheck_Request {
            product_name: ::std::option::Option::None,
            values: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_VRCompatibilityCheck_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_VRCompatibilityCheck_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_VRCompatibilityCheck_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAccountHardware_VRCompatibilityCheck_Request`
pub mod caccount_hardware_vrcompatibility_check_request {
    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Request.Pair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pair {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Request.Pair.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pair {
        fn default() -> &'a Pair {
            <Pair as crate::Message>::default_instance()
        }
    }

    impl Pair {
        pub fn new() -> Pair {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "key",
                |m: &Pair| { &m.key },
                |m: &mut Pair| { &mut m.key },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &Pair| { &m.value },
                |m: &mut Pair| { &mut m.value },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Pair>(
                "CAccountHardware_VRCompatibilityCheck_Request.Pair",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Pair {
        const NAME: &'static str = "Pair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pair {
            Pair::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pair {
            static instance: Pair = Pair {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Pair {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Request.Pair").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Pair {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Pair {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_VRCompatibilityCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.values)
    pub values: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::Pair>,
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.components)
    pub components: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::ComponentDisplay>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_VRCompatibilityCheck_Response {
    fn default() -> &'a CAccountHardware_VRCompatibilityCheck_Response {
        <CAccountHardware_VRCompatibilityCheck_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_VRCompatibilityCheck_Response {
    pub fn new() -> CAccountHardware_VRCompatibilityCheck_Response {
        ::std::default::Default::default()
    }

    // repeated .CAccountHardware_VRCompatibilityCheck_Response.Pair values = 1;

    pub fn values(&self) -> &[caccount_hardware_vrcompatibility_check_response::Pair] {
        &self.values
    }

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::Pair>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::Pair> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::Pair> {
        ::std::mem::replace(&mut self.values, ::std::vec::Vec::new())
    }

    // repeated .CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay components = 2;

    pub fn components(&self) -> &[caccount_hardware_vrcompatibility_check_response::ComponentDisplay] {
        &self.components
    }

    pub fn clear_components(&mut self) {
        self.components.clear();
    }

    // Param is passed by value, moved
    pub fn set_components(&mut self, v: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::ComponentDisplay>) {
        self.components = v;
    }

    // Mutable pointer to the field.
    pub fn mut_components(&mut self) -> &mut ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::ComponentDisplay> {
        &mut self.components
    }

    // Take field
    pub fn take_components(&mut self) -> ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::ComponentDisplay> {
        ::std::mem::replace(&mut self.components, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &CAccountHardware_VRCompatibilityCheck_Response| { &m.values },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Response| { &mut m.values },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "components",
            |m: &CAccountHardware_VRCompatibilityCheck_Response| { &m.components },
            |m: &mut CAccountHardware_VRCompatibilityCheck_Response| { &mut m.components },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_VRCompatibilityCheck_Response>(
            "CAccountHardware_VRCompatibilityCheck_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_VRCompatibilityCheck_Response {
    const NAME: &'static str = "CAccountHardware_VRCompatibilityCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                18 => {
                    self.components.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.components {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.values {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.components {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_VRCompatibilityCheck_Response {
        CAccountHardware_VRCompatibilityCheck_Response::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.components.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_VRCompatibilityCheck_Response {
        static instance: CAccountHardware_VRCompatibilityCheck_Response = CAccountHardware_VRCompatibilityCheck_Response {
            values: ::std::vec::Vec::new(),
            components: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_VRCompatibilityCheck_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_VRCompatibilityCheck_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_VRCompatibilityCheck_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAccountHardware_VRCompatibilityCheck_Response`
pub mod caccount_hardware_vrcompatibility_check_response {
    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response.Pair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pair {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.Pair.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pair {
        fn default() -> &'a Pair {
            <Pair as crate::Message>::default_instance()
        }
    }

    impl Pair {
        pub fn new() -> Pair {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "key",
                |m: &Pair| { &m.key },
                |m: &mut Pair| { &mut m.key },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &Pair| { &m.value },
                |m: &mut Pair| { &mut m.value },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Pair>(
                "CAccountHardware_VRCompatibilityCheck_Response.Pair",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Pair {
        const NAME: &'static str = "Pair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pair {
            Pair::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pair {
            static instance: Pair = Pair {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Pair {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Response.Pair").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Pair {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Pair {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ComponentDisplay {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
        pub image: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ComponentDisplay {
        fn default() -> &'a ComponentDisplay {
            <ComponentDisplay as crate::Message>::default_instance()
        }
    }

    impl ComponentDisplay {
        pub fn new() -> ComponentDisplay {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string image = 2;

        pub fn image(&self) -> &str {
            match self.image.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_image(&mut self) {
            self.image = ::std::option::Option::None;
        }

        pub fn has_image(&self) -> bool {
            self.image.is_some()
        }

        // Param is passed by value, moved
        pub fn set_image(&mut self, v: ::std::string::String) {
            self.image = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_image(&mut self) -> &mut ::std::string::String {
            if self.image.is_none() {
                self.image = ::std::option::Option::Some(::std::string::String::new());
            }
            self.image.as_mut().unwrap()
        }

        // Take field
        pub fn take_image(&mut self) -> ::std::string::String {
            self.image.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 3;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &ComponentDisplay| { &m.name },
                |m: &mut ComponentDisplay| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "image",
                |m: &ComponentDisplay| { &m.image },
                |m: &mut ComponentDisplay| { &mut m.image },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &ComponentDisplay| { &m.value },
                |m: &mut ComponentDisplay| { &mut m.value },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ComponentDisplay>(
                "CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ComponentDisplay {
        const NAME: &'static str = "ComponentDisplay";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.image = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.image.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.image.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ComponentDisplay {
            ComponentDisplay::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.image = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ComponentDisplay {
            static instance: ComponentDisplay = ComponentDisplay {
                name: ::std::option::Option::None,
                image: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ComponentDisplay {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ComponentDisplay {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ComponentDisplay {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterValveIndexComponent_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterValveIndexComponent_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
    pub manufacturer_serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
    pub component_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.component_type)
    pub component_type: ::std::option::Option<crate::EnumOrUnknown<EValveIndexComponent>>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.estimated_time_registered)
    pub estimated_time_registered: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterValveIndexComponent_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterValveIndexComponent_Request {
    fn default() -> &'a CAccountHardware_RegisterValveIndexComponent_Request {
        <CAccountHardware_RegisterValveIndexComponent_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterValveIndexComponent_Request {
    pub fn new() -> CAccountHardware_RegisterValveIndexComponent_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string manufacturer_serial_number = 2;

    pub fn manufacturer_serial_number(&self) -> &str {
        match self.manufacturer_serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_manufacturer_serial_number(&mut self) {
        self.manufacturer_serial_number = ::std::option::Option::None;
    }

    pub fn has_manufacturer_serial_number(&self) -> bool {
        self.manufacturer_serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_serial_number(&mut self, v: ::std::string::String) {
        self.manufacturer_serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_serial_number(&mut self) -> &mut ::std::string::String {
        if self.manufacturer_serial_number.is_none() {
            self.manufacturer_serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.manufacturer_serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_manufacturer_serial_number(&mut self) -> ::std::string::String {
        self.manufacturer_serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string component_code = 3;

    pub fn component_code(&self) -> &str {
        match self.component_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_component_code(&mut self) {
        self.component_code = ::std::option::Option::None;
    }

    pub fn has_component_code(&self) -> bool {
        self.component_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_code(&mut self, v: ::std::string::String) {
        self.component_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_code(&mut self) -> &mut ::std::string::String {
        if self.component_code.is_none() {
            self.component_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.component_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_component_code(&mut self) -> ::std::string::String {
        self.component_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EValveIndexComponent component_type = 4;

    pub fn component_type(&self) -> EValveIndexComponent {
        match self.component_type {
            Some(e) => e.enum_value_or(EValveIndexComponent::k_EValveIndexComponentUnknown),
            None => EValveIndexComponent::k_EValveIndexComponentUnknown,
        }
    }

    pub fn clear_component_type(&mut self) {
        self.component_type = ::std::option::Option::None;
    }

    pub fn has_component_type(&self) -> bool {
        self.component_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_type(&mut self, v: EValveIndexComponent) {
        self.component_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional int32 estimated_time_registered = 5;

    pub fn estimated_time_registered(&self) -> i32 {
        self.estimated_time_registered.unwrap_or(0)
    }

    pub fn clear_estimated_time_registered(&mut self) {
        self.estimated_time_registered = ::std::option::Option::None;
    }

    pub fn has_estimated_time_registered(&self) -> bool {
        self.estimated_time_registered.is_some()
    }

    // Param is passed by value, moved
    pub fn set_estimated_time_registered(&mut self, v: i32) {
        self.estimated_time_registered = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.serial_number },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "manufacturer_serial_number",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.manufacturer_serial_number },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.manufacturer_serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "component_code",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.component_code },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.component_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "component_type",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.component_type },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.component_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "estimated_time_registered",
            |m: &CAccountHardware_RegisterValveIndexComponent_Request| { &m.estimated_time_registered },
            |m: &mut CAccountHardware_RegisterValveIndexComponent_Request| { &mut m.estimated_time_registered },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterValveIndexComponent_Request>(
            "CAccountHardware_RegisterValveIndexComponent_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_RegisterValveIndexComponent_Request {
    const NAME: &'static str = "CAccountHardware_RegisterValveIndexComponent_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.manufacturer_serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.component_code = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.component_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.estimated_time_registered = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.manufacturer_serial_number.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.component_code.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.component_type {
            my_size += crate::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.estimated_time_registered {
            my_size += crate::rt::int32_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.manufacturer_serial_number.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.component_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.component_type {
            os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.estimated_time_registered {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterValveIndexComponent_Request {
        CAccountHardware_RegisterValveIndexComponent_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.manufacturer_serial_number = ::std::option::Option::None;
        self.component_code = ::std::option::Option::None;
        self.component_type = ::std::option::Option::None;
        self.estimated_time_registered = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterValveIndexComponent_Request {
        static instance: CAccountHardware_RegisterValveIndexComponent_Request = CAccountHardware_RegisterValveIndexComponent_Request {
            serial_number: ::std::option::Option::None,
            manufacturer_serial_number: ::std::option::Option::None,
            component_code: ::std::option::Option::None,
            component_type: ::std::option::Option::None,
            estimated_time_registered: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_RegisterValveIndexComponent_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterValveIndexComponent_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterValveIndexComponent_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_RegisterValveIndexComponent_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterValveIndexComponent_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterValveIndexComponent_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterValveIndexComponent_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterValveIndexComponent_Response {
    fn default() -> &'a CAccountHardware_RegisterValveIndexComponent_Response {
        <CAccountHardware_RegisterValveIndexComponent_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterValveIndexComponent_Response {
    pub fn new() -> CAccountHardware_RegisterValveIndexComponent_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_RegisterValveIndexComponent_Response>(
            "CAccountHardware_RegisterValveIndexComponent_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_RegisterValveIndexComponent_Response {
    const NAME: &'static str = "CAccountHardware_RegisterValveIndexComponent_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterValveIndexComponent_Response {
        CAccountHardware_RegisterValveIndexComponent_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterValveIndexComponent_Response {
        static instance: CAccountHardware_RegisterValveIndexComponent_Response = CAccountHardware_RegisterValveIndexComponent_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_RegisterValveIndexComponent_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_RegisterValveIndexComponent_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_RegisterValveIndexComponent_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_RegisterValveIndexComponent_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_GetSteamDeckComponents_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetSteamDeckComponents_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetSteamDeckComponents_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetSteamDeckComponents_Request {
    fn default() -> &'a CAccountHardware_GetSteamDeckComponents_Request {
        <CAccountHardware_GetSteamDeckComponents_Request as crate::Message>::default_instance()
    }
}

impl CAccountHardware_GetSteamDeckComponents_Request {
    pub fn new() -> CAccountHardware_GetSteamDeckComponents_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial_number",
            |m: &CAccountHardware_GetSteamDeckComponents_Request| { &m.serial_number },
            |m: &mut CAccountHardware_GetSteamDeckComponents_Request| { &mut m.serial_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "controller_code",
            |m: &CAccountHardware_GetSteamDeckComponents_Request| { &m.controller_code },
            |m: &mut CAccountHardware_GetSteamDeckComponents_Request| { &mut m.controller_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_GetSteamDeckComponents_Request>(
            "CAccountHardware_GetSteamDeckComponents_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_GetSteamDeckComponents_Request {
    const NAME: &'static str = "CAccountHardware_GetSteamDeckComponents_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetSteamDeckComponents_Request {
        CAccountHardware_GetSteamDeckComponents_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetSteamDeckComponents_Request {
        static instance: CAccountHardware_GetSteamDeckComponents_Request = CAccountHardware_GetSteamDeckComponents_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_GetSteamDeckComponents_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_GetSteamDeckComponents_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_GetSteamDeckComponents_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_GetSteamDeckComponents_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountHardware_GetSteamDeckComponents_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetSteamDeckComponents_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetSteamDeckComponents_Response.json_components)
    pub json_components: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetSteamDeckComponents_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetSteamDeckComponents_Response {
    fn default() -> &'a CAccountHardware_GetSteamDeckComponents_Response {
        <CAccountHardware_GetSteamDeckComponents_Response as crate::Message>::default_instance()
    }
}

impl CAccountHardware_GetSteamDeckComponents_Response {
    pub fn new() -> CAccountHardware_GetSteamDeckComponents_Response {
        ::std::default::Default::default()
    }

    // optional string json_components = 1;

    pub fn json_components(&self) -> &str {
        match self.json_components.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_json_components(&mut self) {
        self.json_components = ::std::option::Option::None;
    }

    pub fn has_json_components(&self) -> bool {
        self.json_components.is_some()
    }

    // Param is passed by value, moved
    pub fn set_json_components(&mut self, v: ::std::string::String) {
        self.json_components = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_json_components(&mut self) -> &mut ::std::string::String {
        if self.json_components.is_none() {
            self.json_components = ::std::option::Option::Some(::std::string::String::new());
        }
        self.json_components.as_mut().unwrap()
    }

    // Take field
    pub fn take_json_components(&mut self) -> ::std::string::String {
        self.json_components.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "json_components",
            |m: &CAccountHardware_GetSteamDeckComponents_Response| { &m.json_components },
            |m: &mut CAccountHardware_GetSteamDeckComponents_Response| { &mut m.json_components },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountHardware_GetSteamDeckComponents_Response>(
            "CAccountHardware_GetSteamDeckComponents_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountHardware_GetSteamDeckComponents_Response {
    const NAME: &'static str = "CAccountHardware_GetSteamDeckComponents_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.json_components = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.json_components.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.json_components.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetSteamDeckComponents_Response {
        CAccountHardware_GetSteamDeckComponents_Response::new()
    }

    fn clear(&mut self) {
        self.json_components = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetSteamDeckComponents_Response {
        static instance: CAccountHardware_GetSteamDeckComponents_Response = CAccountHardware_GetSteamDeckComponents_Response {
            json_components: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountHardware_GetSteamDeckComponents_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountHardware_GetSteamDeckComponents_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountHardware_GetSteamDeckComponents_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountHardware_GetSteamDeckComponents_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EValveIndexComponent)
pub enum EValveIndexComponent {
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentUnknown)
    k_EValveIndexComponentUnknown = 0,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentHMD)
    k_EValveIndexComponentHMD = 1,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentLeftKnuckle)
    k_EValveIndexComponentLeftKnuckle = 2,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentRightKnuckle)
    k_EValveIndexComponentRightKnuckle = 3,
}

impl crate::Enum for EValveIndexComponent {
    const NAME: &'static str = "EValveIndexComponent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EValveIndexComponent> {
        match value {
            0 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentUnknown),
            1 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentHMD),
            2 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentLeftKnuckle),
            3 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentRightKnuckle),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EValveIndexComponent> {
        match str {
            "k_EValveIndexComponentUnknown" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentUnknown),
            "k_EValveIndexComponentHMD" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentHMD),
            "k_EValveIndexComponentLeftKnuckle" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentLeftKnuckle),
            "k_EValveIndexComponentRightKnuckle" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentRightKnuckle),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EValveIndexComponent] = &[
        EValveIndexComponent::k_EValveIndexComponentUnknown,
        EValveIndexComponent::k_EValveIndexComponentHMD,
        EValveIndexComponent::k_EValveIndexComponentLeftKnuckle,
        EValveIndexComponent::k_EValveIndexComponentRightKnuckle,
    ];
}

impl crate::EnumFull for EValveIndexComponent {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EValveIndexComponent").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EValveIndexComponent {
    fn default() -> Self {
        EValveIndexComponent::k_EValveIndexComponentUnknown
    }
}

impl EValveIndexComponent {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EValveIndexComponent>("EValveIndexComponent")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/steammessages_accounthardware.steamclient.proto\x1a\x18steammessages_\
    base.proto\x1a,steammessages_unified_base.steamclient.proto\"\x80\x01\n0\
    CAccountHardware_RegisterSteamController_Request\x12#\n\rserial_number\
    \x18\x01\x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\x18\x02\
    \x20\x01(\tR\x0econtrollerCode\"3\n1CAccountHardware_RegisterSteamContro\
    ller_Response\"\x8c\x01\n<CAccountHardware_CompleteSteamControllerRegist\
    ration_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNumber\
    \x12'\n\x0fcontroller_code\x18\x02\x20\x01(\tR\x0econtrollerCode\"?\n=CA\
    ccountHardware_CompleteSteamControllerRegistration_Response\"\x88\x01\n8\
    CAccountHardware_QueryAccountsRegisteredToSerial_Request\x12#\n\rserial_\
    number\x18\x01\x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\x18\
    \x02\x20\x01(\tR\x0econtrollerCode\"\x8e\x01\n9CAccountHardware_QueryAcc\
    ountsRegisteredToSerial_Accounts\x12\x1c\n\taccountid\x18\x01\x20\x01(\r\
    R\taccountid\x123\n\x15registration_complete\x18\x02\x20\x01(\x08R\x14re\
    gistrationComplete\"\x93\x01\n9CAccountHardware_QueryAccountsRegisteredT\
    oSerial_Response\x12V\n\x08accounts\x18\x01\x20\x03(\x0b2:.CAccountHardw\
    are_QueryAccountsRegisteredToSerial_AccountsR\x08accounts\"\xac\x01\n:CA\
    ccountHardware_SteamControllerSetConfig_ControllerConfig\x12\x20\n\x0bap\
    pidorname\x18\x01\x20\x01(\tR\x0bappidorname\x12(\n\x0fpublishedfileid\
    \x18\x02\x20\x01(\x04R\x0fpublishedfileid\x12\"\n\x0ctemplatename\x18\
    \x03\x20\x01(\tR\x0ctemplatename\"\xe8\x02\n1CAccountHardware_SteamContr\
    ollerSetConfig_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cseri\
    alNumber\x12'\n\x0fcontroller_code\x18\x02\x20\x01(\tR\x0econtrollerCode\
    \x12\x1c\n\taccountid\x18\x03\x20\x01(\rR\taccountid\x12c\n\x0econfigura\
    tions\x18\x04\x20\x03(\x0b2;.CAccountHardware_SteamControllerSetConfig_C\
    ontrollerConfigR\x0econfigurations\x12*\n\x0fcontroller_type\x18\x05\x20\
    \x01(\x05:\x012R\x0econtrollerType\x126\n\x14only_for_this_serial\x18\
    \x06\x20\x01(\x08:\x05falseR\x11onlyForThisSerial\"4\n2CAccountHardware_\
    SteamControllerSetConfig_Response\"\xa5\x02\n1CAccountHardware_SteamCont\
    rollerGetConfig_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cser\
    ialNumber\x12'\n\x0fcontroller_code\x18\x02\x20\x01(\tR\x0econtrollerCod\
    e\x12\x1c\n\taccountid\x18\x03\x20\x01(\rR\taccountid\x12\x20\n\x0bappid\
    orname\x18\x04\x20\x01(\tR\x0bappidorname\x12*\n\x0fcontroller_type\x18\
    \x05\x20\x01(\x05:\x012R\x0econtrollerType\x126\n\x14only_for_this_seria\
    l\x18\x06\x20\x01(\x08:\x05falseR\x11onlyForThisSerial\"\xf4\x01\n:CAcco\
    untHardware_SteamControllerGetConfig_ControllerConfig\x12\x20\n\x0bappid\
    orname\x18\x01\x20\x01(\tR\x0bappidorname\x12(\n\x0fpublishedfileid\x18\
    \x02\x20\x01(\x04R\x0fpublishedfileid\x12\"\n\x0ctemplatename\x18\x03\
    \x20\x01(\tR\x0ctemplatename\x12#\n\rserial_number\x18\x04\x20\x01(\tR\
    \x0cserialNumber\x12!\n\x08autosave\x18\x05\x20\x01(\x08:\x05falseR\x08a\
    utosave\"\x99\x01\n2CAccountHardware_SteamControllerGetConfig_Response\
    \x12c\n\x0econfigurations\x18\x01\x20\x03(\x0b2;.CAccountHardware_SteamC\
    ontrollerGetConfig_ControllerConfigR\x0econfigurations\"\xa0\x01\n2CAcco\
    untHardware_DeRegisterSteamController_Request\x12#\n\rserial_number\x18\
    \x01\x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\x18\x02\x20\
    \x01(\tR\x0econtrollerCode\x12\x1c\n\taccountid\x18\x03\x20\x01(\rR\tacc\
    ountid\"5\n3CAccountHardware_DeRegisterSteamController_Response\"\x9e\
    \x01\n/CAccountHardware_SetPersonalizationFile_Request\x12#\n\rserial_nu\
    mber\x18\x01\x20\x01(\tR\x0cserialNumber\x12(\n\x0fpublishedfileid\x18\
    \x02\x20\x01(\x04R\x0fpublishedfileid\x12\x1c\n\taccountid\x18\x03\x20\
    \x01(\rR\taccountid\"2\n0CAccountHardware_SetPersonalizationFile_Respons\
    e\"t\n/CAccountHardware_GetPersonalizationFile_Request\x12#\n\rserial_nu\
    mber\x18\x01\x20\x01(\tR\x0cserialNumber\x12\x1c\n\taccountid\x18\x02\
    \x20\x01(\rR\taccountid\"\\\n0CAccountHardware_GetPersonalizationFile_Re\
    sponse\x12(\n\x0fpublishedfileid\x18\x01\x20\x01(\x04R\x0fpublishedfilei\
    d\"\xcf\x01\n-CAccountHardware_VRCompatibilityCheck_Request\x12!\n\x0cpr\
    oduct_name\x18\x01\x20\x01(\tR\x0bproductName\x12K\n\x06values\x18\x02\
    \x20\x03(\x0b23.CAccountHardware_VRCompatibilityCheck_Request.PairR\x06v\
    alues\x1a.\n\x04Pair\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\
    \n\x05value\x18\x02\x20\x01(\tR\x05value\"\xe4\x02\n.CAccountHardware_VR\
    CompatibilityCheck_Response\x12L\n\x06values\x18\x01\x20\x03(\x0b24.CAcc\
    ountHardware_VRCompatibilityCheck_Response.PairR\x06values\x12`\n\ncompo\
    nents\x18\x02\x20\x03(\x0b2@.CAccountHardware_VRCompatibilityCheck_Respo\
    nse.ComponentDisplayR\ncomponents\x1a.\n\x04Pair\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\
    \x1aR\n\x10ComponentDisplay\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04nam\
    e\x12\x14\n\x05image\x18\x02\x20\x01(\tR\x05image\x12\x14\n\x05value\x18\
    \x03\x20\x01(\tR\x05value\"\xd9\x02\n4CAccountHardware_RegisterValveInde\
    xComponent_Request\x12#\n\rserial_number\x18\x01\x20\x01(\tR\x0cserialNu\
    mber\x12<\n\x1amanufacturer_serial_number\x18\x02\x20\x01(\tR\x18manufac\
    turerSerialNumber\x12%\n\x0ecomponent_code\x18\x03\x20\x01(\tR\rcomponen\
    tCode\x12[\n\x0ecomponent_type\x18\x04\x20\x01(\x0e2\x15.EValveIndexComp\
    onent:\x1dk_EValveIndexComponentUnknownR\rcomponentType\x12:\n\x19estima\
    ted_time_registered\x18\x05\x20\x01(\x05R\x17estimatedTimeRegistered\"7\
    \n5CAccountHardware_RegisterValveIndexComponent_Response\"\x7f\n/CAccoun\
    tHardware_GetSteamDeckComponents_Request\x12#\n\rserial_number\x18\x01\
    \x20\x01(\tR\x0cserialNumber\x12'\n\x0fcontroller_code\x18\x02\x20\x01(\
    \tR\x0econtrollerCode\"[\n0CAccountHardware_GetSteamDeckComponents_Respo\
    nse\x12'\n\x0fjson_components\x18\x01\x20\x01(\tR\x0ejsonComponents*\xa7\
    \x01\n\x14EValveIndexComponent\x12!\n\x1dk_EValveIndexComponentUnknown\
    \x10\0\x12\x1d\n\x19k_EValveIndexComponentHMD\x10\x01\x12%\n!k_EValveInd\
    exComponentLeftKnuckle\x10\x02\x12&\n\"k_EValveIndexComponentRightKnuckl\
    e\x10\x032\x9a\x0c\n\x0fAccountHardware\x12\x80\x01\n\x17RegisterSteamCo\
    ntroller\x121.CAccountHardware_RegisterSteamController_Request\x1a2.CAcc\
    ountHardware_RegisterSteamController_Response\x12\xa4\x01\n#CompleteStea\
    mControllerRegistration\x12=.CAccountHardware_CompleteSteamControllerReg\
    istration_Request\x1a>.CAccountHardware_CompleteSteamControllerRegistrat\
    ion_Response\x12\x9c\x01\n#QueryAccountsRegisteredToController\x129.CAcc\
    ountHardware_QueryAccountsRegisteredToSerial_Request\x1a:.CAccountHardwa\
    re_QueryAccountsRegisteredToSerial_Response\x12\x8b\x01\n\x20SetDesiredC\
    ontrollerConfigForApp\x122.CAccountHardware_SteamControllerSetConfig_Req\
    uest\x1a3.CAccountHardware_SteamControllerSetConfig_Response\x12\x8b\x01\
    \n\x20GetDesiredControllerConfigForApp\x122.CAccountHardware_SteamContro\
    llerGetConfig_Request\x1a3.CAccountHardware_SteamControllerGetConfig_Res\
    ponse\x12\x86\x01\n\x19DeRegisterSteamController\x123.CAccountHardware_D\
    eRegisterSteamController_Request\x1a4.CAccountHardware_DeRegisterSteamCo\
    ntroller_Response\x12\x87\x01\n\x20SetControllerPersonalizationFile\x120\
    .CAccountHardware_SetPersonalizationFile_Request\x1a1.CAccountHardware_S\
    etPersonalizationFile_Response\x12\x87\x01\n\x20GetControllerPersonaliza\
    tionFile\x120.CAccountHardware_GetPersonalizationFile_Request\x1a1.CAcco\
    untHardware_GetPersonalizationFile_Response\x12w\n\x14VRCompatibilityChe\
    ck\x12..CAccountHardware_VRCompatibilityCheck_Request\x1a/.CAccountHardw\
    are_VRCompatibilityCheck_Response\x12\x8c\x01\n\x1bRegisterValveIndexCom\
    ponent\x125.CAccountHardware_RegisterValveIndexComponent_Request\x1a6.CA\
    ccountHardware_RegisterValveIndexComponent_Response\x12}\n\x16GetSteamDe\
    ckComponents\x120.CAccountHardware_GetSteamDeckComponents_Request\x1a1.C\
    AccountHardware_GetSteamDeckComponents_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(28);
            messages.push(CAccountHardware_RegisterSteamController_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_RegisterSteamController_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_CompleteSteamControllerRegistration_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_CompleteSteamControllerRegistration_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_QueryAccountsRegisteredToSerial_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::generated_message_descriptor_data());
            messages.push(CAccountHardware_QueryAccountsRegisteredToSerial_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerSetConfig_ControllerConfig::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerSetConfig_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerSetConfig_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerGetConfig_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerGetConfig_ControllerConfig::generated_message_descriptor_data());
            messages.push(CAccountHardware_SteamControllerGetConfig_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_DeRegisterSteamController_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_DeRegisterSteamController_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_SetPersonalizationFile_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_SetPersonalizationFile_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_GetPersonalizationFile_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_GetPersonalizationFile_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_VRCompatibilityCheck_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_VRCompatibilityCheck_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_RegisterValveIndexComponent_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_RegisterValveIndexComponent_Response::generated_message_descriptor_data());
            messages.push(CAccountHardware_GetSteamDeckComponents_Request::generated_message_descriptor_data());
            messages.push(CAccountHardware_GetSteamDeckComponents_Response::generated_message_descriptor_data());
            messages.push(caccount_hardware_vrcompatibility_check_request::Pair::generated_message_descriptor_data());
            messages.push(caccount_hardware_vrcompatibility_check_response::Pair::generated_message_descriptor_data());
            messages.push(caccount_hardware_vrcompatibility_check_response::ComponentDisplay::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EValveIndexComponent::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
