// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_remoteclient_service_messages.proto`

// @@protoc_insertion_point(message:CRemoteClient_CreateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateSession_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateSession_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateSession_Request {
    fn default() -> &'a CRemoteClient_CreateSession_Request {
        <CRemoteClient_CreateSession_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_CreateSession_Request {
    pub fn new() -> CRemoteClient_CreateSession_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_CreateSession_Request>(
            "CRemoteClient_CreateSession_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_CreateSession_Request {
    const NAME: &'static str = "CRemoteClient_CreateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateSession_Request {
        CRemoteClient_CreateSession_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateSession_Request {
        static instance: CRemoteClient_CreateSession_Request = CRemoteClient_CreateSession_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_CreateSession_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_CreateSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_CreateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_CreateSession_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_CreateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateSession_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CreateSession_Response.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_CreateSession_Response.euniverse)
    pub euniverse: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateSession_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateSession_Response {
    fn default() -> &'a CRemoteClient_CreateSession_Response {
        <CRemoteClient_CreateSession_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_CreateSession_Response {
    pub fn new() -> CRemoteClient_CreateSession_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional int32 euniverse = 2;

    pub fn euniverse(&self) -> i32 {
        self.euniverse.unwrap_or(0)
    }

    pub fn clear_euniverse(&mut self) {
        self.euniverse = ::std::option::Option::None;
    }

    pub fn has_euniverse(&self) -> bool {
        self.euniverse.is_some()
    }

    // Param is passed by value, moved
    pub fn set_euniverse(&mut self, v: i32) {
        self.euniverse = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_CreateSession_Response| { &m.session_id },
            |m: &mut CRemoteClient_CreateSession_Response| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "euniverse",
            |m: &CRemoteClient_CreateSession_Response| { &m.euniverse },
            |m: &mut CRemoteClient_CreateSession_Response| { &mut m.euniverse },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_CreateSession_Response>(
            "CRemoteClient_CreateSession_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_CreateSession_Response {
    const NAME: &'static str = "CRemoteClient_CreateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.euniverse = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.euniverse {
            my_size += crate::rt::int32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.euniverse {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateSession_Response {
        CRemoteClient_CreateSession_Response::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.euniverse = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateSession_Response {
        static instance: CRemoteClient_CreateSession_Response = CRemoteClient_CreateSession_Response {
            session_id: ::std::option::Option::None,
            euniverse: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_CreateSession_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_CreateSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_CreateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_CreateSession_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_DeleteSession_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_DeleteSession_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_DeleteSession_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_DeleteSession_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_DeleteSession_Notification {
    fn default() -> &'a CRemoteClient_DeleteSession_Notification {
        <CRemoteClient_DeleteSession_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_DeleteSession_Notification {
    pub fn new() -> CRemoteClient_DeleteSession_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_DeleteSession_Notification| { &m.session_id },
            |m: &mut CRemoteClient_DeleteSession_Notification| { &mut m.session_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_DeleteSession_Notification>(
            "CRemoteClient_DeleteSession_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_DeleteSession_Notification {
    const NAME: &'static str = "CRemoteClient_DeleteSession_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_DeleteSession_Notification {
        CRemoteClient_DeleteSession_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_DeleteSession_Notification {
        static instance: CRemoteClient_DeleteSession_Notification = CRemoteClient_DeleteSession_Notification {
            session_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_DeleteSession_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_DeleteSession_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_DeleteSession_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_DeleteSession_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_StartPairing_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_StartPairing_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_StartPairing_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_StartPairing_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_StartPairing_Request {
    fn default() -> &'a CRemoteClient_StartPairing_Request {
        <CRemoteClient_StartPairing_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_StartPairing_Request {
    pub fn new() -> CRemoteClient_StartPairing_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_StartPairing_Request| { &m.session_id },
            |m: &mut CRemoteClient_StartPairing_Request| { &mut m.session_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_StartPairing_Request>(
            "CRemoteClient_StartPairing_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_StartPairing_Request {
    const NAME: &'static str = "CRemoteClient_StartPairing_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_StartPairing_Request {
        CRemoteClient_StartPairing_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_StartPairing_Request {
        static instance: CRemoteClient_StartPairing_Request = CRemoteClient_StartPairing_Request {
            session_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_StartPairing_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_StartPairing_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_StartPairing_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_StartPairing_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_StartPairing_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_StartPairing_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_StartPairing_Response.pin)
    pub pin: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_StartPairing_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_StartPairing_Response {
    fn default() -> &'a CRemoteClient_StartPairing_Response {
        <CRemoteClient_StartPairing_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_StartPairing_Response {
    pub fn new() -> CRemoteClient_StartPairing_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pin = 1;

    pub fn pin(&self) -> u32 {
        self.pin.unwrap_or(0)
    }

    pub fn clear_pin(&mut self) {
        self.pin = ::std::option::Option::None;
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: u32) {
        self.pin = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pin",
            |m: &CRemoteClient_StartPairing_Response| { &m.pin },
            |m: &mut CRemoteClient_StartPairing_Response| { &mut m.pin },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_StartPairing_Response>(
            "CRemoteClient_StartPairing_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_StartPairing_Response {
    const NAME: &'static str = "CRemoteClient_StartPairing_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pin = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pin {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.pin {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_StartPairing_Response {
        CRemoteClient_StartPairing_Response::new()
    }

    fn clear(&mut self) {
        self.pin = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_StartPairing_Response {
        static instance: CRemoteClient_StartPairing_Response = CRemoteClient_StartPairing_Response {
            pin: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_StartPairing_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_StartPairing_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_StartPairing_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_StartPairing_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_SetPairingInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SetPairingInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_SetPairingInfo_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SetPairingInfo_Request.device_id)
    pub device_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SetPairingInfo_Request.request)
    pub request: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SetPairingInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SetPairingInfo_Request {
    fn default() -> &'a CRemoteClient_SetPairingInfo_Request {
        <CRemoteClient_SetPairingInfo_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_SetPairingInfo_Request {
    pub fn new() -> CRemoteClient_SetPairingInfo_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 2;

    pub fn device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }

    // optional bytes request = 3;

    pub fn request(&self) -> &[u8] {
        match self.request.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: ::bytes::Bytes) {
        self.request = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut ::bytes::Bytes {
        if self.request.is_none() {
            self.request = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> ::bytes::Bytes {
        self.request.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_SetPairingInfo_Request| { &m.session_id },
            |m: &mut CRemoteClient_SetPairingInfo_Request| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_id",
            |m: &CRemoteClient_SetPairingInfo_Request| { &m.device_id },
            |m: &mut CRemoteClient_SetPairingInfo_Request| { &mut m.device_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "request",
            |m: &CRemoteClient_SetPairingInfo_Request| { &m.request },
            |m: &mut CRemoteClient_SetPairingInfo_Request| { &mut m.request },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_SetPairingInfo_Request>(
            "CRemoteClient_SetPairingInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_SetPairingInfo_Request {
    const NAME: &'static str = "CRemoteClient_SetPairingInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.request = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.device_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.request.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.request.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SetPairingInfo_Request {
        CRemoteClient_SetPairingInfo_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SetPairingInfo_Request {
        static instance: CRemoteClient_SetPairingInfo_Request = CRemoteClient_SetPairingInfo_Request {
            session_id: ::std::option::Option::None,
            device_id: ::std::option::Option::None,
            request: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_SetPairingInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_SetPairingInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_SetPairingInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_SetPairingInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_SetPairingInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SetPairingInfo_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SetPairingInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SetPairingInfo_Response {
    fn default() -> &'a CRemoteClient_SetPairingInfo_Response {
        <CRemoteClient_SetPairingInfo_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_SetPairingInfo_Response {
    pub fn new() -> CRemoteClient_SetPairingInfo_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_SetPairingInfo_Response>(
            "CRemoteClient_SetPairingInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_SetPairingInfo_Response {
    const NAME: &'static str = "CRemoteClient_SetPairingInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SetPairingInfo_Response {
        CRemoteClient_SetPairingInfo_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SetPairingInfo_Response {
        static instance: CRemoteClient_SetPairingInfo_Response = CRemoteClient_SetPairingInfo_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_SetPairingInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_SetPairingInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_SetPairingInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_SetPairingInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_GetPairingInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetPairingInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Request.pin)
    pub pin: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetPairingInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetPairingInfo_Request {
    fn default() -> &'a CRemoteClient_GetPairingInfo_Request {
        <CRemoteClient_GetPairingInfo_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_GetPairingInfo_Request {
    pub fn new() -> CRemoteClient_GetPairingInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 pin = 1;

    pub fn pin(&self) -> u32 {
        self.pin.unwrap_or(0)
    }

    pub fn clear_pin(&mut self) {
        self.pin = ::std::option::Option::None;
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: u32) {
        self.pin = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pin",
            |m: &CRemoteClient_GetPairingInfo_Request| { &m.pin },
            |m: &mut CRemoteClient_GetPairingInfo_Request| { &mut m.pin },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_GetPairingInfo_Request>(
            "CRemoteClient_GetPairingInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_GetPairingInfo_Request {
    const NAME: &'static str = "CRemoteClient_GetPairingInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pin = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pin {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.pin {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetPairingInfo_Request {
        CRemoteClient_GetPairingInfo_Request::new()
    }

    fn clear(&mut self) {
        self.pin = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetPairingInfo_Request {
        static instance: CRemoteClient_GetPairingInfo_Request = CRemoteClient_GetPairingInfo_Request {
            pin: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_GetPairingInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_GetPairingInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_GetPairingInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_GetPairingInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_GetPairingInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetPairingInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Response.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Response.device_id)
    pub device_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Response.request)
    pub request: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetPairingInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetPairingInfo_Response {
    fn default() -> &'a CRemoteClient_GetPairingInfo_Response {
        <CRemoteClient_GetPairingInfo_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_GetPairingInfo_Response {
    pub fn new() -> CRemoteClient_GetPairingInfo_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 2;

    pub fn device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }

    // optional bytes request = 3;

    pub fn request(&self) -> &[u8] {
        match self.request.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: ::bytes::Bytes) {
        self.request = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut ::bytes::Bytes {
        if self.request.is_none() {
            self.request = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> ::bytes::Bytes {
        self.request.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_GetPairingInfo_Response| { &m.session_id },
            |m: &mut CRemoteClient_GetPairingInfo_Response| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_id",
            |m: &CRemoteClient_GetPairingInfo_Response| { &m.device_id },
            |m: &mut CRemoteClient_GetPairingInfo_Response| { &mut m.device_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "request",
            |m: &CRemoteClient_GetPairingInfo_Response| { &m.request },
            |m: &mut CRemoteClient_GetPairingInfo_Response| { &mut m.request },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_GetPairingInfo_Response>(
            "CRemoteClient_GetPairingInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_GetPairingInfo_Response {
    const NAME: &'static str = "CRemoteClient_GetPairingInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.request = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.device_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.request.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.request.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetPairingInfo_Response {
        CRemoteClient_GetPairingInfo_Response::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetPairingInfo_Response {
        static instance: CRemoteClient_GetPairingInfo_Response = CRemoteClient_GetPairingInfo_Response {
            session_id: ::std::option::Option::None,
            device_id: ::std::option::Option::None,
            request: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_GetPairingInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_GetPairingInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_GetPairingInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_GetPairingInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_CancelPairing_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CancelPairing_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CancelPairing_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CancelPairing_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CancelPairing_Request {
    fn default() -> &'a CRemoteClient_CancelPairing_Request {
        <CRemoteClient_CancelPairing_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_CancelPairing_Request {
    pub fn new() -> CRemoteClient_CancelPairing_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_CancelPairing_Request| { &m.session_id },
            |m: &mut CRemoteClient_CancelPairing_Request| { &mut m.session_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_CancelPairing_Request>(
            "CRemoteClient_CancelPairing_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_CancelPairing_Request {
    const NAME: &'static str = "CRemoteClient_CancelPairing_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CancelPairing_Request {
        CRemoteClient_CancelPairing_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CancelPairing_Request {
        static instance: CRemoteClient_CancelPairing_Request = CRemoteClient_CancelPairing_Request {
            session_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_CancelPairing_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_CancelPairing_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_CancelPairing_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_CancelPairing_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_CancelPairing_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CancelPairing_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CancelPairing_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CancelPairing_Response {
    fn default() -> &'a CRemoteClient_CancelPairing_Response {
        <CRemoteClient_CancelPairing_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_CancelPairing_Response {
    pub fn new() -> CRemoteClient_CancelPairing_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_CancelPairing_Response>(
            "CRemoteClient_CancelPairing_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_CancelPairing_Response {
    const NAME: &'static str = "CRemoteClient_CancelPairing_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CancelPairing_Response {
        CRemoteClient_CancelPairing_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CancelPairing_Response {
        static instance: CRemoteClient_CancelPairing_Response = CRemoteClient_CancelPairing_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_CancelPairing_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_CancelPairing_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_CancelPairing_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_CancelPairing_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_RegisterStatusUpdate_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_RegisterStatusUpdate_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_RegisterStatusUpdate_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RegisterStatusUpdate_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RegisterStatusUpdate_Notification.device_id)
    pub device_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_RegisterStatusUpdate_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_RegisterStatusUpdate_Notification {
    fn default() -> &'a CRemoteClient_RegisterStatusUpdate_Notification {
        <CRemoteClient_RegisterStatusUpdate_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_RegisterStatusUpdate_Notification {
    pub fn new() -> CRemoteClient_RegisterStatusUpdate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 3;

    pub fn device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_RegisterStatusUpdate_Notification| { &m.session_id },
            |m: &mut CRemoteClient_RegisterStatusUpdate_Notification| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemoteClient_RegisterStatusUpdate_Notification| { &m.steamid },
            |m: &mut CRemoteClient_RegisterStatusUpdate_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_id",
            |m: &CRemoteClient_RegisterStatusUpdate_Notification| { &m.device_id },
            |m: &mut CRemoteClient_RegisterStatusUpdate_Notification| { &mut m.device_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_RegisterStatusUpdate_Notification>(
            "CRemoteClient_RegisterStatusUpdate_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_RegisterStatusUpdate_Notification {
    const NAME: &'static str = "CRemoteClient_RegisterStatusUpdate_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.device_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_RegisterStatusUpdate_Notification {
        CRemoteClient_RegisterStatusUpdate_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_RegisterStatusUpdate_Notification {
        static instance: CRemoteClient_RegisterStatusUpdate_Notification = CRemoteClient_RegisterStatusUpdate_Notification {
            session_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            device_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_RegisterStatusUpdate_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_RegisterStatusUpdate_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_RegisterStatusUpdate_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_RegisterStatusUpdate_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_UnregisterStatusUpdate_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_UnregisterStatusUpdate_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_UnregisterStatusUpdate_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_UnregisterStatusUpdate_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_UnregisterStatusUpdate_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_UnregisterStatusUpdate_Notification {
    fn default() -> &'a CRemoteClient_UnregisterStatusUpdate_Notification {
        <CRemoteClient_UnregisterStatusUpdate_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_UnregisterStatusUpdate_Notification {
    pub fn new() -> CRemoteClient_UnregisterStatusUpdate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_UnregisterStatusUpdate_Notification| { &m.session_id },
            |m: &mut CRemoteClient_UnregisterStatusUpdate_Notification| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemoteClient_UnregisterStatusUpdate_Notification| { &m.steamid },
            |m: &mut CRemoteClient_UnregisterStatusUpdate_Notification| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_UnregisterStatusUpdate_Notification>(
            "CRemoteClient_UnregisterStatusUpdate_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_UnregisterStatusUpdate_Notification {
    const NAME: &'static str = "CRemoteClient_UnregisterStatusUpdate_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_UnregisterStatusUpdate_Notification {
        CRemoteClient_UnregisterStatusUpdate_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_UnregisterStatusUpdate_Notification {
        static instance: CRemoteClient_UnregisterStatusUpdate_Notification = CRemoteClient_UnregisterStatusUpdate_Notification {
            session_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_UnregisterStatusUpdate_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_UnregisterStatusUpdate_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_UnregisterStatusUpdate_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_UnregisterStatusUpdate_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_Online_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_Online_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_Online_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_Online_Notification.remote_client_id)
    pub remote_client_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_Online_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_Online_Notification {
    fn default() -> &'a CRemoteClient_Online_Notification {
        <CRemoteClient_Online_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_Online_Notification {
    pub fn new() -> CRemoteClient_Online_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 remote_client_id = 2;

    pub fn remote_client_id(&self) -> u64 {
        self.remote_client_id.unwrap_or(0)
    }

    pub fn clear_remote_client_id(&mut self) {
        self.remote_client_id = ::std::option::Option::None;
    }

    pub fn has_remote_client_id(&self) -> bool {
        self.remote_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_client_id(&mut self, v: u64) {
        self.remote_client_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemoteClient_Online_Notification| { &m.steamid },
            |m: &mut CRemoteClient_Online_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "remote_client_id",
            |m: &CRemoteClient_Online_Notification| { &m.remote_client_id },
            |m: &mut CRemoteClient_Online_Notification| { &mut m.remote_client_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_Online_Notification>(
            "CRemoteClient_Online_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_Online_Notification {
    const NAME: &'static str = "CRemoteClient_Online_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.remote_client_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.remote_client_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.remote_client_id {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_Online_Notification {
        CRemoteClient_Online_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.remote_client_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_Online_Notification {
        static instance: CRemoteClient_Online_Notification = CRemoteClient_Online_Notification {
            steamid: ::std::option::Option::None,
            remote_client_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_Online_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_Online_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_Online_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_Online_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_RemotePacket_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_RemotePacket_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_RemotePacket_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RemotePacket_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RemotePacket_Notification.payload)
    pub payload: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_RemotePacket_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_RemotePacket_Notification {
    fn default() -> &'a CRemoteClient_RemotePacket_Notification {
        <CRemoteClient_RemotePacket_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_RemotePacket_Notification {
    pub fn new() -> CRemoteClient_RemotePacket_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 4;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::bytes::Bytes) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::bytes::Bytes {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::bytes::Bytes {
        self.payload.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_RemotePacket_Notification| { &m.session_id },
            |m: &mut CRemoteClient_RemotePacket_Notification| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemoteClient_RemotePacket_Notification| { &m.steamid },
            |m: &mut CRemoteClient_RemotePacket_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &CRemoteClient_RemotePacket_Notification| { &m.payload },
            |m: &mut CRemoteClient_RemotePacket_Notification| { &mut m.payload },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_RemotePacket_Notification>(
            "CRemoteClient_RemotePacket_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_RemotePacket_Notification {
    const NAME: &'static str = "CRemoteClient_RemotePacket_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    self.payload = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += crate::rt::bytes_size(4, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_RemotePacket_Notification {
        CRemoteClient_RemotePacket_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_RemotePacket_Notification {
        static instance: CRemoteClient_RemotePacket_Notification = CRemoteClient_RemotePacket_Notification {
            session_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_RemotePacket_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_RemotePacket_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_RemotePacket_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_RemotePacket_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_ReplyPacket_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_ReplyPacket_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_ReplyPacket_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_ReplyPacket_Notification.payload)
    pub payload: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_ReplyPacket_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_ReplyPacket_Notification {
    fn default() -> &'a CRemoteClient_ReplyPacket_Notification {
        <CRemoteClient_ReplyPacket_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_ReplyPacket_Notification {
    pub fn new() -> CRemoteClient_ReplyPacket_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 2;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::bytes::Bytes) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::bytes::Bytes {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::bytes::Bytes {
        self.payload.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_ReplyPacket_Notification| { &m.session_id },
            |m: &mut CRemoteClient_ReplyPacket_Notification| { &mut m.session_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &CRemoteClient_ReplyPacket_Notification| { &m.payload },
            |m: &mut CRemoteClient_ReplyPacket_Notification| { &mut m.payload },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_ReplyPacket_Notification>(
            "CRemoteClient_ReplyPacket_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_ReplyPacket_Notification {
    const NAME: &'static str = "CRemoteClient_ReplyPacket_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.payload = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_ReplyPacket_Notification {
        CRemoteClient_ReplyPacket_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_ReplyPacket_Notification {
        static instance: CRemoteClient_ReplyPacket_Notification = CRemoteClient_ReplyPacket_Notification {
            session_id: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_ReplyPacket_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_ReplyPacket_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_ReplyPacket_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_ReplyPacket_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_GetReplies_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetReplies_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetReplies_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetReplies_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetReplies_Request {
    fn default() -> &'a CRemoteClient_GetReplies_Request {
        <CRemoteClient_GetReplies_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_GetReplies_Request {
    pub fn new() -> CRemoteClient_GetReplies_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "session_id",
            |m: &CRemoteClient_GetReplies_Request| { &m.session_id },
            |m: &mut CRemoteClient_GetReplies_Request| { &mut m.session_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_GetReplies_Request>(
            "CRemoteClient_GetReplies_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_GetReplies_Request {
    const NAME: &'static str = "CRemoteClient_GetReplies_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetReplies_Request {
        CRemoteClient_GetReplies_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetReplies_Request {
        static instance: CRemoteClient_GetReplies_Request = CRemoteClient_GetReplies_Request {
            session_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_GetReplies_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_GetReplies_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_GetReplies_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_GetReplies_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_GetReplies_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetReplies_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetReplies_Response.payload)
    pub payload: ::std::vec::Vec<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetReplies_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetReplies_Response {
    fn default() -> &'a CRemoteClient_GetReplies_Response {
        <CRemoteClient_GetReplies_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_GetReplies_Response {
    pub fn new() -> CRemoteClient_GetReplies_Response {
        ::std::default::Default::default()
    }

    // repeated bytes payload = 1;

    pub fn payload(&self) -> &[::bytes::Bytes] {
        &self.payload
    }

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<::bytes::Bytes>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<::bytes::Bytes> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<::bytes::Bytes> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "payload",
            |m: &CRemoteClient_GetReplies_Response| { &m.payload },
            |m: &mut CRemoteClient_GetReplies_Response| { &mut m.payload },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_GetReplies_Response>(
            "CRemoteClient_GetReplies_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_GetReplies_Response {
    const NAME: &'static str = "CRemoteClient_GetReplies_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload.push(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.payload {
            my_size += crate::rt::bytes_size(1, &value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.payload {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetReplies_Response {
        CRemoteClient_GetReplies_Response::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetReplies_Response {
        static instance: CRemoteClient_GetReplies_Response = CRemoteClient_GetReplies_Response {
            payload: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_GetReplies_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_GetReplies_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_GetReplies_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_GetReplies_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateRelayServer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateRelayServer_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateRelayServer_Request.cellid)
    pub cellid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_AllocateRelayServer_Request.credentials)
    pub credentials: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateRelayServer_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateRelayServer_Request {
    fn default() -> &'a CRemoteClient_AllocateRelayServer_Request {
        <CRemoteClient_AllocateRelayServer_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateRelayServer_Request {
    pub fn new() -> CRemoteClient_AllocateRelayServer_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cellid = 1;

    pub fn cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional string credentials = 2;

    pub fn credentials(&self) -> &str {
        match self.credentials.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_credentials(&mut self) {
        self.credentials = ::std::option::Option::None;
    }

    pub fn has_credentials(&self) -> bool {
        self.credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: ::std::string::String) {
        self.credentials = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials(&mut self) -> &mut ::std::string::String {
        if self.credentials.is_none() {
            self.credentials = ::std::option::Option::Some(::std::string::String::new());
        }
        self.credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_credentials(&mut self) -> ::std::string::String {
        self.credentials.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "cellid",
            |m: &CRemoteClient_AllocateRelayServer_Request| { &m.cellid },
            |m: &mut CRemoteClient_AllocateRelayServer_Request| { &mut m.cellid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "credentials",
            |m: &CRemoteClient_AllocateRelayServer_Request| { &m.credentials },
            |m: &mut CRemoteClient_AllocateRelayServer_Request| { &mut m.credentials },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_AllocateRelayServer_Request>(
            "CRemoteClient_AllocateRelayServer_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_AllocateRelayServer_Request {
    const NAME: &'static str = "CRemoteClient_AllocateRelayServer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.credentials = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cellid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.credentials.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.cellid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.credentials.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateRelayServer_Request {
        CRemoteClient_AllocateRelayServer_Request::new()
    }

    fn clear(&mut self) {
        self.cellid = ::std::option::Option::None;
        self.credentials = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateRelayServer_Request {
        static instance: CRemoteClient_AllocateRelayServer_Request = CRemoteClient_AllocateRelayServer_Request {
            cellid: ::std::option::Option::None,
            credentials: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_AllocateRelayServer_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_AllocateRelayServer_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_AllocateRelayServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_AllocateRelayServer_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateRelayServer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateRelayServer_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateRelayServer_Response.relay_server)
    pub relay_server: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateRelayServer_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateRelayServer_Response {
    fn default() -> &'a CRemoteClient_AllocateRelayServer_Response {
        <CRemoteClient_AllocateRelayServer_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateRelayServer_Response {
    pub fn new() -> CRemoteClient_AllocateRelayServer_Response {
        ::std::default::Default::default()
    }

    // optional string relay_server = 1;

    pub fn relay_server(&self) -> &str {
        match self.relay_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_relay_server(&mut self) {
        self.relay_server = ::std::option::Option::None;
    }

    pub fn has_relay_server(&self) -> bool {
        self.relay_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_server(&mut self, v: ::std::string::String) {
        self.relay_server = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relay_server(&mut self) -> &mut ::std::string::String {
        if self.relay_server.is_none() {
            self.relay_server = ::std::option::Option::Some(::std::string::String::new());
        }
        self.relay_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_relay_server(&mut self) -> ::std::string::String {
        self.relay_server.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "relay_server",
            |m: &CRemoteClient_AllocateRelayServer_Response| { &m.relay_server },
            |m: &mut CRemoteClient_AllocateRelayServer_Response| { &mut m.relay_server },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_AllocateRelayServer_Response>(
            "CRemoteClient_AllocateRelayServer_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_AllocateRelayServer_Response {
    const NAME: &'static str = "CRemoteClient_AllocateRelayServer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.relay_server = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.relay_server.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.relay_server.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateRelayServer_Response {
        CRemoteClient_AllocateRelayServer_Response::new()
    }

    fn clear(&mut self) {
        self.relay_server = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateRelayServer_Response {
        static instance: CRemoteClient_AllocateRelayServer_Response = CRemoteClient_AllocateRelayServer_Response {
            relay_server: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_AllocateRelayServer_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_AllocateRelayServer_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_AllocateRelayServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_AllocateRelayServer_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateSDR_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateSDR_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateSDR_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateSDR_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateSDR_Request {
    fn default() -> &'a CRemoteClient_AllocateSDR_Request {
        <CRemoteClient_AllocateSDR_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateSDR_Request {
    pub fn new() -> CRemoteClient_AllocateSDR_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CRemoteClient_AllocateSDR_Request| { &m.appid },
            |m: &mut CRemoteClient_AllocateSDR_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_AllocateSDR_Request>(
            "CRemoteClient_AllocateSDR_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_AllocateSDR_Request {
    const NAME: &'static str = "CRemoteClient_AllocateSDR_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateSDR_Request {
        CRemoteClient_AllocateSDR_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateSDR_Request {
        static instance: CRemoteClient_AllocateSDR_Request = CRemoteClient_AllocateSDR_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_AllocateSDR_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_AllocateSDR_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_AllocateSDR_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_AllocateSDR_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateSDR_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateSDR_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateSDR_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateSDR_Response {
    fn default() -> &'a CRemoteClient_AllocateSDR_Response {
        <CRemoteClient_AllocateSDR_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateSDR_Response {
    pub fn new() -> CRemoteClient_AllocateSDR_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_AllocateSDR_Response>(
            "CRemoteClient_AllocateSDR_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_AllocateSDR_Response {
    const NAME: &'static str = "CRemoteClient_AllocateSDR_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateSDR_Response {
        CRemoteClient_AllocateSDR_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateSDR_Response {
        static instance: CRemoteClient_AllocateSDR_Response = CRemoteClient_AllocateSDR_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_AllocateSDR_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_AllocateSDR_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_AllocateSDR_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_AllocateSDR_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_SteamBroadcast_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SteamBroadcast_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_SteamBroadcast_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamBroadcast_Notification.clientid)
    pub clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamBroadcast_Notification.payload)
    pub payload: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SteamBroadcast_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SteamBroadcast_Notification {
    fn default() -> &'a CRemoteClient_SteamBroadcast_Notification {
        <CRemoteClient_SteamBroadcast_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_SteamBroadcast_Notification {
    pub fn new() -> CRemoteClient_SteamBroadcast_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 clientid = 2;

    pub fn clientid(&self) -> u64 {
        self.clientid.unwrap_or(0)
    }

    pub fn clear_clientid(&mut self) {
        self.clientid = ::std::option::Option::None;
    }

    pub fn has_clientid(&self) -> bool {
        self.clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientid(&mut self, v: u64) {
        self.clientid = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 3;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::bytes::Bytes) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::bytes::Bytes {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::bytes::Bytes {
        self.payload.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemoteClient_SteamBroadcast_Notification| { &m.steamid },
            |m: &mut CRemoteClient_SteamBroadcast_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "clientid",
            |m: &CRemoteClient_SteamBroadcast_Notification| { &m.clientid },
            |m: &mut CRemoteClient_SteamBroadcast_Notification| { &mut m.clientid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &CRemoteClient_SteamBroadcast_Notification| { &m.payload },
            |m: &mut CRemoteClient_SteamBroadcast_Notification| { &mut m.payload },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_SteamBroadcast_Notification>(
            "CRemoteClient_SteamBroadcast_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_SteamBroadcast_Notification {
    const NAME: &'static str = "CRemoteClient_SteamBroadcast_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.payload = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.clientid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += crate::rt::bytes_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.clientid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SteamBroadcast_Notification {
        CRemoteClient_SteamBroadcast_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.clientid = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SteamBroadcast_Notification {
        static instance: CRemoteClient_SteamBroadcast_Notification = CRemoteClient_SteamBroadcast_Notification {
            steamid: ::std::option::Option::None,
            clientid: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_SteamBroadcast_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_SteamBroadcast_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_SteamBroadcast_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_SteamBroadcast_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_SteamToSteam_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SteamToSteam_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.src_clientid)
    pub src_clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.dst_clientid)
    pub dst_clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.secretid)
    pub secretid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
    pub encrypted_payload: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SteamToSteam_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SteamToSteam_Notification {
    fn default() -> &'a CRemoteClient_SteamToSteam_Notification {
        <CRemoteClient_SteamToSteam_Notification as crate::Message>::default_instance()
    }
}

impl CRemoteClient_SteamToSteam_Notification {
    pub fn new() -> CRemoteClient_SteamToSteam_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 src_clientid = 2;

    pub fn src_clientid(&self) -> u64 {
        self.src_clientid.unwrap_or(0)
    }

    pub fn clear_src_clientid(&mut self) {
        self.src_clientid = ::std::option::Option::None;
    }

    pub fn has_src_clientid(&self) -> bool {
        self.src_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src_clientid(&mut self, v: u64) {
        self.src_clientid = ::std::option::Option::Some(v);
    }

    // optional fixed64 dst_clientid = 3;

    pub fn dst_clientid(&self) -> u64 {
        self.dst_clientid.unwrap_or(0)
    }

    pub fn clear_dst_clientid(&mut self) {
        self.dst_clientid = ::std::option::Option::None;
    }

    pub fn has_dst_clientid(&self) -> bool {
        self.dst_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dst_clientid(&mut self, v: u64) {
        self.dst_clientid = ::std::option::Option::Some(v);
    }

    // optional uint32 secretid = 4;

    pub fn secretid(&self) -> u32 {
        self.secretid.unwrap_or(0)
    }

    pub fn clear_secretid(&mut self) {
        self.secretid = ::std::option::Option::None;
    }

    pub fn has_secretid(&self) -> bool {
        self.secretid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secretid(&mut self, v: u32) {
        self.secretid = ::std::option::Option::Some(v);
    }

    // optional bytes encrypted_payload = 5;

    pub fn encrypted_payload(&self) -> &[u8] {
        match self.encrypted_payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encrypted_payload(&mut self) {
        self.encrypted_payload = ::std::option::Option::None;
    }

    pub fn has_encrypted_payload(&self) -> bool {
        self.encrypted_payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_payload(&mut self, v: ::bytes::Bytes) {
        self.encrypted_payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_payload(&mut self) -> &mut ::bytes::Bytes {
        if self.encrypted_payload.is_none() {
            self.encrypted_payload = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.encrypted_payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_payload(&mut self) -> ::bytes::Bytes {
        self.encrypted_payload.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemoteClient_SteamToSteam_Notification| { &m.steamid },
            |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "src_clientid",
            |m: &CRemoteClient_SteamToSteam_Notification| { &m.src_clientid },
            |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.src_clientid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "dst_clientid",
            |m: &CRemoteClient_SteamToSteam_Notification| { &m.dst_clientid },
            |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.dst_clientid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "secretid",
            |m: &CRemoteClient_SteamToSteam_Notification| { &m.secretid },
            |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.secretid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encrypted_payload",
            |m: &CRemoteClient_SteamToSteam_Notification| { &m.encrypted_payload },
            |m: &mut CRemoteClient_SteamToSteam_Notification| { &mut m.encrypted_payload },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_SteamToSteam_Notification>(
            "CRemoteClient_SteamToSteam_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_SteamToSteam_Notification {
    const NAME: &'static str = "CRemoteClient_SteamToSteam_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.src_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.dst_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.secretid = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.encrypted_payload = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.src_clientid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.dst_clientid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.secretid {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.encrypted_payload.as_ref() {
            my_size += crate::rt::bytes_size(5, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.src_clientid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.dst_clientid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.secretid {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.encrypted_payload.as_ref() {
            os.write_bytes(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SteamToSteam_Notification {
        CRemoteClient_SteamToSteam_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.src_clientid = ::std::option::Option::None;
        self.dst_clientid = ::std::option::Option::None;
        self.secretid = ::std::option::Option::None;
        self.encrypted_payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SteamToSteam_Notification {
        static instance: CRemoteClient_SteamToSteam_Notification = CRemoteClient_SteamToSteam_Notification {
            steamid: ::std::option::Option::None,
            src_clientid: ::std::option::Option::None,
            dst_clientid: ::std::option::Option::None,
            secretid: ::std::option::Option::None,
            encrypted_payload: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_SteamToSteam_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_SteamToSteam_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_SteamToSteam_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_SteamToSteam_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemotePlay_SessionStarted_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlay_SessionStarted_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.host_account_id)
    pub host_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.client_account_id)
    pub client_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.device_form_factor)
    pub device_form_factor: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.remote_play_together)
    pub remote_play_together: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.guest_session)
    pub guest_session: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlay_SessionStarted_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStarted_Request {
    fn default() -> &'a CRemotePlay_SessionStarted_Request {
        <CRemotePlay_SessionStarted_Request as crate::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStarted_Request {
    pub fn new() -> CRemotePlay_SessionStarted_Request {
        ::std::default::Default::default()
    }

    // optional uint32 host_account_id = 1;

    pub fn host_account_id(&self) -> u32 {
        self.host_account_id.unwrap_or(0)
    }

    pub fn clear_host_account_id(&mut self) {
        self.host_account_id = ::std::option::Option::None;
    }

    pub fn has_host_account_id(&self) -> bool {
        self.host_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_account_id(&mut self, v: u32) {
        self.host_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_account_id = 2;

    pub fn client_account_id(&self) -> u32 {
        self.client_account_id.unwrap_or(0)
    }

    pub fn clear_client_account_id(&mut self) {
        self.client_account_id = ::std::option::Option::None;
    }

    pub fn has_client_account_id(&self) -> bool {
        self.client_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_account_id(&mut self, v: u32) {
        self.client_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional int32 device_form_factor = 4;

    pub fn device_form_factor(&self) -> i32 {
        self.device_form_factor.unwrap_or(0)
    }

    pub fn clear_device_form_factor(&mut self) {
        self.device_form_factor = ::std::option::Option::None;
    }

    pub fn has_device_form_factor(&self) -> bool {
        self.device_form_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_form_factor(&mut self, v: i32) {
        self.device_form_factor = ::std::option::Option::Some(v);
    }

    // optional bool remote_play_together = 5;

    pub fn remote_play_together(&self) -> bool {
        self.remote_play_together.unwrap_or(false)
    }

    pub fn clear_remote_play_together(&mut self) {
        self.remote_play_together = ::std::option::Option::None;
    }

    pub fn has_remote_play_together(&self) -> bool {
        self.remote_play_together.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_play_together(&mut self, v: bool) {
        self.remote_play_together = ::std::option::Option::Some(v);
    }

    // optional bool guest_session = 6;

    pub fn guest_session(&self) -> bool {
        self.guest_session.unwrap_or(false)
    }

    pub fn clear_guest_session(&mut self) {
        self.guest_session = ::std::option::Option::None;
    }

    pub fn has_guest_session(&self) -> bool {
        self.guest_session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guest_session(&mut self, v: bool) {
        self.guest_session = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "host_account_id",
            |m: &CRemotePlay_SessionStarted_Request| { &m.host_account_id },
            |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.host_account_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_account_id",
            |m: &CRemotePlay_SessionStarted_Request| { &m.client_account_id },
            |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.client_account_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CRemotePlay_SessionStarted_Request| { &m.appid },
            |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_form_factor",
            |m: &CRemotePlay_SessionStarted_Request| { &m.device_form_factor },
            |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.device_form_factor },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "remote_play_together",
            |m: &CRemotePlay_SessionStarted_Request| { &m.remote_play_together },
            |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.remote_play_together },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "guest_session",
            |m: &CRemotePlay_SessionStarted_Request| { &m.guest_session },
            |m: &mut CRemotePlay_SessionStarted_Request| { &mut m.guest_session },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemotePlay_SessionStarted_Request>(
            "CRemotePlay_SessionStarted_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemotePlay_SessionStarted_Request {
    const NAME: &'static str = "CRemotePlay_SessionStarted_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.host_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.client_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.device_form_factor = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.remote_play_together = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.guest_session = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.host_account_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.client_account_id {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.device_form_factor {
            my_size += crate::rt::int32_size(4, v);
        }
        if let Some(v) = self.remote_play_together {
            my_size += 1 + 1;
        }
        if let Some(v) = self.guest_session {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.host_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.device_form_factor {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.remote_play_together {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.guest_session {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlay_SessionStarted_Request {
        CRemotePlay_SessionStarted_Request::new()
    }

    fn clear(&mut self) {
        self.host_account_id = ::std::option::Option::None;
        self.client_account_id = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.device_form_factor = ::std::option::Option::None;
        self.remote_play_together = ::std::option::Option::None;
        self.guest_session = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlay_SessionStarted_Request {
        static instance: CRemotePlay_SessionStarted_Request = CRemotePlay_SessionStarted_Request {
            host_account_id: ::std::option::Option::None,
            client_account_id: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            device_form_factor: ::std::option::Option::None,
            remote_play_together: ::std::option::Option::None,
            guest_session: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemotePlay_SessionStarted_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemotePlay_SessionStarted_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemotePlay_SessionStarted_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemotePlay_SessionStarted_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemotePlay_SessionStarted_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlay_SessionStarted_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Response.record_id)
    pub record_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlay_SessionStarted_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStarted_Response {
    fn default() -> &'a CRemotePlay_SessionStarted_Response {
        <CRemotePlay_SessionStarted_Response as crate::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStarted_Response {
    pub fn new() -> CRemotePlay_SessionStarted_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 record_id = 1;

    pub fn record_id(&self) -> u64 {
        self.record_id.unwrap_or(0)
    }

    pub fn clear_record_id(&mut self) {
        self.record_id = ::std::option::Option::None;
    }

    pub fn has_record_id(&self) -> bool {
        self.record_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: u64) {
        self.record_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "record_id",
            |m: &CRemotePlay_SessionStarted_Response| { &m.record_id },
            |m: &mut CRemotePlay_SessionStarted_Response| { &mut m.record_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemotePlay_SessionStarted_Response>(
            "CRemotePlay_SessionStarted_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemotePlay_SessionStarted_Response {
    const NAME: &'static str = "CRemotePlay_SessionStarted_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.record_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.record_id {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.record_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlay_SessionStarted_Response {
        CRemotePlay_SessionStarted_Response::new()
    }

    fn clear(&mut self) {
        self.record_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlay_SessionStarted_Response {
        static instance: CRemotePlay_SessionStarted_Response = CRemotePlay_SessionStarted_Response {
            record_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemotePlay_SessionStarted_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemotePlay_SessionStarted_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemotePlay_SessionStarted_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemotePlay_SessionStarted_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemotePlay_SessionStopped_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlay_SessionStopped_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.record_id)
    pub record_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.used_x264)
    pub used_x264: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.used_h264)
    pub used_h264: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.used_hevc)
    pub used_hevc: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlay_SessionStopped_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStopped_Notification {
    fn default() -> &'a CRemotePlay_SessionStopped_Notification {
        <CRemotePlay_SessionStopped_Notification as crate::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStopped_Notification {
    pub fn new() -> CRemotePlay_SessionStopped_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 record_id = 1;

    pub fn record_id(&self) -> u64 {
        self.record_id.unwrap_or(0)
    }

    pub fn clear_record_id(&mut self) {
        self.record_id = ::std::option::Option::None;
    }

    pub fn has_record_id(&self) -> bool {
        self.record_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: u64) {
        self.record_id = ::std::option::Option::Some(v);
    }

    // optional bool used_x264 = 2;

    pub fn used_x264(&self) -> bool {
        self.used_x264.unwrap_or(false)
    }

    pub fn clear_used_x264(&mut self) {
        self.used_x264 = ::std::option::Option::None;
    }

    pub fn has_used_x264(&self) -> bool {
        self.used_x264.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_x264(&mut self, v: bool) {
        self.used_x264 = ::std::option::Option::Some(v);
    }

    // optional bool used_h264 = 3;

    pub fn used_h264(&self) -> bool {
        self.used_h264.unwrap_or(false)
    }

    pub fn clear_used_h264(&mut self) {
        self.used_h264 = ::std::option::Option::None;
    }

    pub fn has_used_h264(&self) -> bool {
        self.used_h264.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_h264(&mut self, v: bool) {
        self.used_h264 = ::std::option::Option::Some(v);
    }

    // optional bool used_hevc = 4;

    pub fn used_hevc(&self) -> bool {
        self.used_hevc.unwrap_or(false)
    }

    pub fn clear_used_hevc(&mut self) {
        self.used_hevc = ::std::option::Option::None;
    }

    pub fn has_used_hevc(&self) -> bool {
        self.used_hevc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_hevc(&mut self, v: bool) {
        self.used_hevc = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "record_id",
            |m: &CRemotePlay_SessionStopped_Notification| { &m.record_id },
            |m: &mut CRemotePlay_SessionStopped_Notification| { &mut m.record_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "used_x264",
            |m: &CRemotePlay_SessionStopped_Notification| { &m.used_x264 },
            |m: &mut CRemotePlay_SessionStopped_Notification| { &mut m.used_x264 },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "used_h264",
            |m: &CRemotePlay_SessionStopped_Notification| { &m.used_h264 },
            |m: &mut CRemotePlay_SessionStopped_Notification| { &mut m.used_h264 },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "used_hevc",
            |m: &CRemotePlay_SessionStopped_Notification| { &m.used_hevc },
            |m: &mut CRemotePlay_SessionStopped_Notification| { &mut m.used_hevc },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemotePlay_SessionStopped_Notification>(
            "CRemotePlay_SessionStopped_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemotePlay_SessionStopped_Notification {
    const NAME: &'static str = "CRemotePlay_SessionStopped_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.record_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.used_x264 = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.used_h264 = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.used_hevc = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.record_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.used_x264 {
            my_size += 1 + 1;
        }
        if let Some(v) = self.used_h264 {
            my_size += 1 + 1;
        }
        if let Some(v) = self.used_hevc {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.record_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.used_x264 {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.used_h264 {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.used_hevc {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlay_SessionStopped_Notification {
        CRemotePlay_SessionStopped_Notification::new()
    }

    fn clear(&mut self) {
        self.record_id = ::std::option::Option::None;
        self.used_x264 = ::std::option::Option::None;
        self.used_h264 = ::std::option::Option::None;
        self.used_hevc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlay_SessionStopped_Notification {
        static instance: CRemotePlay_SessionStopped_Notification = CRemotePlay_SessionStopped_Notification {
            record_id: ::std::option::Option::None,
            used_x264: ::std::option::Option::None,
            used_h264: ::std::option::Option::None,
            used_hevc: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemotePlay_SessionStopped_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemotePlay_SessionStopped_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemotePlay_SessionStopped_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemotePlay_SessionStopped_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemotePlayTogether_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlayTogether_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // message oneof groups
    pub Message: ::std::option::Option<cremote_play_together_notification::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlayTogether_Notification {
    fn default() -> &'a CRemotePlayTogether_Notification {
        <CRemotePlayTogether_Notification as crate::Message>::default_instance()
    }
}

impl CRemotePlayTogether_Notification {
    pub fn new() -> CRemotePlayTogether_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;

    pub fn group_updated(&self) -> &cremote_play_together_notification::GroupUpdated {
        match self.Message {
            ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(ref v)) => v,
            _ => <cremote_play_together_notification::GroupUpdated as crate::Message>::default_instance(),
        }
    }

    pub fn clear_group_updated(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_group_updated(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_group_updated(&mut self, v: cremote_play_together_notification::GroupUpdated) {
        self.Message = ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_group_updated(&mut self) -> &mut cremote_play_together_notification::GroupUpdated {
        if let ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(cremote_play_together_notification::GroupUpdated::new()));
        }
        match self.Message {
            ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_group_updated(&mut self) -> cremote_play_together_notification::GroupUpdated {
        if self.has_group_updated() {
            match self.Message.take() {
                ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(v)) => v,
                _ => panic!(),
            }
        } else {
            cremote_play_together_notification::GroupUpdated::new()
        }
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CRemotePlayTogether_Notification| { &m.steamid },
            |m: &mut CRemotePlayTogether_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, cremote_play_together_notification::GroupUpdated>(
            "group_updated",
            CRemotePlayTogether_Notification::has_group_updated,
            CRemotePlayTogether_Notification::group_updated,
            CRemotePlayTogether_Notification::mut_group_updated,
            CRemotePlayTogether_Notification::set_group_updated,
        ));
        oneofs.push(cremote_play_together_notification::Message::generated_oneof_descriptor_data());
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemotePlayTogether_Notification>(
            "CRemotePlayTogether_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemotePlayTogether_Notification {
    const NAME: &'static str = "CRemotePlayTogether_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.Message = ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(is.read_message()?));
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &cremote_play_together_notification::Message::GroupUpdated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &cremote_play_together_notification::Message::GroupUpdated(ref v) => {
                    crate::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlayTogether_Notification {
        CRemotePlayTogether_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlayTogether_Notification {
        static instance: CRemotePlayTogether_Notification = CRemotePlayTogether_Notification {
            steamid: ::std::option::Option::None,
            Message: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemotePlayTogether_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemotePlayTogether_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemotePlayTogether_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemotePlayTogether_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CRemotePlayTogether_Notification`
pub mod cremote_play_together_notification {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CRemotePlayTogether_Notification.Message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:CRemotePlayTogether_Notification.group_updated)
        GroupUpdated(GroupUpdated),
    }

    impl crate::Oneof for Message {
    }

    impl crate::OneofFull for Message {
        fn descriptor() -> crate::reflect::OneofDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::OneofDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| <super::CRemotePlayTogether_Notification as crate::MessageFull>::descriptor().oneof_by_name("Message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> crate::reflect::GeneratedOneofDescriptorData {
            crate::reflect::GeneratedOneofDescriptorData::new::<Message>("Message")
        }
    }
    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.guestid)
        pub guestid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.avatar_hash)
        pub avatar_hash: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.keyboard_enabled)
        pub keyboard_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.mouse_enabled)
        pub mouse_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.controller_enabled)
        pub controller_enabled: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.Player.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as crate::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 guestid = 2;

        pub fn guestid(&self) -> u32 {
            self.guestid.unwrap_or(0)
        }

        pub fn clear_guestid(&mut self) {
            self.guestid = ::std::option::Option::None;
        }

        pub fn has_guestid(&self) -> bool {
            self.guestid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_guestid(&mut self, v: u32) {
            self.guestid = ::std::option::Option::Some(v);
        }

        // optional bytes avatar_hash = 3;

        pub fn avatar_hash(&self) -> &[u8] {
            match self.avatar_hash.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_avatar_hash(&mut self) {
            self.avatar_hash = ::std::option::Option::None;
        }

        pub fn has_avatar_hash(&self) -> bool {
            self.avatar_hash.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avatar_hash(&mut self, v: ::bytes::Bytes) {
            self.avatar_hash = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_avatar_hash(&mut self) -> &mut ::bytes::Bytes {
            if self.avatar_hash.is_none() {
                self.avatar_hash = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.avatar_hash.as_mut().unwrap()
        }

        // Take field
        pub fn take_avatar_hash(&mut self) -> ::bytes::Bytes {
            self.avatar_hash.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional bool keyboard_enabled = 4;

        pub fn keyboard_enabled(&self) -> bool {
            self.keyboard_enabled.unwrap_or(false)
        }

        pub fn clear_keyboard_enabled(&mut self) {
            self.keyboard_enabled = ::std::option::Option::None;
        }

        pub fn has_keyboard_enabled(&self) -> bool {
            self.keyboard_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_keyboard_enabled(&mut self, v: bool) {
            self.keyboard_enabled = ::std::option::Option::Some(v);
        }

        // optional bool mouse_enabled = 5;

        pub fn mouse_enabled(&self) -> bool {
            self.mouse_enabled.unwrap_or(false)
        }

        pub fn clear_mouse_enabled(&mut self) {
            self.mouse_enabled = ::std::option::Option::None;
        }

        pub fn has_mouse_enabled(&self) -> bool {
            self.mouse_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mouse_enabled(&mut self, v: bool) {
            self.mouse_enabled = ::std::option::Option::Some(v);
        }

        // optional bool controller_enabled = 6;

        pub fn controller_enabled(&self) -> bool {
            self.controller_enabled.unwrap_or(false)
        }

        pub fn clear_controller_enabled(&mut self) {
            self.controller_enabled = ::std::option::Option::None;
        }

        pub fn has_controller_enabled(&self) -> bool {
            self.controller_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_controller_enabled(&mut self, v: bool) {
            self.controller_enabled = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Player| { &m.steamid },
                |m: &mut Player| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "guestid",
                |m: &Player| { &m.guestid },
                |m: &mut Player| { &mut m.guestid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "avatar_hash",
                |m: &Player| { &m.avatar_hash },
                |m: &mut Player| { &mut m.avatar_hash },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "keyboard_enabled",
                |m: &Player| { &m.keyboard_enabled },
                |m: &mut Player| { &mut m.keyboard_enabled },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "mouse_enabled",
                |m: &Player| { &m.mouse_enabled },
                |m: &mut Player| { &mut m.mouse_enabled },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "controller_enabled",
                |m: &Player| { &m.controller_enabled },
                |m: &mut Player| { &mut m.controller_enabled },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
                "CRemotePlayTogether_Notification.Player",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.guestid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.avatar_hash = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    32 => {
                        self.keyboard_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.mouse_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.controller_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.guestid {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.avatar_hash.as_ref() {
                my_size += crate::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.keyboard_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.mouse_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.controller_enabled {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.guestid {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.avatar_hash.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.keyboard_enabled {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.mouse_enabled {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.controller_enabled {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.guestid = ::std::option::Option::None;
            self.avatar_hash = ::std::option::Option::None;
            self.keyboard_enabled = ::std::option::Option::None;
            self.mouse_enabled = ::std::option::Option::None;
            self.controller_enabled = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                steamid: ::std::option::Option::None,
                guestid: ::std::option::Option::None,
                avatar_hash: ::std::option::Option::None,
                keyboard_enabled: ::std::option::Option::None,
                mouse_enabled: ::std::option::Option::None,
                controller_enabled: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Player {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CRemotePlayTogether_Notification.Player").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Player {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Player {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ControllerSlot_obsolete {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot_obsolete.slotid)
        pub slotid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot_obsolete.steamid)
        pub steamid: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.ControllerSlot_obsolete.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ControllerSlot_obsolete {
        fn default() -> &'a ControllerSlot_obsolete {
            <ControllerSlot_obsolete as crate::Message>::default_instance()
        }
    }

    impl ControllerSlot_obsolete {
        pub fn new() -> ControllerSlot_obsolete {
            ::std::default::Default::default()
        }

        // optional uint32 slotid = 1;

        pub fn slotid(&self) -> u32 {
            self.slotid.unwrap_or(0)
        }

        pub fn clear_slotid(&mut self) {
            self.slotid = ::std::option::Option::None;
        }

        pub fn has_slotid(&self) -> bool {
            self.slotid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_slotid(&mut self, v: u32) {
            self.slotid = ::std::option::Option::Some(v);
        }

        // optional fixed64 steamid = 2;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "slotid",
                |m: &ControllerSlot_obsolete| { &m.slotid },
                |m: &mut ControllerSlot_obsolete| { &mut m.slotid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &ControllerSlot_obsolete| { &m.steamid },
                |m: &mut ControllerSlot_obsolete| { &mut m.steamid },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ControllerSlot_obsolete>(
                "CRemotePlayTogether_Notification.ControllerSlot_obsolete",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ControllerSlot_obsolete {
        const NAME: &'static str = "ControllerSlot_obsolete";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.slotid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    17 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.slotid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.slotid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_fixed64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ControllerSlot_obsolete {
            ControllerSlot_obsolete::new()
        }

        fn clear(&mut self) {
            self.slotid = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ControllerSlot_obsolete {
            static instance: ControllerSlot_obsolete = ControllerSlot_obsolete {
                slotid: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ControllerSlot_obsolete {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CRemotePlayTogether_Notification.ControllerSlot_obsolete").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ControllerSlot_obsolete {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ControllerSlot_obsolete {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.ControllerSlot)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ControllerSlot {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot.slotid)
        pub slotid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot.player)
        pub player: crate::MessageField<Player>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot.controller_type)
        pub controller_type: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.ControllerSlot.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ControllerSlot {
        fn default() -> &'a ControllerSlot {
            <ControllerSlot as crate::Message>::default_instance()
        }
    }

    impl ControllerSlot {
        pub fn new() -> ControllerSlot {
            ::std::default::Default::default()
        }

        // optional uint32 slotid = 1;

        pub fn slotid(&self) -> u32 {
            self.slotid.unwrap_or(0)
        }

        pub fn clear_slotid(&mut self) {
            self.slotid = ::std::option::Option::None;
        }

        pub fn has_slotid(&self) -> bool {
            self.slotid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_slotid(&mut self, v: u32) {
            self.slotid = ::std::option::Option::Some(v);
        }

        // optional .CRemotePlayTogether_Notification.Player player = 2;

        pub fn player(&self) -> &Player {
            self.player.as_ref().unwrap_or_else(|| <Player as crate::Message>::default_instance())
        }

        pub fn clear_player(&mut self) {
            self.player.clear();
        }

        pub fn has_player(&self) -> bool {
            self.player.is_some()
        }

        // Param is passed by value, moved
        pub fn set_player(&mut self, v: Player) {
            self.player = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_player(&mut self) -> &mut Player {
            self.player.mut_or_insert_default()
        }

        // Take field
        pub fn take_player(&mut self) -> Player {
            self.player.take().unwrap_or_else(|| Player::new())
        }

        // optional int32 controller_type = 3;

        pub fn controller_type(&self) -> i32 {
            self.controller_type.unwrap_or(0)
        }

        pub fn clear_controller_type(&mut self) {
            self.controller_type = ::std::option::Option::None;
        }

        pub fn has_controller_type(&self) -> bool {
            self.controller_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_controller_type(&mut self, v: i32) {
            self.controller_type = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "slotid",
                |m: &ControllerSlot| { &m.slotid },
                |m: &mut ControllerSlot| { &mut m.slotid },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, Player>(
                "player",
                |m: &ControllerSlot| { &m.player },
                |m: &mut ControllerSlot| { &mut m.player },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "controller_type",
                |m: &ControllerSlot| { &m.controller_type },
                |m: &mut ControllerSlot| { &mut m.controller_type },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ControllerSlot>(
                "CRemotePlayTogether_Notification.ControllerSlot",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ControllerSlot {
        const NAME: &'static str = "ControllerSlot";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.slotid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.player)?;
                    },
                    24 => {
                        self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.slotid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.player.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.controller_type {
                my_size += crate::rt::int32_size(3, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.slotid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.player.as_ref() {
                crate::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.controller_type {
                os.write_int32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ControllerSlot {
            ControllerSlot::new()
        }

        fn clear(&mut self) {
            self.slotid = ::std::option::Option::None;
            self.player.clear();
            self.controller_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ControllerSlot {
            static instance: ControllerSlot = ControllerSlot {
                slotid: ::std::option::Option::None,
                player: crate::MessageField::none(),
                controller_type: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ControllerSlot {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CRemotePlayTogether_Notification.ControllerSlot").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ControllerSlot {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ControllerSlot {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.GroupUpdated)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct GroupUpdated {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.host_steamid)
        pub host_steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.host_clientid)
        pub host_clientid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
        pub players_obsolete: ::std::vec::Vec<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.host_gameid)
        pub host_gameid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
        pub controller_slots_obsolete: ::std::vec::Vec<ControllerSlot_obsolete>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.has_new_players)
        pub has_new_players: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
        pub player_slots: ::std::vec::Vec<Player>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
        pub controller_slots: ::std::vec::Vec<ControllerSlot>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.GroupUpdated.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a GroupUpdated {
        fn default() -> &'a GroupUpdated {
            <GroupUpdated as crate::Message>::default_instance()
        }
    }

    impl GroupUpdated {
        pub fn new() -> GroupUpdated {
            ::std::default::Default::default()
        }

        // optional fixed64 host_steamid = 1;

        pub fn host_steamid(&self) -> u64 {
            self.host_steamid.unwrap_or(0)
        }

        pub fn clear_host_steamid(&mut self) {
            self.host_steamid = ::std::option::Option::None;
        }

        pub fn has_host_steamid(&self) -> bool {
            self.host_steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_steamid(&mut self, v: u64) {
            self.host_steamid = ::std::option::Option::Some(v);
        }

        // optional fixed64 host_clientid = 2;

        pub fn host_clientid(&self) -> u64 {
            self.host_clientid.unwrap_or(0)
        }

        pub fn clear_host_clientid(&mut self) {
            self.host_clientid = ::std::option::Option::None;
        }

        pub fn has_host_clientid(&self) -> bool {
            self.host_clientid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_clientid(&mut self, v: u64) {
            self.host_clientid = ::std::option::Option::Some(v);
        }

        // repeated fixed64 players_obsolete = 3;

        pub fn players_obsolete(&self) -> &[u64] {
            &self.players_obsolete
        }

        pub fn clear_players_obsolete(&mut self) {
            self.players_obsolete.clear();
        }

        // Param is passed by value, moved
        pub fn set_players_obsolete(&mut self, v: ::std::vec::Vec<u64>) {
            self.players_obsolete = v;
        }

        // Mutable pointer to the field.
        pub fn mut_players_obsolete(&mut self) -> &mut ::std::vec::Vec<u64> {
            &mut self.players_obsolete
        }

        // Take field
        pub fn take_players_obsolete(&mut self) -> ::std::vec::Vec<u64> {
            ::std::mem::replace(&mut self.players_obsolete, ::std::vec::Vec::new())
        }

        // optional fixed64 host_gameid = 4;

        pub fn host_gameid(&self) -> u64 {
            self.host_gameid.unwrap_or(0)
        }

        pub fn clear_host_gameid(&mut self) {
            self.host_gameid = ::std::option::Option::None;
        }

        pub fn has_host_gameid(&self) -> bool {
            self.host_gameid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_gameid(&mut self, v: u64) {
            self.host_gameid = ::std::option::Option::Some(v);
        }

        // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;

        pub fn controller_slots_obsolete(&self) -> &[ControllerSlot_obsolete] {
            &self.controller_slots_obsolete
        }

        pub fn clear_controller_slots_obsolete(&mut self) {
            self.controller_slots_obsolete.clear();
        }

        // Param is passed by value, moved
        pub fn set_controller_slots_obsolete(&mut self, v: ::std::vec::Vec<ControllerSlot_obsolete>) {
            self.controller_slots_obsolete = v;
        }

        // Mutable pointer to the field.
        pub fn mut_controller_slots_obsolete(&mut self) -> &mut ::std::vec::Vec<ControllerSlot_obsolete> {
            &mut self.controller_slots_obsolete
        }

        // Take field
        pub fn take_controller_slots_obsolete(&mut self) -> ::std::vec::Vec<ControllerSlot_obsolete> {
            ::std::mem::replace(&mut self.controller_slots_obsolete, ::std::vec::Vec::new())
        }

        // optional bool has_new_players = 6;

        pub fn has_new_players(&self) -> bool {
            self.has_new_players.unwrap_or(false)
        }

        pub fn clear_has_new_players(&mut self) {
            self.has_new_players = ::std::option::Option::None;
        }

        pub fn has_has_new_players(&self) -> bool {
            self.has_new_players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_new_players(&mut self, v: bool) {
            self.has_new_players = ::std::option::Option::Some(v);
        }

        // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;

        pub fn player_slots(&self) -> &[Player] {
            &self.player_slots
        }

        pub fn clear_player_slots(&mut self) {
            self.player_slots.clear();
        }

        // Param is passed by value, moved
        pub fn set_player_slots(&mut self, v: ::std::vec::Vec<Player>) {
            self.player_slots = v;
        }

        // Mutable pointer to the field.
        pub fn mut_player_slots(&mut self) -> &mut ::std::vec::Vec<Player> {
            &mut self.player_slots
        }

        // Take field
        pub fn take_player_slots(&mut self) -> ::std::vec::Vec<Player> {
            ::std::mem::replace(&mut self.player_slots, ::std::vec::Vec::new())
        }

        // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;

        pub fn controller_slots(&self) -> &[ControllerSlot] {
            &self.controller_slots
        }

        pub fn clear_controller_slots(&mut self) {
            self.controller_slots.clear();
        }

        // Param is passed by value, moved
        pub fn set_controller_slots(&mut self, v: ::std::vec::Vec<ControllerSlot>) {
            self.controller_slots = v;
        }

        // Mutable pointer to the field.
        pub fn mut_controller_slots(&mut self) -> &mut ::std::vec::Vec<ControllerSlot> {
            &mut self.controller_slots
        }

        // Take field
        pub fn take_controller_slots(&mut self) -> ::std::vec::Vec<ControllerSlot> {
            ::std::mem::replace(&mut self.controller_slots, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(8);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "host_steamid",
                |m: &GroupUpdated| { &m.host_steamid },
                |m: &mut GroupUpdated| { &mut m.host_steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "host_clientid",
                |m: &GroupUpdated| { &m.host_clientid },
                |m: &mut GroupUpdated| { &mut m.host_clientid },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "players_obsolete",
                |m: &GroupUpdated| { &m.players_obsolete },
                |m: &mut GroupUpdated| { &mut m.players_obsolete },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "host_gameid",
                |m: &GroupUpdated| { &m.host_gameid },
                |m: &mut GroupUpdated| { &mut m.host_gameid },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "controller_slots_obsolete",
                |m: &GroupUpdated| { &m.controller_slots_obsolete },
                |m: &mut GroupUpdated| { &mut m.controller_slots_obsolete },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "has_new_players",
                |m: &GroupUpdated| { &m.has_new_players },
                |m: &mut GroupUpdated| { &mut m.has_new_players },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "player_slots",
                |m: &GroupUpdated| { &m.player_slots },
                |m: &mut GroupUpdated| { &mut m.player_slots },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "controller_slots",
                |m: &GroupUpdated| { &m.controller_slots },
                |m: &mut GroupUpdated| { &mut m.controller_slots },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<GroupUpdated>(
                "CRemotePlayTogether_Notification.GroupUpdated",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for GroupUpdated {
        const NAME: &'static str = "GroupUpdated";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.host_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    17 => {
                        self.host_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    26 => {
                        is.read_repeated_packed_fixed64_into(&mut self.players_obsolete)?;
                    },
                    25 => {
                        self.players_obsolete.push(is.read_fixed64()?);
                    },
                    33 => {
                        self.host_gameid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    42 => {
                        self.controller_slots_obsolete.push(is.read_message()?);
                    },
                    48 => {
                        self.has_new_players = ::std::option::Option::Some(is.read_bool()?);
                    },
                    58 => {
                        self.player_slots.push(is.read_message()?);
                    },
                    66 => {
                        self.controller_slots.push(is.read_message()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.host_steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.host_clientid {
                my_size += 1 + 8;
            }
            my_size += 9 * self.players_obsolete.len() as u64;
            if let Some(v) = self.host_gameid {
                my_size += 1 + 8;
            }
            for value in &self.controller_slots_obsolete {
                let len = value.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.has_new_players {
                my_size += 1 + 1;
            }
            for value in &self.player_slots {
                let len = value.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.controller_slots {
                let len = value.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.host_steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.host_clientid {
                os.write_fixed64(2, v)?;
            }
            for v in &self.players_obsolete {
                os.write_fixed64(3, *v)?;
            };
            if let Some(v) = self.host_gameid {
                os.write_fixed64(4, v)?;
            }
            for v in &self.controller_slots_obsolete {
                crate::rt::write_message_field_with_cached_size(5, v, os)?;
            };
            if let Some(v) = self.has_new_players {
                os.write_bool(6, v)?;
            }
            for v in &self.player_slots {
                crate::rt::write_message_field_with_cached_size(7, v, os)?;
            };
            for v in &self.controller_slots {
                crate::rt::write_message_field_with_cached_size(8, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> GroupUpdated {
            GroupUpdated::new()
        }

        fn clear(&mut self) {
            self.host_steamid = ::std::option::Option::None;
            self.host_clientid = ::std::option::Option::None;
            self.players_obsolete.clear();
            self.host_gameid = ::std::option::Option::None;
            self.controller_slots_obsolete.clear();
            self.has_new_players = ::std::option::Option::None;
            self.player_slots.clear();
            self.controller_slots.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static GroupUpdated {
            static instance: GroupUpdated = GroupUpdated {
                host_steamid: ::std::option::Option::None,
                host_clientid: ::std::option::Option::None,
                players_obsolete: ::std::vec::Vec::new(),
                host_gameid: ::std::option::Option::None,
                controller_slots_obsolete: ::std::vec::Vec::new(),
                has_new_players: ::std::option::Option::None,
                player_slots: ::std::vec::Vec::new(),
                controller_slots: ::std::vec::Vec::new(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for GroupUpdated {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CRemotePlayTogether_Notification.GroupUpdated").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for GroupUpdated {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for GroupUpdated {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
    pub launch_parameters: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    fn default() -> &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        <CRemoteClient_CreateRemotePlayTogetherInvitation_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    pub fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string launch_parameters = 2;

    pub fn launch_parameters(&self) -> &str {
        match self.launch_parameters.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_launch_parameters(&mut self) {
        self.launch_parameters = ::std::option::Option::None;
    }

    pub fn has_launch_parameters(&self) -> bool {
        self.launch_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launch_parameters(&mut self, v: ::std::string::String) {
        self.launch_parameters = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_launch_parameters(&mut self) -> &mut ::std::string::String {
        if self.launch_parameters.is_none() {
            self.launch_parameters = ::std::option::Option::Some(::std::string::String::new());
        }
        self.launch_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_launch_parameters(&mut self) -> ::std::string::String {
        self.launch_parameters.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CRemoteClient_CreateRemotePlayTogetherInvitation_Request| { &m.appid },
            |m: &mut CRemoteClient_CreateRemotePlayTogetherInvitation_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "launch_parameters",
            |m: &CRemoteClient_CreateRemotePlayTogetherInvitation_Request| { &m.launch_parameters },
            |m: &mut CRemoteClient_CreateRemotePlayTogetherInvitation_Request| { &mut m.launch_parameters },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_CreateRemotePlayTogetherInvitation_Request>(
            "CRemoteClient_CreateRemotePlayTogetherInvitation_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    const NAME: &'static str = "CRemoteClient_CreateRemotePlayTogetherInvitation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.launch_parameters = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.launch_parameters.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.launch_parameters.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        CRemoteClient_CreateRemotePlayTogetherInvitation_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.launch_parameters = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        static instance: CRemoteClient_CreateRemotePlayTogetherInvitation_Request = CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
            appid: ::std::option::Option::None,
            launch_parameters: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_CreateRemotePlayTogetherInvitation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
    pub invitation_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    fn default() -> &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        <CRemoteClient_CreateRemotePlayTogetherInvitation_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    pub fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        ::std::default::Default::default()
    }

    // optional string invitation_code = 1;

    pub fn invitation_code(&self) -> &str {
        match self.invitation_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_code(&mut self) {
        self.invitation_code = ::std::option::Option::None;
    }

    pub fn has_invitation_code(&self) -> bool {
        self.invitation_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_code(&mut self, v: ::std::string::String) {
        self.invitation_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_code(&mut self) -> &mut ::std::string::String {
        if self.invitation_code.is_none() {
            self.invitation_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_code(&mut self) -> ::std::string::String {
        self.invitation_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invitation_code",
            |m: &CRemoteClient_CreateRemotePlayTogetherInvitation_Response| { &m.invitation_code },
            |m: &mut CRemoteClient_CreateRemotePlayTogetherInvitation_Response| { &mut m.invitation_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>(
            "CRemoteClient_CreateRemotePlayTogetherInvitation_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    const NAME: &'static str = "CRemoteClient_CreateRemotePlayTogetherInvitation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_code.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invitation_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        CRemoteClient_CreateRemotePlayTogetherInvitation_Response::new()
    }

    fn clear(&mut self) {
        self.invitation_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        static instance: CRemoteClient_CreateRemotePlayTogetherInvitation_Response = CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
            invitation_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_CreateRemotePlayTogetherInvitation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
    pub invitation_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    fn default() -> &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        <CRemoteClient_DeleteRemotePlayTogetherInvitation_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    pub fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        ::std::default::Default::default()
    }

    // optional string invitation_code = 1;

    pub fn invitation_code(&self) -> &str {
        match self.invitation_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_code(&mut self) {
        self.invitation_code = ::std::option::Option::None;
    }

    pub fn has_invitation_code(&self) -> bool {
        self.invitation_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_code(&mut self, v: ::std::string::String) {
        self.invitation_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_code(&mut self) -> &mut ::std::string::String {
        if self.invitation_code.is_none() {
            self.invitation_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_code(&mut self) -> ::std::string::String {
        self.invitation_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invitation_code",
            |m: &CRemoteClient_DeleteRemotePlayTogetherInvitation_Request| { &m.invitation_code },
            |m: &mut CRemoteClient_DeleteRemotePlayTogetherInvitation_Request| { &mut m.invitation_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request>(
            "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    const NAME: &'static str = "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_code.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invitation_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::new()
    }

    fn clear(&mut self) {
        self.invitation_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        static instance: CRemoteClient_DeleteRemotePlayTogetherInvitation_Request = CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
            invitation_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_DeleteRemotePlayTogetherInvitation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    fn default() -> &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        <CRemoteClient_DeleteRemotePlayTogetherInvitation_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    pub fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>(
            "CRemoteClient_DeleteRemotePlayTogetherInvitation_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    const NAME: &'static str = "CRemoteClient_DeleteRemotePlayTogetherInvitation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        static instance: CRemoteClient_DeleteRemotePlayTogetherInvitation_Response = CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_DeleteRemotePlayTogetherInvitation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
    pub invitation_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    fn default() -> &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        <CRemoteClient_LookupRemotePlayTogetherInvitation_Request as crate::Message>::default_instance()
    }
}

impl CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    pub fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        ::std::default::Default::default()
    }

    // optional string invitation_code = 1;

    pub fn invitation_code(&self) -> &str {
        match self.invitation_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_code(&mut self) {
        self.invitation_code = ::std::option::Option::None;
    }

    pub fn has_invitation_code(&self) -> bool {
        self.invitation_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_code(&mut self, v: ::std::string::String) {
        self.invitation_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_code(&mut self) -> &mut ::std::string::String {
        if self.invitation_code.is_none() {
            self.invitation_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_code(&mut self) -> ::std::string::String {
        self.invitation_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invitation_code",
            |m: &CRemoteClient_LookupRemotePlayTogetherInvitation_Request| { &m.invitation_code },
            |m: &mut CRemoteClient_LookupRemotePlayTogetherInvitation_Request| { &mut m.invitation_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_LookupRemotePlayTogetherInvitation_Request>(
            "CRemoteClient_LookupRemotePlayTogetherInvitation_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    const NAME: &'static str = "CRemoteClient_LookupRemotePlayTogetherInvitation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_code.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invitation_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        CRemoteClient_LookupRemotePlayTogetherInvitation_Request::new()
    }

    fn clear(&mut self) {
        self.invitation_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        static instance: CRemoteClient_LookupRemotePlayTogetherInvitation_Request = CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
            invitation_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_LookupRemotePlayTogetherInvitation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
    pub invitation_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    fn default() -> &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        <CRemoteClient_LookupRemotePlayTogetherInvitation_Response as crate::Message>::default_instance()
    }
}

impl CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    pub fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        ::std::default::Default::default()
    }

    // optional string invitation_url = 1;

    pub fn invitation_url(&self) -> &str {
        match self.invitation_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_url(&mut self) {
        self.invitation_url = ::std::option::Option::None;
    }

    pub fn has_invitation_url(&self) -> bool {
        self.invitation_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_url(&mut self, v: ::std::string::String) {
        self.invitation_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_url(&mut self) -> &mut ::std::string::String {
        if self.invitation_url.is_none() {
            self.invitation_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_url(&mut self) -> ::std::string::String {
        self.invitation_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invitation_url",
            |m: &CRemoteClient_LookupRemotePlayTogetherInvitation_Response| { &m.invitation_url },
            |m: &mut CRemoteClient_LookupRemotePlayTogetherInvitation_Response| { &mut m.invitation_url },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CRemoteClient_LookupRemotePlayTogetherInvitation_Response>(
            "CRemoteClient_LookupRemotePlayTogetherInvitation_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    const NAME: &'static str = "CRemoteClient_LookupRemotePlayTogetherInvitation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_url.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invitation_url.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        CRemoteClient_LookupRemotePlayTogetherInvitation_Response::new()
    }

    fn clear(&mut self) {
        self.invitation_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        static instance: CRemoteClient_LookupRemotePlayTogetherInvitation_Response = CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
            invitation_url: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CRemoteClient_LookupRemotePlayTogetherInvitation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCMRemoteClient_ClientMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCMRemoteClient_ClientMessage {
    // message oneof groups
    pub Message: ::std::option::Option<ccmremote_client_client_message::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:CCMRemoteClient_ClientMessage.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCMRemoteClient_ClientMessage {
    fn default() -> &'a CCMRemoteClient_ClientMessage {
        <CCMRemoteClient_ClientMessage as crate::Message>::default_instance()
    }
}

impl CCMRemoteClient_ClientMessage {
    pub fn new() -> CCMRemoteClient_ClientMessage {
        ::std::default::Default::default()
    }

    // optional .CRemoteClient_CreateSession_Request create_session_request = 1;

    pub fn create_session_request(&self) -> &CRemoteClient_CreateSession_Request {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(ref v)) => v,
            _ => <CRemoteClient_CreateSession_Request as crate::Message>::default_instance(),
        }
    }

    pub fn clear_create_session_request(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_create_session_request(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create_session_request(&mut self, v: CRemoteClient_CreateSession_Request) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create_session_request(&mut self) -> &mut CRemoteClient_CreateSession_Request {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(CRemoteClient_CreateSession_Request::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create_session_request(&mut self) -> CRemoteClient_CreateSession_Request {
        if self.has_create_session_request() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_CreateSession_Request::new()
        }
    }

    // optional .CRemoteClient_StartPairing_Request start_pairing_request = 2;

    pub fn start_pairing_request(&self) -> &CRemoteClient_StartPairing_Request {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(ref v)) => v,
            _ => <CRemoteClient_StartPairing_Request as crate::Message>::default_instance(),
        }
    }

    pub fn clear_start_pairing_request(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_start_pairing_request(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_pairing_request(&mut self, v: CRemoteClient_StartPairing_Request) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_pairing_request(&mut self) -> &mut CRemoteClient_StartPairing_Request {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(CRemoteClient_StartPairing_Request::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_pairing_request(&mut self) -> CRemoteClient_StartPairing_Request {
        if self.has_start_pairing_request() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_StartPairing_Request::new()
        }
    }

    // optional .CRemoteClient_SetPairingInfo_Request set_pairing_info_request = 3;

    pub fn set_pairing_info_request(&self) -> &CRemoteClient_SetPairingInfo_Request {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(ref v)) => v,
            _ => <CRemoteClient_SetPairingInfo_Request as crate::Message>::default_instance(),
        }
    }

    pub fn clear_set_pairing_info_request(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_set_pairing_info_request(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_pairing_info_request(&mut self, v: CRemoteClient_SetPairingInfo_Request) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_pairing_info_request(&mut self) -> &mut CRemoteClient_SetPairingInfo_Request {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(CRemoteClient_SetPairingInfo_Request::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_pairing_info_request(&mut self) -> CRemoteClient_SetPairingInfo_Request {
        if self.has_set_pairing_info_request() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_SetPairingInfo_Request::new()
        }
    }

    // optional .CRemoteClient_CancelPairing_Request cancel_pairing_request = 4;

    pub fn cancel_pairing_request(&self) -> &CRemoteClient_CancelPairing_Request {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(ref v)) => v,
            _ => <CRemoteClient_CancelPairing_Request as crate::Message>::default_instance(),
        }
    }

    pub fn clear_cancel_pairing_request(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_cancel_pairing_request(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cancel_pairing_request(&mut self, v: CRemoteClient_CancelPairing_Request) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_pairing_request(&mut self) -> &mut CRemoteClient_CancelPairing_Request {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(CRemoteClient_CancelPairing_Request::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cancel_pairing_request(&mut self) -> CRemoteClient_CancelPairing_Request {
        if self.has_cancel_pairing_request() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_CancelPairing_Request::new()
        }
    }

    // optional .CRemoteClient_RegisterStatusUpdate_Notification register_status_update = 5;

    pub fn register_status_update(&self) -> &CRemoteClient_RegisterStatusUpdate_Notification {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(ref v)) => v,
            _ => <CRemoteClient_RegisterStatusUpdate_Notification as crate::Message>::default_instance(),
        }
    }

    pub fn clear_register_status_update(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_register_status_update(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_status_update(&mut self, v: CRemoteClient_RegisterStatusUpdate_Notification) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_status_update(&mut self) -> &mut CRemoteClient_RegisterStatusUpdate_Notification {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(CRemoteClient_RegisterStatusUpdate_Notification::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_status_update(&mut self) -> CRemoteClient_RegisterStatusUpdate_Notification {
        if self.has_register_status_update() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_RegisterStatusUpdate_Notification::new()
        }
    }

    // optional .CRemoteClient_UnregisterStatusUpdate_Notification unregister_status_update = 6;

    pub fn unregister_status_update(&self) -> &CRemoteClient_UnregisterStatusUpdate_Notification {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(ref v)) => v,
            _ => <CRemoteClient_UnregisterStatusUpdate_Notification as crate::Message>::default_instance(),
        }
    }

    pub fn clear_unregister_status_update(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_unregister_status_update(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unregister_status_update(&mut self, v: CRemoteClient_UnregisterStatusUpdate_Notification) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unregister_status_update(&mut self) -> &mut CRemoteClient_UnregisterStatusUpdate_Notification {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(CRemoteClient_UnregisterStatusUpdate_Notification::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unregister_status_update(&mut self) -> CRemoteClient_UnregisterStatusUpdate_Notification {
        if self.has_unregister_status_update() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_UnregisterStatusUpdate_Notification::new()
        }
    }

    // optional .CRemoteClient_RemotePacket_Notification remote_packet = 7;

    pub fn remote_packet(&self) -> &CRemoteClient_RemotePacket_Notification {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(ref v)) => v,
            _ => <CRemoteClient_RemotePacket_Notification as crate::Message>::default_instance(),
        }
    }

    pub fn clear_remote_packet(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_remote_packet(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remote_packet(&mut self, v: CRemoteClient_RemotePacket_Notification) {
        self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remote_packet(&mut self) -> &mut CRemoteClient_RemotePacket_Notification {
        if let ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(CRemoteClient_RemotePacket_Notification::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remote_packet(&mut self) -> CRemoteClient_RemotePacket_Notification {
        if self.has_remote_packet() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_RemotePacket_Notification::new()
        }
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_CreateSession_Request>(
            "create_session_request",
            CCMRemoteClient_ClientMessage::has_create_session_request,
            CCMRemoteClient_ClientMessage::create_session_request,
            CCMRemoteClient_ClientMessage::mut_create_session_request,
            CCMRemoteClient_ClientMessage::set_create_session_request,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_StartPairing_Request>(
            "start_pairing_request",
            CCMRemoteClient_ClientMessage::has_start_pairing_request,
            CCMRemoteClient_ClientMessage::start_pairing_request,
            CCMRemoteClient_ClientMessage::mut_start_pairing_request,
            CCMRemoteClient_ClientMessage::set_start_pairing_request,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_SetPairingInfo_Request>(
            "set_pairing_info_request",
            CCMRemoteClient_ClientMessage::has_set_pairing_info_request,
            CCMRemoteClient_ClientMessage::set_pairing_info_request,
            CCMRemoteClient_ClientMessage::mut_set_pairing_info_request,
            CCMRemoteClient_ClientMessage::set_set_pairing_info_request,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_CancelPairing_Request>(
            "cancel_pairing_request",
            CCMRemoteClient_ClientMessage::has_cancel_pairing_request,
            CCMRemoteClient_ClientMessage::cancel_pairing_request,
            CCMRemoteClient_ClientMessage::mut_cancel_pairing_request,
            CCMRemoteClient_ClientMessage::set_cancel_pairing_request,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_RegisterStatusUpdate_Notification>(
            "register_status_update",
            CCMRemoteClient_ClientMessage::has_register_status_update,
            CCMRemoteClient_ClientMessage::register_status_update,
            CCMRemoteClient_ClientMessage::mut_register_status_update,
            CCMRemoteClient_ClientMessage::set_register_status_update,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_UnregisterStatusUpdate_Notification>(
            "unregister_status_update",
            CCMRemoteClient_ClientMessage::has_unregister_status_update,
            CCMRemoteClient_ClientMessage::unregister_status_update,
            CCMRemoteClient_ClientMessage::mut_unregister_status_update,
            CCMRemoteClient_ClientMessage::set_unregister_status_update,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_RemotePacket_Notification>(
            "remote_packet",
            CCMRemoteClient_ClientMessage::has_remote_packet,
            CCMRemoteClient_ClientMessage::remote_packet,
            CCMRemoteClient_ClientMessage::mut_remote_packet,
            CCMRemoteClient_ClientMessage::set_remote_packet,
        ));
        oneofs.push(ccmremote_client_client_message::Message::generated_oneof_descriptor_data());
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCMRemoteClient_ClientMessage>(
            "CCMRemoteClient_ClientMessage",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCMRemoteClient_ClientMessage {
    const NAME: &'static str = "CCMRemoteClient_ClientMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::CreateSessionRequest(is.read_message()?));
                },
                18 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::StartPairingRequest(is.read_message()?));
                },
                26 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::SetPairingInfoRequest(is.read_message()?));
                },
                34 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::CancelPairingRequest(is.read_message()?));
                },
                42 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::RegisterStatusUpdate(is.read_message()?));
                },
                50 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::UnregisterStatusUpdate(is.read_message()?));
                },
                58 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_client_message::Message::RemotePacket(is.read_message()?));
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &ccmremote_client_client_message::Message::CreateSessionRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_client_message::Message::StartPairingRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_client_message::Message::SetPairingInfoRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_client_message::Message::CancelPairingRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_client_message::Message::RegisterStatusUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_client_message::Message::UnregisterStatusUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_client_message::Message::RemotePacket(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &ccmremote_client_client_message::Message::CreateSessionRequest(ref v) => {
                    crate::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &ccmremote_client_client_message::Message::StartPairingRequest(ref v) => {
                    crate::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &ccmremote_client_client_message::Message::SetPairingInfoRequest(ref v) => {
                    crate::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &ccmremote_client_client_message::Message::CancelPairingRequest(ref v) => {
                    crate::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &ccmremote_client_client_message::Message::RegisterStatusUpdate(ref v) => {
                    crate::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &ccmremote_client_client_message::Message::UnregisterStatusUpdate(ref v) => {
                    crate::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &ccmremote_client_client_message::Message::RemotePacket(ref v) => {
                    crate::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCMRemoteClient_ClientMessage {
        CCMRemoteClient_ClientMessage::new()
    }

    fn clear(&mut self) {
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCMRemoteClient_ClientMessage {
        static instance: CCMRemoteClient_ClientMessage = CCMRemoteClient_ClientMessage {
            Message: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCMRemoteClient_ClientMessage {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCMRemoteClient_ClientMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCMRemoteClient_ClientMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCMRemoteClient_ClientMessage {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CCMRemoteClient_ClientMessage`
pub mod ccmremote_client_client_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CCMRemoteClient_ClientMessage.Message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.create_session_request)
        CreateSessionRequest(super::CRemoteClient_CreateSession_Request),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.start_pairing_request)
        StartPairingRequest(super::CRemoteClient_StartPairing_Request),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.set_pairing_info_request)
        SetPairingInfoRequest(super::CRemoteClient_SetPairingInfo_Request),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.cancel_pairing_request)
        CancelPairingRequest(super::CRemoteClient_CancelPairing_Request),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.register_status_update)
        RegisterStatusUpdate(super::CRemoteClient_RegisterStatusUpdate_Notification),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.unregister_status_update)
        UnregisterStatusUpdate(super::CRemoteClient_UnregisterStatusUpdate_Notification),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ClientMessage.remote_packet)
        RemotePacket(super::CRemoteClient_RemotePacket_Notification),
    }

    impl crate::Oneof for Message {
    }

    impl crate::OneofFull for Message {
        fn descriptor() -> crate::reflect::OneofDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::OneofDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| <super::CCMRemoteClient_ClientMessage as crate::MessageFull>::descriptor().oneof_by_name("Message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> crate::reflect::GeneratedOneofDescriptorData {
            crate::reflect::GeneratedOneofDescriptorData::new::<Message>("Message")
        }
    }
}

// @@protoc_insertion_point(message:CCMRemoteClient_ServerMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCMRemoteClient_ServerMessage {
    // message fields
    // @@protoc_insertion_point(field:CCMRemoteClient_ServerMessage.result)
    pub result: ::std::option::Option<i32>,
    // message oneof groups
    pub Message: ::std::option::Option<ccmremote_client_server_message::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:CCMRemoteClient_ServerMessage.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCMRemoteClient_ServerMessage {
    fn default() -> &'a CCMRemoteClient_ServerMessage {
        <CCMRemoteClient_ServerMessage as crate::Message>::default_instance()
    }
}

impl CCMRemoteClient_ServerMessage {
    pub fn new() -> CCMRemoteClient_ServerMessage {
        ::std::default::Default::default()
    }

    // optional int32 result = 1;

    pub fn result(&self) -> i32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional .CRemoteClient_CreateSession_Response create_session_response = 2;

    pub fn create_session_response(&self) -> &CRemoteClient_CreateSession_Response {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(ref v)) => v,
            _ => <CRemoteClient_CreateSession_Response as crate::Message>::default_instance(),
        }
    }

    pub fn clear_create_session_response(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_create_session_response(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create_session_response(&mut self, v: CRemoteClient_CreateSession_Response) {
        self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create_session_response(&mut self) -> &mut CRemoteClient_CreateSession_Response {
        if let ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(CRemoteClient_CreateSession_Response::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create_session_response(&mut self) -> CRemoteClient_CreateSession_Response {
        if self.has_create_session_response() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_CreateSession_Response::new()
        }
    }

    // optional .CRemoteClient_StartPairing_Response start_pairing_response = 3;

    pub fn start_pairing_response(&self) -> &CRemoteClient_StartPairing_Response {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(ref v)) => v,
            _ => <CRemoteClient_StartPairing_Response as crate::Message>::default_instance(),
        }
    }

    pub fn clear_start_pairing_response(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_start_pairing_response(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_pairing_response(&mut self, v: CRemoteClient_StartPairing_Response) {
        self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_pairing_response(&mut self) -> &mut CRemoteClient_StartPairing_Response {
        if let ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(CRemoteClient_StartPairing_Response::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_pairing_response(&mut self) -> CRemoteClient_StartPairing_Response {
        if self.has_start_pairing_response() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_StartPairing_Response::new()
        }
    }

    // optional .CRemoteClient_SetPairingInfo_Response set_pairing_info_response = 4;

    pub fn set_pairing_info_response(&self) -> &CRemoteClient_SetPairingInfo_Response {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(ref v)) => v,
            _ => <CRemoteClient_SetPairingInfo_Response as crate::Message>::default_instance(),
        }
    }

    pub fn clear_set_pairing_info_response(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_set_pairing_info_response(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_pairing_info_response(&mut self, v: CRemoteClient_SetPairingInfo_Response) {
        self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_pairing_info_response(&mut self) -> &mut CRemoteClient_SetPairingInfo_Response {
        if let ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(CRemoteClient_SetPairingInfo_Response::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_pairing_info_response(&mut self) -> CRemoteClient_SetPairingInfo_Response {
        if self.has_set_pairing_info_response() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_SetPairingInfo_Response::new()
        }
    }

    // optional .CRemoteClient_CancelPairing_Response cancel_pairing_response = 5;

    pub fn cancel_pairing_response(&self) -> &CRemoteClient_CancelPairing_Response {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(ref v)) => v,
            _ => <CRemoteClient_CancelPairing_Response as crate::Message>::default_instance(),
        }
    }

    pub fn clear_cancel_pairing_response(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_cancel_pairing_response(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cancel_pairing_response(&mut self, v: CRemoteClient_CancelPairing_Response) {
        self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cancel_pairing_response(&mut self) -> &mut CRemoteClient_CancelPairing_Response {
        if let ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(CRemoteClient_CancelPairing_Response::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cancel_pairing_response(&mut self) -> CRemoteClient_CancelPairing_Response {
        if self.has_cancel_pairing_response() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_CancelPairing_Response::new()
        }
    }

    // optional .CRemoteClient_GetReplies_Response reply_packet = 6;

    pub fn reply_packet(&self) -> &CRemoteClient_GetReplies_Response {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(ref v)) => v,
            _ => <CRemoteClient_GetReplies_Response as crate::Message>::default_instance(),
        }
    }

    pub fn clear_reply_packet(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_reply_packet(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reply_packet(&mut self, v: CRemoteClient_GetReplies_Response) {
        self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reply_packet(&mut self) -> &mut CRemoteClient_GetReplies_Response {
        if let ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(CRemoteClient_GetReplies_Response::new()));
        }
        match self.Message {
            ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reply_packet(&mut self) -> CRemoteClient_GetReplies_Response {
        if self.has_reply_packet() {
            match self.Message.take() {
                ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(v)) => v,
                _ => panic!(),
            }
        } else {
            CRemoteClient_GetReplies_Response::new()
        }
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CCMRemoteClient_ServerMessage| { &m.result },
            |m: &mut CCMRemoteClient_ServerMessage| { &mut m.result },
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_CreateSession_Response>(
            "create_session_response",
            CCMRemoteClient_ServerMessage::has_create_session_response,
            CCMRemoteClient_ServerMessage::create_session_response,
            CCMRemoteClient_ServerMessage::mut_create_session_response,
            CCMRemoteClient_ServerMessage::set_create_session_response,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_StartPairing_Response>(
            "start_pairing_response",
            CCMRemoteClient_ServerMessage::has_start_pairing_response,
            CCMRemoteClient_ServerMessage::start_pairing_response,
            CCMRemoteClient_ServerMessage::mut_start_pairing_response,
            CCMRemoteClient_ServerMessage::set_start_pairing_response,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_SetPairingInfo_Response>(
            "set_pairing_info_response",
            CCMRemoteClient_ServerMessage::has_set_pairing_info_response,
            CCMRemoteClient_ServerMessage::set_pairing_info_response,
            CCMRemoteClient_ServerMessage::mut_set_pairing_info_response,
            CCMRemoteClient_ServerMessage::set_set_pairing_info_response,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_CancelPairing_Response>(
            "cancel_pairing_response",
            CCMRemoteClient_ServerMessage::has_cancel_pairing_response,
            CCMRemoteClient_ServerMessage::cancel_pairing_response,
            CCMRemoteClient_ServerMessage::mut_cancel_pairing_response,
            CCMRemoteClient_ServerMessage::set_cancel_pairing_response,
        ));
        fields.push(crate::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CRemoteClient_GetReplies_Response>(
            "reply_packet",
            CCMRemoteClient_ServerMessage::has_reply_packet,
            CCMRemoteClient_ServerMessage::reply_packet,
            CCMRemoteClient_ServerMessage::mut_reply_packet,
            CCMRemoteClient_ServerMessage::set_reply_packet,
        ));
        oneofs.push(ccmremote_client_server_message::Message::generated_oneof_descriptor_data());
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CCMRemoteClient_ServerMessage>(
            "CCMRemoteClient_ServerMessage",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CCMRemoteClient_ServerMessage {
    const NAME: &'static str = "CCMRemoteClient_ServerMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::CreateSessionResponse(is.read_message()?));
                },
                26 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::StartPairingResponse(is.read_message()?));
                },
                34 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::SetPairingInfoResponse(is.read_message()?));
                },
                42 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::CancelPairingResponse(is.read_message()?));
                },
                50 => {
                    self.Message = ::std::option::Option::Some(ccmremote_client_server_message::Message::ReplyPacket(is.read_message()?));
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += crate::rt::int32_size(1, v);
        }
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &ccmremote_client_server_message::Message::CreateSessionResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_server_message::Message::StartPairingResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_server_message::Message::SetPairingInfoResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_server_message::Message::CancelPairingResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
                &ccmremote_client_server_message::Message::ReplyPacket(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.result {
            os.write_int32(1, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &ccmremote_client_server_message::Message::CreateSessionResponse(ref v) => {
                    crate::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &ccmremote_client_server_message::Message::StartPairingResponse(ref v) => {
                    crate::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &ccmremote_client_server_message::Message::SetPairingInfoResponse(ref v) => {
                    crate::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &ccmremote_client_server_message::Message::CancelPairingResponse(ref v) => {
                    crate::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &ccmremote_client_server_message::Message::ReplyPacket(ref v) => {
                    crate::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCMRemoteClient_ServerMessage {
        CCMRemoteClient_ServerMessage::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCMRemoteClient_ServerMessage {
        static instance: CCMRemoteClient_ServerMessage = CCMRemoteClient_ServerMessage {
            result: ::std::option::Option::None,
            Message: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CCMRemoteClient_ServerMessage {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCMRemoteClient_ServerMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCMRemoteClient_ServerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CCMRemoteClient_ServerMessage {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CCMRemoteClient_ServerMessage`
pub mod ccmremote_client_server_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CCMRemoteClient_ServerMessage.Message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ServerMessage.create_session_response)
        CreateSessionResponse(super::CRemoteClient_CreateSession_Response),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ServerMessage.start_pairing_response)
        StartPairingResponse(super::CRemoteClient_StartPairing_Response),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ServerMessage.set_pairing_info_response)
        SetPairingInfoResponse(super::CRemoteClient_SetPairingInfo_Response),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ServerMessage.cancel_pairing_response)
        CancelPairingResponse(super::CRemoteClient_CancelPairing_Response),
        // @@protoc_insertion_point(oneof_field:CCMRemoteClient_ServerMessage.reply_packet)
        ReplyPacket(super::CRemoteClient_GetReplies_Response),
    }

    impl crate::Oneof for Message {
    }

    impl crate::OneofFull for Message {
        fn descriptor() -> crate::reflect::OneofDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::OneofDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| <super::CCMRemoteClient_ServerMessage as crate::MessageFull>::descriptor().oneof_by_name("Message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> crate::reflect::GeneratedOneofDescriptorData {
            crate::reflect::GeneratedOneofDescriptorData::new::<Message>("Message")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1steammessages_remoteclient_service_messages.proto\"%\n#CRemoteClient_\
    CreateSession_Request\"c\n$CRemoteClient_CreateSession_Response\x12\x1d\
    \n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\x12\x1c\n\teuniverse\x18\
    \x02\x20\x01(\x05R\teuniverse\"I\n(CRemoteClient_DeleteSession_Notificat\
    ion\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\"C\n\"CRemote\
    Client_StartPairing_Request\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\
    \tsessionId\"7\n#CRemoteClient_StartPairing_Response\x12\x10\n\x03pin\
    \x18\x01\x20\x01(\rR\x03pin\"|\n$CRemoteClient_SetPairingInfo_Request\
    \x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\x12\x1b\n\tdevic\
    e_id\x18\x02\x20\x01(\x06R\x08deviceId\x12\x18\n\x07request\x18\x03\x20\
    \x01(\x0cR\x07request\"'\n%CRemoteClient_SetPairingInfo_Response\"8\n$CR\
    emoteClient_GetPairingInfo_Request\x12\x10\n\x03pin\x18\x01\x20\x01(\rR\
    \x03pin\"}\n%CRemoteClient_GetPairingInfo_Response\x12\x1d\n\nsession_id\
    \x18\x01\x20\x01(\x06R\tsessionId\x12\x1b\n\tdevice_id\x18\x02\x20\x01(\
    \x06R\x08deviceId\x12\x18\n\x07request\x18\x03\x20\x01(\x0cR\x07request\
    \"D\n#CRemoteClient_CancelPairing_Request\x12\x1d\n\nsession_id\x18\x01\
    \x20\x01(\x06R\tsessionId\"&\n$CRemoteClient_CancelPairing_Response\"\
    \x87\x01\n/CRemoteClient_RegisterStatusUpdate_Notification\x12\x1d\n\nse\
    ssion_id\x18\x01\x20\x01(\x06R\tsessionId\x12\x18\n\x07steamid\x18\x02\
    \x20\x01(\x06R\x07steamid\x12\x1b\n\tdevice_id\x18\x03\x20\x01(\x06R\x08\
    deviceId\"l\n1CRemoteClient_UnregisterStatusUpdate_Notification\x12\x1d\
    \n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\x12\x18\n\x07steamid\x18\
    \x02\x20\x01(\x06R\x07steamid\"g\n!CRemoteClient_Online_Notification\x12\
    \x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12(\n\x10remote_clie\
    nt_id\x18\x02\x20\x01(\x06R\x0eremoteClientId\"|\n'CRemoteClient_RemoteP\
    acket_Notification\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\tsessionI\
    d\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamid\x12\x18\n\x07pay\
    load\x18\x04\x20\x01(\x0cR\x07payload\"a\n&CRemoteClient_ReplyPacket_Not\
    ification\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\x12\x18\
    \n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"A\n\x20CRemoteClient_Get\
    Replies_Request\x12\x1d\n\nsession_id\x18\x01\x20\x01(\x06R\tsessionId\"\
    =\n!CRemoteClient_GetReplies_Response\x12\x18\n\x07payload\x18\x01\x20\
    \x03(\x0cR\x07payload\"e\n)CRemoteClient_AllocateRelayServer_Request\x12\
    \x16\n\x06cellid\x18\x01\x20\x01(\rR\x06cellid\x12\x20\n\x0bcredentials\
    \x18\x02\x20\x01(\tR\x0bcredentials\"O\n*CRemoteClient_AllocateRelayServ\
    er_Response\x12!\n\x0crelay_server\x18\x01\x20\x01(\tR\x0brelayServer\"9\
    \n!CRemoteClient_AllocateSDR_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\
    \rR\x05appid\"$\n\"CRemoteClient_AllocateSDR_Response\"{\n)CRemoteClient\
    _SteamBroadcast_Notification\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\
    \x07steamid\x12\x1a\n\x08clientid\x18\x02\x20\x01(\x06R\x08clientid\x12\
    \x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payload\"\xd2\x01\n'CRemoteCl\
    ient_SteamToSteam_Notification\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06\
    R\x07steamid\x12!\n\x0csrc_clientid\x18\x02\x20\x01(\x06R\x0bsrcClientid\
    \x12!\n\x0cdst_clientid\x18\x03\x20\x01(\x06R\x0bdstClientid\x12\x1a\n\
    \x08secretid\x18\x04\x20\x01(\rR\x08secretid\x12+\n\x11encrypted_payload\
    \x18\x05\x20\x01(\x0cR\x10encryptedPayload\"\x93\x02\n\"CRemotePlay_Sess\
    ionStarted_Request\x12&\n\x0fhost_account_id\x18\x01\x20\x01(\rR\rhostAc\
    countId\x12*\n\x11client_account_id\x18\x02\x20\x01(\rR\x0fclientAccount\
    Id\x12\x14\n\x05appid\x18\x03\x20\x01(\rR\x05appid\x12,\n\x12device_form\
    _factor\x18\x04\x20\x01(\x05R\x10deviceFormFactor\x120\n\x14remote_play_\
    together\x18\x05\x20\x01(\x08R\x12remotePlayTogether\x12#\n\rguest_sessi\
    on\x18\x06\x20\x01(\x08R\x0cguestSession\"B\n#CRemotePlay_SessionStarted\
    _Response\x12\x1b\n\trecord_id\x18\x01\x20\x01(\x06R\x08recordId\"\x9d\
    \x01\n'CRemotePlay_SessionStopped_Notification\x12\x1b\n\trecord_id\x18\
    \x01\x20\x01(\x06R\x08recordId\x12\x1b\n\tused_x264\x18\x02\x20\x01(\x08\
    R\x08usedX264\x12\x1b\n\tused_h264\x18\x03\x20\x01(\x08R\x08usedH264\x12\
    \x1b\n\tused_hevc\x18\x04\x20\x01(\x08R\x08usedHevc\"\xce\x08\n\x20CRemo\
    tePlayTogether_Notification\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\
    \x07steamid\x12U\n\rgroup_updated\x18\x02\x20\x01(\x0b2..CRemotePlayToge\
    ther_Notification.GroupUpdatedH\0R\x0cgroupUpdated\x1a\xdc\x01\n\x06Play\
    er\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x18\n\x07gu\
    estid\x18\x02\x20\x01(\rR\x07guestid\x12\x1f\n\x0bavatar_hash\x18\x03\
    \x20\x01(\x0cR\navatarHash\x12)\n\x10keyboard_enabled\x18\x04\x20\x01(\
    \x08R\x0fkeyboardEnabled\x12#\n\rmouse_enabled\x18\x05\x20\x01(\x08R\x0c\
    mouseEnabled\x12-\n\x12controller_enabled\x18\x06\x20\x01(\x08R\x11contr\
    ollerEnabled\x1aK\n\x17ControllerSlot_obsolete\x12\x16\n\x06slotid\x18\
    \x01\x20\x01(\rR\x06slotid\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\
    \x07steamid\x1a\x93\x01\n\x0eControllerSlot\x12\x16\n\x06slotid\x18\x01\
    \x20\x01(\rR\x06slotid\x12@\n\x06player\x18\x02\x20\x01(\x0b2(.CRemotePl\
    ayTogether_Notification.PlayerR\x06player\x12'\n\x0fcontroller_type\x18\
    \x03\x20\x01(\x05R\x0econtrollerType\x1a\xeb\x03\n\x0cGroupUpdated\x12!\
    \n\x0chost_steamid\x18\x01\x20\x01(\x06R\x0bhostSteamid\x12#\n\rhost_cli\
    entid\x18\x02\x20\x01(\x06R\x0chostClientid\x12)\n\x10players_obsolete\
    \x18\x03\x20\x03(\x06R\x0fplayersObsolete\x12\x1f\n\x0bhost_gameid\x18\
    \x04\x20\x01(\x06R\nhostGameid\x12u\n\x19controller_slots_obsolete\x18\
    \x05\x20\x03(\x0b29.CRemotePlayTogether_Notification.ControllerSlot_obso\
    leteR\x17controllerSlotsObsolete\x12&\n\x0fhas_new_players\x18\x06\x20\
    \x01(\x08R\rhasNewPlayers\x12K\n\x0cplayer_slots\x18\x07\x20\x03(\x0b2(.\
    CRemotePlayTogether_Notification.PlayerR\x0bplayerSlots\x12[\n\x10contro\
    ller_slots\x18\x08\x20\x03(\x0b20.CRemotePlayTogether_Notification.Contr\
    ollerSlotR\x0fcontrollerSlotsB\t\n\x07Message\"}\n8CRemoteClient_CreateR\
    emotePlayTogetherInvitation_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\
    \rR\x05appid\x12+\n\x11launch_parameters\x18\x02\x20\x01(\tR\x10launchPa\
    rameters\"d\n9CRemoteClient_CreateRemotePlayTogetherInvitation_Response\
    \x12'\n\x0finvitation_code\x18\x01\x20\x01(\tR\x0einvitationCode\"c\n8CR\
    emoteClient_DeleteRemotePlayTogetherInvitation_Request\x12'\n\x0finvitat\
    ion_code\x18\x01\x20\x01(\tR\x0einvitationCode\";\n9CRemoteClient_Delete\
    RemotePlayTogetherInvitation_Response\"c\n8CRemoteClient_LookupRemotePla\
    yTogetherInvitation_Request\x12'\n\x0finvitation_code\x18\x01\x20\x01(\t\
    R\x0einvitationCode\"b\n9CRemoteClient_LookupRemotePlayTogetherInvitatio\
    n_Response\x12%\n\x0einvitation_url\x18\x01\x20\x01(\tR\rinvitationUrl\"\
    \xce\x05\n\x1dCCMRemoteClient_ClientMessage\x12\\\n\x16create_session_re\
    quest\x18\x01\x20\x01(\x0b2$.CRemoteClient_CreateSession_RequestH\0R\x14\
    createSessionRequest\x12Y\n\x15start_pairing_request\x18\x02\x20\x01(\
    \x0b2#.CRemoteClient_StartPairing_RequestH\0R\x13startPairingRequest\x12\
    `\n\x18set_pairing_info_request\x18\x03\x20\x01(\x0b2%.CRemoteClient_Set\
    PairingInfo_RequestH\0R\x15setPairingInfoRequest\x12\\\n\x16cancel_pairi\
    ng_request\x18\x04\x20\x01(\x0b2$.CRemoteClient_CancelPairing_RequestH\0\
    R\x14cancelPairingRequest\x12h\n\x16register_status_update\x18\x05\x20\
    \x01(\x0b20.CRemoteClient_RegisterStatusUpdate_NotificationH\0R\x14regis\
    terStatusUpdate\x12n\n\x18unregister_status_update\x18\x06\x20\x01(\x0b2\
    2.CRemoteClient_UnregisterStatusUpdate_NotificationH\0R\x16unregisterSta\
    tusUpdate\x12O\n\rremote_packet\x18\x07\x20\x01(\x0b2(.CRemoteClient_Rem\
    otePacket_NotificationH\0R\x0cremotePacketB\t\n\x07Message\"\x90\x04\n\
    \x1dCCMRemoteClient_ServerMessage\x12\x16\n\x06result\x18\x01\x20\x01(\
    \x05R\x06result\x12_\n\x17create_session_response\x18\x02\x20\x01(\x0b2%\
    .CRemoteClient_CreateSession_ResponseH\0R\x15createSessionResponse\x12\\\
    \n\x16start_pairing_response\x18\x03\x20\x01(\x0b2$.CRemoteClient_StartP\
    airing_ResponseH\0R\x14startPairingResponse\x12c\n\x19set_pairing_info_r\
    esponse\x18\x04\x20\x01(\x0b2&.CRemoteClient_SetPairingInfo_ResponseH\0R\
    \x16setPairingInfoResponse\x12_\n\x17cancel_pairing_response\x18\x05\x20\
    \x01(\x0b2%.CRemoteClient_CancelPairing_ResponseH\0R\x15cancelPairingRes\
    ponse\x12G\n\x0creply_packet\x18\x06\x20\x01(\x0b2\".CRemoteClient_GetRe\
    plies_ResponseH\0R\x0breplyPacketB\t\n\x07Message\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(40);
            messages.push(CRemoteClient_CreateSession_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_CreateSession_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_DeleteSession_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_StartPairing_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_StartPairing_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_SetPairingInfo_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_SetPairingInfo_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_GetPairingInfo_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_GetPairingInfo_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_CancelPairing_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_CancelPairing_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_RegisterStatusUpdate_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_UnregisterStatusUpdate_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_Online_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_RemotePacket_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_ReplyPacket_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_GetReplies_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_GetReplies_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_AllocateRelayServer_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_AllocateRelayServer_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_AllocateSDR_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_AllocateSDR_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_SteamBroadcast_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_SteamToSteam_Notification::generated_message_descriptor_data());
            messages.push(CRemotePlay_SessionStarted_Request::generated_message_descriptor_data());
            messages.push(CRemotePlay_SessionStarted_Response::generated_message_descriptor_data());
            messages.push(CRemotePlay_SessionStopped_Notification::generated_message_descriptor_data());
            messages.push(CRemotePlayTogether_Notification::generated_message_descriptor_data());
            messages.push(CRemoteClient_CreateRemotePlayTogetherInvitation_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_CreateRemotePlayTogetherInvitation_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::generated_message_descriptor_data());
            messages.push(CRemoteClient_LookupRemotePlayTogetherInvitation_Request::generated_message_descriptor_data());
            messages.push(CRemoteClient_LookupRemotePlayTogetherInvitation_Response::generated_message_descriptor_data());
            messages.push(CCMRemoteClient_ClientMessage::generated_message_descriptor_data());
            messages.push(CCMRemoteClient_ServerMessage::generated_message_descriptor_data());
            messages.push(cremote_play_together_notification::Player::generated_message_descriptor_data());
            messages.push(cremote_play_together_notification::ControllerSlot_obsolete::generated_message_descriptor_data());
            messages.push(cremote_play_together_notification::ControllerSlot::generated_message_descriptor_data());
            messages.push(cremote_play_together_notification::GroupUpdated::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
