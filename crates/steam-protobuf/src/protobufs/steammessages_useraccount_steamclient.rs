// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_useraccount.steamclient.proto`

// @@protoc_insertion_point(message:CUserAccount_GetAvailableValveDiscountPromotions_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAvailableValveDiscountPromotions_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAvailableValveDiscountPromotions_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAvailableValveDiscountPromotions_Request {
    fn default() -> &'a CUserAccount_GetAvailableValveDiscountPromotions_Request {
        <CUserAccount_GetAvailableValveDiscountPromotions_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetAvailableValveDiscountPromotions_Request {
    pub fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Request {
        ::std::default::Default::default()
    }

    // optional string country_code = 1;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "country_code",
            |m: &CUserAccount_GetAvailableValveDiscountPromotions_Request| { &m.country_code },
            |m: &mut CUserAccount_GetAvailableValveDiscountPromotions_Request| { &mut m.country_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetAvailableValveDiscountPromotions_Request>(
            "CUserAccount_GetAvailableValveDiscountPromotions_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    const NAME: &'static str = "CUserAccount_GetAvailableValveDiscountPromotions_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.country_code.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Request {
        CUserAccount_GetAvailableValveDiscountPromotions_Request::new()
    }

    fn clear(&mut self) {
        self.country_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAvailableValveDiscountPromotions_Request {
        static instance: CUserAccount_GetAvailableValveDiscountPromotions_Request = CUserAccount_GetAvailableValveDiscountPromotions_Request {
            country_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetAvailableValveDiscountPromotions_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetAvailableValveDiscountPromotions_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAvailableValveDiscountPromotions_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
    pub promotions: ::std::vec::Vec<cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAvailableValveDiscountPromotions_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAvailableValveDiscountPromotions_Response {
    fn default() -> &'a CUserAccount_GetAvailableValveDiscountPromotions_Response {
        <CUserAccount_GetAvailableValveDiscountPromotions_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetAvailableValveDiscountPromotions_Response {
    pub fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Response {
        ::std::default::Default::default()
    }

    // repeated .CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails promotions = 1;

    pub fn promotions(&self) -> &[cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails] {
        &self.promotions
    }

    pub fn clear_promotions(&mut self) {
        self.promotions.clear();
    }

    // Param is passed by value, moved
    pub fn set_promotions(&mut self, v: ::std::vec::Vec<cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails>) {
        self.promotions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_promotions(&mut self) -> &mut ::std::vec::Vec<cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails> {
        &mut self.promotions
    }

    // Take field
    pub fn take_promotions(&mut self) -> ::std::vec::Vec<cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails> {
        ::std::mem::replace(&mut self.promotions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "promotions",
            |m: &CUserAccount_GetAvailableValveDiscountPromotions_Response| { &m.promotions },
            |m: &mut CUserAccount_GetAvailableValveDiscountPromotions_Response| { &mut m.promotions },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetAvailableValveDiscountPromotions_Response>(
            "CUserAccount_GetAvailableValveDiscountPromotions_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetAvailableValveDiscountPromotions_Response {
    const NAME: &'static str = "CUserAccount_GetAvailableValveDiscountPromotions_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.promotions.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.promotions {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.promotions {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Response {
        CUserAccount_GetAvailableValveDiscountPromotions_Response::new()
    }

    fn clear(&mut self) {
        self.promotions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAvailableValveDiscountPromotions_Response {
        static instance: CUserAccount_GetAvailableValveDiscountPromotions_Response = CUserAccount_GetAvailableValveDiscountPromotions_Response {
            promotions: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetAvailableValveDiscountPromotions_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetAvailableValveDiscountPromotions_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetAvailableValveDiscountPromotions_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetAvailableValveDiscountPromotions_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CUserAccount_GetAvailableValveDiscountPromotions_Response`
pub mod cuser_account_get_available_valve_discount_promotions_response {
    // @@protoc_insertion_point(message:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ValveDiscountPromotionDetails {
        // message fields
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotionid)
        pub promotionid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
        pub promotion_description: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount)
        pub minimum_cart_amount: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount_for_display)
        pub minimum_cart_amount_for_display: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.discount_amount)
        pub discount_amount: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.currency_code)
        pub currency_code: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.available_use_count)
        pub available_use_count: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotional_discount_type)
        pub promotional_discount_type: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.loyalty_reward_id)
        pub loyalty_reward_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
        pub localized_name_token: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.max_use_count)
        pub max_use_count: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ValveDiscountPromotionDetails {
        fn default() -> &'a ValveDiscountPromotionDetails {
            <ValveDiscountPromotionDetails as crate::Message>::default_instance()
        }
    }

    impl ValveDiscountPromotionDetails {
        pub fn new() -> ValveDiscountPromotionDetails {
            ::std::default::Default::default()
        }

        // optional uint32 promotionid = 1;

        pub fn promotionid(&self) -> u32 {
            self.promotionid.unwrap_or(0)
        }

        pub fn clear_promotionid(&mut self) {
            self.promotionid = ::std::option::Option::None;
        }

        pub fn has_promotionid(&self) -> bool {
            self.promotionid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_promotionid(&mut self, v: u32) {
            self.promotionid = ::std::option::Option::Some(v);
        }

        // optional string promotion_description = 2;

        pub fn promotion_description(&self) -> &str {
            match self.promotion_description.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_promotion_description(&mut self) {
            self.promotion_description = ::std::option::Option::None;
        }

        pub fn has_promotion_description(&self) -> bool {
            self.promotion_description.is_some()
        }

        // Param is passed by value, moved
        pub fn set_promotion_description(&mut self, v: ::std::string::String) {
            self.promotion_description = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_promotion_description(&mut self) -> &mut ::std::string::String {
            if self.promotion_description.is_none() {
                self.promotion_description = ::std::option::Option::Some(::std::string::String::new());
            }
            self.promotion_description.as_mut().unwrap()
        }

        // Take field
        pub fn take_promotion_description(&mut self) -> ::std::string::String {
            self.promotion_description.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int64 minimum_cart_amount = 3;

        pub fn minimum_cart_amount(&self) -> i64 {
            self.minimum_cart_amount.unwrap_or(0)
        }

        pub fn clear_minimum_cart_amount(&mut self) {
            self.minimum_cart_amount = ::std::option::Option::None;
        }

        pub fn has_minimum_cart_amount(&self) -> bool {
            self.minimum_cart_amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minimum_cart_amount(&mut self, v: i64) {
            self.minimum_cart_amount = ::std::option::Option::Some(v);
        }

        // optional int64 minimum_cart_amount_for_display = 4;

        pub fn minimum_cart_amount_for_display(&self) -> i64 {
            self.minimum_cart_amount_for_display.unwrap_or(0)
        }

        pub fn clear_minimum_cart_amount_for_display(&mut self) {
            self.minimum_cart_amount_for_display = ::std::option::Option::None;
        }

        pub fn has_minimum_cart_amount_for_display(&self) -> bool {
            self.minimum_cart_amount_for_display.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minimum_cart_amount_for_display(&mut self, v: i64) {
            self.minimum_cart_amount_for_display = ::std::option::Option::Some(v);
        }

        // optional int64 discount_amount = 5;

        pub fn discount_amount(&self) -> i64 {
            self.discount_amount.unwrap_or(0)
        }

        pub fn clear_discount_amount(&mut self) {
            self.discount_amount = ::std::option::Option::None;
        }

        pub fn has_discount_amount(&self) -> bool {
            self.discount_amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_discount_amount(&mut self, v: i64) {
            self.discount_amount = ::std::option::Option::Some(v);
        }

        // optional int32 currency_code = 6;

        pub fn currency_code(&self) -> i32 {
            self.currency_code.unwrap_or(0)
        }

        pub fn clear_currency_code(&mut self) {
            self.currency_code = ::std::option::Option::None;
        }

        pub fn has_currency_code(&self) -> bool {
            self.currency_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_currency_code(&mut self, v: i32) {
            self.currency_code = ::std::option::Option::Some(v);
        }

        // optional int32 available_use_count = 7;

        pub fn available_use_count(&self) -> i32 {
            self.available_use_count.unwrap_or(0)
        }

        pub fn clear_available_use_count(&mut self) {
            self.available_use_count = ::std::option::Option::None;
        }

        pub fn has_available_use_count(&self) -> bool {
            self.available_use_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_available_use_count(&mut self, v: i32) {
            self.available_use_count = ::std::option::Option::Some(v);
        }

        // optional int32 promotional_discount_type = 8;

        pub fn promotional_discount_type(&self) -> i32 {
            self.promotional_discount_type.unwrap_or(0)
        }

        pub fn clear_promotional_discount_type(&mut self) {
            self.promotional_discount_type = ::std::option::Option::None;
        }

        pub fn has_promotional_discount_type(&self) -> bool {
            self.promotional_discount_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_promotional_discount_type(&mut self, v: i32) {
            self.promotional_discount_type = ::std::option::Option::Some(v);
        }

        // optional int32 loyalty_reward_id = 9;

        pub fn loyalty_reward_id(&self) -> i32 {
            self.loyalty_reward_id.unwrap_or(0)
        }

        pub fn clear_loyalty_reward_id(&mut self) {
            self.loyalty_reward_id = ::std::option::Option::None;
        }

        pub fn has_loyalty_reward_id(&self) -> bool {
            self.loyalty_reward_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_loyalty_reward_id(&mut self, v: i32) {
            self.loyalty_reward_id = ::std::option::Option::Some(v);
        }

        // optional string localized_name_token = 10;

        pub fn localized_name_token(&self) -> &str {
            match self.localized_name_token.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_localized_name_token(&mut self) {
            self.localized_name_token = ::std::option::Option::None;
        }

        pub fn has_localized_name_token(&self) -> bool {
            self.localized_name_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_localized_name_token(&mut self, v: ::std::string::String) {
            self.localized_name_token = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_localized_name_token(&mut self) -> &mut ::std::string::String {
            if self.localized_name_token.is_none() {
                self.localized_name_token = ::std::option::Option::Some(::std::string::String::new());
            }
            self.localized_name_token.as_mut().unwrap()
        }

        // Take field
        pub fn take_localized_name_token(&mut self) -> ::std::string::String {
            self.localized_name_token.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 max_use_count = 11;

        pub fn max_use_count(&self) -> i32 {
            self.max_use_count.unwrap_or(0)
        }

        pub fn clear_max_use_count(&mut self) {
            self.max_use_count = ::std::option::Option::None;
        }

        pub fn has_max_use_count(&self) -> bool {
            self.max_use_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_use_count(&mut self, v: i32) {
            self.max_use_count = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(11);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "promotionid",
                |m: &ValveDiscountPromotionDetails| { &m.promotionid },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.promotionid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "promotion_description",
                |m: &ValveDiscountPromotionDetails| { &m.promotion_description },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.promotion_description },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "minimum_cart_amount",
                |m: &ValveDiscountPromotionDetails| { &m.minimum_cart_amount },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.minimum_cart_amount },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "minimum_cart_amount_for_display",
                |m: &ValveDiscountPromotionDetails| { &m.minimum_cart_amount_for_display },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.minimum_cart_amount_for_display },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "discount_amount",
                |m: &ValveDiscountPromotionDetails| { &m.discount_amount },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.discount_amount },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "currency_code",
                |m: &ValveDiscountPromotionDetails| { &m.currency_code },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.currency_code },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "available_use_count",
                |m: &ValveDiscountPromotionDetails| { &m.available_use_count },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.available_use_count },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "promotional_discount_type",
                |m: &ValveDiscountPromotionDetails| { &m.promotional_discount_type },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.promotional_discount_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "loyalty_reward_id",
                |m: &ValveDiscountPromotionDetails| { &m.loyalty_reward_id },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.loyalty_reward_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "localized_name_token",
                |m: &ValveDiscountPromotionDetails| { &m.localized_name_token },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.localized_name_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_use_count",
                |m: &ValveDiscountPromotionDetails| { &m.max_use_count },
                |m: &mut ValveDiscountPromotionDetails| { &mut m.max_use_count },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ValveDiscountPromotionDetails>(
                "CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ValveDiscountPromotionDetails {
        const NAME: &'static str = "ValveDiscountPromotionDetails";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.promotionid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.promotion_description = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.minimum_cart_amount = ::std::option::Option::Some(is.read_int64()?);
                    },
                    32 => {
                        self.minimum_cart_amount_for_display = ::std::option::Option::Some(is.read_int64()?);
                    },
                    40 => {
                        self.discount_amount = ::std::option::Option::Some(is.read_int64()?);
                    },
                    48 => {
                        self.currency_code = ::std::option::Option::Some(is.read_int32()?);
                    },
                    56 => {
                        self.available_use_count = ::std::option::Option::Some(is.read_int32()?);
                    },
                    64 => {
                        self.promotional_discount_type = ::std::option::Option::Some(is.read_int32()?);
                    },
                    72 => {
                        self.loyalty_reward_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    82 => {
                        self.localized_name_token = ::std::option::Option::Some(is.read_string()?);
                    },
                    88 => {
                        self.max_use_count = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.promotionid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.promotion_description.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.minimum_cart_amount {
                my_size += crate::rt::int64_size(3, v);
            }
            if let Some(v) = self.minimum_cart_amount_for_display {
                my_size += crate::rt::int64_size(4, v);
            }
            if let Some(v) = self.discount_amount {
                my_size += crate::rt::int64_size(5, v);
            }
            if let Some(v) = self.currency_code {
                my_size += crate::rt::int32_size(6, v);
            }
            if let Some(v) = self.available_use_count {
                my_size += crate::rt::int32_size(7, v);
            }
            if let Some(v) = self.promotional_discount_type {
                my_size += crate::rt::int32_size(8, v);
            }
            if let Some(v) = self.loyalty_reward_id {
                my_size += crate::rt::int32_size(9, v);
            }
            if let Some(v) = self.localized_name_token.as_ref() {
                my_size += crate::rt::string_size(10, &v);
            }
            if let Some(v) = self.max_use_count {
                my_size += crate::rt::int32_size(11, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.promotionid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.promotion_description.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.minimum_cart_amount {
                os.write_int64(3, v)?;
            }
            if let Some(v) = self.minimum_cart_amount_for_display {
                os.write_int64(4, v)?;
            }
            if let Some(v) = self.discount_amount {
                os.write_int64(5, v)?;
            }
            if let Some(v) = self.currency_code {
                os.write_int32(6, v)?;
            }
            if let Some(v) = self.available_use_count {
                os.write_int32(7, v)?;
            }
            if let Some(v) = self.promotional_discount_type {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.loyalty_reward_id {
                os.write_int32(9, v)?;
            }
            if let Some(v) = self.localized_name_token.as_ref() {
                os.write_string(10, v)?;
            }
            if let Some(v) = self.max_use_count {
                os.write_int32(11, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ValveDiscountPromotionDetails {
            ValveDiscountPromotionDetails::new()
        }

        fn clear(&mut self) {
            self.promotionid = ::std::option::Option::None;
            self.promotion_description = ::std::option::Option::None;
            self.minimum_cart_amount = ::std::option::Option::None;
            self.minimum_cart_amount_for_display = ::std::option::Option::None;
            self.discount_amount = ::std::option::Option::None;
            self.currency_code = ::std::option::Option::None;
            self.available_use_count = ::std::option::Option::None;
            self.promotional_discount_type = ::std::option::Option::None;
            self.loyalty_reward_id = ::std::option::Option::None;
            self.localized_name_token = ::std::option::Option::None;
            self.max_use_count = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ValveDiscountPromotionDetails {
            static instance: ValveDiscountPromotionDetails = ValveDiscountPromotionDetails {
                promotionid: ::std::option::Option::None,
                promotion_description: ::std::option::Option::None,
                minimum_cart_amount: ::std::option::Option::None,
                minimum_cart_amount_for_display: ::std::option::Option::None,
                discount_amount: ::std::option::Option::None,
                currency_code: ::std::option::Option::None,
                available_use_count: ::std::option::Option::None,
                promotional_discount_type: ::std::option::Option::None,
                loyalty_reward_id: ::std::option::Option::None,
                localized_name_token: ::std::option::Option::None,
                max_use_count: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ValveDiscountPromotionDetails {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ValveDiscountPromotionDetails {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ValveDiscountPromotionDetails {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CUserAccount_GetClientWalletDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetClientWalletDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetClientWalletDetails_Request.include_balance_in_usd)
    pub include_balance_in_usd: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_GetClientWalletDetails_Request.wallet_region)
    pub wallet_region: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CUserAccount_GetClientWalletDetails_Request.include_formatted_balance)
    pub include_formatted_balance: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetClientWalletDetails_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetClientWalletDetails_Request {
    fn default() -> &'a CUserAccount_GetClientWalletDetails_Request {
        <CUserAccount_GetClientWalletDetails_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetClientWalletDetails_Request {
    pub fn new() -> CUserAccount_GetClientWalletDetails_Request {
        ::std::default::Default::default()
    }

    // optional bool include_balance_in_usd = 1;

    pub fn include_balance_in_usd(&self) -> bool {
        self.include_balance_in_usd.unwrap_or(false)
    }

    pub fn clear_include_balance_in_usd(&mut self) {
        self.include_balance_in_usd = ::std::option::Option::None;
    }

    pub fn has_include_balance_in_usd(&self) -> bool {
        self.include_balance_in_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_balance_in_usd(&mut self, v: bool) {
        self.include_balance_in_usd = ::std::option::Option::Some(v);
    }

    // optional int32 wallet_region = 2;

    pub fn wallet_region(&self) -> i32 {
        self.wallet_region.unwrap_or(1i32)
    }

    pub fn clear_wallet_region(&mut self) {
        self.wallet_region = ::std::option::Option::None;
    }

    pub fn has_wallet_region(&self) -> bool {
        self.wallet_region.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wallet_region(&mut self, v: i32) {
        self.wallet_region = ::std::option::Option::Some(v);
    }

    // optional bool include_formatted_balance = 3;

    pub fn include_formatted_balance(&self) -> bool {
        self.include_formatted_balance.unwrap_or(false)
    }

    pub fn clear_include_formatted_balance(&mut self) {
        self.include_formatted_balance = ::std::option::Option::None;
    }

    pub fn has_include_formatted_balance(&self) -> bool {
        self.include_formatted_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_formatted_balance(&mut self, v: bool) {
        self.include_formatted_balance = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_balance_in_usd",
            |m: &CUserAccount_GetClientWalletDetails_Request| { &m.include_balance_in_usd },
            |m: &mut CUserAccount_GetClientWalletDetails_Request| { &mut m.include_balance_in_usd },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "wallet_region",
            |m: &CUserAccount_GetClientWalletDetails_Request| { &m.wallet_region },
            |m: &mut CUserAccount_GetClientWalletDetails_Request| { &mut m.wallet_region },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_formatted_balance",
            |m: &CUserAccount_GetClientWalletDetails_Request| { &m.include_formatted_balance },
            |m: &mut CUserAccount_GetClientWalletDetails_Request| { &mut m.include_formatted_balance },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetClientWalletDetails_Request>(
            "CUserAccount_GetClientWalletDetails_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetClientWalletDetails_Request {
    const NAME: &'static str = "CUserAccount_GetClientWalletDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.include_balance_in_usd = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.wallet_region = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.include_formatted_balance = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.include_balance_in_usd {
            my_size += 1 + 1;
        }
        if let Some(v) = self.wallet_region {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.include_formatted_balance {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.include_balance_in_usd {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.wallet_region {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.include_formatted_balance {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetClientWalletDetails_Request {
        CUserAccount_GetClientWalletDetails_Request::new()
    }

    fn clear(&mut self) {
        self.include_balance_in_usd = ::std::option::Option::None;
        self.wallet_region = ::std::option::Option::None;
        self.include_formatted_balance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetClientWalletDetails_Request {
        static instance: CUserAccount_GetClientWalletDetails_Request = CUserAccount_GetClientWalletDetails_Request {
            include_balance_in_usd: ::std::option::Option::None,
            wallet_region: ::std::option::Option::None,
            include_formatted_balance: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetClientWalletDetails_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetClientWalletDetails_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetClientWalletDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetClientWalletDetails_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetWalletDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetWalletDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.has_wallet)
    pub has_wallet: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.user_country_code)
    pub user_country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.wallet_country_code)
    pub wallet_country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.wallet_state)
    pub wallet_state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.balance)
    pub balance: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.delayed_balance)
    pub delayed_balance: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.currency_code)
    pub currency_code: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.time_most_recent_txn)
    pub time_most_recent_txn: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.most_recent_txnid)
    pub most_recent_txnid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.balance_in_usd)
    pub balance_in_usd: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.delayed_balance_in_usd)
    pub delayed_balance_in_usd: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.has_wallet_in_other_regions)
    pub has_wallet_in_other_regions: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.other_regions)
    pub other_regions: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.formatted_balance)
    pub formatted_balance: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetWalletDetails_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetWalletDetails_Response {
    fn default() -> &'a CUserAccount_GetWalletDetails_Response {
        <CUserAccount_GetWalletDetails_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetWalletDetails_Response {
    pub fn new() -> CUserAccount_GetWalletDetails_Response {
        ::std::default::Default::default()
    }

    // optional bool has_wallet = 1;

    pub fn has_wallet(&self) -> bool {
        self.has_wallet.unwrap_or(false)
    }

    pub fn clear_has_wallet(&mut self) {
        self.has_wallet = ::std::option::Option::None;
    }

    pub fn has_has_wallet(&self) -> bool {
        self.has_wallet.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_wallet(&mut self, v: bool) {
        self.has_wallet = ::std::option::Option::Some(v);
    }

    // optional string user_country_code = 2;

    pub fn user_country_code(&self) -> &str {
        match self.user_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_user_country_code(&mut self) {
        self.user_country_code = ::std::option::Option::None;
    }

    pub fn has_user_country_code(&self) -> bool {
        self.user_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_country_code(&mut self, v: ::std::string::String) {
        self.user_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_country_code(&mut self) -> &mut ::std::string::String {
        if self.user_country_code.is_none() {
            self.user_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.user_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_country_code(&mut self) -> ::std::string::String {
        self.user_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string wallet_country_code = 3;

    pub fn wallet_country_code(&self) -> &str {
        match self.wallet_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_wallet_country_code(&mut self) {
        self.wallet_country_code = ::std::option::Option::None;
    }

    pub fn has_wallet_country_code(&self) -> bool {
        self.wallet_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wallet_country_code(&mut self, v: ::std::string::String) {
        self.wallet_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wallet_country_code(&mut self) -> &mut ::std::string::String {
        if self.wallet_country_code.is_none() {
            self.wallet_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.wallet_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_wallet_country_code(&mut self) -> ::std::string::String {
        self.wallet_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string wallet_state = 4;

    pub fn wallet_state(&self) -> &str {
        match self.wallet_state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_wallet_state(&mut self) {
        self.wallet_state = ::std::option::Option::None;
    }

    pub fn has_wallet_state(&self) -> bool {
        self.wallet_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wallet_state(&mut self, v: ::std::string::String) {
        self.wallet_state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wallet_state(&mut self) -> &mut ::std::string::String {
        if self.wallet_state.is_none() {
            self.wallet_state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.wallet_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_wallet_state(&mut self) -> ::std::string::String {
        self.wallet_state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 balance = 5;

    pub fn balance(&self) -> i64 {
        self.balance.unwrap_or(0)
    }

    pub fn clear_balance(&mut self) {
        self.balance = ::std::option::Option::None;
    }

    pub fn has_balance(&self) -> bool {
        self.balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: i64) {
        self.balance = ::std::option::Option::Some(v);
    }

    // optional int64 delayed_balance = 6;

    pub fn delayed_balance(&self) -> i64 {
        self.delayed_balance.unwrap_or(0)
    }

    pub fn clear_delayed_balance(&mut self) {
        self.delayed_balance = ::std::option::Option::None;
    }

    pub fn has_delayed_balance(&self) -> bool {
        self.delayed_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delayed_balance(&mut self, v: i64) {
        self.delayed_balance = ::std::option::Option::Some(v);
    }

    // optional int32 currency_code = 7;

    pub fn currency_code(&self) -> i32 {
        self.currency_code.unwrap_or(0)
    }

    pub fn clear_currency_code(&mut self) {
        self.currency_code = ::std::option::Option::None;
    }

    pub fn has_currency_code(&self) -> bool {
        self.currency_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency_code(&mut self, v: i32) {
        self.currency_code = ::std::option::Option::Some(v);
    }

    // optional uint32 time_most_recent_txn = 8;

    pub fn time_most_recent_txn(&self) -> u32 {
        self.time_most_recent_txn.unwrap_or(0)
    }

    pub fn clear_time_most_recent_txn(&mut self) {
        self.time_most_recent_txn = ::std::option::Option::None;
    }

    pub fn has_time_most_recent_txn(&self) -> bool {
        self.time_most_recent_txn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_most_recent_txn(&mut self, v: u32) {
        self.time_most_recent_txn = ::std::option::Option::Some(v);
    }

    // optional uint64 most_recent_txnid = 9;

    pub fn most_recent_txnid(&self) -> u64 {
        self.most_recent_txnid.unwrap_or(0)
    }

    pub fn clear_most_recent_txnid(&mut self) {
        self.most_recent_txnid = ::std::option::Option::None;
    }

    pub fn has_most_recent_txnid(&self) -> bool {
        self.most_recent_txnid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_most_recent_txnid(&mut self, v: u64) {
        self.most_recent_txnid = ::std::option::Option::Some(v);
    }

    // optional int64 balance_in_usd = 10;

    pub fn balance_in_usd(&self) -> i64 {
        self.balance_in_usd.unwrap_or(0)
    }

    pub fn clear_balance_in_usd(&mut self) {
        self.balance_in_usd = ::std::option::Option::None;
    }

    pub fn has_balance_in_usd(&self) -> bool {
        self.balance_in_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_balance_in_usd(&mut self, v: i64) {
        self.balance_in_usd = ::std::option::Option::Some(v);
    }

    // optional int64 delayed_balance_in_usd = 11;

    pub fn delayed_balance_in_usd(&self) -> i64 {
        self.delayed_balance_in_usd.unwrap_or(0)
    }

    pub fn clear_delayed_balance_in_usd(&mut self) {
        self.delayed_balance_in_usd = ::std::option::Option::None;
    }

    pub fn has_delayed_balance_in_usd(&self) -> bool {
        self.delayed_balance_in_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delayed_balance_in_usd(&mut self, v: i64) {
        self.delayed_balance_in_usd = ::std::option::Option::Some(v);
    }

    // optional bool has_wallet_in_other_regions = 12;

    pub fn has_wallet_in_other_regions(&self) -> bool {
        self.has_wallet_in_other_regions.unwrap_or(false)
    }

    pub fn clear_has_wallet_in_other_regions(&mut self) {
        self.has_wallet_in_other_regions = ::std::option::Option::None;
    }

    pub fn has_has_wallet_in_other_regions(&self) -> bool {
        self.has_wallet_in_other_regions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_wallet_in_other_regions(&mut self, v: bool) {
        self.has_wallet_in_other_regions = ::std::option::Option::Some(v);
    }

    // repeated int32 other_regions = 13;

    pub fn other_regions(&self) -> &[i32] {
        &self.other_regions
    }

    pub fn clear_other_regions(&mut self) {
        self.other_regions.clear();
    }

    // Param is passed by value, moved
    pub fn set_other_regions(&mut self, v: ::std::vec::Vec<i32>) {
        self.other_regions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_other_regions(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.other_regions
    }

    // Take field
    pub fn take_other_regions(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.other_regions, ::std::vec::Vec::new())
    }

    // optional string formatted_balance = 14;

    pub fn formatted_balance(&self) -> &str {
        match self.formatted_balance.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_formatted_balance(&mut self) {
        self.formatted_balance = ::std::option::Option::None;
    }

    pub fn has_formatted_balance(&self) -> bool {
        self.formatted_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_formatted_balance(&mut self, v: ::std::string::String) {
        self.formatted_balance = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_formatted_balance(&mut self) -> &mut ::std::string::String {
        if self.formatted_balance.is_none() {
            self.formatted_balance = ::std::option::Option::Some(::std::string::String::new());
        }
        self.formatted_balance.as_mut().unwrap()
    }

    // Take field
    pub fn take_formatted_balance(&mut self) -> ::std::string::String {
        self.formatted_balance.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_wallet",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.has_wallet },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.has_wallet },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_country_code",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.user_country_code },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.user_country_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "wallet_country_code",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.wallet_country_code },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.wallet_country_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "wallet_state",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.wallet_state },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.wallet_state },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "balance",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.balance },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.balance },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "delayed_balance",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.delayed_balance },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.delayed_balance },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "currency_code",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.currency_code },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.currency_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_most_recent_txn",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.time_most_recent_txn },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.time_most_recent_txn },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "most_recent_txnid",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.most_recent_txnid },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.most_recent_txnid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "balance_in_usd",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.balance_in_usd },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.balance_in_usd },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "delayed_balance_in_usd",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.delayed_balance_in_usd },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.delayed_balance_in_usd },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_wallet_in_other_regions",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.has_wallet_in_other_regions },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.has_wallet_in_other_regions },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "other_regions",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.other_regions },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.other_regions },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "formatted_balance",
            |m: &CUserAccount_GetWalletDetails_Response| { &m.formatted_balance },
            |m: &mut CUserAccount_GetWalletDetails_Response| { &mut m.formatted_balance },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetWalletDetails_Response>(
            "CUserAccount_GetWalletDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetWalletDetails_Response {
    const NAME: &'static str = "CUserAccount_GetWalletDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_wallet = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.user_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.wallet_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.wallet_state = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.balance = ::std::option::Option::Some(is.read_int64()?);
                },
                48 => {
                    self.delayed_balance = ::std::option::Option::Some(is.read_int64()?);
                },
                56 => {
                    self.currency_code = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.time_most_recent_txn = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.most_recent_txnid = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.balance_in_usd = ::std::option::Option::Some(is.read_int64()?);
                },
                88 => {
                    self.delayed_balance_in_usd = ::std::option::Option::Some(is.read_int64()?);
                },
                96 => {
                    self.has_wallet_in_other_regions = ::std::option::Option::Some(is.read_bool()?);
                },
                106 => {
                    is.read_repeated_packed_int32_into(&mut self.other_regions)?;
                },
                104 => {
                    self.other_regions.push(is.read_int32()?);
                },
                114 => {
                    self.formatted_balance = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.has_wallet {
            my_size += 1 + 1;
        }
        if let Some(v) = self.user_country_code.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.wallet_country_code.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.wallet_state.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.balance {
            my_size += crate::rt::int64_size(5, v);
        }
        if let Some(v) = self.delayed_balance {
            my_size += crate::rt::int64_size(6, v);
        }
        if let Some(v) = self.currency_code {
            my_size += crate::rt::int32_size(7, v);
        }
        if let Some(v) = self.time_most_recent_txn {
            my_size += crate::rt::uint32_size(8, v);
        }
        if let Some(v) = self.most_recent_txnid {
            my_size += crate::rt::uint64_size(9, v);
        }
        if let Some(v) = self.balance_in_usd {
            my_size += crate::rt::int64_size(10, v);
        }
        if let Some(v) = self.delayed_balance_in_usd {
            my_size += crate::rt::int64_size(11, v);
        }
        if let Some(v) = self.has_wallet_in_other_regions {
            my_size += 1 + 1;
        }
        for value in &self.other_regions {
            my_size += crate::rt::int32_size(13, *value);
        };
        if let Some(v) = self.formatted_balance.as_ref() {
            my_size += crate::rt::string_size(14, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.has_wallet {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.user_country_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.wallet_country_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.wallet_state.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.balance {
            os.write_int64(5, v)?;
        }
        if let Some(v) = self.delayed_balance {
            os.write_int64(6, v)?;
        }
        if let Some(v) = self.currency_code {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.time_most_recent_txn {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.most_recent_txnid {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.balance_in_usd {
            os.write_int64(10, v)?;
        }
        if let Some(v) = self.delayed_balance_in_usd {
            os.write_int64(11, v)?;
        }
        if let Some(v) = self.has_wallet_in_other_regions {
            os.write_bool(12, v)?;
        }
        for v in &self.other_regions {
            os.write_int32(13, *v)?;
        };
        if let Some(v) = self.formatted_balance.as_ref() {
            os.write_string(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetWalletDetails_Response {
        CUserAccount_GetWalletDetails_Response::new()
    }

    fn clear(&mut self) {
        self.has_wallet = ::std::option::Option::None;
        self.user_country_code = ::std::option::Option::None;
        self.wallet_country_code = ::std::option::Option::None;
        self.wallet_state = ::std::option::Option::None;
        self.balance = ::std::option::Option::None;
        self.delayed_balance = ::std::option::Option::None;
        self.currency_code = ::std::option::Option::None;
        self.time_most_recent_txn = ::std::option::Option::None;
        self.most_recent_txnid = ::std::option::Option::None;
        self.balance_in_usd = ::std::option::Option::None;
        self.delayed_balance_in_usd = ::std::option::Option::None;
        self.has_wallet_in_other_regions = ::std::option::Option::None;
        self.other_regions.clear();
        self.formatted_balance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetWalletDetails_Response {
        static instance: CUserAccount_GetWalletDetails_Response = CUserAccount_GetWalletDetails_Response {
            has_wallet: ::std::option::Option::None,
            user_country_code: ::std::option::Option::None,
            wallet_country_code: ::std::option::Option::None,
            wallet_state: ::std::option::Option::None,
            balance: ::std::option::Option::None,
            delayed_balance: ::std::option::Option::None,
            currency_code: ::std::option::Option::None,
            time_most_recent_txn: ::std::option::Option::None,
            most_recent_txnid: ::std::option::Option::None,
            balance_in_usd: ::std::option::Option::None,
            delayed_balance_in_usd: ::std::option::Option::None,
            has_wallet_in_other_regions: ::std::option::Option::None,
            other_regions: ::std::vec::Vec::new(),
            formatted_balance: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetWalletDetails_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetWalletDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetWalletDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetWalletDetails_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetAccountLinkStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAccountLinkStatus_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAccountLinkStatus_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAccountLinkStatus_Request {
    fn default() -> &'a CUserAccount_GetAccountLinkStatus_Request {
        <CUserAccount_GetAccountLinkStatus_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetAccountLinkStatus_Request {
    pub fn new() -> CUserAccount_GetAccountLinkStatus_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetAccountLinkStatus_Request>(
            "CUserAccount_GetAccountLinkStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetAccountLinkStatus_Request {
    const NAME: &'static str = "CUserAccount_GetAccountLinkStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAccountLinkStatus_Request {
        CUserAccount_GetAccountLinkStatus_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAccountLinkStatus_Request {
        static instance: CUserAccount_GetAccountLinkStatus_Request = CUserAccount_GetAccountLinkStatus_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetAccountLinkStatus_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetAccountLinkStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetAccountLinkStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetAccountLinkStatus_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetAccountLinkStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAccountLinkStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetAccountLinkStatus_Response.pwid)
    pub pwid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_GetAccountLinkStatus_Response.identity_verification)
    pub identity_verification: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_GetAccountLinkStatus_Response.performed_age_verification)
    pub performed_age_verification: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAccountLinkStatus_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAccountLinkStatus_Response {
    fn default() -> &'a CUserAccount_GetAccountLinkStatus_Response {
        <CUserAccount_GetAccountLinkStatus_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetAccountLinkStatus_Response {
    pub fn new() -> CUserAccount_GetAccountLinkStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pwid = 1;

    pub fn pwid(&self) -> u32 {
        self.pwid.unwrap_or(0)
    }

    pub fn clear_pwid(&mut self) {
        self.pwid = ::std::option::Option::None;
    }

    pub fn has_pwid(&self) -> bool {
        self.pwid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pwid(&mut self, v: u32) {
        self.pwid = ::std::option::Option::Some(v);
    }

    // optional uint32 identity_verification = 2;

    pub fn identity_verification(&self) -> u32 {
        self.identity_verification.unwrap_or(0)
    }

    pub fn clear_identity_verification(&mut self) {
        self.identity_verification = ::std::option::Option::None;
    }

    pub fn has_identity_verification(&self) -> bool {
        self.identity_verification.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identity_verification(&mut self, v: u32) {
        self.identity_verification = ::std::option::Option::Some(v);
    }

    // optional bool performed_age_verification = 3;

    pub fn performed_age_verification(&self) -> bool {
        self.performed_age_verification.unwrap_or(false)
    }

    pub fn clear_performed_age_verification(&mut self) {
        self.performed_age_verification = ::std::option::Option::None;
    }

    pub fn has_performed_age_verification(&self) -> bool {
        self.performed_age_verification.is_some()
    }

    // Param is passed by value, moved
    pub fn set_performed_age_verification(&mut self, v: bool) {
        self.performed_age_verification = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "pwid",
            |m: &CUserAccount_GetAccountLinkStatus_Response| { &m.pwid },
            |m: &mut CUserAccount_GetAccountLinkStatus_Response| { &mut m.pwid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "identity_verification",
            |m: &CUserAccount_GetAccountLinkStatus_Response| { &m.identity_verification },
            |m: &mut CUserAccount_GetAccountLinkStatus_Response| { &mut m.identity_verification },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "performed_age_verification",
            |m: &CUserAccount_GetAccountLinkStatus_Response| { &m.performed_age_verification },
            |m: &mut CUserAccount_GetAccountLinkStatus_Response| { &mut m.performed_age_verification },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetAccountLinkStatus_Response>(
            "CUserAccount_GetAccountLinkStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetAccountLinkStatus_Response {
    const NAME: &'static str = "CUserAccount_GetAccountLinkStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pwid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.identity_verification = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.performed_age_verification = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pwid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.identity_verification {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.performed_age_verification {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.pwid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.identity_verification {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.performed_age_verification {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAccountLinkStatus_Response {
        CUserAccount_GetAccountLinkStatus_Response::new()
    }

    fn clear(&mut self) {
        self.pwid = ::std::option::Option::None;
        self.identity_verification = ::std::option::Option::None;
        self.performed_age_verification = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAccountLinkStatus_Response {
        static instance: CUserAccount_GetAccountLinkStatus_Response = CUserAccount_GetAccountLinkStatus_Response {
            pwid: ::std::option::Option::None,
            identity_verification: ::std::option::Option::None,
            performed_age_verification: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetAccountLinkStatus_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetAccountLinkStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetAccountLinkStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetAccountLinkStatus_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_CancelLicenseForApp_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CancelLicenseForApp_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_CancelLicenseForApp_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CancelLicenseForApp_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CancelLicenseForApp_Request {
    fn default() -> &'a CUserAccount_CancelLicenseForApp_Request {
        <CUserAccount_CancelLicenseForApp_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_CancelLicenseForApp_Request {
    pub fn new() -> CUserAccount_CancelLicenseForApp_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CUserAccount_CancelLicenseForApp_Request| { &m.appid },
            |m: &mut CUserAccount_CancelLicenseForApp_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_CancelLicenseForApp_Request>(
            "CUserAccount_CancelLicenseForApp_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_CancelLicenseForApp_Request {
    const NAME: &'static str = "CUserAccount_CancelLicenseForApp_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CancelLicenseForApp_Request {
        CUserAccount_CancelLicenseForApp_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CancelLicenseForApp_Request {
        static instance: CUserAccount_CancelLicenseForApp_Request = CUserAccount_CancelLicenseForApp_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_CancelLicenseForApp_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_CancelLicenseForApp_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_CancelLicenseForApp_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_CancelLicenseForApp_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_CancelLicenseForApp_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CancelLicenseForApp_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CancelLicenseForApp_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CancelLicenseForApp_Response {
    fn default() -> &'a CUserAccount_CancelLicenseForApp_Response {
        <CUserAccount_CancelLicenseForApp_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_CancelLicenseForApp_Response {
    pub fn new() -> CUserAccount_CancelLicenseForApp_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_CancelLicenseForApp_Response>(
            "CUserAccount_CancelLicenseForApp_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_CancelLicenseForApp_Response {
    const NAME: &'static str = "CUserAccount_CancelLicenseForApp_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CancelLicenseForApp_Response {
        CUserAccount_CancelLicenseForApp_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CancelLicenseForApp_Response {
        static instance: CUserAccount_CancelLicenseForApp_Response = CUserAccount_CancelLicenseForApp_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_CancelLicenseForApp_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_CancelLicenseForApp_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_CancelLicenseForApp_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_CancelLicenseForApp_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetUserCountry_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetUserCountry_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetUserCountry_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetUserCountry_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetUserCountry_Request {
    fn default() -> &'a CUserAccount_GetUserCountry_Request {
        <CUserAccount_GetUserCountry_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetUserCountry_Request {
    pub fn new() -> CUserAccount_GetUserCountry_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CUserAccount_GetUserCountry_Request| { &m.steamid },
            |m: &mut CUserAccount_GetUserCountry_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetUserCountry_Request>(
            "CUserAccount_GetUserCountry_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetUserCountry_Request {
    const NAME: &'static str = "CUserAccount_GetUserCountry_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetUserCountry_Request {
        CUserAccount_GetUserCountry_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetUserCountry_Request {
        static instance: CUserAccount_GetUserCountry_Request = CUserAccount_GetUserCountry_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetUserCountry_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetUserCountry_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetUserCountry_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetUserCountry_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetUserCountry_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetUserCountry_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetUserCountry_Response.country)
    pub country: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetUserCountry_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetUserCountry_Response {
    fn default() -> &'a CUserAccount_GetUserCountry_Response {
        <CUserAccount_GetUserCountry_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetUserCountry_Response {
    pub fn new() -> CUserAccount_GetUserCountry_Response {
        ::std::default::Default::default()
    }

    // optional string country = 1;

    pub fn country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country(&mut self) {
        self.country = ::std::option::Option::None;
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "country",
            |m: &CUserAccount_GetUserCountry_Response| { &m.country },
            |m: &mut CUserAccount_GetUserCountry_Response| { &mut m.country },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetUserCountry_Response>(
            "CUserAccount_GetUserCountry_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetUserCountry_Response {
    const NAME: &'static str = "CUserAccount_GetUserCountry_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.country = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.country.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.country.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetUserCountry_Response {
        CUserAccount_GetUserCountry_Response::new()
    }

    fn clear(&mut self) {
        self.country = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetUserCountry_Response {
        static instance: CUserAccount_GetUserCountry_Response = CUserAccount_GetUserCountry_Response {
            country: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetUserCountry_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetUserCountry_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetUserCountry_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetUserCountry_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_CreateFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CreateFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Request.invite_limit)
    pub invite_limit: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Request.invite_duration)
    pub invite_duration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Request.invite_note)
    pub invite_note: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CreateFriendInviteToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CreateFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_CreateFriendInviteToken_Request {
        <CUserAccount_CreateFriendInviteToken_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_CreateFriendInviteToken_Request {
    pub fn new() -> CUserAccount_CreateFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional uint32 invite_limit = 1;

    pub fn invite_limit(&self) -> u32 {
        self.invite_limit.unwrap_or(0)
    }

    pub fn clear_invite_limit(&mut self) {
        self.invite_limit = ::std::option::Option::None;
    }

    pub fn has_invite_limit(&self) -> bool {
        self.invite_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_limit(&mut self, v: u32) {
        self.invite_limit = ::std::option::Option::Some(v);
    }

    // optional uint32 invite_duration = 2;

    pub fn invite_duration(&self) -> u32 {
        self.invite_duration.unwrap_or(0)
    }

    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u32) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    // optional string invite_note = 3;

    pub fn invite_note(&self) -> &str {
        match self.invite_note.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_note(&mut self) {
        self.invite_note = ::std::option::Option::None;
    }

    pub fn has_invite_note(&self) -> bool {
        self.invite_note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_note(&mut self, v: ::std::string::String) {
        self.invite_note = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_note(&mut self) -> &mut ::std::string::String {
        if self.invite_note.is_none() {
            self.invite_note = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_note.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_note(&mut self) -> ::std::string::String {
        self.invite_note.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_limit",
            |m: &CUserAccount_CreateFriendInviteToken_Request| { &m.invite_limit },
            |m: &mut CUserAccount_CreateFriendInviteToken_Request| { &mut m.invite_limit },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_duration",
            |m: &CUserAccount_CreateFriendInviteToken_Request| { &m.invite_duration },
            |m: &mut CUserAccount_CreateFriendInviteToken_Request| { &mut m.invite_duration },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_note",
            |m: &CUserAccount_CreateFriendInviteToken_Request| { &m.invite_note },
            |m: &mut CUserAccount_CreateFriendInviteToken_Request| { &mut m.invite_note },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_CreateFriendInviteToken_Request>(
            "CUserAccount_CreateFriendInviteToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_CreateFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_CreateFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.invite_limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.invite_duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.invite_note = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_limit {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.invite_duration {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.invite_note.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invite_limit {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.invite_note.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CreateFriendInviteToken_Request {
        CUserAccount_CreateFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.invite_limit = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.invite_note = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CreateFriendInviteToken_Request {
        static instance: CUserAccount_CreateFriendInviteToken_Request = CUserAccount_CreateFriendInviteToken_Request {
            invite_limit: ::std::option::Option::None,
            invite_duration: ::std::option::Option::None,
            invite_note: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_CreateFriendInviteToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_CreateFriendInviteToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_CreateFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_CreateFriendInviteToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_CreateFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CreateFriendInviteToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.invite_limit)
    pub invite_limit: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.invite_duration)
    pub invite_duration: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.valid)
    pub valid: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CreateFriendInviteToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CreateFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_CreateFriendInviteToken_Response {
        <CUserAccount_CreateFriendInviteToken_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_CreateFriendInviteToken_Response {
    pub fn new() -> CUserAccount_CreateFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    // optional string invite_token = 1;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 invite_limit = 2;

    pub fn invite_limit(&self) -> u64 {
        self.invite_limit.unwrap_or(0)
    }

    pub fn clear_invite_limit(&mut self) {
        self.invite_limit = ::std::option::Option::None;
    }

    pub fn has_invite_limit(&self) -> bool {
        self.invite_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_limit(&mut self, v: u64) {
        self.invite_limit = ::std::option::Option::Some(v);
    }

    // optional uint64 invite_duration = 3;

    pub fn invite_duration(&self) -> u64 {
        self.invite_duration.unwrap_or(0)
    }

    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u64) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    // optional fixed32 time_created = 4;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional bool valid = 5;

    pub fn valid(&self) -> bool {
        self.valid.unwrap_or(false)
    }

    pub fn clear_valid(&mut self) {
        self.valid = ::std::option::Option::None;
    }

    pub fn has_valid(&self) -> bool {
        self.valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_token",
            |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.invite_token },
            |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.invite_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_limit",
            |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.invite_limit },
            |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.invite_limit },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_duration",
            |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.invite_duration },
            |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.invite_duration },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.time_created },
            |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.time_created },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "valid",
            |m: &CUserAccount_CreateFriendInviteToken_Response| { &m.valid },
            |m: &mut CUserAccount_CreateFriendInviteToken_Response| { &mut m.valid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_CreateFriendInviteToken_Response>(
            "CUserAccount_CreateFriendInviteToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_CreateFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_CreateFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.invite_limit = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.invite_duration = ::std::option::Option::Some(is.read_uint64()?);
                },
                37 => {
                    self.time_created = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.valid = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.invite_limit {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.invite_duration {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.time_created {
            my_size += 1 + 4;
        }
        if let Some(v) = self.valid {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.invite_limit {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.valid {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CreateFriendInviteToken_Response {
        CUserAccount_CreateFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.invite_token = ::std::option::Option::None;
        self.invite_limit = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.valid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CreateFriendInviteToken_Response {
        static instance: CUserAccount_CreateFriendInviteToken_Response = CUserAccount_CreateFriendInviteToken_Response {
            invite_token: ::std::option::Option::None,
            invite_limit: ::std::option::Option::None,
            invite_duration: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            valid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_CreateFriendInviteToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_CreateFriendInviteToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_CreateFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_CreateFriendInviteToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetFriendInviteTokens_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetFriendInviteTokens_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetFriendInviteTokens_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetFriendInviteTokens_Request {
    fn default() -> &'a CUserAccount_GetFriendInviteTokens_Request {
        <CUserAccount_GetFriendInviteTokens_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetFriendInviteTokens_Request {
    pub fn new() -> CUserAccount_GetFriendInviteTokens_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetFriendInviteTokens_Request>(
            "CUserAccount_GetFriendInviteTokens_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetFriendInviteTokens_Request {
    const NAME: &'static str = "CUserAccount_GetFriendInviteTokens_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetFriendInviteTokens_Request {
        CUserAccount_GetFriendInviteTokens_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetFriendInviteTokens_Request {
        static instance: CUserAccount_GetFriendInviteTokens_Request = CUserAccount_GetFriendInviteTokens_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetFriendInviteTokens_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetFriendInviteTokens_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetFriendInviteTokens_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetFriendInviteTokens_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_GetFriendInviteTokens_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetFriendInviteTokens_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetFriendInviteTokens_Response.tokens)
    pub tokens: ::std::vec::Vec<CUserAccount_CreateFriendInviteToken_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetFriendInviteTokens_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetFriendInviteTokens_Response {
    fn default() -> &'a CUserAccount_GetFriendInviteTokens_Response {
        <CUserAccount_GetFriendInviteTokens_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_GetFriendInviteTokens_Response {
    pub fn new() -> CUserAccount_GetFriendInviteTokens_Response {
        ::std::default::Default::default()
    }

    // repeated .CUserAccount_CreateFriendInviteToken_Response tokens = 1;

    pub fn tokens(&self) -> &[CUserAccount_CreateFriendInviteToken_Response] {
        &self.tokens
    }

    pub fn clear_tokens(&mut self) {
        self.tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_tokens(&mut self, v: ::std::vec::Vec<CUserAccount_CreateFriendInviteToken_Response>) {
        self.tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tokens(&mut self) -> &mut ::std::vec::Vec<CUserAccount_CreateFriendInviteToken_Response> {
        &mut self.tokens
    }

    // Take field
    pub fn take_tokens(&mut self) -> ::std::vec::Vec<CUserAccount_CreateFriendInviteToken_Response> {
        ::std::mem::replace(&mut self.tokens, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tokens",
            |m: &CUserAccount_GetFriendInviteTokens_Response| { &m.tokens },
            |m: &mut CUserAccount_GetFriendInviteTokens_Response| { &mut m.tokens },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_GetFriendInviteTokens_Response>(
            "CUserAccount_GetFriendInviteTokens_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_GetFriendInviteTokens_Response {
    const NAME: &'static str = "CUserAccount_GetFriendInviteTokens_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tokens.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.tokens {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetFriendInviteTokens_Response {
        CUserAccount_GetFriendInviteTokens_Response::new()
    }

    fn clear(&mut self) {
        self.tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetFriendInviteTokens_Response {
        static instance: CUserAccount_GetFriendInviteTokens_Response = CUserAccount_GetFriendInviteTokens_Response {
            tokens: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_GetFriendInviteTokens_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_GetFriendInviteTokens_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_GetFriendInviteTokens_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_GetFriendInviteTokens_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_ViewFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_ViewFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Request.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_ViewFriendInviteToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_ViewFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_ViewFriendInviteToken_Request {
        <CUserAccount_ViewFriendInviteToken_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_ViewFriendInviteToken_Request {
    pub fn new() -> CUserAccount_ViewFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string invite_token = 2;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CUserAccount_ViewFriendInviteToken_Request| { &m.steamid },
            |m: &mut CUserAccount_ViewFriendInviteToken_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_token",
            |m: &CUserAccount_ViewFriendInviteToken_Request| { &m.invite_token },
            |m: &mut CUserAccount_ViewFriendInviteToken_Request| { &mut m.invite_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_ViewFriendInviteToken_Request>(
            "CUserAccount_ViewFriendInviteToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_ViewFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_ViewFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.invite_token.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_ViewFriendInviteToken_Request {
        CUserAccount_ViewFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.invite_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_ViewFriendInviteToken_Request {
        static instance: CUserAccount_ViewFriendInviteToken_Request = CUserAccount_ViewFriendInviteToken_Request {
            steamid: ::std::option::Option::None,
            invite_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_ViewFriendInviteToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_ViewFriendInviteToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_ViewFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_ViewFriendInviteToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_ViewFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_ViewFriendInviteToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Response.valid)
    pub valid: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Response.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Response.invite_duration)
    pub invite_duration: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_ViewFriendInviteToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_ViewFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_ViewFriendInviteToken_Response {
        <CUserAccount_ViewFriendInviteToken_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_ViewFriendInviteToken_Response {
    pub fn new() -> CUserAccount_ViewFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    // optional bool valid = 1;

    pub fn valid(&self) -> bool {
        self.valid.unwrap_or(false)
    }

    pub fn clear_valid(&mut self) {
        self.valid = ::std::option::Option::None;
    }

    pub fn has_valid(&self) -> bool {
        self.valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 invite_duration = 3;

    pub fn invite_duration(&self) -> u64 {
        self.invite_duration.unwrap_or(0)
    }

    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u64) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "valid",
            |m: &CUserAccount_ViewFriendInviteToken_Response| { &m.valid },
            |m: &mut CUserAccount_ViewFriendInviteToken_Response| { &mut m.valid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CUserAccount_ViewFriendInviteToken_Response| { &m.steamid },
            |m: &mut CUserAccount_ViewFriendInviteToken_Response| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_duration",
            |m: &CUserAccount_ViewFriendInviteToken_Response| { &m.invite_duration },
            |m: &mut CUserAccount_ViewFriendInviteToken_Response| { &mut m.invite_duration },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_ViewFriendInviteToken_Response>(
            "CUserAccount_ViewFriendInviteToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_ViewFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_ViewFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.valid = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.invite_duration = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.valid {
            my_size += 1 + 1;
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.invite_duration {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.valid {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_ViewFriendInviteToken_Response {
        CUserAccount_ViewFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.valid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_ViewFriendInviteToken_Response {
        static instance: CUserAccount_ViewFriendInviteToken_Response = CUserAccount_ViewFriendInviteToken_Response {
            valid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            invite_duration: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_ViewFriendInviteToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_ViewFriendInviteToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_ViewFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_ViewFriendInviteToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_RedeemFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RedeemFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_RedeemFriendInviteToken_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RedeemFriendInviteToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RedeemFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_RedeemFriendInviteToken_Request {
        <CUserAccount_RedeemFriendInviteToken_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_RedeemFriendInviteToken_Request {
    pub fn new() -> CUserAccount_RedeemFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string invite_token = 2;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CUserAccount_RedeemFriendInviteToken_Request| { &m.steamid },
            |m: &mut CUserAccount_RedeemFriendInviteToken_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_token",
            |m: &CUserAccount_RedeemFriendInviteToken_Request| { &m.invite_token },
            |m: &mut CUserAccount_RedeemFriendInviteToken_Request| { &mut m.invite_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_RedeemFriendInviteToken_Request>(
            "CUserAccount_RedeemFriendInviteToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_RedeemFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_RedeemFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.invite_token.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RedeemFriendInviteToken_Request {
        CUserAccount_RedeemFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.invite_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RedeemFriendInviteToken_Request {
        static instance: CUserAccount_RedeemFriendInviteToken_Request = CUserAccount_RedeemFriendInviteToken_Request {
            steamid: ::std::option::Option::None,
            invite_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_RedeemFriendInviteToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_RedeemFriendInviteToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_RedeemFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_RedeemFriendInviteToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_RedeemFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RedeemFriendInviteToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RedeemFriendInviteToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RedeemFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_RedeemFriendInviteToken_Response {
        <CUserAccount_RedeemFriendInviteToken_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_RedeemFriendInviteToken_Response {
    pub fn new() -> CUserAccount_RedeemFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_RedeemFriendInviteToken_Response>(
            "CUserAccount_RedeemFriendInviteToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_RedeemFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_RedeemFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RedeemFriendInviteToken_Response {
        CUserAccount_RedeemFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RedeemFriendInviteToken_Response {
        static instance: CUserAccount_RedeemFriendInviteToken_Response = CUserAccount_RedeemFriendInviteToken_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_RedeemFriendInviteToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_RedeemFriendInviteToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_RedeemFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_RedeemFriendInviteToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_RevokeFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RevokeFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RevokeFriendInviteToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RevokeFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_RevokeFriendInviteToken_Request {
        <CUserAccount_RevokeFriendInviteToken_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_RevokeFriendInviteToken_Request {
    pub fn new() -> CUserAccount_RevokeFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional string invite_token = 1;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_token",
            |m: &CUserAccount_RevokeFriendInviteToken_Request| { &m.invite_token },
            |m: &mut CUserAccount_RevokeFriendInviteToken_Request| { &mut m.invite_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_RevokeFriendInviteToken_Request>(
            "CUserAccount_RevokeFriendInviteToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_RevokeFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_RevokeFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RevokeFriendInviteToken_Request {
        CUserAccount_RevokeFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.invite_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RevokeFriendInviteToken_Request {
        static instance: CUserAccount_RevokeFriendInviteToken_Request = CUserAccount_RevokeFriendInviteToken_Request {
            invite_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_RevokeFriendInviteToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_RevokeFriendInviteToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_RevokeFriendInviteToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_RevokeFriendInviteToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_RevokeFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RevokeFriendInviteToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RevokeFriendInviteToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RevokeFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_RevokeFriendInviteToken_Response {
        <CUserAccount_RevokeFriendInviteToken_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_RevokeFriendInviteToken_Response {
    pub fn new() -> CUserAccount_RevokeFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_RevokeFriendInviteToken_Response>(
            "CUserAccount_RevokeFriendInviteToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_RevokeFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_RevokeFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RevokeFriendInviteToken_Response {
        CUserAccount_RevokeFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RevokeFriendInviteToken_Response {
        static instance: CUserAccount_RevokeFriendInviteToken_Response = CUserAccount_RevokeFriendInviteToken_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_RevokeFriendInviteToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_RevokeFriendInviteToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_RevokeFriendInviteToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_RevokeFriendInviteToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_RegisterCompatTool_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RegisterCompatTool_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_RegisterCompatTool_Request.compat_tool)
    pub compat_tool: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RegisterCompatTool_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RegisterCompatTool_Request {
    fn default() -> &'a CUserAccount_RegisterCompatTool_Request {
        <CUserAccount_RegisterCompatTool_Request as crate::Message>::default_instance()
    }
}

impl CUserAccount_RegisterCompatTool_Request {
    pub fn new() -> CUserAccount_RegisterCompatTool_Request {
        ::std::default::Default::default()
    }

    // optional uint32 compat_tool = 1;

    pub fn compat_tool(&self) -> u32 {
        self.compat_tool.unwrap_or(0)
    }

    pub fn clear_compat_tool(&mut self) {
        self.compat_tool = ::std::option::Option::None;
    }

    pub fn has_compat_tool(&self) -> bool {
        self.compat_tool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compat_tool(&mut self, v: u32) {
        self.compat_tool = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "compat_tool",
            |m: &CUserAccount_RegisterCompatTool_Request| { &m.compat_tool },
            |m: &mut CUserAccount_RegisterCompatTool_Request| { &mut m.compat_tool },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_RegisterCompatTool_Request>(
            "CUserAccount_RegisterCompatTool_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_RegisterCompatTool_Request {
    const NAME: &'static str = "CUserAccount_RegisterCompatTool_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.compat_tool = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.compat_tool {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.compat_tool {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RegisterCompatTool_Request {
        CUserAccount_RegisterCompatTool_Request::new()
    }

    fn clear(&mut self) {
        self.compat_tool = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RegisterCompatTool_Request {
        static instance: CUserAccount_RegisterCompatTool_Request = CUserAccount_RegisterCompatTool_Request {
            compat_tool: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_RegisterCompatTool_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_RegisterCompatTool_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_RegisterCompatTool_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_RegisterCompatTool_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserAccount_RegisterCompatTool_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RegisterCompatTool_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RegisterCompatTool_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RegisterCompatTool_Response {
    fn default() -> &'a CUserAccount_RegisterCompatTool_Response {
        <CUserAccount_RegisterCompatTool_Response as crate::Message>::default_instance()
    }
}

impl CUserAccount_RegisterCompatTool_Response {
    pub fn new() -> CUserAccount_RegisterCompatTool_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CUserAccount_RegisterCompatTool_Response>(
            "CUserAccount_RegisterCompatTool_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CUserAccount_RegisterCompatTool_Response {
    const NAME: &'static str = "CUserAccount_RegisterCompatTool_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RegisterCompatTool_Response {
        CUserAccount_RegisterCompatTool_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RegisterCompatTool_Response {
        static instance: CUserAccount_RegisterCompatTool_Response = CUserAccount_RegisterCompatTool_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CUserAccount_RegisterCompatTool_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserAccount_RegisterCompatTool_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserAccount_RegisterCompatTool_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CUserAccount_RegisterCompatTool_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountLinking_GetLinkedAccountInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountLinking_GetLinkedAccountInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.account_type)
    pub account_type: ::std::option::Option<crate::EnumOrUnknown<EInternalAccountType>>,
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.account_id)
    pub account_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.filter)
    pub filter: ::std::option::Option<crate::EnumOrUnknown<EExternalAccountType>>,
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.return_access_token)
    pub return_access_token: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountLinking_GetLinkedAccountInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Request {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Request {
        <CAccountLinking_GetLinkedAccountInfo_Request as crate::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Request {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Request {
        ::std::default::Default::default()
    }

    // optional .EInternalAccountType account_type = 1;

    pub fn account_type(&self) -> EInternalAccountType {
        match self.account_type {
            Some(e) => e.enum_value_or(EInternalAccountType::k_EInternalSteamAccountType),
            None => EInternalAccountType::k_EInternalSteamAccountType,
        }
    }

    pub fn clear_account_type(&mut self) {
        self.account_type = ::std::option::Option::None;
    }

    pub fn has_account_type(&self) -> bool {
        self.account_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_type(&mut self, v: EInternalAccountType) {
        self.account_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint64 account_id = 2;

    pub fn account_id(&self) -> u64 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u64) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional .EExternalAccountType filter = 3;

    pub fn filter(&self) -> EExternalAccountType {
        match self.filter {
            Some(e) => e.enum_value_or(EExternalAccountType::k_EExternalNone),
            None => EExternalAccountType::k_EExternalNone,
        }
    }

    pub fn clear_filter(&mut self) {
        self.filter = ::std::option::Option::None;
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: EExternalAccountType) {
        self.filter = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool return_access_token = 4;

    pub fn return_access_token(&self) -> bool {
        self.return_access_token.unwrap_or(false)
    }

    pub fn clear_return_access_token(&mut self) {
        self.return_access_token = ::std::option::Option::None;
    }

    pub fn has_return_access_token(&self) -> bool {
        self.return_access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_return_access_token(&mut self, v: bool) {
        self.return_access_token = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_type",
            |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.account_type },
            |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.account_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_id",
            |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.account_id },
            |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.account_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "filter",
            |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.filter },
            |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.filter },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "return_access_token",
            |m: &CAccountLinking_GetLinkedAccountInfo_Request| { &m.return_access_token },
            |m: &mut CAccountLinking_GetLinkedAccountInfo_Request| { &mut m.return_access_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountLinking_GetLinkedAccountInfo_Request>(
            "CAccountLinking_GetLinkedAccountInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountLinking_GetLinkedAccountInfo_Request {
    const NAME: &'static str = "CAccountLinking_GetLinkedAccountInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.filter = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.return_access_token = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_type {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.account_id {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.filter {
            my_size += crate::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.return_access_token {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.account_type {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.account_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.filter {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.return_access_token {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Request {
        CAccountLinking_GetLinkedAccountInfo_Request::new()
    }

    fn clear(&mut self) {
        self.account_type = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.filter = ::std::option::Option::None;
        self.return_access_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Request {
        static instance: CAccountLinking_GetLinkedAccountInfo_Request = CAccountLinking_GetLinkedAccountInfo_Request {
            account_type: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            filter: ::std::option::Option::None,
            return_access_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountLinking_GetLinkedAccountInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountLinking_GetLinkedAccountInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountLinking_GetLinkedAccountInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountLinking_GetLinkedAccountInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAccountLinking_GetLinkedAccountInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountLinking_GetLinkedAccountInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
    pub external_accounts: ::std::vec::Vec<caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountLinking_GetLinkedAccountInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Response {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Response {
        <CAccountLinking_GetLinkedAccountInfo_Response as crate::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Response {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Response {
        ::std::default::Default::default()
    }

    // repeated .CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;

    pub fn external_accounts(&self) -> &[caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response] {
        &self.external_accounts
    }

    pub fn clear_external_accounts(&mut self) {
        self.external_accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_accounts(&mut self, v: ::std::vec::Vec<caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response>) {
        self.external_accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_external_accounts(&mut self) -> &mut ::std::vec::Vec<caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response> {
        &mut self.external_accounts
    }

    // Take field
    pub fn take_external_accounts(&mut self) -> ::std::vec::Vec<caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response> {
        ::std::mem::replace(&mut self.external_accounts, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "external_accounts",
            |m: &CAccountLinking_GetLinkedAccountInfo_Response| { &m.external_accounts },
            |m: &mut CAccountLinking_GetLinkedAccountInfo_Response| { &mut m.external_accounts },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAccountLinking_GetLinkedAccountInfo_Response>(
            "CAccountLinking_GetLinkedAccountInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAccountLinking_GetLinkedAccountInfo_Response {
    const NAME: &'static str = "CAccountLinking_GetLinkedAccountInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.external_accounts.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.external_accounts {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.external_accounts {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Response {
        CAccountLinking_GetLinkedAccountInfo_Response::new()
    }

    fn clear(&mut self) {
        self.external_accounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Response {
        static instance: CAccountLinking_GetLinkedAccountInfo_Response = CAccountLinking_GetLinkedAccountInfo_Response {
            external_accounts: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAccountLinking_GetLinkedAccountInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAccountLinking_GetLinkedAccountInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAccountLinking_GetLinkedAccountInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAccountLinking_GetLinkedAccountInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CAccountLinking_GetLinkedAccountInfo_Response`
pub mod caccount_linking_get_linked_account_info_response {
    // @@protoc_insertion_point(message:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CExternalAccountTuple_Response {
        // message fields
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type)
        pub external_type: ::std::option::Option<crate::EnumOrUnknown<super::EExternalAccountType>>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
        pub external_id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
        pub external_user_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
        pub external_url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
        pub access_token: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
        pub access_token_secret: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.is_valid)
        pub is_valid: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CExternalAccountTuple_Response {
        fn default() -> &'a CExternalAccountTuple_Response {
            <CExternalAccountTuple_Response as crate::Message>::default_instance()
        }
    }

    impl CExternalAccountTuple_Response {
        pub fn new() -> CExternalAccountTuple_Response {
            ::std::default::Default::default()
        }

        // optional .EExternalAccountType external_type = 1;

        pub fn external_type(&self) -> super::EExternalAccountType {
            match self.external_type {
                Some(e) => e.enum_value_or(super::EExternalAccountType::k_EExternalNone),
                None => super::EExternalAccountType::k_EExternalNone,
            }
        }

        pub fn clear_external_type(&mut self) {
            self.external_type = ::std::option::Option::None;
        }

        pub fn has_external_type(&self) -> bool {
            self.external_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_type(&mut self, v: super::EExternalAccountType) {
            self.external_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        // optional string external_id = 2;

        pub fn external_id(&self) -> &str {
            match self.external_id.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_external_id(&mut self) {
            self.external_id = ::std::option::Option::None;
        }

        pub fn has_external_id(&self) -> bool {
            self.external_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_id(&mut self, v: ::std::string::String) {
            self.external_id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_external_id(&mut self) -> &mut ::std::string::String {
            if self.external_id.is_none() {
                self.external_id = ::std::option::Option::Some(::std::string::String::new());
            }
            self.external_id.as_mut().unwrap()
        }

        // Take field
        pub fn take_external_id(&mut self) -> ::std::string::String {
            self.external_id.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string external_user_name = 3;

        pub fn external_user_name(&self) -> &str {
            match self.external_user_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_external_user_name(&mut self) {
            self.external_user_name = ::std::option::Option::None;
        }

        pub fn has_external_user_name(&self) -> bool {
            self.external_user_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_user_name(&mut self, v: ::std::string::String) {
            self.external_user_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_external_user_name(&mut self) -> &mut ::std::string::String {
            if self.external_user_name.is_none() {
                self.external_user_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.external_user_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_external_user_name(&mut self) -> ::std::string::String {
            self.external_user_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string external_url = 4;

        pub fn external_url(&self) -> &str {
            match self.external_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_external_url(&mut self) {
            self.external_url = ::std::option::Option::None;
        }

        pub fn has_external_url(&self) -> bool {
            self.external_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_url(&mut self, v: ::std::string::String) {
            self.external_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_external_url(&mut self) -> &mut ::std::string::String {
            if self.external_url.is_none() {
                self.external_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.external_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_external_url(&mut self) -> ::std::string::String {
            self.external_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string access_token = 5;

        pub fn access_token(&self) -> &str {
            match self.access_token.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_access_token(&mut self) {
            self.access_token = ::std::option::Option::None;
        }

        pub fn has_access_token(&self) -> bool {
            self.access_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token(&mut self, v: ::std::string::String) {
            self.access_token = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
            if self.access_token.is_none() {
                self.access_token = ::std::option::Option::Some(::std::string::String::new());
            }
            self.access_token.as_mut().unwrap()
        }

        // Take field
        pub fn take_access_token(&mut self) -> ::std::string::String {
            self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string access_token_secret = 6;

        pub fn access_token_secret(&self) -> &str {
            match self.access_token_secret.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_access_token_secret(&mut self) {
            self.access_token_secret = ::std::option::Option::None;
        }

        pub fn has_access_token_secret(&self) -> bool {
            self.access_token_secret.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token_secret(&mut self, v: ::std::string::String) {
            self.access_token_secret = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_access_token_secret(&mut self) -> &mut ::std::string::String {
            if self.access_token_secret.is_none() {
                self.access_token_secret = ::std::option::Option::Some(::std::string::String::new());
            }
            self.access_token_secret.as_mut().unwrap()
        }

        // Take field
        pub fn take_access_token_secret(&mut self) -> ::std::string::String {
            self.access_token_secret.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool is_valid = 7;

        pub fn is_valid(&self) -> bool {
            self.is_valid.unwrap_or(false)
        }

        pub fn clear_is_valid(&mut self) {
            self.is_valid = ::std::option::Option::None;
        }

        pub fn has_is_valid(&self) -> bool {
            self.is_valid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_valid(&mut self, v: bool) {
            self.is_valid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "external_type",
                |m: &CExternalAccountTuple_Response| { &m.external_type },
                |m: &mut CExternalAccountTuple_Response| { &mut m.external_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "external_id",
                |m: &CExternalAccountTuple_Response| { &m.external_id },
                |m: &mut CExternalAccountTuple_Response| { &mut m.external_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "external_user_name",
                |m: &CExternalAccountTuple_Response| { &m.external_user_name },
                |m: &mut CExternalAccountTuple_Response| { &mut m.external_user_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "external_url",
                |m: &CExternalAccountTuple_Response| { &m.external_url },
                |m: &mut CExternalAccountTuple_Response| { &mut m.external_url },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "access_token",
                |m: &CExternalAccountTuple_Response| { &m.access_token },
                |m: &mut CExternalAccountTuple_Response| { &mut m.access_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "access_token_secret",
                |m: &CExternalAccountTuple_Response| { &m.access_token_secret },
                |m: &mut CExternalAccountTuple_Response| { &mut m.access_token_secret },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_valid",
                |m: &CExternalAccountTuple_Response| { &m.is_valid },
                |m: &mut CExternalAccountTuple_Response| { &mut m.is_valid },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<CExternalAccountTuple_Response>(
                "CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for CExternalAccountTuple_Response {
        const NAME: &'static str = "CExternalAccountTuple_Response";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.external_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    18 => {
                        self.external_id = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.external_user_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.external_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.access_token = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.access_token_secret = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.is_valid = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.external_type {
                my_size += crate::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.external_id.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.external_user_name.as_ref() {
                my_size += crate::rt::string_size(3, &v);
            }
            if let Some(v) = self.external_url.as_ref() {
                my_size += crate::rt::string_size(4, &v);
            }
            if let Some(v) = self.access_token.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.access_token_secret.as_ref() {
                my_size += crate::rt::string_size(6, &v);
            }
            if let Some(v) = self.is_valid {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.external_type {
                os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.external_id.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.external_user_name.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.external_url.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.access_token.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.access_token_secret.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.is_valid {
                os.write_bool(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CExternalAccountTuple_Response {
            CExternalAccountTuple_Response::new()
        }

        fn clear(&mut self) {
            self.external_type = ::std::option::Option::None;
            self.external_id = ::std::option::Option::None;
            self.external_user_name = ::std::option::Option::None;
            self.external_url = ::std::option::Option::None;
            self.access_token = ::std::option::Option::None;
            self.access_token_secret = ::std::option::Option::None;
            self.is_valid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CExternalAccountTuple_Response {
            static instance: CExternalAccountTuple_Response = CExternalAccountTuple_Response {
                external_type: ::std::option::Option::None,
                external_id: ::std::option::Option::None,
                external_user_name: ::std::option::Option::None,
                external_url: ::std::option::Option::None,
                access_token: ::std::option::Option::None,
                access_token_secret: ::std::option::Option::None,
                is_valid: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for CExternalAccountTuple_Response {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CExternalAccountTuple_Response {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for CExternalAccountTuple_Response {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CEmbeddedClient_AuthorizeCurrentDevice_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEmbeddedClient_AuthorizeCurrentDevice_Request {
    // message fields
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
    pub device_info: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.deviceid)
    pub deviceid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CEmbeddedClient_AuthorizeCurrentDevice_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn default() -> &'a CEmbeddedClient_AuthorizeCurrentDevice_Request {
        <CEmbeddedClient_AuthorizeCurrentDevice_Request as crate::Message>::default_instance()
    }
}

impl CEmbeddedClient_AuthorizeCurrentDevice_Request {
    pub fn new() -> CEmbeddedClient_AuthorizeCurrentDevice_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string device_info = 3;

    pub fn device_info(&self) -> &str {
        match self.device_info.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_info(&mut self) {
        self.device_info = ::std::option::Option::None;
    }

    pub fn has_device_info(&self) -> bool {
        self.device_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_info(&mut self, v: ::std::string::String) {
        self.device_info = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_info(&mut self) -> &mut ::std::string::String {
        if self.device_info.is_none() {
            self.device_info = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_info(&mut self) -> ::std::string::String {
        self.device_info.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 deviceid = 4;

    pub fn deviceid(&self) -> u32 {
        self.deviceid.unwrap_or(0)
    }

    pub fn clear_deviceid(&mut self) {
        self.deviceid = ::std::option::Option::None;
    }

    pub fn has_deviceid(&self) -> bool {
        self.deviceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deviceid(&mut self, v: u32) {
        self.deviceid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.steamid },
            |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.appid },
            |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "device_info",
            |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.device_info },
            |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.device_info },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "deviceid",
            |m: &CEmbeddedClient_AuthorizeCurrentDevice_Request| { &m.deviceid },
            |m: &mut CEmbeddedClient_AuthorizeCurrentDevice_Request| { &mut m.deviceid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CEmbeddedClient_AuthorizeCurrentDevice_Request>(
            "CEmbeddedClient_AuthorizeCurrentDevice_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    const NAME: &'static str = "CEmbeddedClient_AuthorizeCurrentDevice_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.device_info = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.deviceid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.device_info.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.deviceid {
            my_size += crate::rt::uint32_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.device_info.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.deviceid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEmbeddedClient_AuthorizeCurrentDevice_Request {
        CEmbeddedClient_AuthorizeCurrentDevice_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.device_info = ::std::option::Option::None;
        self.deviceid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEmbeddedClient_AuthorizeCurrentDevice_Request {
        static instance: CEmbeddedClient_AuthorizeCurrentDevice_Request = CEmbeddedClient_AuthorizeCurrentDevice_Request {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            device_info: ::std::option::Option::None,
            deviceid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEmbeddedClient_AuthorizeCurrentDevice_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEmbeddedClient_Token)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEmbeddedClient_Token {
    // message fields
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.client_token)
    pub client_token: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.expiry)
    pub expiry: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.deviceid)
    pub deviceid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CEmbeddedClient_Token.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_Token {
    fn default() -> &'a CEmbeddedClient_Token {
        <CEmbeddedClient_Token as crate::Message>::default_instance()
    }
}

impl CEmbeddedClient_Token {
    pub fn new() -> CEmbeddedClient_Token {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes client_token = 2;

    pub fn client_token(&self) -> &[u8] {
        match self.client_token.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_client_token(&mut self) {
        self.client_token = ::std::option::Option::None;
    }

    pub fn has_client_token(&self) -> bool {
        self.client_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_token(&mut self, v: ::bytes::Bytes) {
        self.client_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_token(&mut self) -> &mut ::bytes::Bytes {
        if self.client_token.is_none() {
            self.client_token = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.client_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_token(&mut self) -> ::bytes::Bytes {
        self.client_token.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional uint32 expiry = 3;

    pub fn expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }

    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }

    // optional uint32 deviceid = 4;

    pub fn deviceid(&self) -> u32 {
        self.deviceid.unwrap_or(0)
    }

    pub fn clear_deviceid(&mut self) {
        self.deviceid = ::std::option::Option::None;
    }

    pub fn has_deviceid(&self) -> bool {
        self.deviceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deviceid(&mut self, v: u32) {
        self.deviceid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CEmbeddedClient_Token| { &m.steamid },
            |m: &mut CEmbeddedClient_Token| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_token",
            |m: &CEmbeddedClient_Token| { &m.client_token },
            |m: &mut CEmbeddedClient_Token| { &mut m.client_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiry",
            |m: &CEmbeddedClient_Token| { &m.expiry },
            |m: &mut CEmbeddedClient_Token| { &mut m.expiry },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "deviceid",
            |m: &CEmbeddedClient_Token| { &m.deviceid },
            |m: &mut CEmbeddedClient_Token| { &mut m.deviceid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CEmbeddedClient_Token>(
            "CEmbeddedClient_Token",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CEmbeddedClient_Token {
    const NAME: &'static str = "CEmbeddedClient_Token";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.client_token = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                24 => {
                    self.expiry = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.deviceid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_token.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.expiry {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.deviceid {
            my_size += crate::rt::uint32_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_token.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.deviceid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEmbeddedClient_Token {
        CEmbeddedClient_Token::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.client_token = ::std::option::Option::None;
        self.expiry = ::std::option::Option::None;
        self.deviceid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEmbeddedClient_Token {
        static instance: CEmbeddedClient_Token = CEmbeddedClient_Token {
            steamid: ::std::option::Option::None,
            client_token: ::std::option::Option::None,
            expiry: ::std::option::Option::None,
            deviceid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CEmbeddedClient_Token {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEmbeddedClient_Token").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEmbeddedClient_Token {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CEmbeddedClient_Token {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CEmbeddedClient_AuthorizeDevice_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEmbeddedClient_AuthorizeDevice_Response {
    // message fields
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeDevice_Response.result)
    pub result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeDevice_Response.token)
    pub token: crate::MessageField<CEmbeddedClient_Token>,
    // special fields
    // @@protoc_insertion_point(special_field:CEmbeddedClient_AuthorizeDevice_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_AuthorizeDevice_Response {
    fn default() -> &'a CEmbeddedClient_AuthorizeDevice_Response {
        <CEmbeddedClient_AuthorizeDevice_Response as crate::Message>::default_instance()
    }
}

impl CEmbeddedClient_AuthorizeDevice_Response {
    pub fn new() -> CEmbeddedClient_AuthorizeDevice_Response {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional .CEmbeddedClient_Token token = 2;

    pub fn token(&self) -> &CEmbeddedClient_Token {
        self.token.as_ref().unwrap_or_else(|| <CEmbeddedClient_Token as crate::Message>::default_instance())
    }

    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: CEmbeddedClient_Token) {
        self.token = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut CEmbeddedClient_Token {
        self.token.mut_or_insert_default()
    }

    // Take field
    pub fn take_token(&mut self) -> CEmbeddedClient_Token {
        self.token.take().unwrap_or_else(|| CEmbeddedClient_Token::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &CEmbeddedClient_AuthorizeDevice_Response| { &m.result },
            |m: &mut CEmbeddedClient_AuthorizeDevice_Response| { &mut m.result },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CEmbeddedClient_Token>(
            "token",
            |m: &CEmbeddedClient_AuthorizeDevice_Response| { &m.token },
            |m: &mut CEmbeddedClient_AuthorizeDevice_Response| { &mut m.token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CEmbeddedClient_AuthorizeDevice_Response>(
            "CEmbeddedClient_AuthorizeDevice_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CEmbeddedClient_AuthorizeDevice_Response {
    const NAME: &'static str = "CEmbeddedClient_AuthorizeDevice_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.token)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.token.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEmbeddedClient_AuthorizeDevice_Response {
        CEmbeddedClient_AuthorizeDevice_Response::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEmbeddedClient_AuthorizeDevice_Response {
        static instance: CEmbeddedClient_AuthorizeDevice_Response = CEmbeddedClient_AuthorizeDevice_Response {
            result: ::std::option::Option::None,
            token: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CEmbeddedClient_AuthorizeDevice_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CEmbeddedClient_AuthorizeDevice_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CEmbeddedClient_AuthorizeDevice_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CEmbeddedClient_AuthorizeDevice_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EInternalAccountType)
pub enum EInternalAccountType {
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalSteamAccountType)
    k_EInternalSteamAccountType = 1,
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalClanType)
    k_EInternalClanType = 2,
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalAppType)
    k_EInternalAppType = 3,
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalBroadcastChannelType)
    k_EInternalBroadcastChannelType = 4,
}

impl crate::Enum for EInternalAccountType {
    const NAME: &'static str = "EInternalAccountType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EInternalAccountType> {
        match value {
            1 => ::std::option::Option::Some(EInternalAccountType::k_EInternalSteamAccountType),
            2 => ::std::option::Option::Some(EInternalAccountType::k_EInternalClanType),
            3 => ::std::option::Option::Some(EInternalAccountType::k_EInternalAppType),
            4 => ::std::option::Option::Some(EInternalAccountType::k_EInternalBroadcastChannelType),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EInternalAccountType> {
        match str {
            "k_EInternalSteamAccountType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalSteamAccountType),
            "k_EInternalClanType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalClanType),
            "k_EInternalAppType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalAppType),
            "k_EInternalBroadcastChannelType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalBroadcastChannelType),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EInternalAccountType] = &[
        EInternalAccountType::k_EInternalSteamAccountType,
        EInternalAccountType::k_EInternalClanType,
        EInternalAccountType::k_EInternalAppType,
        EInternalAccountType::k_EInternalBroadcastChannelType,
    ];
}

impl crate::EnumFull for EInternalAccountType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EInternalAccountType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EInternalAccountType::k_EInternalSteamAccountType => 0,
            EInternalAccountType::k_EInternalClanType => 1,
            EInternalAccountType::k_EInternalAppType => 2,
            EInternalAccountType::k_EInternalBroadcastChannelType => 3,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EInternalAccountType {
    fn default() -> Self {
        EInternalAccountType::k_EInternalSteamAccountType
    }
}

impl EInternalAccountType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EInternalAccountType>("EInternalAccountType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EExternalAccountType)
pub enum EExternalAccountType {
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalNone)
    k_EExternalNone = 0,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalSteamAccount)
    k_EExternalSteamAccount = 1,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalGoogleAccount)
    k_EExternalGoogleAccount = 2,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalFacebookAccount)
    k_EExternalFacebookAccount = 3,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalTwitterAccount)
    k_EExternalTwitterAccount = 4,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalTwitchAccount)
    k_EExternalTwitchAccount = 5,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalYouTubeChannelAccount)
    k_EExternalYouTubeChannelAccount = 6,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalFacebookPage)
    k_EExternalFacebookPage = 7,
}

impl crate::Enum for EExternalAccountType {
    const NAME: &'static str = "EExternalAccountType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EExternalAccountType> {
        match value {
            0 => ::std::option::Option::Some(EExternalAccountType::k_EExternalNone),
            1 => ::std::option::Option::Some(EExternalAccountType::k_EExternalSteamAccount),
            2 => ::std::option::Option::Some(EExternalAccountType::k_EExternalGoogleAccount),
            3 => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookAccount),
            4 => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitterAccount),
            5 => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitchAccount),
            6 => ::std::option::Option::Some(EExternalAccountType::k_EExternalYouTubeChannelAccount),
            7 => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookPage),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EExternalAccountType> {
        match str {
            "k_EExternalNone" => ::std::option::Option::Some(EExternalAccountType::k_EExternalNone),
            "k_EExternalSteamAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalSteamAccount),
            "k_EExternalGoogleAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalGoogleAccount),
            "k_EExternalFacebookAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookAccount),
            "k_EExternalTwitterAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitterAccount),
            "k_EExternalTwitchAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitchAccount),
            "k_EExternalYouTubeChannelAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalYouTubeChannelAccount),
            "k_EExternalFacebookPage" => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookPage),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EExternalAccountType] = &[
        EExternalAccountType::k_EExternalNone,
        EExternalAccountType::k_EExternalSteamAccount,
        EExternalAccountType::k_EExternalGoogleAccount,
        EExternalAccountType::k_EExternalFacebookAccount,
        EExternalAccountType::k_EExternalTwitterAccount,
        EExternalAccountType::k_EExternalTwitchAccount,
        EExternalAccountType::k_EExternalYouTubeChannelAccount,
        EExternalAccountType::k_EExternalFacebookPage,
    ];
}

impl crate::EnumFull for EExternalAccountType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EExternalAccountType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EExternalAccountType {
    fn default() -> Self {
        EExternalAccountType::k_EExternalNone
    }
}

impl EExternalAccountType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EExternalAccountType>("EExternalAccountType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+steammessages_useraccount.steamclient.proto\x1a\x18steammessages_base\
    .proto\x1a,steammessages_unified_base.steamclient.proto\"]\n8CUserAccoun\
    t_GetAvailableValveDiscountPromotions_Request\x12!\n\x0ccountry_code\x18\
    \x01\x20\x01(\tR\x0bcountryCode\"\xe0\x05\n9CUserAccount_GetAvailableVal\
    veDiscountPromotions_Response\x12x\n\npromotions\x18\x01\x20\x03(\x0b2X.\
    CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountP\
    romotionDetailsR\npromotions\x1a\xa8\x04\n\x1dValveDiscountPromotionDeta\
    ils\x12\x20\n\x0bpromotionid\x18\x01\x20\x01(\rR\x0bpromotionid\x123\n\
    \x15promotion_description\x18\x02\x20\x01(\tR\x14promotionDescription\
    \x12.\n\x13minimum_cart_amount\x18\x03\x20\x01(\x03R\x11minimumCartAmoun\
    t\x12D\n\x1fminimum_cart_amount_for_display\x18\x04\x20\x01(\x03R\x1bmin\
    imumCartAmountForDisplay\x12'\n\x0fdiscount_amount\x18\x05\x20\x01(\x03R\
    \x0ediscountAmount\x12#\n\rcurrency_code\x18\x06\x20\x01(\x05R\x0ccurren\
    cyCode\x12.\n\x13available_use_count\x18\x07\x20\x01(\x05R\x11availableU\
    seCount\x12:\n\x19promotional_discount_type\x18\x08\x20\x01(\x05R\x17pro\
    motionalDiscountType\x12*\n\x11loyalty_reward_id\x18\t\x20\x01(\x05R\x0f\
    loyaltyRewardId\x120\n\x14localized_name_token\x18\n\x20\x01(\tR\x12loca\
    lizedNameToken\x12\"\n\rmax_use_count\x18\x0b\x20\x01(\x05R\x0bmaxUseCou\
    nt\"\xc6\x01\n+CUserAccount_GetClientWalletDetails_Request\x123\n\x16inc\
    lude_balance_in_usd\x18\x01\x20\x01(\x08R\x13includeBalanceInUsd\x12&\n\
    \rwallet_region\x18\x02\x20\x01(\x05:\x011R\x0cwalletRegion\x12:\n\x19in\
    clude_formatted_balance\x18\x03\x20\x01(\x08R\x17includeFormattedBalance\
    \"\xf6\x04\n&CUserAccount_GetWalletDetails_Response\x12\x1d\n\nhas_walle\
    t\x18\x01\x20\x01(\x08R\thasWallet\x12*\n\x11user_country_code\x18\x02\
    \x20\x01(\tR\x0fuserCountryCode\x12.\n\x13wallet_country_code\x18\x03\
    \x20\x01(\tR\x11walletCountryCode\x12!\n\x0cwallet_state\x18\x04\x20\x01\
    (\tR\x0bwalletState\x12\x18\n\x07balance\x18\x05\x20\x01(\x03R\x07balanc\
    e\x12'\n\x0fdelayed_balance\x18\x06\x20\x01(\x03R\x0edelayedBalance\x12#\
    \n\rcurrency_code\x18\x07\x20\x01(\x05R\x0ccurrencyCode\x12/\n\x14time_m\
    ost_recent_txn\x18\x08\x20\x01(\rR\x11timeMostRecentTxn\x12*\n\x11most_r\
    ecent_txnid\x18\t\x20\x01(\x04R\x0fmostRecentTxnid\x12$\n\x0ebalance_in_\
    usd\x18\n\x20\x01(\x03R\x0cbalanceInUsd\x123\n\x16delayed_balance_in_usd\
    \x18\x0b\x20\x01(\x03R\x13delayedBalanceInUsd\x12<\n\x1bhas_wallet_in_ot\
    her_regions\x18\x0c\x20\x01(\x08R\x17hasWalletInOtherRegions\x12#\n\roth\
    er_regions\x18\r\x20\x03(\x05R\x0cotherRegions\x12+\n\x11formatted_balan\
    ce\x18\x0e\x20\x01(\tR\x10formattedBalance\"+\n)CUserAccount_GetAccountL\
    inkStatus_Request\"\xb3\x01\n*CUserAccount_GetAccountLinkStatus_Response\
    \x12\x12\n\x04pwid\x18\x01\x20\x01(\rR\x04pwid\x123\n\x15identity_verifi\
    cation\x18\x02\x20\x01(\rR\x14identityVerification\x12<\n\x1aperformed_a\
    ge_verification\x18\x03\x20\x01(\x08R\x18performedAgeVerification\"@\n(C\
    UserAccount_CancelLicenseForApp_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\"+\n)CUserAccount_CancelLicenseForApp_Response\"?\n#CU\
    serAccount_GetUserCountry_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x06R\x07steamid\"@\n$CUserAccount_GetUserCountry_Response\x12\x18\n\x07\
    country\x18\x01\x20\x01(\tR\x07country\"\x9b\x01\n,CUserAccount_CreateFr\
    iendInviteToken_Request\x12!\n\x0cinvite_limit\x18\x01\x20\x01(\rR\x0bin\
    viteLimit\x12'\n\x0finvite_duration\x18\x02\x20\x01(\rR\x0einviteDuratio\
    n\x12\x1f\n\x0binvite_note\x18\x03\x20\x01(\tR\ninviteNote\"\xd7\x01\n-C\
    UserAccount_CreateFriendInviteToken_Response\x12!\n\x0cinvite_token\x18\
    \x01\x20\x01(\tR\x0binviteToken\x12!\n\x0cinvite_limit\x18\x02\x20\x01(\
    \x04R\x0binviteLimit\x12'\n\x0finvite_duration\x18\x03\x20\x01(\x04R\x0e\
    inviteDuration\x12!\n\x0ctime_created\x18\x04\x20\x01(\x07R\x0btimeCreat\
    ed\x12\x14\n\x05valid\x18\x05\x20\x01(\x08R\x05valid\",\n*CUserAccount_G\
    etFriendInviteTokens_Request\"u\n+CUserAccount_GetFriendInviteTokens_Res\
    ponse\x12F\n\x06tokens\x18\x01\x20\x03(\x0b2..CUserAccount_CreateFriendI\
    nviteToken_ResponseR\x06tokens\"i\n*CUserAccount_ViewFriendInviteToken_R\
    equest\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12!\n\x0ci\
    nvite_token\x18\x02\x20\x01(\tR\x0binviteToken\"\x86\x01\n+CUserAccount_\
    ViewFriendInviteToken_Response\x12\x14\n\x05valid\x18\x01\x20\x01(\x08R\
    \x05valid\x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\x12'\n\
    \x0finvite_duration\x18\x03\x20\x01(\x04R\x0einviteDuration\"k\n,CUserAc\
    count_RedeemFriendInviteToken_Request\x12\x18\n\x07steamid\x18\x01\x20\
    \x01(\x06R\x07steamid\x12!\n\x0cinvite_token\x18\x02\x20\x01(\tR\x0binvi\
    teToken\"/\n-CUserAccount_RedeemFriendInviteToken_Response\"Q\n,CUserAcc\
    ount_RevokeFriendInviteToken_Request\x12!\n\x0cinvite_token\x18\x01\x20\
    \x01(\tR\x0binviteToken\"/\n-CUserAccount_RevokeFriendInviteToken_Respon\
    se\"J\n'CUserAccount_RegisterCompatTool_Request\x12\x1f\n\x0bcompat_tool\
    \x18\x01\x20\x01(\rR\ncompatTool\"*\n(CUserAccount_RegisterCompatTool_Re\
    sponse\"\x94\x02\n,CAccountLinking_GetLinkedAccountInfo_Request\x12U\n\
    \x0caccount_type\x18\x01\x20\x01(\x0e2\x15.EInternalAccountType:\x1bk_EI\
    nternalSteamAccountTypeR\x0baccountType\x12\x1d\n\naccount_id\x18\x02\
    \x20\x01(\x04R\taccountId\x12>\n\x06filter\x18\x03\x20\x01(\x0e2\x15.EEx\
    ternalAccountType:\x0fk_EExternalNoneR\x06filter\x12.\n\x13return_access\
    _token\x18\x04\x20\x01(\x08R\x11returnAccessToken\"\xfb\x03\n-CAccountLi\
    nking_GetLinkedAccountInfo_Response\x12z\n\x11external_accounts\x18\x01\
    \x20\x03(\x0b2M.CAccountLinking_GetLinkedAccountInfo_Response.CExternalA\
    ccountTuple_ResponseR\x10externalAccounts\x1a\xcd\x02\n\x1eCExternalAcco\
    untTuple_Response\x12K\n\rexternal_type\x18\x01\x20\x01(\x0e2\x15.EExter\
    nalAccountType:\x0fk_EExternalNoneR\x0cexternalType\x12\x1f\n\x0bexterna\
    l_id\x18\x02\x20\x01(\tR\nexternalId\x12,\n\x12external_user_name\x18\
    \x03\x20\x01(\tR\x10externalUserName\x12!\n\x0cexternal_url\x18\x04\x20\
    \x01(\tR\x0bexternalUrl\x12!\n\x0caccess_token\x18\x05\x20\x01(\tR\x0bac\
    cessToken\x12.\n\x13access_token_secret\x18\x06\x20\x01(\tR\x11accessTok\
    enSecret\x12\x19\n\x08is_valid\x18\x07\x20\x01(\x08R\x07isValid\"\x9d\
    \x01\n.CEmbeddedClient_AuthorizeCurrentDevice_Request\x12\x18\n\x07steam\
    id\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\x20\x01(\
    \rR\x05appid\x12\x1f\n\x0bdevice_info\x18\x03\x20\x01(\tR\ndeviceInfo\
    \x12\x1a\n\x08deviceid\x18\x04\x20\x01(\rR\x08deviceid\"\x88\x01\n\x15CE\
    mbeddedClient_Token\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steami\
    d\x12!\n\x0cclient_token\x18\x02\x20\x01(\x0cR\x0bclientToken\x12\x16\n\
    \x06expiry\x18\x03\x20\x01(\rR\x06expiry\x12\x1a\n\x08deviceid\x18\x04\
    \x20\x01(\rR\x08deviceid\"p\n(CEmbeddedClient_AuthorizeDevice_Response\
    \x12\x16\n\x06result\x18\x01\x20\x01(\rR\x06result\x12,\n\x05token\x18\
    \x02\x20\x01(\x0b2\x16.CEmbeddedClient_TokenR\x05token*\x8d\x01\n\x14EIn\
    ternalAccountType\x12\x1f\n\x1bk_EInternalSteamAccountType\x10\x01\x12\
    \x17\n\x13k_EInternalClanType\x10\x02\x12\x16\n\x12k_EInternalAppType\
    \x10\x03\x12#\n\x1fk_EInternalBroadcastChannelType\x10\x04*\x86\x02\n\
    \x14EExternalAccountType\x12\x13\n\x0fk_EExternalNone\x10\0\x12\x1b\n\
    \x17k_EExternalSteamAccount\x10\x01\x12\x1c\n\x18k_EExternalGoogleAccoun\
    t\x10\x02\x12\x1e\n\x1ak_EExternalFacebookAccount\x10\x03\x12\x1d\n\x19k\
    _EExternalTwitterAccount\x10\x04\x12\x1c\n\x18k_EExternalTwitchAccount\
    \x10\x05\x12$\n\x20k_EExternalYouTubeChannelAccount\x10\x06\x12\x1b\n\
    \x17k_EExternalFacebookPage\x10\x072\x9c\n\n\x0bUserAccount\x12\x9c\x01\
    \n#GetAvailableValveDiscountPromotions\x129.CUserAccount_GetAvailableVal\
    veDiscountPromotions_Request\x1a:.CUserAccount_GetAvailableValveDiscount\
    Promotions_Response\x12o\n\x16GetClientWalletDetails\x12,.CUserAccount_G\
    etClientWalletDetails_Request\x1a'.CUserAccount_GetWalletDetails_Respons\
    e\x12o\n\x14GetAccountLinkStatus\x12*.CUserAccount_GetAccountLinkStatus_\
    Request\x1a+.CUserAccount_GetAccountLinkStatus_Response\x12l\n\x13Cancel\
    LicenseForApp\x12).CUserAccount_CancelLicenseForApp_Request\x1a*.CUserAc\
    count_CancelLicenseForApp_Response\x12]\n\x0eGetUserCountry\x12$.CUserAc\
    count_GetUserCountry_Request\x1a%.CUserAccount_GetUserCountry_Response\
    \x12x\n\x17CreateFriendInviteToken\x12-.CUserAccount_CreateFriendInviteT\
    oken_Request\x1a..CUserAccount_CreateFriendInviteToken_Response\x12r\n\
    \x15GetFriendInviteTokens\x12+.CUserAccount_GetFriendInviteTokens_Reques\
    t\x1a,.CUserAccount_GetFriendInviteTokens_Response\x12r\n\x15ViewFriendI\
    nviteToken\x12+.CUserAccount_ViewFriendInviteToken_Request\x1a,.CUserAcc\
    ount_ViewFriendInviteToken_Response\x12x\n\x17RedeemFriendInviteToken\
    \x12-.CUserAccount_RedeemFriendInviteToken_Request\x1a..CUserAccount_Red\
    eemFriendInviteToken_Response\x12x\n\x17RevokeFriendInviteToken\x12-.CUs\
    erAccount_RevokeFriendInviteToken_Request\x1a..CUserAccount_RevokeFriend\
    InviteToken_Response\x12i\n\x12RegisterCompatTool\x12(.CUserAccount_Regi\
    sterCompatTool_Request\x1a).CUserAccount_RegisterCompatTool_Response2\
    \x87\x01\n\x0eAccountLinking\x12u\n\x14GetLinkedAccountInfo\x12-.CAccoun\
    tLinking_GetLinkedAccountInfo_Request\x1a..CAccountLinking_GetLinkedAcco\
    untInfo_Response2\x86\x01\n\x0eEmbeddedClient\x12t\n\x16AuthorizeCurrent\
    Device\x12/.CEmbeddedClient_AuthorizeCurrentDevice_Request\x1a).CEmbedde\
    dClient_AuthorizeDevice_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(29);
            messages.push(CUserAccount_GetAvailableValveDiscountPromotions_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_GetAvailableValveDiscountPromotions_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_GetClientWalletDetails_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_GetWalletDetails_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_GetAccountLinkStatus_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_GetAccountLinkStatus_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_CancelLicenseForApp_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_CancelLicenseForApp_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_GetUserCountry_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_GetUserCountry_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_CreateFriendInviteToken_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_CreateFriendInviteToken_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_GetFriendInviteTokens_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_GetFriendInviteTokens_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_ViewFriendInviteToken_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_ViewFriendInviteToken_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_RedeemFriendInviteToken_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_RedeemFriendInviteToken_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_RevokeFriendInviteToken_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_RevokeFriendInviteToken_Response::generated_message_descriptor_data());
            messages.push(CUserAccount_RegisterCompatTool_Request::generated_message_descriptor_data());
            messages.push(CUserAccount_RegisterCompatTool_Response::generated_message_descriptor_data());
            messages.push(CAccountLinking_GetLinkedAccountInfo_Request::generated_message_descriptor_data());
            messages.push(CAccountLinking_GetLinkedAccountInfo_Response::generated_message_descriptor_data());
            messages.push(CEmbeddedClient_AuthorizeCurrentDevice_Request::generated_message_descriptor_data());
            messages.push(CEmbeddedClient_Token::generated_message_descriptor_data());
            messages.push(CEmbeddedClient_AuthorizeDevice_Response::generated_message_descriptor_data());
            messages.push(cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails::generated_message_descriptor_data());
            messages.push(caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(EInternalAccountType::generated_enum_descriptor_data());
            enums.push(EExternalAccountType::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
