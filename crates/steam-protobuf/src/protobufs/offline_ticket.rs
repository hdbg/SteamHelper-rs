// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `offline_ticket.proto`

// @@protoc_insertion_point(message:Offline_Ticket)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Offline_Ticket {
    // message fields
    // @@protoc_insertion_point(field:Offline_Ticket.encrypted_ticket)
    pub encrypted_ticket: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:Offline_Ticket.signature)
    pub signature: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:Offline_Ticket.kdf1)
    pub kdf1: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Offline_Ticket.salt1)
    pub salt1: ::std::option::Option<::bytes::Bytes>,
    // @@protoc_insertion_point(field:Offline_Ticket.kdf2)
    pub kdf2: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Offline_Ticket.salt2)
    pub salt2: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:Offline_Ticket.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Offline_Ticket {
    fn default() -> &'a Offline_Ticket {
        <Offline_Ticket as crate::Message>::default_instance()
    }
}

impl Offline_Ticket {
    pub fn new() -> Offline_Ticket {
        ::std::default::Default::default()
    }

    // optional bytes encrypted_ticket = 1;

    pub fn encrypted_ticket(&self) -> &[u8] {
        match self.encrypted_ticket.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encrypted_ticket(&mut self) {
        self.encrypted_ticket = ::std::option::Option::None;
    }

    pub fn has_encrypted_ticket(&self) -> bool {
        self.encrypted_ticket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_ticket(&mut self, v: ::bytes::Bytes) {
        self.encrypted_ticket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_ticket(&mut self) -> &mut ::bytes::Bytes {
        if self.encrypted_ticket.is_none() {
            self.encrypted_ticket = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.encrypted_ticket.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_ticket(&mut self) -> ::bytes::Bytes {
        self.encrypted_ticket.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::bytes::Bytes) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::bytes::Bytes {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::bytes::Bytes {
        self.signature.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional int32 kdf1 = 3;

    pub fn kdf1(&self) -> i32 {
        self.kdf1.unwrap_or(0)
    }

    pub fn clear_kdf1(&mut self) {
        self.kdf1 = ::std::option::Option::None;
    }

    pub fn has_kdf1(&self) -> bool {
        self.kdf1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kdf1(&mut self, v: i32) {
        self.kdf1 = ::std::option::Option::Some(v);
    }

    // optional bytes salt1 = 4;

    pub fn salt1(&self) -> &[u8] {
        match self.salt1.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_salt1(&mut self) {
        self.salt1 = ::std::option::Option::None;
    }

    pub fn has_salt1(&self) -> bool {
        self.salt1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt1(&mut self, v: ::bytes::Bytes) {
        self.salt1 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt1(&mut self) -> &mut ::bytes::Bytes {
        if self.salt1.is_none() {
            self.salt1 = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.salt1.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt1(&mut self) -> ::bytes::Bytes {
        self.salt1.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    // optional int32 kdf2 = 5;

    pub fn kdf2(&self) -> i32 {
        self.kdf2.unwrap_or(0)
    }

    pub fn clear_kdf2(&mut self) {
        self.kdf2 = ::std::option::Option::None;
    }

    pub fn has_kdf2(&self) -> bool {
        self.kdf2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kdf2(&mut self, v: i32) {
        self.kdf2 = ::std::option::Option::Some(v);
    }

    // optional bytes salt2 = 6;

    pub fn salt2(&self) -> &[u8] {
        match self.salt2.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_salt2(&mut self) {
        self.salt2 = ::std::option::Option::None;
    }

    pub fn has_salt2(&self) -> bool {
        self.salt2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt2(&mut self, v: ::bytes::Bytes) {
        self.salt2 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt2(&mut self) -> &mut ::bytes::Bytes {
        if self.salt2.is_none() {
            self.salt2 = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.salt2.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt2(&mut self) -> ::bytes::Bytes {
        self.salt2.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "encrypted_ticket",
            |m: &Offline_Ticket| { &m.encrypted_ticket },
            |m: &mut Offline_Ticket| { &mut m.encrypted_ticket },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &Offline_Ticket| { &m.signature },
            |m: &mut Offline_Ticket| { &mut m.signature },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "kdf1",
            |m: &Offline_Ticket| { &m.kdf1 },
            |m: &mut Offline_Ticket| { &mut m.kdf1 },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "salt1",
            |m: &Offline_Ticket| { &m.salt1 },
            |m: &mut Offline_Ticket| { &mut m.salt1 },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "kdf2",
            |m: &Offline_Ticket| { &m.kdf2 },
            |m: &mut Offline_Ticket| { &mut m.kdf2 },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "salt2",
            |m: &Offline_Ticket| { &m.salt2 },
            |m: &mut Offline_Ticket| { &mut m.salt2 },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Offline_Ticket>(
            "Offline_Ticket",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for Offline_Ticket {
    const NAME: &'static str = "Offline_Ticket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.encrypted_ticket = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                24 => {
                    self.kdf1 = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.salt1 = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                40 => {
                    self.kdf2 = ::std::option::Option::Some(is.read_int32()?);
                },
                50 => {
                    self.salt2 = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.encrypted_ticket.as_ref() {
            my_size += crate::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += crate::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.kdf1 {
            my_size += crate::rt::int32_size(3, v);
        }
        if let Some(v) = self.salt1.as_ref() {
            my_size += crate::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.kdf2 {
            my_size += crate::rt::int32_size(5, v);
        }
        if let Some(v) = self.salt2.as_ref() {
            my_size += crate::rt::bytes_size(6, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.encrypted_ticket.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.kdf1 {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.salt1.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.kdf2 {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.salt2.as_ref() {
            os.write_bytes(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Offline_Ticket {
        Offline_Ticket::new()
    }

    fn clear(&mut self) {
        self.encrypted_ticket = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.kdf1 = ::std::option::Option::None;
        self.salt1 = ::std::option::Option::None;
        self.kdf2 = ::std::option::Option::None;
        self.salt2 = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Offline_Ticket {
        static instance: Offline_Ticket = Offline_Ticket {
            encrypted_ticket: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            kdf1: ::std::option::Option::None,
            salt1: ::std::option::Option::None,
            kdf2: ::std::option::Option::None,
            salt2: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for Offline_Ticket {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Offline_Ticket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Offline_Ticket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Offline_Ticket {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14offline_ticket.proto\"\xad\x01\n\x0eOffline_Ticket\x12)\n\x10encry\
    pted_ticket\x18\x01\x20\x01(\x0cR\x0fencryptedTicket\x12\x1c\n\tsignatur\
    e\x18\x02\x20\x01(\x0cR\tsignature\x12\x12\n\x04kdf1\x18\x03\x20\x01(\
    \x05R\x04kdf1\x12\x14\n\x05salt1\x18\x04\x20\x01(\x0cR\x05salt1\x12\x12\
    \n\x04kdf2\x18\x05\x20\x01(\x05R\x04kdf2\x12\x14\n\x05salt2\x18\x06\x20\
    \x01(\x0cR\x05salt2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Offline_Ticket::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
