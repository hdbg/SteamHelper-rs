// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_storagedevicemanager.proto`

// @@protoc_insertion_point(message:CStorageDeviceManager_IsServiceAvailable_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_IsServiceAvailable_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_IsServiceAvailable_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_IsServiceAvailable_Request {
    fn default() -> &'a CStorageDeviceManager_IsServiceAvailable_Request {
        <CStorageDeviceManager_IsServiceAvailable_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_IsServiceAvailable_Request {
    pub fn new() -> CStorageDeviceManager_IsServiceAvailable_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_IsServiceAvailable_Request>(
            "CStorageDeviceManager_IsServiceAvailable_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_IsServiceAvailable_Request {
    const NAME: &'static str = "CStorageDeviceManager_IsServiceAvailable_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_IsServiceAvailable_Request {
        CStorageDeviceManager_IsServiceAvailable_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_IsServiceAvailable_Request {
        static instance: CStorageDeviceManager_IsServiceAvailable_Request = CStorageDeviceManager_IsServiceAvailable_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_IsServiceAvailable_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_IsServiceAvailable_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_IsServiceAvailable_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_IsServiceAvailable_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_IsServiceAvailable_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_IsServiceAvailable_Response {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManager_IsServiceAvailable_Response.is_available)
    pub is_available: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_IsServiceAvailable_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_IsServiceAvailable_Response {
    fn default() -> &'a CStorageDeviceManager_IsServiceAvailable_Response {
        <CStorageDeviceManager_IsServiceAvailable_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_IsServiceAvailable_Response {
    pub fn new() -> CStorageDeviceManager_IsServiceAvailable_Response {
        ::std::default::Default::default()
    }

    // optional bool is_available = 1;

    pub fn is_available(&self) -> bool {
        self.is_available.unwrap_or(false)
    }

    pub fn clear_is_available(&mut self) {
        self.is_available = ::std::option::Option::None;
    }

    pub fn has_is_available(&self) -> bool {
        self.is_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_available(&mut self, v: bool) {
        self.is_available = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_available",
            |m: &CStorageDeviceManager_IsServiceAvailable_Response| { &m.is_available },
            |m: &mut CStorageDeviceManager_IsServiceAvailable_Response| { &mut m.is_available },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_IsServiceAvailable_Response>(
            "CStorageDeviceManager_IsServiceAvailable_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_IsServiceAvailable_Response {
    const NAME: &'static str = "CStorageDeviceManager_IsServiceAvailable_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_available = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_available {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.is_available {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_IsServiceAvailable_Response {
        CStorageDeviceManager_IsServiceAvailable_Response::new()
    }

    fn clear(&mut self) {
        self.is_available = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_IsServiceAvailable_Response {
        static instance: CStorageDeviceManager_IsServiceAvailable_Response = CStorageDeviceManager_IsServiceAvailable_Response {
            is_available: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_IsServiceAvailable_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_IsServiceAvailable_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_IsServiceAvailable_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_IsServiceAvailable_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManagerDrive)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManagerDrive {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.model)
    pub model: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.vendor)
    pub vendor: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.serial)
    pub serial: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.is_ejectable)
    pub is_ejectable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.size_bytes)
    pub size_bytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.media_type)
    pub media_type: ::std::option::Option<crate::EnumOrUnknown<super::enums::EStorageDriveMediaType>>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.is_unformatted)
    pub is_unformatted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.adopt_stage)
    pub adopt_stage: ::std::option::Option<crate::EnumOrUnknown<super::enums::EStorageFormatStage>>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.is_formattable)
    pub is_formattable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerDrive.is_media_available)
    pub is_media_available: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManagerDrive.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManagerDrive {
    fn default() -> &'a CStorageDeviceManagerDrive {
        <CStorageDeviceManagerDrive as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManagerDrive {
    pub fn new() -> CStorageDeviceManagerDrive {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0u32)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional string model = 2;

    pub fn model(&self) -> &str {
        match self.model.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_model(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        self.model.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        if self.model.is_none() {
            self.model = ::std::option::Option::Some(::std::string::String::new());
        }
        self.model.as_mut().unwrap()
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        self.model.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string vendor = 3;

    pub fn vendor(&self) -> &str {
        match self.vendor.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_vendor(&mut self) {
        self.vendor = ::std::option::Option::None;
    }

    pub fn has_vendor(&self) -> bool {
        self.vendor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vendor(&mut self, v: ::std::string::String) {
        self.vendor = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vendor(&mut self) -> &mut ::std::string::String {
        if self.vendor.is_none() {
            self.vendor = ::std::option::Option::Some(::std::string::String::new());
        }
        self.vendor.as_mut().unwrap()
    }

    // Take field
    pub fn take_vendor(&mut self) -> ::std::string::String {
        self.vendor.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string serial = 4;

    pub fn serial(&self) -> &str {
        match self.serial.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial(&mut self) {
        self.serial = ::std::option::Option::None;
    }

    pub fn has_serial(&self) -> bool {
        self.serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial(&mut self, v: ::std::string::String) {
        self.serial = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial(&mut self) -> &mut ::std::string::String {
        if self.serial.is_none() {
            self.serial = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial(&mut self) -> ::std::string::String {
        self.serial.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_ejectable = 5;

    pub fn is_ejectable(&self) -> bool {
        self.is_ejectable.unwrap_or(false)
    }

    pub fn clear_is_ejectable(&mut self) {
        self.is_ejectable = ::std::option::Option::None;
    }

    pub fn has_is_ejectable(&self) -> bool {
        self.is_ejectable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_ejectable(&mut self, v: bool) {
        self.is_ejectable = ::std::option::Option::Some(v);
    }

    // optional uint64 size_bytes = 6;

    pub fn size_bytes(&self) -> u64 {
        self.size_bytes.unwrap_or(0)
    }

    pub fn clear_size_bytes(&mut self) {
        self.size_bytes = ::std::option::Option::None;
    }

    pub fn has_size_bytes(&self) -> bool {
        self.size_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size_bytes(&mut self, v: u64) {
        self.size_bytes = ::std::option::Option::Some(v);
    }

    // optional .EStorageDriveMediaType media_type = 7;

    pub fn media_type(&self) -> super::enums::EStorageDriveMediaType {
        match self.media_type {
            Some(e) => e.enum_value_or(super::enums::EStorageDriveMediaType::k_EStorageDriveMediaType_Invalid),
            None => super::enums::EStorageDriveMediaType::k_EStorageDriveMediaType_Invalid,
        }
    }

    pub fn clear_media_type(&mut self) {
        self.media_type = ::std::option::Option::None;
    }

    pub fn has_media_type(&self) -> bool {
        self.media_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_media_type(&mut self, v: super::enums::EStorageDriveMediaType) {
        self.media_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool is_unformatted = 8;

    pub fn is_unformatted(&self) -> bool {
        self.is_unformatted.unwrap_or(false)
    }

    pub fn clear_is_unformatted(&mut self) {
        self.is_unformatted = ::std::option::Option::None;
    }

    pub fn has_is_unformatted(&self) -> bool {
        self.is_unformatted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_unformatted(&mut self, v: bool) {
        self.is_unformatted = ::std::option::Option::Some(v);
    }

    // optional .EStorageFormatStage adopt_stage = 9;

    pub fn adopt_stage(&self) -> super::enums::EStorageFormatStage {
        match self.adopt_stage {
            Some(e) => e.enum_value_or(super::enums::EStorageFormatStage::k_EStorageFormatStage_Invalid),
            None => super::enums::EStorageFormatStage::k_EStorageFormatStage_Invalid,
        }
    }

    pub fn clear_adopt_stage(&mut self) {
        self.adopt_stage = ::std::option::Option::None;
    }

    pub fn has_adopt_stage(&self) -> bool {
        self.adopt_stage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_adopt_stage(&mut self, v: super::enums::EStorageFormatStage) {
        self.adopt_stage = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool is_formattable = 10;

    pub fn is_formattable(&self) -> bool {
        self.is_formattable.unwrap_or(false)
    }

    pub fn clear_is_formattable(&mut self) {
        self.is_formattable = ::std::option::Option::None;
    }

    pub fn has_is_formattable(&self) -> bool {
        self.is_formattable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_formattable(&mut self, v: bool) {
        self.is_formattable = ::std::option::Option::Some(v);
    }

    // optional bool is_media_available = 11;

    pub fn is_media_available(&self) -> bool {
        self.is_media_available.unwrap_or(false)
    }

    pub fn clear_is_media_available(&mut self) {
        self.is_media_available = ::std::option::Option::None;
    }

    pub fn has_is_media_available(&self) -> bool {
        self.is_media_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_media_available(&mut self, v: bool) {
        self.is_media_available = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &CStorageDeviceManagerDrive| { &m.id },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "model",
            |m: &CStorageDeviceManagerDrive| { &m.model },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.model },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "vendor",
            |m: &CStorageDeviceManagerDrive| { &m.vendor },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.vendor },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "serial",
            |m: &CStorageDeviceManagerDrive| { &m.serial },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.serial },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_ejectable",
            |m: &CStorageDeviceManagerDrive| { &m.is_ejectable },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.is_ejectable },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "size_bytes",
            |m: &CStorageDeviceManagerDrive| { &m.size_bytes },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.size_bytes },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "media_type",
            |m: &CStorageDeviceManagerDrive| { &m.media_type },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.media_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_unformatted",
            |m: &CStorageDeviceManagerDrive| { &m.is_unformatted },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.is_unformatted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "adopt_stage",
            |m: &CStorageDeviceManagerDrive| { &m.adopt_stage },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.adopt_stage },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_formattable",
            |m: &CStorageDeviceManagerDrive| { &m.is_formattable },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.is_formattable },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_media_available",
            |m: &CStorageDeviceManagerDrive| { &m.is_media_available },
            |m: &mut CStorageDeviceManagerDrive| { &mut m.is_media_available },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManagerDrive>(
            "CStorageDeviceManagerDrive",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManagerDrive {
    const NAME: &'static str = "CStorageDeviceManagerDrive";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.model = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.vendor = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.serial = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.is_ejectable = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.size_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.media_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                64 => {
                    self.is_unformatted = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.adopt_stage = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                80 => {
                    self.is_formattable = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.is_media_available = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.model.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.vendor.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.serial.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.is_ejectable {
            my_size += 1 + 1;
        }
        if let Some(v) = self.size_bytes {
            my_size += crate::rt::uint64_size(6, v);
        }
        if let Some(v) = self.media_type {
            my_size += crate::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.is_unformatted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.adopt_stage {
            my_size += crate::rt::int32_size(9, v.value());
        }
        if let Some(v) = self.is_formattable {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_media_available {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.model.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.vendor.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.serial.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.is_ejectable {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.size_bytes {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.media_type {
            os.write_enum(7, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.is_unformatted {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.adopt_stage {
            os.write_enum(9, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.is_formattable {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.is_media_available {
            os.write_bool(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManagerDrive {
        CStorageDeviceManagerDrive::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.vendor = ::std::option::Option::None;
        self.serial = ::std::option::Option::None;
        self.is_ejectable = ::std::option::Option::None;
        self.size_bytes = ::std::option::Option::None;
        self.media_type = ::std::option::Option::None;
        self.is_unformatted = ::std::option::Option::None;
        self.adopt_stage = ::std::option::Option::None;
        self.is_formattable = ::std::option::Option::None;
        self.is_media_available = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManagerDrive {
        static instance: CStorageDeviceManagerDrive = CStorageDeviceManagerDrive {
            id: ::std::option::Option::None,
            model: ::std::option::Option::None,
            vendor: ::std::option::Option::None,
            serial: ::std::option::Option::None,
            is_ejectable: ::std::option::Option::None,
            size_bytes: ::std::option::Option::None,
            media_type: ::std::option::Option::None,
            is_unformatted: ::std::option::Option::None,
            adopt_stage: ::std::option::Option::None,
            is_formattable: ::std::option::Option::None,
            is_media_available: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManagerDrive {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManagerDrive").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManagerDrive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManagerDrive {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManagerBlockDevice)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManagerBlockDevice {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.drive_id)
    pub drive_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.path)
    pub path: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.friendly_path)
    pub friendly_path: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.label)
    pub label: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.size_bytes)
    pub size_bytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.is_formattable)
    pub is_formattable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.is_read_only)
    pub is_read_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.is_root_device)
    pub is_root_device: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.content_type)
    pub content_type: ::std::option::Option<crate::EnumOrUnknown<super::enums::EStorageBlockContentType>>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.filesystem_type)
    pub filesystem_type: ::std::option::Option<crate::EnumOrUnknown<super::enums::EStorageBlockFileSystemType>>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.mount_paths)
    pub mount_paths: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerBlockDevice.is_unmounting)
    pub is_unmounting: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManagerBlockDevice.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManagerBlockDevice {
    fn default() -> &'a CStorageDeviceManagerBlockDevice {
        <CStorageDeviceManagerBlockDevice as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManagerBlockDevice {
    pub fn new() -> CStorageDeviceManagerBlockDevice {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0u32)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional uint32 drive_id = 2;

    pub fn drive_id(&self) -> u32 {
        self.drive_id.unwrap_or(0u32)
    }

    pub fn clear_drive_id(&mut self) {
        self.drive_id = ::std::option::Option::None;
    }

    pub fn has_drive_id(&self) -> bool {
        self.drive_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drive_id(&mut self, v: u32) {
        self.drive_id = ::std::option::Option::Some(v);
    }

    // optional string path = 3;

    pub fn path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_path(&mut self) {
        self.path = ::std::option::Option::None;
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path = ::std::option::Option::Some(::std::string::String::new());
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string friendly_path = 4;

    pub fn friendly_path(&self) -> &str {
        match self.friendly_path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_friendly_path(&mut self) {
        self.friendly_path = ::std::option::Option::None;
    }

    pub fn has_friendly_path(&self) -> bool {
        self.friendly_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friendly_path(&mut self, v: ::std::string::String) {
        self.friendly_path = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_friendly_path(&mut self) -> &mut ::std::string::String {
        if self.friendly_path.is_none() {
            self.friendly_path = ::std::option::Option::Some(::std::string::String::new());
        }
        self.friendly_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_friendly_path(&mut self) -> ::std::string::String {
        self.friendly_path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string label = 5;

    pub fn label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_label(&mut self) {
        self.label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label = ::std::option::Option::Some(::std::string::String::new());
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 size_bytes = 6;

    pub fn size_bytes(&self) -> u64 {
        self.size_bytes.unwrap_or(0)
    }

    pub fn clear_size_bytes(&mut self) {
        self.size_bytes = ::std::option::Option::None;
    }

    pub fn has_size_bytes(&self) -> bool {
        self.size_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size_bytes(&mut self, v: u64) {
        self.size_bytes = ::std::option::Option::Some(v);
    }

    // optional bool is_formattable = 7;

    pub fn is_formattable(&self) -> bool {
        self.is_formattable.unwrap_or(false)
    }

    pub fn clear_is_formattable(&mut self) {
        self.is_formattable = ::std::option::Option::None;
    }

    pub fn has_is_formattable(&self) -> bool {
        self.is_formattable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_formattable(&mut self, v: bool) {
        self.is_formattable = ::std::option::Option::Some(v);
    }

    // optional bool is_read_only = 8;

    pub fn is_read_only(&self) -> bool {
        self.is_read_only.unwrap_or(false)
    }

    pub fn clear_is_read_only(&mut self) {
        self.is_read_only = ::std::option::Option::None;
    }

    pub fn has_is_read_only(&self) -> bool {
        self.is_read_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_read_only(&mut self, v: bool) {
        self.is_read_only = ::std::option::Option::Some(v);
    }

    // optional bool is_root_device = 9;

    pub fn is_root_device(&self) -> bool {
        self.is_root_device.unwrap_or(false)
    }

    pub fn clear_is_root_device(&mut self) {
        self.is_root_device = ::std::option::Option::None;
    }

    pub fn has_is_root_device(&self) -> bool {
        self.is_root_device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_root_device(&mut self, v: bool) {
        self.is_root_device = ::std::option::Option::Some(v);
    }

    // optional .EStorageBlockContentType content_type = 10;

    pub fn content_type(&self) -> super::enums::EStorageBlockContentType {
        match self.content_type {
            Some(e) => e.enum_value_or(super::enums::EStorageBlockContentType::k_EStorageBlockContentType_Invalid),
            None => super::enums::EStorageBlockContentType::k_EStorageBlockContentType_Invalid,
        }
    }

    pub fn clear_content_type(&mut self) {
        self.content_type = ::std::option::Option::None;
    }

    pub fn has_content_type(&self) -> bool {
        self.content_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: super::enums::EStorageBlockContentType) {
        self.content_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .EStorageBlockFileSystemType filesystem_type = 11;

    pub fn filesystem_type(&self) -> super::enums::EStorageBlockFileSystemType {
        match self.filesystem_type {
            Some(e) => e.enum_value_or(super::enums::EStorageBlockFileSystemType::k_EStorageBlockFileSystemType_Invalid),
            None => super::enums::EStorageBlockFileSystemType::k_EStorageBlockFileSystemType_Invalid,
        }
    }

    pub fn clear_filesystem_type(&mut self) {
        self.filesystem_type = ::std::option::Option::None;
    }

    pub fn has_filesystem_type(&self) -> bool {
        self.filesystem_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filesystem_type(&mut self, v: super::enums::EStorageBlockFileSystemType) {
        self.filesystem_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // repeated string mount_paths = 12;

    pub fn mount_paths(&self) -> &[::std::string::String] {
        &self.mount_paths
    }

    pub fn clear_mount_paths(&mut self) {
        self.mount_paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_mount_paths(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.mount_paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mount_paths(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.mount_paths
    }

    // Take field
    pub fn take_mount_paths(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.mount_paths, ::std::vec::Vec::new())
    }

    // optional bool is_unmounting = 13;

    pub fn is_unmounting(&self) -> bool {
        self.is_unmounting.unwrap_or(false)
    }

    pub fn clear_is_unmounting(&mut self) {
        self.is_unmounting = ::std::option::Option::None;
    }

    pub fn has_is_unmounting(&self) -> bool {
        self.is_unmounting.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_unmounting(&mut self, v: bool) {
        self.is_unmounting = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &CStorageDeviceManagerBlockDevice| { &m.id },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "drive_id",
            |m: &CStorageDeviceManagerBlockDevice| { &m.drive_id },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.drive_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "path",
            |m: &CStorageDeviceManagerBlockDevice| { &m.path },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.path },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "friendly_path",
            |m: &CStorageDeviceManagerBlockDevice| { &m.friendly_path },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.friendly_path },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "label",
            |m: &CStorageDeviceManagerBlockDevice| { &m.label },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.label },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "size_bytes",
            |m: &CStorageDeviceManagerBlockDevice| { &m.size_bytes },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.size_bytes },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_formattable",
            |m: &CStorageDeviceManagerBlockDevice| { &m.is_formattable },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.is_formattable },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_read_only",
            |m: &CStorageDeviceManagerBlockDevice| { &m.is_read_only },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.is_read_only },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_root_device",
            |m: &CStorageDeviceManagerBlockDevice| { &m.is_root_device },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.is_root_device },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "content_type",
            |m: &CStorageDeviceManagerBlockDevice| { &m.content_type },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.content_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "filesystem_type",
            |m: &CStorageDeviceManagerBlockDevice| { &m.filesystem_type },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.filesystem_type },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mount_paths",
            |m: &CStorageDeviceManagerBlockDevice| { &m.mount_paths },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.mount_paths },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_unmounting",
            |m: &CStorageDeviceManagerBlockDevice| { &m.is_unmounting },
            |m: &mut CStorageDeviceManagerBlockDevice| { &mut m.is_unmounting },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManagerBlockDevice>(
            "CStorageDeviceManagerBlockDevice",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManagerBlockDevice {
    const NAME: &'static str = "CStorageDeviceManagerBlockDevice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.drive_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.path = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.friendly_path = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.label = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.size_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.is_formattable = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_read_only = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.is_root_device = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.content_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                88 => {
                    self.filesystem_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                98 => {
                    self.mount_paths.push(is.read_string()?);
                },
                104 => {
                    self.is_unmounting = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.drive_id {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.path.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.friendly_path.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.label.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.size_bytes {
            my_size += crate::rt::uint64_size(6, v);
        }
        if let Some(v) = self.is_formattable {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_read_only {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_root_device {
            my_size += 1 + 1;
        }
        if let Some(v) = self.content_type {
            my_size += crate::rt::int32_size(10, v.value());
        }
        if let Some(v) = self.filesystem_type {
            my_size += crate::rt::int32_size(11, v.value());
        }
        for value in &self.mount_paths {
            my_size += crate::rt::string_size(12, &value);
        };
        if let Some(v) = self.is_unmounting {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.drive_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.path.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.friendly_path.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.label.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.size_bytes {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.is_formattable {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_read_only {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.is_root_device {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.content_type {
            os.write_enum(10, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.filesystem_type {
            os.write_enum(11, crate::EnumOrUnknown::value(&v))?;
        }
        for v in &self.mount_paths {
            os.write_string(12, &v)?;
        };
        if let Some(v) = self.is_unmounting {
            os.write_bool(13, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManagerBlockDevice {
        CStorageDeviceManagerBlockDevice::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.drive_id = ::std::option::Option::None;
        self.path = ::std::option::Option::None;
        self.friendly_path = ::std::option::Option::None;
        self.label = ::std::option::Option::None;
        self.size_bytes = ::std::option::Option::None;
        self.is_formattable = ::std::option::Option::None;
        self.is_read_only = ::std::option::Option::None;
        self.is_root_device = ::std::option::Option::None;
        self.content_type = ::std::option::Option::None;
        self.filesystem_type = ::std::option::Option::None;
        self.mount_paths.clear();
        self.is_unmounting = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManagerBlockDevice {
        static instance: CStorageDeviceManagerBlockDevice = CStorageDeviceManagerBlockDevice {
            id: ::std::option::Option::None,
            drive_id: ::std::option::Option::None,
            path: ::std::option::Option::None,
            friendly_path: ::std::option::Option::None,
            label: ::std::option::Option::None,
            size_bytes: ::std::option::Option::None,
            is_formattable: ::std::option::Option::None,
            is_read_only: ::std::option::Option::None,
            is_root_device: ::std::option::Option::None,
            content_type: ::std::option::Option::None,
            filesystem_type: ::std::option::Option::None,
            mount_paths: ::std::vec::Vec::new(),
            is_unmounting: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManagerBlockDevice {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManagerBlockDevice").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManagerBlockDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManagerBlockDevice {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManagerState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManagerState {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManagerState.drives)
    pub drives: ::std::vec::Vec<CStorageDeviceManagerDrive>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerState.block_devices)
    pub block_devices: ::std::vec::Vec<CStorageDeviceManagerBlockDevice>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerState.is_unmount_supported)
    pub is_unmount_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerState.is_trim_supported)
    pub is_trim_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerState.is_trim_running)
    pub is_trim_running: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CStorageDeviceManagerState.is_adopt_supported)
    pub is_adopt_supported: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManagerState.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManagerState {
    fn default() -> &'a CStorageDeviceManagerState {
        <CStorageDeviceManagerState as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManagerState {
    pub fn new() -> CStorageDeviceManagerState {
        ::std::default::Default::default()
    }

    // repeated .CStorageDeviceManagerDrive drives = 1;

    pub fn drives(&self) -> &[CStorageDeviceManagerDrive] {
        &self.drives
    }

    pub fn clear_drives(&mut self) {
        self.drives.clear();
    }

    // Param is passed by value, moved
    pub fn set_drives(&mut self, v: ::std::vec::Vec<CStorageDeviceManagerDrive>) {
        self.drives = v;
    }

    // Mutable pointer to the field.
    pub fn mut_drives(&mut self) -> &mut ::std::vec::Vec<CStorageDeviceManagerDrive> {
        &mut self.drives
    }

    // Take field
    pub fn take_drives(&mut self) -> ::std::vec::Vec<CStorageDeviceManagerDrive> {
        ::std::mem::replace(&mut self.drives, ::std::vec::Vec::new())
    }

    // repeated .CStorageDeviceManagerBlockDevice block_devices = 2;

    pub fn block_devices(&self) -> &[CStorageDeviceManagerBlockDevice] {
        &self.block_devices
    }

    pub fn clear_block_devices(&mut self) {
        self.block_devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_devices(&mut self, v: ::std::vec::Vec<CStorageDeviceManagerBlockDevice>) {
        self.block_devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_block_devices(&mut self) -> &mut ::std::vec::Vec<CStorageDeviceManagerBlockDevice> {
        &mut self.block_devices
    }

    // Take field
    pub fn take_block_devices(&mut self) -> ::std::vec::Vec<CStorageDeviceManagerBlockDevice> {
        ::std::mem::replace(&mut self.block_devices, ::std::vec::Vec::new())
    }

    // optional bool is_unmount_supported = 3;

    pub fn is_unmount_supported(&self) -> bool {
        self.is_unmount_supported.unwrap_or(false)
    }

    pub fn clear_is_unmount_supported(&mut self) {
        self.is_unmount_supported = ::std::option::Option::None;
    }

    pub fn has_is_unmount_supported(&self) -> bool {
        self.is_unmount_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_unmount_supported(&mut self, v: bool) {
        self.is_unmount_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_trim_supported = 4;

    pub fn is_trim_supported(&self) -> bool {
        self.is_trim_supported.unwrap_or(false)
    }

    pub fn clear_is_trim_supported(&mut self) {
        self.is_trim_supported = ::std::option::Option::None;
    }

    pub fn has_is_trim_supported(&self) -> bool {
        self.is_trim_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_trim_supported(&mut self, v: bool) {
        self.is_trim_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_trim_running = 5;

    pub fn is_trim_running(&self) -> bool {
        self.is_trim_running.unwrap_or(false)
    }

    pub fn clear_is_trim_running(&mut self) {
        self.is_trim_running = ::std::option::Option::None;
    }

    pub fn has_is_trim_running(&self) -> bool {
        self.is_trim_running.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_trim_running(&mut self, v: bool) {
        self.is_trim_running = ::std::option::Option::Some(v);
    }

    // optional bool is_adopt_supported = 6;

    pub fn is_adopt_supported(&self) -> bool {
        self.is_adopt_supported.unwrap_or(false)
    }

    pub fn clear_is_adopt_supported(&mut self) {
        self.is_adopt_supported = ::std::option::Option::None;
    }

    pub fn has_is_adopt_supported(&self) -> bool {
        self.is_adopt_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_adopt_supported(&mut self, v: bool) {
        self.is_adopt_supported = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "drives",
            |m: &CStorageDeviceManagerState| { &m.drives },
            |m: &mut CStorageDeviceManagerState| { &mut m.drives },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "block_devices",
            |m: &CStorageDeviceManagerState| { &m.block_devices },
            |m: &mut CStorageDeviceManagerState| { &mut m.block_devices },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_unmount_supported",
            |m: &CStorageDeviceManagerState| { &m.is_unmount_supported },
            |m: &mut CStorageDeviceManagerState| { &mut m.is_unmount_supported },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_trim_supported",
            |m: &CStorageDeviceManagerState| { &m.is_trim_supported },
            |m: &mut CStorageDeviceManagerState| { &mut m.is_trim_supported },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_trim_running",
            |m: &CStorageDeviceManagerState| { &m.is_trim_running },
            |m: &mut CStorageDeviceManagerState| { &mut m.is_trim_running },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_adopt_supported",
            |m: &CStorageDeviceManagerState| { &m.is_adopt_supported },
            |m: &mut CStorageDeviceManagerState| { &mut m.is_adopt_supported },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManagerState>(
            "CStorageDeviceManagerState",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManagerState {
    const NAME: &'static str = "CStorageDeviceManagerState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.drives.push(is.read_message()?);
                },
                18 => {
                    self.block_devices.push(is.read_message()?);
                },
                24 => {
                    self.is_unmount_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.is_trim_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_trim_running = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.is_adopt_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.drives {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.block_devices {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.is_unmount_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_trim_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_trim_running {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_adopt_supported {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.drives {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.block_devices {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.is_unmount_supported {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.is_trim_supported {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_trim_running {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.is_adopt_supported {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManagerState {
        CStorageDeviceManagerState::new()
    }

    fn clear(&mut self) {
        self.drives.clear();
        self.block_devices.clear();
        self.is_unmount_supported = ::std::option::Option::None;
        self.is_trim_supported = ::std::option::Option::None;
        self.is_trim_running = ::std::option::Option::None;
        self.is_adopt_supported = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManagerState {
        static instance: CStorageDeviceManagerState = CStorageDeviceManagerState {
            drives: ::std::vec::Vec::new(),
            block_devices: ::std::vec::Vec::new(),
            is_unmount_supported: ::std::option::Option::None,
            is_trim_supported: ::std::option::Option::None,
            is_trim_running: ::std::option::Option::None,
            is_adopt_supported: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManagerState {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManagerState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManagerState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManagerState {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_GetState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_GetState_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_GetState_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_GetState_Request {
    fn default() -> &'a CStorageDeviceManager_GetState_Request {
        <CStorageDeviceManager_GetState_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_GetState_Request {
    pub fn new() -> CStorageDeviceManager_GetState_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_GetState_Request>(
            "CStorageDeviceManager_GetState_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_GetState_Request {
    const NAME: &'static str = "CStorageDeviceManager_GetState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_GetState_Request {
        CStorageDeviceManager_GetState_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_GetState_Request {
        static instance: CStorageDeviceManager_GetState_Request = CStorageDeviceManager_GetState_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_GetState_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_GetState_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_GetState_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_GetState_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_GetState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_GetState_Response {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManager_GetState_Response.state)
    pub state: crate::MessageField<CStorageDeviceManagerState>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_GetState_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_GetState_Response {
    fn default() -> &'a CStorageDeviceManager_GetState_Response {
        <CStorageDeviceManager_GetState_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_GetState_Response {
    pub fn new() -> CStorageDeviceManager_GetState_Response {
        ::std::default::Default::default()
    }

    // optional .CStorageDeviceManagerState state = 1;

    pub fn state(&self) -> &CStorageDeviceManagerState {
        self.state.as_ref().unwrap_or_else(|| <CStorageDeviceManagerState as crate::Message>::default_instance())
    }

    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: CStorageDeviceManagerState) {
        self.state = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut CStorageDeviceManagerState {
        self.state.mut_or_insert_default()
    }

    // Take field
    pub fn take_state(&mut self) -> CStorageDeviceManagerState {
        self.state.take().unwrap_or_else(|| CStorageDeviceManagerState::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CStorageDeviceManagerState>(
            "state",
            |m: &CStorageDeviceManager_GetState_Response| { &m.state },
            |m: &mut CStorageDeviceManager_GetState_Response| { &mut m.state },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_GetState_Response>(
            "CStorageDeviceManager_GetState_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_GetState_Response {
    const NAME: &'static str = "CStorageDeviceManager_GetState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.state.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_GetState_Response {
        CStorageDeviceManager_GetState_Response::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_GetState_Response {
        static instance: CStorageDeviceManager_GetState_Response = CStorageDeviceManager_GetState_Response {
            state: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_GetState_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_GetState_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_GetState_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_GetState_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_StateChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_StateChanged_Notification {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_StateChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_StateChanged_Notification {
    fn default() -> &'a CStorageDeviceManager_StateChanged_Notification {
        <CStorageDeviceManager_StateChanged_Notification as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_StateChanged_Notification {
    pub fn new() -> CStorageDeviceManager_StateChanged_Notification {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_StateChanged_Notification>(
            "CStorageDeviceManager_StateChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_StateChanged_Notification {
    const NAME: &'static str = "CStorageDeviceManager_StateChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_StateChanged_Notification {
        CStorageDeviceManager_StateChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_StateChanged_Notification {
        static instance: CStorageDeviceManager_StateChanged_Notification = CStorageDeviceManager_StateChanged_Notification {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_StateChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_StateChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_StateChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_StateChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Eject_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Eject_Request {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManager_Eject_Request.drive_id)
    pub drive_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Eject_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Eject_Request {
    fn default() -> &'a CStorageDeviceManager_Eject_Request {
        <CStorageDeviceManager_Eject_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Eject_Request {
    pub fn new() -> CStorageDeviceManager_Eject_Request {
        ::std::default::Default::default()
    }

    // optional uint32 drive_id = 1;

    pub fn drive_id(&self) -> u32 {
        self.drive_id.unwrap_or(0)
    }

    pub fn clear_drive_id(&mut self) {
        self.drive_id = ::std::option::Option::None;
    }

    pub fn has_drive_id(&self) -> bool {
        self.drive_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drive_id(&mut self, v: u32) {
        self.drive_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "drive_id",
            |m: &CStorageDeviceManager_Eject_Request| { &m.drive_id },
            |m: &mut CStorageDeviceManager_Eject_Request| { &mut m.drive_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Eject_Request>(
            "CStorageDeviceManager_Eject_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Eject_Request {
    const NAME: &'static str = "CStorageDeviceManager_Eject_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.drive_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.drive_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.drive_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Eject_Request {
        CStorageDeviceManager_Eject_Request::new()
    }

    fn clear(&mut self) {
        self.drive_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Eject_Request {
        static instance: CStorageDeviceManager_Eject_Request = CStorageDeviceManager_Eject_Request {
            drive_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Eject_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Eject_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Eject_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Eject_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Eject_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Eject_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Eject_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Eject_Response {
    fn default() -> &'a CStorageDeviceManager_Eject_Response {
        <CStorageDeviceManager_Eject_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Eject_Response {
    pub fn new() -> CStorageDeviceManager_Eject_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Eject_Response>(
            "CStorageDeviceManager_Eject_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Eject_Response {
    const NAME: &'static str = "CStorageDeviceManager_Eject_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Eject_Response {
        CStorageDeviceManager_Eject_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Eject_Response {
        static instance: CStorageDeviceManager_Eject_Response = CStorageDeviceManager_Eject_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Eject_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Eject_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Eject_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Eject_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Adopt_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Adopt_Request {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManager_Adopt_Request.drive_id)
    pub drive_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CStorageDeviceManager_Adopt_Request.label)
    pub label: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Adopt_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Adopt_Request {
    fn default() -> &'a CStorageDeviceManager_Adopt_Request {
        <CStorageDeviceManager_Adopt_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Adopt_Request {
    pub fn new() -> CStorageDeviceManager_Adopt_Request {
        ::std::default::Default::default()
    }

    // optional uint32 drive_id = 1;

    pub fn drive_id(&self) -> u32 {
        self.drive_id.unwrap_or(0)
    }

    pub fn clear_drive_id(&mut self) {
        self.drive_id = ::std::option::Option::None;
    }

    pub fn has_drive_id(&self) -> bool {
        self.drive_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drive_id(&mut self, v: u32) {
        self.drive_id = ::std::option::Option::Some(v);
    }

    // optional string label = 2;

    pub fn label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_label(&mut self) {
        self.label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label = ::std::option::Option::Some(::std::string::String::new());
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "drive_id",
            |m: &CStorageDeviceManager_Adopt_Request| { &m.drive_id },
            |m: &mut CStorageDeviceManager_Adopt_Request| { &mut m.drive_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "label",
            |m: &CStorageDeviceManager_Adopt_Request| { &m.label },
            |m: &mut CStorageDeviceManager_Adopt_Request| { &mut m.label },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Adopt_Request>(
            "CStorageDeviceManager_Adopt_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Adopt_Request {
    const NAME: &'static str = "CStorageDeviceManager_Adopt_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.drive_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.label = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.drive_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.label.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.drive_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.label.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Adopt_Request {
        CStorageDeviceManager_Adopt_Request::new()
    }

    fn clear(&mut self) {
        self.drive_id = ::std::option::Option::None;
        self.label = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Adopt_Request {
        static instance: CStorageDeviceManager_Adopt_Request = CStorageDeviceManager_Adopt_Request {
            drive_id: ::std::option::Option::None,
            label: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Adopt_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Adopt_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Adopt_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Adopt_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Adopt_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Adopt_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Adopt_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Adopt_Response {
    fn default() -> &'a CStorageDeviceManager_Adopt_Response {
        <CStorageDeviceManager_Adopt_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Adopt_Response {
    pub fn new() -> CStorageDeviceManager_Adopt_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Adopt_Response>(
            "CStorageDeviceManager_Adopt_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Adopt_Response {
    const NAME: &'static str = "CStorageDeviceManager_Adopt_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Adopt_Response {
        CStorageDeviceManager_Adopt_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Adopt_Response {
        static instance: CStorageDeviceManager_Adopt_Response = CStorageDeviceManager_Adopt_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Adopt_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Adopt_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Adopt_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Adopt_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Format_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Format_Request {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManager_Format_Request.block_device_id)
    pub block_device_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Format_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Format_Request {
    fn default() -> &'a CStorageDeviceManager_Format_Request {
        <CStorageDeviceManager_Format_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Format_Request {
    pub fn new() -> CStorageDeviceManager_Format_Request {
        ::std::default::Default::default()
    }

    // optional uint32 block_device_id = 1;

    pub fn block_device_id(&self) -> u32 {
        self.block_device_id.unwrap_or(0)
    }

    pub fn clear_block_device_id(&mut self) {
        self.block_device_id = ::std::option::Option::None;
    }

    pub fn has_block_device_id(&self) -> bool {
        self.block_device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_device_id(&mut self, v: u32) {
        self.block_device_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "block_device_id",
            |m: &CStorageDeviceManager_Format_Request| { &m.block_device_id },
            |m: &mut CStorageDeviceManager_Format_Request| { &mut m.block_device_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Format_Request>(
            "CStorageDeviceManager_Format_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Format_Request {
    const NAME: &'static str = "CStorageDeviceManager_Format_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.block_device_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block_device_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.block_device_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Format_Request {
        CStorageDeviceManager_Format_Request::new()
    }

    fn clear(&mut self) {
        self.block_device_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Format_Request {
        static instance: CStorageDeviceManager_Format_Request = CStorageDeviceManager_Format_Request {
            block_device_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Format_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Format_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Format_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Format_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Format_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Format_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Format_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Format_Response {
    fn default() -> &'a CStorageDeviceManager_Format_Response {
        <CStorageDeviceManager_Format_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Format_Response {
    pub fn new() -> CStorageDeviceManager_Format_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Format_Response>(
            "CStorageDeviceManager_Format_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Format_Response {
    const NAME: &'static str = "CStorageDeviceManager_Format_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Format_Response {
        CStorageDeviceManager_Format_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Format_Response {
        static instance: CStorageDeviceManager_Format_Response = CStorageDeviceManager_Format_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Format_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Format_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Format_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Format_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Unmount_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Unmount_Request {
    // message fields
    // @@protoc_insertion_point(field:CStorageDeviceManager_Unmount_Request.block_device_id)
    pub block_device_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Unmount_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Unmount_Request {
    fn default() -> &'a CStorageDeviceManager_Unmount_Request {
        <CStorageDeviceManager_Unmount_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Unmount_Request {
    pub fn new() -> CStorageDeviceManager_Unmount_Request {
        ::std::default::Default::default()
    }

    // optional uint32 block_device_id = 1;

    pub fn block_device_id(&self) -> u32 {
        self.block_device_id.unwrap_or(0)
    }

    pub fn clear_block_device_id(&mut self) {
        self.block_device_id = ::std::option::Option::None;
    }

    pub fn has_block_device_id(&self) -> bool {
        self.block_device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_device_id(&mut self, v: u32) {
        self.block_device_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "block_device_id",
            |m: &CStorageDeviceManager_Unmount_Request| { &m.block_device_id },
            |m: &mut CStorageDeviceManager_Unmount_Request| { &mut m.block_device_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Unmount_Request>(
            "CStorageDeviceManager_Unmount_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Unmount_Request {
    const NAME: &'static str = "CStorageDeviceManager_Unmount_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.block_device_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block_device_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.block_device_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Unmount_Request {
        CStorageDeviceManager_Unmount_Request::new()
    }

    fn clear(&mut self) {
        self.block_device_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Unmount_Request {
        static instance: CStorageDeviceManager_Unmount_Request = CStorageDeviceManager_Unmount_Request {
            block_device_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Unmount_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Unmount_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Unmount_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Unmount_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_Unmount_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_Unmount_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_Unmount_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_Unmount_Response {
    fn default() -> &'a CStorageDeviceManager_Unmount_Response {
        <CStorageDeviceManager_Unmount_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_Unmount_Response {
    pub fn new() -> CStorageDeviceManager_Unmount_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_Unmount_Response>(
            "CStorageDeviceManager_Unmount_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_Unmount_Response {
    const NAME: &'static str = "CStorageDeviceManager_Unmount_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_Unmount_Response {
        CStorageDeviceManager_Unmount_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_Unmount_Response {
        static instance: CStorageDeviceManager_Unmount_Response = CStorageDeviceManager_Unmount_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_Unmount_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_Unmount_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_Unmount_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_Unmount_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_TrimAll_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_TrimAll_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_TrimAll_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_TrimAll_Request {
    fn default() -> &'a CStorageDeviceManager_TrimAll_Request {
        <CStorageDeviceManager_TrimAll_Request as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_TrimAll_Request {
    pub fn new() -> CStorageDeviceManager_TrimAll_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_TrimAll_Request>(
            "CStorageDeviceManager_TrimAll_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_TrimAll_Request {
    const NAME: &'static str = "CStorageDeviceManager_TrimAll_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_TrimAll_Request {
        CStorageDeviceManager_TrimAll_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_TrimAll_Request {
        static instance: CStorageDeviceManager_TrimAll_Request = CStorageDeviceManager_TrimAll_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_TrimAll_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_TrimAll_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_TrimAll_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_TrimAll_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CStorageDeviceManager_TrimAll_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorageDeviceManager_TrimAll_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CStorageDeviceManager_TrimAll_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorageDeviceManager_TrimAll_Response {
    fn default() -> &'a CStorageDeviceManager_TrimAll_Response {
        <CStorageDeviceManager_TrimAll_Response as crate::Message>::default_instance()
    }
}

impl CStorageDeviceManager_TrimAll_Response {
    pub fn new() -> CStorageDeviceManager_TrimAll_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorageDeviceManager_TrimAll_Response>(
            "CStorageDeviceManager_TrimAll_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorageDeviceManager_TrimAll_Response {
    const NAME: &'static str = "CStorageDeviceManager_TrimAll_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorageDeviceManager_TrimAll_Response {
        CStorageDeviceManager_TrimAll_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorageDeviceManager_TrimAll_Response {
        static instance: CStorageDeviceManager_TrimAll_Response = CStorageDeviceManager_TrimAll_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorageDeviceManager_TrimAll_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorageDeviceManager_TrimAll_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorageDeviceManager_TrimAll_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorageDeviceManager_TrimAll_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(webuimessages_storagedevicemanager.proto\x1a\x0benums.proto\x1a\x18st\
    eammessages_base.proto\x1a\x18webuimessages_base.proto\"2\n0CStorageDevi\
    ceManager_IsServiceAvailable_Request\"V\n1CStorageDeviceManager_IsServic\
    eAvailable_Response\x12!\n\x0cis_available\x18\x01\x20\x01(\x08R\x0bisAv\
    ailable\"\xe3\x03\n\x1aCStorageDeviceManagerDrive\x12\x11\n\x02id\x18\
    \x01\x20\x01(\r:\x010R\x02id\x12\x14\n\x05model\x18\x02\x20\x01(\tR\x05m\
    odel\x12\x16\n\x06vendor\x18\x03\x20\x01(\tR\x06vendor\x12\x16\n\x06seri\
    al\x18\x04\x20\x01(\tR\x06serial\x12!\n\x0cis_ejectable\x18\x05\x20\x01(\
    \x08R\x0bisEjectable\x12\x1d\n\nsize_bytes\x18\x06\x20\x01(\x04R\tsizeBy\
    tes\x12X\n\nmedia_type\x18\x07\x20\x01(\x0e2\x17.EStorageDriveMediaType:\
    \x20k_EStorageDriveMediaType_InvalidR\tmediaType\x12%\n\x0eis_unformatte\
    d\x18\x08\x20\x01(\x08R\risUnformatted\x12T\n\x0badopt_stage\x18\t\x20\
    \x01(\x0e2\x14.EStorageFormatStage:\x1dk_EStorageFormatStage_InvalidR\na\
    doptStage\x12%\n\x0eis_formattable\x18\n\x20\x01(\x08R\risFormattable\
    \x12,\n\x12is_media_available\x18\x0b\x20\x01(\x08R\x10isMediaAvailable\
    \"\xc6\x04\n\x20CStorageDeviceManagerBlockDevice\x12\x11\n\x02id\x18\x01\
    \x20\x01(\r:\x010R\x02id\x12\x1c\n\x08drive_id\x18\x02\x20\x01(\r:\x010R\
    \x07driveId\x12\x12\n\x04path\x18\x03\x20\x01(\tR\x04path\x12#\n\rfriend\
    ly_path\x18\x04\x20\x01(\tR\x0cfriendlyPath\x12\x14\n\x05label\x18\x05\
    \x20\x01(\tR\x05label\x12\x1d\n\nsize_bytes\x18\x06\x20\x01(\x04R\tsizeB\
    ytes\x12%\n\x0eis_formattable\x18\x07\x20\x01(\x08R\risFormattable\x12\
    \x20\n\x0cis_read_only\x18\x08\x20\x01(\x08R\nisReadOnly\x12$\n\x0eis_ro\
    ot_device\x18\t\x20\x01(\x08R\x0cisRootDevice\x12`\n\x0ccontent_type\x18\
    \n\x20\x01(\x0e2\x19.EStorageBlockContentType:\"k_EStorageBlockContentTy\
    pe_InvalidR\x0bcontentType\x12l\n\x0ffilesystem_type\x18\x0b\x20\x01(\
    \x0e2\x1c.EStorageBlockFileSystemType:%k_EStorageBlockFileSystemType_Inv\
    alidR\x0efilesystemType\x12\x1f\n\x0bmount_paths\x18\x0c\x20\x03(\tR\nmo\
    untPaths\x12#\n\ris_unmounting\x18\r\x20\x01(\x08R\x0cisUnmounting\"\xcd\
    \x02\n\x1aCStorageDeviceManagerState\x123\n\x06drives\x18\x01\x20\x03(\
    \x0b2\x1b.CStorageDeviceManagerDriveR\x06drives\x12F\n\rblock_devices\
    \x18\x02\x20\x03(\x0b2!.CStorageDeviceManagerBlockDeviceR\x0cblockDevice\
    s\x120\n\x14is_unmount_supported\x18\x03\x20\x01(\x08R\x12isUnmountSuppo\
    rted\x12*\n\x11is_trim_supported\x18\x04\x20\x01(\x08R\x0fisTrimSupporte\
    d\x12&\n\x0fis_trim_running\x18\x05\x20\x01(\x08R\risTrimRunning\x12,\n\
    \x12is_adopt_supported\x18\x06\x20\x01(\x08R\x10isAdoptSupported\"(\n&CS\
    torageDeviceManager_GetState_Request\"\\\n'CStorageDeviceManager_GetStat\
    e_Response\x121\n\x05state\x18\x01\x20\x01(\x0b2\x1b.CStorageDeviceManag\
    erStateR\x05state\"1\n/CStorageDeviceManager_StateChanged_Notification\"\
    @\n#CStorageDeviceManager_Eject_Request\x12\x19\n\x08drive_id\x18\x01\
    \x20\x01(\rR\x07driveId\"&\n$CStorageDeviceManager_Eject_Response\"V\n#C\
    StorageDeviceManager_Adopt_Request\x12\x19\n\x08drive_id\x18\x01\x20\x01\
    (\rR\x07driveId\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\"&\n$CSt\
    orageDeviceManager_Adopt_Response\"N\n$CStorageDeviceManager_Format_Requ\
    est\x12&\n\x0fblock_device_id\x18\x01\x20\x01(\rR\rblockDeviceId\"'\n%CS\
    torageDeviceManager_Format_Response\"O\n%CStorageDeviceManager_Unmount_R\
    equest\x12&\n\x0fblock_device_id\x18\x01\x20\x01(\rR\rblockDeviceId\"(\n\
    &CStorageDeviceManager_Unmount_Response\"'\n%CStorageDeviceManager_TrimA\
    ll_Request\"(\n&CStorageDeviceManager_TrimAll_Response2\x8f\x06\n\x14Sto\
    rageDeviceManager\x12{\n\x12IsServiceAvailable\x121.CStorageDeviceManage\
    r_IsServiceAvailable_Request\x1a2.CStorageDeviceManager_IsServiceAvailab\
    le_Response\x12]\n\x08GetState\x12'.CStorageDeviceManager_GetState_Reque\
    st\x1a(.CStorageDeviceManager_GetState_Response\x12X\n\x12NotifyStateCha\
    nged\x120.CStorageDeviceManager_StateChanged_Notification\x1a\x10.WebUIN\
    oResponse\x12T\n\x05Adopt\x12$.CStorageDeviceManager_Adopt_Request\x1a%.\
    CStorageDeviceManager_Adopt_Response\x12T\n\x05Eject\x12$.CStorageDevice\
    Manager_Eject_Request\x1a%.CStorageDeviceManager_Eject_Response\x12W\n\
    \x06Format\x12%.CStorageDeviceManager_Format_Request\x1a&.CStorageDevice\
    Manager_Format_Response\x12Z\n\x07Unmount\x12&.CStorageDeviceManager_Unm\
    ount_Request\x1a'.CStorageDeviceManager_Unmount_Response\x12Z\n\x07TrimA\
    ll\x12&.CStorageDeviceManager_TrimAll_Request\x1a'.CStorageDeviceManager\
    _TrimAll_Response\x1a\x04\x80\x97\"\x01B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::enums::file_descriptor().clone());
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(18);
            messages.push(CStorageDeviceManager_IsServiceAvailable_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_IsServiceAvailable_Response::generated_message_descriptor_data());
            messages.push(CStorageDeviceManagerDrive::generated_message_descriptor_data());
            messages.push(CStorageDeviceManagerBlockDevice::generated_message_descriptor_data());
            messages.push(CStorageDeviceManagerState::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_GetState_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_GetState_Response::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_StateChanged_Notification::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Eject_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Eject_Response::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Adopt_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Adopt_Response::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Format_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Format_Response::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Unmount_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_Unmount_Response::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_TrimAll_Request::generated_message_descriptor_data());
            messages.push(CStorageDeviceManager_TrimAll_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
