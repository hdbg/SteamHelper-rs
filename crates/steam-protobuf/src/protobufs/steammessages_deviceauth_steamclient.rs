// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_deviceauth.steamclient.proto`

// @@protoc_insertion_point(message:CDeviceAuth_GetOwnAuthorizedDevices_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetOwnAuthorizedDevices_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Request.include_canceled)
    pub include_canceled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetOwnAuthorizedDevices_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetOwnAuthorizedDevices_Request {
    fn default() -> &'a CDeviceAuth_GetOwnAuthorizedDevices_Request {
        <CDeviceAuth_GetOwnAuthorizedDevices_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetOwnAuthorizedDevices_Request {
    pub fn new() -> CDeviceAuth_GetOwnAuthorizedDevices_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_canceled = 2;

    pub fn include_canceled(&self) -> bool {
        self.include_canceled.unwrap_or(false)
    }

    pub fn clear_include_canceled(&mut self) {
        self.include_canceled = ::std::option::Option::None;
    }

    pub fn has_include_canceled(&self) -> bool {
        self.include_canceled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_canceled(&mut self, v: bool) {
        self.include_canceled = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_GetOwnAuthorizedDevices_Request| { &m.steamid },
            |m: &mut CDeviceAuth_GetOwnAuthorizedDevices_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_canceled",
            |m: &CDeviceAuth_GetOwnAuthorizedDevices_Request| { &m.include_canceled },
            |m: &mut CDeviceAuth_GetOwnAuthorizedDevices_Request| { &mut m.include_canceled },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetOwnAuthorizedDevices_Request>(
            "CDeviceAuth_GetOwnAuthorizedDevices_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetOwnAuthorizedDevices_Request {
    const NAME: &'static str = "CDeviceAuth_GetOwnAuthorizedDevices_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_canceled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_canceled {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_canceled {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetOwnAuthorizedDevices_Request {
        CDeviceAuth_GetOwnAuthorizedDevices_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_canceled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetOwnAuthorizedDevices_Request {
        static instance: CDeviceAuth_GetOwnAuthorizedDevices_Request = CDeviceAuth_GetOwnAuthorizedDevices_Request {
            steamid: ::std::option::Option::None,
            include_canceled: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetOwnAuthorizedDevices_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetOwnAuthorizedDevices_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetOwnAuthorizedDevices_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetOwnAuthorizedDevices_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetOwnAuthorizedDevices_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetOwnAuthorizedDevices_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
    pub devices: ::std::vec::Vec<cdevice_auth_get_own_authorized_devices_response::Device>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetOwnAuthorizedDevices_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetOwnAuthorizedDevices_Response {
    fn default() -> &'a CDeviceAuth_GetOwnAuthorizedDevices_Response {
        <CDeviceAuth_GetOwnAuthorizedDevices_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetOwnAuthorizedDevices_Response {
    pub fn new() -> CDeviceAuth_GetOwnAuthorizedDevices_Response {
        ::std::default::Default::default()
    }

    // repeated .CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;

    pub fn devices(&self) -> &[cdevice_auth_get_own_authorized_devices_response::Device] {
        &self.devices
    }

    pub fn clear_devices(&mut self) {
        self.devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_devices(&mut self, v: ::std::vec::Vec<cdevice_auth_get_own_authorized_devices_response::Device>) {
        self.devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_devices(&mut self) -> &mut ::std::vec::Vec<cdevice_auth_get_own_authorized_devices_response::Device> {
        &mut self.devices
    }

    // Take field
    pub fn take_devices(&mut self) -> ::std::vec::Vec<cdevice_auth_get_own_authorized_devices_response::Device> {
        ::std::mem::replace(&mut self.devices, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "devices",
            |m: &CDeviceAuth_GetOwnAuthorizedDevices_Response| { &m.devices },
            |m: &mut CDeviceAuth_GetOwnAuthorizedDevices_Response| { &mut m.devices },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetOwnAuthorizedDevices_Response>(
            "CDeviceAuth_GetOwnAuthorizedDevices_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetOwnAuthorizedDevices_Response {
    const NAME: &'static str = "CDeviceAuth_GetOwnAuthorizedDevices_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.devices.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.devices {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetOwnAuthorizedDevices_Response {
        CDeviceAuth_GetOwnAuthorizedDevices_Response::new()
    }

    fn clear(&mut self) {
        self.devices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetOwnAuthorizedDevices_Response {
        static instance: CDeviceAuth_GetOwnAuthorizedDevices_Response = CDeviceAuth_GetOwnAuthorizedDevices_Response {
            devices: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetOwnAuthorizedDevices_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetOwnAuthorizedDevices_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetOwnAuthorizedDevices_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetOwnAuthorizedDevices_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDeviceAuth_GetOwnAuthorizedDevices_Response`
pub mod cdevice_auth_get_own_authorized_devices_response {
    // @@protoc_insertion_point(message:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Device {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.auth_device_token)
        pub auth_device_token: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
        pub device_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_pending)
        pub is_pending: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_canceled)
        pub is_canceled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_time_used)
        pub last_time_used: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_borrower_id)
        pub last_borrower_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_app_played)
        pub last_app_played: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_limited)
        pub is_limited: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Device {
        fn default() -> &'a Device {
            <Device as crate::Message>::default_instance()
        }
    }

    impl Device {
        pub fn new() -> Device {
            ::std::default::Default::default()
        }

        // optional fixed64 auth_device_token = 1;

        pub fn auth_device_token(&self) -> u64 {
            self.auth_device_token.unwrap_or(0)
        }

        pub fn clear_auth_device_token(&mut self) {
            self.auth_device_token = ::std::option::Option::None;
        }

        pub fn has_auth_device_token(&self) -> bool {
            self.auth_device_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_auth_device_token(&mut self, v: u64) {
            self.auth_device_token = ::std::option::Option::Some(v);
        }

        // optional string device_name = 2;

        pub fn device_name(&self) -> &str {
            match self.device_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_device_name(&mut self) {
            self.device_name = ::std::option::Option::None;
        }

        pub fn has_device_name(&self) -> bool {
            self.device_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device_name(&mut self, v: ::std::string::String) {
            self.device_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
            if self.device_name.is_none() {
                self.device_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.device_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_device_name(&mut self) -> ::std::string::String {
            self.device_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool is_pending = 3;

        pub fn is_pending(&self) -> bool {
            self.is_pending.unwrap_or(false)
        }

        pub fn clear_is_pending(&mut self) {
            self.is_pending = ::std::option::Option::None;
        }

        pub fn has_is_pending(&self) -> bool {
            self.is_pending.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_pending(&mut self, v: bool) {
            self.is_pending = ::std::option::Option::Some(v);
        }

        // optional bool is_canceled = 4;

        pub fn is_canceled(&self) -> bool {
            self.is_canceled.unwrap_or(false)
        }

        pub fn clear_is_canceled(&mut self) {
            self.is_canceled = ::std::option::Option::None;
        }

        pub fn has_is_canceled(&self) -> bool {
            self.is_canceled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_canceled(&mut self, v: bool) {
            self.is_canceled = ::std::option::Option::Some(v);
        }

        // optional uint32 last_time_used = 5;

        pub fn last_time_used(&self) -> u32 {
            self.last_time_used.unwrap_or(0)
        }

        pub fn clear_last_time_used(&mut self) {
            self.last_time_used = ::std::option::Option::None;
        }

        pub fn has_last_time_used(&self) -> bool {
            self.last_time_used.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_time_used(&mut self, v: u32) {
            self.last_time_used = ::std::option::Option::Some(v);
        }

        // optional fixed64 last_borrower_id = 6;

        pub fn last_borrower_id(&self) -> u64 {
            self.last_borrower_id.unwrap_or(0)
        }

        pub fn clear_last_borrower_id(&mut self) {
            self.last_borrower_id = ::std::option::Option::None;
        }

        pub fn has_last_borrower_id(&self) -> bool {
            self.last_borrower_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_borrower_id(&mut self, v: u64) {
            self.last_borrower_id = ::std::option::Option::Some(v);
        }

        // optional uint32 last_app_played = 7;

        pub fn last_app_played(&self) -> u32 {
            self.last_app_played.unwrap_or(0)
        }

        pub fn clear_last_app_played(&mut self) {
            self.last_app_played = ::std::option::Option::None;
        }

        pub fn has_last_app_played(&self) -> bool {
            self.last_app_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_app_played(&mut self, v: u32) {
            self.last_app_played = ::std::option::Option::Some(v);
        }

        // optional bool is_limited = 8;

        pub fn is_limited(&self) -> bool {
            self.is_limited.unwrap_or(false)
        }

        pub fn clear_is_limited(&mut self) {
            self.is_limited = ::std::option::Option::None;
        }

        pub fn has_is_limited(&self) -> bool {
            self.is_limited.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_limited(&mut self, v: bool) {
            self.is_limited = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(8);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "auth_device_token",
                |m: &Device| { &m.auth_device_token },
                |m: &mut Device| { &mut m.auth_device_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "device_name",
                |m: &Device| { &m.device_name },
                |m: &mut Device| { &mut m.device_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_pending",
                |m: &Device| { &m.is_pending },
                |m: &mut Device| { &mut m.is_pending },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_canceled",
                |m: &Device| { &m.is_canceled },
                |m: &mut Device| { &mut m.is_canceled },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_time_used",
                |m: &Device| { &m.last_time_used },
                |m: &mut Device| { &mut m.last_time_used },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_borrower_id",
                |m: &Device| { &m.last_borrower_id },
                |m: &mut Device| { &mut m.last_borrower_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_app_played",
                |m: &Device| { &m.last_app_played },
                |m: &mut Device| { &mut m.last_app_played },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_limited",
                |m: &Device| { &m.is_limited },
                |m: &mut Device| { &mut m.is_limited },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Device>(
                "CDeviceAuth_GetOwnAuthorizedDevices_Response.Device",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Device {
        const NAME: &'static str = "Device";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.auth_device_token = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.device_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.is_pending = ::std::option::Option::Some(is.read_bool()?);
                    },
                    32 => {
                        self.is_canceled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.last_time_used = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    49 => {
                        self.last_borrower_id = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    56 => {
                        self.last_app_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    64 => {
                        self.is_limited = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.auth_device_token {
                my_size += 1 + 8;
            }
            if let Some(v) = self.device_name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.is_pending {
                my_size += 1 + 1;
            }
            if let Some(v) = self.is_canceled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.last_time_used {
                my_size += crate::rt::uint32_size(5, v);
            }
            if let Some(v) = self.last_borrower_id {
                my_size += 1 + 8;
            }
            if let Some(v) = self.last_app_played {
                my_size += crate::rt::uint32_size(7, v);
            }
            if let Some(v) = self.is_limited {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.auth_device_token {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.device_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.is_pending {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.is_canceled {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.last_time_used {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.last_borrower_id {
                os.write_fixed64(6, v)?;
            }
            if let Some(v) = self.last_app_played {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.is_limited {
                os.write_bool(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Device {
            Device::new()
        }

        fn clear(&mut self) {
            self.auth_device_token = ::std::option::Option::None;
            self.device_name = ::std::option::Option::None;
            self.is_pending = ::std::option::Option::None;
            self.is_canceled = ::std::option::Option::None;
            self.last_time_used = ::std::option::Option::None;
            self.last_borrower_id = ::std::option::Option::None;
            self.last_app_played = ::std::option::Option::None;
            self.is_limited = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Device {
            static instance: Device = Device {
                auth_device_token: ::std::option::Option::None,
                device_name: ::std::option::Option::None,
                is_pending: ::std::option::Option::None,
                is_canceled: ::std::option::Option::None,
                last_time_used: ::std::option::Option::None,
                last_borrower_id: ::std::option::Option::None,
                last_app_played: ::std::option::Option::None,
                is_limited: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Device {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetOwnAuthorizedDevices_Response.Device").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Device {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Device {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CDeviceAuth_AcceptAuthorizationRequest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_AcceptAuthorizationRequest_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_AcceptAuthorizationRequest_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_AcceptAuthorizationRequest_Request.auth_device_token)
    pub auth_device_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_AcceptAuthorizationRequest_Request.auth_code)
    pub auth_code: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_AcceptAuthorizationRequest_Request.from_steamid)
    pub from_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_AcceptAuthorizationRequest_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_AcceptAuthorizationRequest_Request {
    fn default() -> &'a CDeviceAuth_AcceptAuthorizationRequest_Request {
        <CDeviceAuth_AcceptAuthorizationRequest_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_AcceptAuthorizationRequest_Request {
    pub fn new() -> CDeviceAuth_AcceptAuthorizationRequest_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 auth_device_token = 2;

    pub fn auth_device_token(&self) -> u64 {
        self.auth_device_token.unwrap_or(0)
    }

    pub fn clear_auth_device_token(&mut self) {
        self.auth_device_token = ::std::option::Option::None;
    }

    pub fn has_auth_device_token(&self) -> bool {
        self.auth_device_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_device_token(&mut self, v: u64) {
        self.auth_device_token = ::std::option::Option::Some(v);
    }

    // optional fixed64 auth_code = 3;

    pub fn auth_code(&self) -> u64 {
        self.auth_code.unwrap_or(0)
    }

    pub fn clear_auth_code(&mut self) {
        self.auth_code = ::std::option::Option::None;
    }

    pub fn has_auth_code(&self) -> bool {
        self.auth_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_code(&mut self, v: u64) {
        self.auth_code = ::std::option::Option::Some(v);
    }

    // optional fixed64 from_steamid = 4;

    pub fn from_steamid(&self) -> u64 {
        self.from_steamid.unwrap_or(0)
    }

    pub fn clear_from_steamid(&mut self) {
        self.from_steamid = ::std::option::Option::None;
    }

    pub fn has_from_steamid(&self) -> bool {
        self.from_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_steamid(&mut self, v: u64) {
        self.from_steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_AcceptAuthorizationRequest_Request| { &m.steamid },
            |m: &mut CDeviceAuth_AcceptAuthorizationRequest_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_device_token",
            |m: &CDeviceAuth_AcceptAuthorizationRequest_Request| { &m.auth_device_token },
            |m: &mut CDeviceAuth_AcceptAuthorizationRequest_Request| { &mut m.auth_device_token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_code",
            |m: &CDeviceAuth_AcceptAuthorizationRequest_Request| { &m.auth_code },
            |m: &mut CDeviceAuth_AcceptAuthorizationRequest_Request| { &mut m.auth_code },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_steamid",
            |m: &CDeviceAuth_AcceptAuthorizationRequest_Request| { &m.from_steamid },
            |m: &mut CDeviceAuth_AcceptAuthorizationRequest_Request| { &mut m.from_steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_AcceptAuthorizationRequest_Request>(
            "CDeviceAuth_AcceptAuthorizationRequest_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_AcceptAuthorizationRequest_Request {
    const NAME: &'static str = "CDeviceAuth_AcceptAuthorizationRequest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.auth_device_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.auth_code = ::std::option::Option::Some(is.read_fixed64()?);
                },
                33 => {
                    self.from_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.auth_device_token {
            my_size += 1 + 8;
        }
        if let Some(v) = self.auth_code {
            my_size += 1 + 8;
        }
        if let Some(v) = self.from_steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.auth_device_token {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.auth_code {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.from_steamid {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_AcceptAuthorizationRequest_Request {
        CDeviceAuth_AcceptAuthorizationRequest_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.auth_device_token = ::std::option::Option::None;
        self.auth_code = ::std::option::Option::None;
        self.from_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_AcceptAuthorizationRequest_Request {
        static instance: CDeviceAuth_AcceptAuthorizationRequest_Request = CDeviceAuth_AcceptAuthorizationRequest_Request {
            steamid: ::std::option::Option::None,
            auth_device_token: ::std::option::Option::None,
            auth_code: ::std::option::Option::None,
            from_steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_AcceptAuthorizationRequest_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_AcceptAuthorizationRequest_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_AcceptAuthorizationRequest_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_AcceptAuthorizationRequest_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_AcceptAuthorizationRequest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_AcceptAuthorizationRequest_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_AcceptAuthorizationRequest_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_AcceptAuthorizationRequest_Response {
    fn default() -> &'a CDeviceAuth_AcceptAuthorizationRequest_Response {
        <CDeviceAuth_AcceptAuthorizationRequest_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_AcceptAuthorizationRequest_Response {
    pub fn new() -> CDeviceAuth_AcceptAuthorizationRequest_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_AcceptAuthorizationRequest_Response>(
            "CDeviceAuth_AcceptAuthorizationRequest_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_AcceptAuthorizationRequest_Response {
    const NAME: &'static str = "CDeviceAuth_AcceptAuthorizationRequest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_AcceptAuthorizationRequest_Response {
        CDeviceAuth_AcceptAuthorizationRequest_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_AcceptAuthorizationRequest_Response {
        static instance: CDeviceAuth_AcceptAuthorizationRequest_Response = CDeviceAuth_AcceptAuthorizationRequest_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_AcceptAuthorizationRequest_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_AcceptAuthorizationRequest_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_AcceptAuthorizationRequest_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_AcceptAuthorizationRequest_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_AuthorizeRemoteDevice_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_AuthorizeRemoteDevice_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_AuthorizeRemoteDevice_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_AuthorizeRemoteDevice_Request.auth_device_token)
    pub auth_device_token: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_AuthorizeRemoteDevice_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_AuthorizeRemoteDevice_Request {
    fn default() -> &'a CDeviceAuth_AuthorizeRemoteDevice_Request {
        <CDeviceAuth_AuthorizeRemoteDevice_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_AuthorizeRemoteDevice_Request {
    pub fn new() -> CDeviceAuth_AuthorizeRemoteDevice_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 auth_device_token = 2;

    pub fn auth_device_token(&self) -> u64 {
        self.auth_device_token.unwrap_or(0)
    }

    pub fn clear_auth_device_token(&mut self) {
        self.auth_device_token = ::std::option::Option::None;
    }

    pub fn has_auth_device_token(&self) -> bool {
        self.auth_device_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_device_token(&mut self, v: u64) {
        self.auth_device_token = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_AuthorizeRemoteDevice_Request| { &m.steamid },
            |m: &mut CDeviceAuth_AuthorizeRemoteDevice_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_device_token",
            |m: &CDeviceAuth_AuthorizeRemoteDevice_Request| { &m.auth_device_token },
            |m: &mut CDeviceAuth_AuthorizeRemoteDevice_Request| { &mut m.auth_device_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_AuthorizeRemoteDevice_Request>(
            "CDeviceAuth_AuthorizeRemoteDevice_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_AuthorizeRemoteDevice_Request {
    const NAME: &'static str = "CDeviceAuth_AuthorizeRemoteDevice_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.auth_device_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.auth_device_token {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.auth_device_token {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_AuthorizeRemoteDevice_Request {
        CDeviceAuth_AuthorizeRemoteDevice_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.auth_device_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_AuthorizeRemoteDevice_Request {
        static instance: CDeviceAuth_AuthorizeRemoteDevice_Request = CDeviceAuth_AuthorizeRemoteDevice_Request {
            steamid: ::std::option::Option::None,
            auth_device_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_AuthorizeRemoteDevice_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_AuthorizeRemoteDevice_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_AuthorizeRemoteDevice_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_AuthorizeRemoteDevice_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_AuthorizeRemoteDevice_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_AuthorizeRemoteDevice_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_AuthorizeRemoteDevice_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_AuthorizeRemoteDevice_Response {
    fn default() -> &'a CDeviceAuth_AuthorizeRemoteDevice_Response {
        <CDeviceAuth_AuthorizeRemoteDevice_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_AuthorizeRemoteDevice_Response {
    pub fn new() -> CDeviceAuth_AuthorizeRemoteDevice_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_AuthorizeRemoteDevice_Response>(
            "CDeviceAuth_AuthorizeRemoteDevice_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_AuthorizeRemoteDevice_Response {
    const NAME: &'static str = "CDeviceAuth_AuthorizeRemoteDevice_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_AuthorizeRemoteDevice_Response {
        CDeviceAuth_AuthorizeRemoteDevice_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_AuthorizeRemoteDevice_Response {
        static instance: CDeviceAuth_AuthorizeRemoteDevice_Response = CDeviceAuth_AuthorizeRemoteDevice_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_AuthorizeRemoteDevice_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_AuthorizeRemoteDevice_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_AuthorizeRemoteDevice_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_AuthorizeRemoteDevice_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_DeauthorizeRemoteDevice_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_DeauthorizeRemoteDevice_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_DeauthorizeRemoteDevice_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_DeauthorizeRemoteDevice_Request.auth_device_token)
    pub auth_device_token: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_DeauthorizeRemoteDevice_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_DeauthorizeRemoteDevice_Request {
    fn default() -> &'a CDeviceAuth_DeauthorizeRemoteDevice_Request {
        <CDeviceAuth_DeauthorizeRemoteDevice_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_DeauthorizeRemoteDevice_Request {
    pub fn new() -> CDeviceAuth_DeauthorizeRemoteDevice_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 auth_device_token = 2;

    pub fn auth_device_token(&self) -> u64 {
        self.auth_device_token.unwrap_or(0)
    }

    pub fn clear_auth_device_token(&mut self) {
        self.auth_device_token = ::std::option::Option::None;
    }

    pub fn has_auth_device_token(&self) -> bool {
        self.auth_device_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_device_token(&mut self, v: u64) {
        self.auth_device_token = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_DeauthorizeRemoteDevice_Request| { &m.steamid },
            |m: &mut CDeviceAuth_DeauthorizeRemoteDevice_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_device_token",
            |m: &CDeviceAuth_DeauthorizeRemoteDevice_Request| { &m.auth_device_token },
            |m: &mut CDeviceAuth_DeauthorizeRemoteDevice_Request| { &mut m.auth_device_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_DeauthorizeRemoteDevice_Request>(
            "CDeviceAuth_DeauthorizeRemoteDevice_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_DeauthorizeRemoteDevice_Request {
    const NAME: &'static str = "CDeviceAuth_DeauthorizeRemoteDevice_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.auth_device_token = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.auth_device_token {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.auth_device_token {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_DeauthorizeRemoteDevice_Request {
        CDeviceAuth_DeauthorizeRemoteDevice_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.auth_device_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_DeauthorizeRemoteDevice_Request {
        static instance: CDeviceAuth_DeauthorizeRemoteDevice_Request = CDeviceAuth_DeauthorizeRemoteDevice_Request {
            steamid: ::std::option::Option::None,
            auth_device_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_DeauthorizeRemoteDevice_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_DeauthorizeRemoteDevice_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_DeauthorizeRemoteDevice_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_DeauthorizeRemoteDevice_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_DeauthorizeRemoteDevice_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_DeauthorizeRemoteDevice_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_DeauthorizeRemoteDevice_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_DeauthorizeRemoteDevice_Response {
    fn default() -> &'a CDeviceAuth_DeauthorizeRemoteDevice_Response {
        <CDeviceAuth_DeauthorizeRemoteDevice_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_DeauthorizeRemoteDevice_Response {
    pub fn new() -> CDeviceAuth_DeauthorizeRemoteDevice_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_DeauthorizeRemoteDevice_Response>(
            "CDeviceAuth_DeauthorizeRemoteDevice_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_DeauthorizeRemoteDevice_Response {
    const NAME: &'static str = "CDeviceAuth_DeauthorizeRemoteDevice_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_DeauthorizeRemoteDevice_Response {
        CDeviceAuth_DeauthorizeRemoteDevice_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_DeauthorizeRemoteDevice_Response {
        static instance: CDeviceAuth_DeauthorizeRemoteDevice_Response = CDeviceAuth_DeauthorizeRemoteDevice_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_DeauthorizeRemoteDevice_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_DeauthorizeRemoteDevice_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_DeauthorizeRemoteDevice_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_DeauthorizeRemoteDevice_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetUsedAuthorizedDevices_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetUsedAuthorizedDevices_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetUsedAuthorizedDevices_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetUsedAuthorizedDevices_Request {
    fn default() -> &'a CDeviceAuth_GetUsedAuthorizedDevices_Request {
        <CDeviceAuth_GetUsedAuthorizedDevices_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetUsedAuthorizedDevices_Request {
    pub fn new() -> CDeviceAuth_GetUsedAuthorizedDevices_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_GetUsedAuthorizedDevices_Request| { &m.steamid },
            |m: &mut CDeviceAuth_GetUsedAuthorizedDevices_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetUsedAuthorizedDevices_Request>(
            "CDeviceAuth_GetUsedAuthorizedDevices_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetUsedAuthorizedDevices_Request {
    const NAME: &'static str = "CDeviceAuth_GetUsedAuthorizedDevices_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetUsedAuthorizedDevices_Request {
        CDeviceAuth_GetUsedAuthorizedDevices_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetUsedAuthorizedDevices_Request {
        static instance: CDeviceAuth_GetUsedAuthorizedDevices_Request = CDeviceAuth_GetUsedAuthorizedDevices_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetUsedAuthorizedDevices_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetUsedAuthorizedDevices_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetUsedAuthorizedDevices_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetUsedAuthorizedDevices_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetUsedAuthorizedDevices_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetUsedAuthorizedDevices_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
    pub devices: ::std::vec::Vec<cdevice_auth_get_used_authorized_devices_response::Device>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetUsedAuthorizedDevices_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetUsedAuthorizedDevices_Response {
    fn default() -> &'a CDeviceAuth_GetUsedAuthorizedDevices_Response {
        <CDeviceAuth_GetUsedAuthorizedDevices_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetUsedAuthorizedDevices_Response {
    pub fn new() -> CDeviceAuth_GetUsedAuthorizedDevices_Response {
        ::std::default::Default::default()
    }

    // repeated .CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;

    pub fn devices(&self) -> &[cdevice_auth_get_used_authorized_devices_response::Device] {
        &self.devices
    }

    pub fn clear_devices(&mut self) {
        self.devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_devices(&mut self, v: ::std::vec::Vec<cdevice_auth_get_used_authorized_devices_response::Device>) {
        self.devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_devices(&mut self) -> &mut ::std::vec::Vec<cdevice_auth_get_used_authorized_devices_response::Device> {
        &mut self.devices
    }

    // Take field
    pub fn take_devices(&mut self) -> ::std::vec::Vec<cdevice_auth_get_used_authorized_devices_response::Device> {
        ::std::mem::replace(&mut self.devices, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "devices",
            |m: &CDeviceAuth_GetUsedAuthorizedDevices_Response| { &m.devices },
            |m: &mut CDeviceAuth_GetUsedAuthorizedDevices_Response| { &mut m.devices },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetUsedAuthorizedDevices_Response>(
            "CDeviceAuth_GetUsedAuthorizedDevices_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetUsedAuthorizedDevices_Response {
    const NAME: &'static str = "CDeviceAuth_GetUsedAuthorizedDevices_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.devices.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.devices {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetUsedAuthorizedDevices_Response {
        CDeviceAuth_GetUsedAuthorizedDevices_Response::new()
    }

    fn clear(&mut self) {
        self.devices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetUsedAuthorizedDevices_Response {
        static instance: CDeviceAuth_GetUsedAuthorizedDevices_Response = CDeviceAuth_GetUsedAuthorizedDevices_Response {
            devices: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetUsedAuthorizedDevices_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetUsedAuthorizedDevices_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetUsedAuthorizedDevices_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetUsedAuthorizedDevices_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDeviceAuth_GetUsedAuthorizedDevices_Response`
pub mod cdevice_auth_get_used_authorized_devices_response {
    // @@protoc_insertion_point(message:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Device {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.auth_device_token)
        pub auth_device_token: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
        pub device_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.owner_steamid)
        pub owner_steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_time_used)
        pub last_time_used: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_app_played)
        pub last_app_played: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Device {
        fn default() -> &'a Device {
            <Device as crate::Message>::default_instance()
        }
    }

    impl Device {
        pub fn new() -> Device {
            ::std::default::Default::default()
        }

        // optional fixed64 auth_device_token = 1;

        pub fn auth_device_token(&self) -> u64 {
            self.auth_device_token.unwrap_or(0)
        }

        pub fn clear_auth_device_token(&mut self) {
            self.auth_device_token = ::std::option::Option::None;
        }

        pub fn has_auth_device_token(&self) -> bool {
            self.auth_device_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_auth_device_token(&mut self, v: u64) {
            self.auth_device_token = ::std::option::Option::Some(v);
        }

        // optional string device_name = 2;

        pub fn device_name(&self) -> &str {
            match self.device_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_device_name(&mut self) {
            self.device_name = ::std::option::Option::None;
        }

        pub fn has_device_name(&self) -> bool {
            self.device_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device_name(&mut self, v: ::std::string::String) {
            self.device_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
            if self.device_name.is_none() {
                self.device_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.device_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_device_name(&mut self) -> ::std::string::String {
            self.device_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional fixed64 owner_steamid = 3;

        pub fn owner_steamid(&self) -> u64 {
            self.owner_steamid.unwrap_or(0)
        }

        pub fn clear_owner_steamid(&mut self) {
            self.owner_steamid = ::std::option::Option::None;
        }

        pub fn has_owner_steamid(&self) -> bool {
            self.owner_steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_owner_steamid(&mut self, v: u64) {
            self.owner_steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 last_time_used = 4;

        pub fn last_time_used(&self) -> u32 {
            self.last_time_used.unwrap_or(0)
        }

        pub fn clear_last_time_used(&mut self) {
            self.last_time_used = ::std::option::Option::None;
        }

        pub fn has_last_time_used(&self) -> bool {
            self.last_time_used.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_time_used(&mut self, v: u32) {
            self.last_time_used = ::std::option::Option::Some(v);
        }

        // optional uint32 last_app_played = 5;

        pub fn last_app_played(&self) -> u32 {
            self.last_app_played.unwrap_or(0)
        }

        pub fn clear_last_app_played(&mut self) {
            self.last_app_played = ::std::option::Option::None;
        }

        pub fn has_last_app_played(&self) -> bool {
            self.last_app_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_app_played(&mut self, v: u32) {
            self.last_app_played = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "auth_device_token",
                |m: &Device| { &m.auth_device_token },
                |m: &mut Device| { &mut m.auth_device_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "device_name",
                |m: &Device| { &m.device_name },
                |m: &mut Device| { &mut m.device_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "owner_steamid",
                |m: &Device| { &m.owner_steamid },
                |m: &mut Device| { &mut m.owner_steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_time_used",
                |m: &Device| { &m.last_time_used },
                |m: &mut Device| { &mut m.last_time_used },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_app_played",
                |m: &Device| { &m.last_app_played },
                |m: &mut Device| { &mut m.last_app_played },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Device>(
                "CDeviceAuth_GetUsedAuthorizedDevices_Response.Device",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Device {
        const NAME: &'static str = "Device";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.auth_device_token = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.device_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    25 => {
                        self.owner_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    32 => {
                        self.last_time_used = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.last_app_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.auth_device_token {
                my_size += 1 + 8;
            }
            if let Some(v) = self.device_name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.owner_steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.last_time_used {
                my_size += crate::rt::uint32_size(4, v);
            }
            if let Some(v) = self.last_app_played {
                my_size += crate::rt::uint32_size(5, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.auth_device_token {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.device_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.owner_steamid {
                os.write_fixed64(3, v)?;
            }
            if let Some(v) = self.last_time_used {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.last_app_played {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Device {
            Device::new()
        }

        fn clear(&mut self) {
            self.auth_device_token = ::std::option::Option::None;
            self.device_name = ::std::option::Option::None;
            self.owner_steamid = ::std::option::Option::None;
            self.last_time_used = ::std::option::Option::None;
            self.last_app_played = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Device {
            static instance: Device = Device {
                auth_device_token: ::std::option::Option::None,
                device_name: ::std::option::Option::None,
                owner_steamid: ::std::option::Option::None,
                last_time_used: ::std::option::Option::None,
                last_app_played: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Device {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetUsedAuthorizedDevices_Response.Device").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Device {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Device {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CDeviceAuth_GetAuthorizedBorrowers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetAuthorizedBorrowers_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Request.include_canceled)
    pub include_canceled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Request.include_pending)
    pub include_pending: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetAuthorizedBorrowers_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetAuthorizedBorrowers_Request {
    fn default() -> &'a CDeviceAuth_GetAuthorizedBorrowers_Request {
        <CDeviceAuth_GetAuthorizedBorrowers_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetAuthorizedBorrowers_Request {
    pub fn new() -> CDeviceAuth_GetAuthorizedBorrowers_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_canceled = 2;

    pub fn include_canceled(&self) -> bool {
        self.include_canceled.unwrap_or(false)
    }

    pub fn clear_include_canceled(&mut self) {
        self.include_canceled = ::std::option::Option::None;
    }

    pub fn has_include_canceled(&self) -> bool {
        self.include_canceled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_canceled(&mut self, v: bool) {
        self.include_canceled = ::std::option::Option::Some(v);
    }

    // optional bool include_pending = 3;

    pub fn include_pending(&self) -> bool {
        self.include_pending.unwrap_or(false)
    }

    pub fn clear_include_pending(&mut self) {
        self.include_pending = ::std::option::Option::None;
    }

    pub fn has_include_pending(&self) -> bool {
        self.include_pending.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_pending(&mut self, v: bool) {
        self.include_pending = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_GetAuthorizedBorrowers_Request| { &m.steamid },
            |m: &mut CDeviceAuth_GetAuthorizedBorrowers_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_canceled",
            |m: &CDeviceAuth_GetAuthorizedBorrowers_Request| { &m.include_canceled },
            |m: &mut CDeviceAuth_GetAuthorizedBorrowers_Request| { &mut m.include_canceled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_pending",
            |m: &CDeviceAuth_GetAuthorizedBorrowers_Request| { &m.include_pending },
            |m: &mut CDeviceAuth_GetAuthorizedBorrowers_Request| { &mut m.include_pending },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetAuthorizedBorrowers_Request>(
            "CDeviceAuth_GetAuthorizedBorrowers_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetAuthorizedBorrowers_Request {
    const NAME: &'static str = "CDeviceAuth_GetAuthorizedBorrowers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_canceled = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.include_pending = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_canceled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_pending {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_canceled {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.include_pending {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetAuthorizedBorrowers_Request {
        CDeviceAuth_GetAuthorizedBorrowers_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_canceled = ::std::option::Option::None;
        self.include_pending = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetAuthorizedBorrowers_Request {
        static instance: CDeviceAuth_GetAuthorizedBorrowers_Request = CDeviceAuth_GetAuthorizedBorrowers_Request {
            steamid: ::std::option::Option::None,
            include_canceled: ::std::option::Option::None,
            include_pending: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetAuthorizedBorrowers_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetAuthorizedBorrowers_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetAuthorizedBorrowers_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetAuthorizedBorrowers_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetAuthorizedBorrowers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetAuthorizedBorrowers_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
    pub borrowers: ::std::vec::Vec<cdevice_auth_get_authorized_borrowers_response::Borrower>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetAuthorizedBorrowers_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetAuthorizedBorrowers_Response {
    fn default() -> &'a CDeviceAuth_GetAuthorizedBorrowers_Response {
        <CDeviceAuth_GetAuthorizedBorrowers_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetAuthorizedBorrowers_Response {
    pub fn new() -> CDeviceAuth_GetAuthorizedBorrowers_Response {
        ::std::default::Default::default()
    }

    // repeated .CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;

    pub fn borrowers(&self) -> &[cdevice_auth_get_authorized_borrowers_response::Borrower] {
        &self.borrowers
    }

    pub fn clear_borrowers(&mut self) {
        self.borrowers.clear();
    }

    // Param is passed by value, moved
    pub fn set_borrowers(&mut self, v: ::std::vec::Vec<cdevice_auth_get_authorized_borrowers_response::Borrower>) {
        self.borrowers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_borrowers(&mut self) -> &mut ::std::vec::Vec<cdevice_auth_get_authorized_borrowers_response::Borrower> {
        &mut self.borrowers
    }

    // Take field
    pub fn take_borrowers(&mut self) -> ::std::vec::Vec<cdevice_auth_get_authorized_borrowers_response::Borrower> {
        ::std::mem::replace(&mut self.borrowers, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "borrowers",
            |m: &CDeviceAuth_GetAuthorizedBorrowers_Response| { &m.borrowers },
            |m: &mut CDeviceAuth_GetAuthorizedBorrowers_Response| { &mut m.borrowers },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetAuthorizedBorrowers_Response>(
            "CDeviceAuth_GetAuthorizedBorrowers_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetAuthorizedBorrowers_Response {
    const NAME: &'static str = "CDeviceAuth_GetAuthorizedBorrowers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.borrowers.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.borrowers {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.borrowers {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetAuthorizedBorrowers_Response {
        CDeviceAuth_GetAuthorizedBorrowers_Response::new()
    }

    fn clear(&mut self) {
        self.borrowers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetAuthorizedBorrowers_Response {
        static instance: CDeviceAuth_GetAuthorizedBorrowers_Response = CDeviceAuth_GetAuthorizedBorrowers_Response {
            borrowers: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetAuthorizedBorrowers_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetAuthorizedBorrowers_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetAuthorizedBorrowers_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetAuthorizedBorrowers_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDeviceAuth_GetAuthorizedBorrowers_Response`
pub mod cdevice_auth_get_authorized_borrowers_response {
    // @@protoc_insertion_point(message:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Borrower {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_pending)
        pub is_pending: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_canceled)
        pub is_canceled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.time_created)
        pub time_created: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Borrower {
        fn default() -> &'a Borrower {
            <Borrower as crate::Message>::default_instance()
        }
    }

    impl Borrower {
        pub fn new() -> Borrower {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional bool is_pending = 2;

        pub fn is_pending(&self) -> bool {
            self.is_pending.unwrap_or(false)
        }

        pub fn clear_is_pending(&mut self) {
            self.is_pending = ::std::option::Option::None;
        }

        pub fn has_is_pending(&self) -> bool {
            self.is_pending.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_pending(&mut self, v: bool) {
            self.is_pending = ::std::option::Option::Some(v);
        }

        // optional bool is_canceled = 3;

        pub fn is_canceled(&self) -> bool {
            self.is_canceled.unwrap_or(false)
        }

        pub fn clear_is_canceled(&mut self) {
            self.is_canceled = ::std::option::Option::None;
        }

        pub fn has_is_canceled(&self) -> bool {
            self.is_canceled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_canceled(&mut self, v: bool) {
            self.is_canceled = ::std::option::Option::Some(v);
        }

        // optional uint32 time_created = 4;

        pub fn time_created(&self) -> u32 {
            self.time_created.unwrap_or(0)
        }

        pub fn clear_time_created(&mut self) {
            self.time_created = ::std::option::Option::None;
        }

        pub fn has_time_created(&self) -> bool {
            self.time_created.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_created(&mut self, v: u32) {
            self.time_created = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Borrower| { &m.steamid },
                |m: &mut Borrower| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_pending",
                |m: &Borrower| { &m.is_pending },
                |m: &mut Borrower| { &mut m.is_pending },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_canceled",
                |m: &Borrower| { &m.is_canceled },
                |m: &mut Borrower| { &mut m.is_canceled },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_created",
                |m: &Borrower| { &m.time_created },
                |m: &mut Borrower| { &mut m.time_created },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Borrower>(
                "CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Borrower {
        const NAME: &'static str = "Borrower";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.is_pending = ::std::option::Option::Some(is.read_bool()?);
                    },
                    24 => {
                        self.is_canceled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    32 => {
                        self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.is_pending {
                my_size += 1 + 1;
            }
            if let Some(v) = self.is_canceled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.time_created {
                my_size += crate::rt::uint32_size(4, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.is_pending {
                os.write_bool(2, v)?;
            }
            if let Some(v) = self.is_canceled {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.time_created {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Borrower {
            Borrower::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.is_pending = ::std::option::Option::None;
            self.is_canceled = ::std::option::Option::None;
            self.time_created = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Borrower {
            static instance: Borrower = Borrower {
                steamid: ::std::option::Option::None,
                is_pending: ::std::option::Option::None,
                is_canceled: ::std::option::Option::None,
                time_created: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Borrower {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Borrower {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Borrower {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CDeviceAuth_AddAuthorizedBorrowers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_AddAuthorizedBorrowers_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
    pub steamid_borrower: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_AddAuthorizedBorrowers_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_AddAuthorizedBorrowers_Request {
    fn default() -> &'a CDeviceAuth_AddAuthorizedBorrowers_Request {
        <CDeviceAuth_AddAuthorizedBorrowers_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_AddAuthorizedBorrowers_Request {
    pub fn new() -> CDeviceAuth_AddAuthorizedBorrowers_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // repeated fixed64 steamid_borrower = 2;

    pub fn steamid_borrower(&self) -> &[u64] {
        &self.steamid_borrower
    }

    pub fn clear_steamid_borrower(&mut self) {
        self.steamid_borrower.clear();
    }

    // Param is passed by value, moved
    pub fn set_steamid_borrower(&mut self, v: ::std::vec::Vec<u64>) {
        self.steamid_borrower = v;
    }

    // Mutable pointer to the field.
    pub fn mut_steamid_borrower(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.steamid_borrower
    }

    // Take field
    pub fn take_steamid_borrower(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.steamid_borrower, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_AddAuthorizedBorrowers_Request| { &m.steamid },
            |m: &mut CDeviceAuth_AddAuthorizedBorrowers_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steamid_borrower",
            |m: &CDeviceAuth_AddAuthorizedBorrowers_Request| { &m.steamid_borrower },
            |m: &mut CDeviceAuth_AddAuthorizedBorrowers_Request| { &mut m.steamid_borrower },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_AddAuthorizedBorrowers_Request>(
            "CDeviceAuth_AddAuthorizedBorrowers_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_AddAuthorizedBorrowers_Request {
    const NAME: &'static str = "CDeviceAuth_AddAuthorizedBorrowers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steamid_borrower)?;
                },
                17 => {
                    self.steamid_borrower.push(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += 9 * self.steamid_borrower.len() as u64;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        for v in &self.steamid_borrower {
            os.write_fixed64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_AddAuthorizedBorrowers_Request {
        CDeviceAuth_AddAuthorizedBorrowers_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.steamid_borrower.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_AddAuthorizedBorrowers_Request {
        static instance: CDeviceAuth_AddAuthorizedBorrowers_Request = CDeviceAuth_AddAuthorizedBorrowers_Request {
            steamid: ::std::option::Option::None,
            steamid_borrower: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_AddAuthorizedBorrowers_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_AddAuthorizedBorrowers_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_AddAuthorizedBorrowers_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_AddAuthorizedBorrowers_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_AddAuthorizedBorrowers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_AddAuthorizedBorrowers_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_AddAuthorizedBorrowers_Response.seconds_to_wait)
    pub seconds_to_wait: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_AddAuthorizedBorrowers_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_AddAuthorizedBorrowers_Response {
    fn default() -> &'a CDeviceAuth_AddAuthorizedBorrowers_Response {
        <CDeviceAuth_AddAuthorizedBorrowers_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_AddAuthorizedBorrowers_Response {
    pub fn new() -> CDeviceAuth_AddAuthorizedBorrowers_Response {
        ::std::default::Default::default()
    }

    // optional int32 seconds_to_wait = 1;

    pub fn seconds_to_wait(&self) -> i32 {
        self.seconds_to_wait.unwrap_or(0)
    }

    pub fn clear_seconds_to_wait(&mut self) {
        self.seconds_to_wait = ::std::option::Option::None;
    }

    pub fn has_seconds_to_wait(&self) -> bool {
        self.seconds_to_wait.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_to_wait(&mut self, v: i32) {
        self.seconds_to_wait = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "seconds_to_wait",
            |m: &CDeviceAuth_AddAuthorizedBorrowers_Response| { &m.seconds_to_wait },
            |m: &mut CDeviceAuth_AddAuthorizedBorrowers_Response| { &mut m.seconds_to_wait },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_AddAuthorizedBorrowers_Response>(
            "CDeviceAuth_AddAuthorizedBorrowers_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_AddAuthorizedBorrowers_Response {
    const NAME: &'static str = "CDeviceAuth_AddAuthorizedBorrowers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_to_wait = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_to_wait {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.seconds_to_wait {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_AddAuthorizedBorrowers_Response {
        CDeviceAuth_AddAuthorizedBorrowers_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_to_wait = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_AddAuthorizedBorrowers_Response {
        static instance: CDeviceAuth_AddAuthorizedBorrowers_Response = CDeviceAuth_AddAuthorizedBorrowers_Response {
            seconds_to_wait: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_AddAuthorizedBorrowers_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_AddAuthorizedBorrowers_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_AddAuthorizedBorrowers_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_AddAuthorizedBorrowers_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
    pub steamid_borrower: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_RemoveAuthorizedBorrowers_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    fn default() -> &'a CDeviceAuth_RemoveAuthorizedBorrowers_Request {
        <CDeviceAuth_RemoveAuthorizedBorrowers_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    pub fn new() -> CDeviceAuth_RemoveAuthorizedBorrowers_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // repeated fixed64 steamid_borrower = 2;

    pub fn steamid_borrower(&self) -> &[u64] {
        &self.steamid_borrower
    }

    pub fn clear_steamid_borrower(&mut self) {
        self.steamid_borrower.clear();
    }

    // Param is passed by value, moved
    pub fn set_steamid_borrower(&mut self, v: ::std::vec::Vec<u64>) {
        self.steamid_borrower = v;
    }

    // Mutable pointer to the field.
    pub fn mut_steamid_borrower(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.steamid_borrower
    }

    // Take field
    pub fn take_steamid_borrower(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.steamid_borrower, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_RemoveAuthorizedBorrowers_Request| { &m.steamid },
            |m: &mut CDeviceAuth_RemoveAuthorizedBorrowers_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steamid_borrower",
            |m: &CDeviceAuth_RemoveAuthorizedBorrowers_Request| { &m.steamid_borrower },
            |m: &mut CDeviceAuth_RemoveAuthorizedBorrowers_Request| { &mut m.steamid_borrower },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_RemoveAuthorizedBorrowers_Request>(
            "CDeviceAuth_RemoveAuthorizedBorrowers_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    const NAME: &'static str = "CDeviceAuth_RemoveAuthorizedBorrowers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    is.read_repeated_packed_fixed64_into(&mut self.steamid_borrower)?;
                },
                17 => {
                    self.steamid_borrower.push(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += 9 * self.steamid_borrower.len() as u64;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        for v in &self.steamid_borrower {
            os.write_fixed64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_RemoveAuthorizedBorrowers_Request {
        CDeviceAuth_RemoveAuthorizedBorrowers_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.steamid_borrower.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_RemoveAuthorizedBorrowers_Request {
        static instance: CDeviceAuth_RemoveAuthorizedBorrowers_Request = CDeviceAuth_RemoveAuthorizedBorrowers_Request {
            steamid: ::std::option::Option::None,
            steamid_borrower: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_RemoveAuthorizedBorrowers_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_RemoveAuthorizedBorrowers_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_RemoveAuthorizedBorrowers_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    fn default() -> &'a CDeviceAuth_RemoveAuthorizedBorrowers_Response {
        <CDeviceAuth_RemoveAuthorizedBorrowers_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    pub fn new() -> CDeviceAuth_RemoveAuthorizedBorrowers_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_RemoveAuthorizedBorrowers_Response>(
            "CDeviceAuth_RemoveAuthorizedBorrowers_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    const NAME: &'static str = "CDeviceAuth_RemoveAuthorizedBorrowers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_RemoveAuthorizedBorrowers_Response {
        CDeviceAuth_RemoveAuthorizedBorrowers_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_RemoveAuthorizedBorrowers_Response {
        static instance: CDeviceAuth_RemoveAuthorizedBorrowers_Response = CDeviceAuth_RemoveAuthorizedBorrowers_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_RemoveAuthorizedBorrowers_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_RemoveAuthorizedBorrowers_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetAuthorizedAsBorrower_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetAuthorizedAsBorrower_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Request.include_canceled)
    pub include_canceled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Request.include_pending)
    pub include_pending: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetAuthorizedAsBorrower_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetAuthorizedAsBorrower_Request {
    fn default() -> &'a CDeviceAuth_GetAuthorizedAsBorrower_Request {
        <CDeviceAuth_GetAuthorizedAsBorrower_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetAuthorizedAsBorrower_Request {
    pub fn new() -> CDeviceAuth_GetAuthorizedAsBorrower_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_canceled = 2;

    pub fn include_canceled(&self) -> bool {
        self.include_canceled.unwrap_or(false)
    }

    pub fn clear_include_canceled(&mut self) {
        self.include_canceled = ::std::option::Option::None;
    }

    pub fn has_include_canceled(&self) -> bool {
        self.include_canceled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_canceled(&mut self, v: bool) {
        self.include_canceled = ::std::option::Option::Some(v);
    }

    // optional bool include_pending = 3;

    pub fn include_pending(&self) -> bool {
        self.include_pending.unwrap_or(false)
    }

    pub fn clear_include_pending(&mut self) {
        self.include_pending = ::std::option::Option::None;
    }

    pub fn has_include_pending(&self) -> bool {
        self.include_pending.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_pending(&mut self, v: bool) {
        self.include_pending = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_GetAuthorizedAsBorrower_Request| { &m.steamid },
            |m: &mut CDeviceAuth_GetAuthorizedAsBorrower_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_canceled",
            |m: &CDeviceAuth_GetAuthorizedAsBorrower_Request| { &m.include_canceled },
            |m: &mut CDeviceAuth_GetAuthorizedAsBorrower_Request| { &mut m.include_canceled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_pending",
            |m: &CDeviceAuth_GetAuthorizedAsBorrower_Request| { &m.include_pending },
            |m: &mut CDeviceAuth_GetAuthorizedAsBorrower_Request| { &mut m.include_pending },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetAuthorizedAsBorrower_Request>(
            "CDeviceAuth_GetAuthorizedAsBorrower_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetAuthorizedAsBorrower_Request {
    const NAME: &'static str = "CDeviceAuth_GetAuthorizedAsBorrower_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.include_canceled = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.include_pending = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.include_canceled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_pending {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_canceled {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.include_pending {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetAuthorizedAsBorrower_Request {
        CDeviceAuth_GetAuthorizedAsBorrower_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_canceled = ::std::option::Option::None;
        self.include_pending = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetAuthorizedAsBorrower_Request {
        static instance: CDeviceAuth_GetAuthorizedAsBorrower_Request = CDeviceAuth_GetAuthorizedAsBorrower_Request {
            steamid: ::std::option::Option::None,
            include_canceled: ::std::option::Option::None,
            include_pending: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetAuthorizedAsBorrower_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetAuthorizedAsBorrower_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetAuthorizedAsBorrower_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetAuthorizedAsBorrower_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetAuthorizedAsBorrower_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetAuthorizedAsBorrower_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
    pub lenders: ::std::vec::Vec<cdevice_auth_get_authorized_as_borrower_response::Lender>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetAuthorizedAsBorrower_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetAuthorizedAsBorrower_Response {
    fn default() -> &'a CDeviceAuth_GetAuthorizedAsBorrower_Response {
        <CDeviceAuth_GetAuthorizedAsBorrower_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetAuthorizedAsBorrower_Response {
    pub fn new() -> CDeviceAuth_GetAuthorizedAsBorrower_Response {
        ::std::default::Default::default()
    }

    // repeated .CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;

    pub fn lenders(&self) -> &[cdevice_auth_get_authorized_as_borrower_response::Lender] {
        &self.lenders
    }

    pub fn clear_lenders(&mut self) {
        self.lenders.clear();
    }

    // Param is passed by value, moved
    pub fn set_lenders(&mut self, v: ::std::vec::Vec<cdevice_auth_get_authorized_as_borrower_response::Lender>) {
        self.lenders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lenders(&mut self) -> &mut ::std::vec::Vec<cdevice_auth_get_authorized_as_borrower_response::Lender> {
        &mut self.lenders
    }

    // Take field
    pub fn take_lenders(&mut self) -> ::std::vec::Vec<cdevice_auth_get_authorized_as_borrower_response::Lender> {
        ::std::mem::replace(&mut self.lenders, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lenders",
            |m: &CDeviceAuth_GetAuthorizedAsBorrower_Response| { &m.lenders },
            |m: &mut CDeviceAuth_GetAuthorizedAsBorrower_Response| { &mut m.lenders },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetAuthorizedAsBorrower_Response>(
            "CDeviceAuth_GetAuthorizedAsBorrower_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetAuthorizedAsBorrower_Response {
    const NAME: &'static str = "CDeviceAuth_GetAuthorizedAsBorrower_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.lenders.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.lenders {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.lenders {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetAuthorizedAsBorrower_Response {
        CDeviceAuth_GetAuthorizedAsBorrower_Response::new()
    }

    fn clear(&mut self) {
        self.lenders.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetAuthorizedAsBorrower_Response {
        static instance: CDeviceAuth_GetAuthorizedAsBorrower_Response = CDeviceAuth_GetAuthorizedAsBorrower_Response {
            lenders: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetAuthorizedAsBorrower_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetAuthorizedAsBorrower_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetAuthorizedAsBorrower_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetAuthorizedAsBorrower_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDeviceAuth_GetAuthorizedAsBorrower_Response`
pub mod cdevice_auth_get_authorized_as_borrower_response {
    // @@protoc_insertion_point(message:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Lender {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_created)
        pub time_created: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_pending)
        pub is_pending: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_canceled)
        pub is_canceled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_used)
        pub is_used: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_removed)
        pub time_removed: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_first)
        pub time_first: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Lender {
        fn default() -> &'a Lender {
            <Lender as crate::Message>::default_instance()
        }
    }

    impl Lender {
        pub fn new() -> Lender {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 time_created = 2;

        pub fn time_created(&self) -> u32 {
            self.time_created.unwrap_or(0)
        }

        pub fn clear_time_created(&mut self) {
            self.time_created = ::std::option::Option::None;
        }

        pub fn has_time_created(&self) -> bool {
            self.time_created.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_created(&mut self, v: u32) {
            self.time_created = ::std::option::Option::Some(v);
        }

        // optional bool is_pending = 3;

        pub fn is_pending(&self) -> bool {
            self.is_pending.unwrap_or(false)
        }

        pub fn clear_is_pending(&mut self) {
            self.is_pending = ::std::option::Option::None;
        }

        pub fn has_is_pending(&self) -> bool {
            self.is_pending.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_pending(&mut self, v: bool) {
            self.is_pending = ::std::option::Option::Some(v);
        }

        // optional bool is_canceled = 4;

        pub fn is_canceled(&self) -> bool {
            self.is_canceled.unwrap_or(false)
        }

        pub fn clear_is_canceled(&mut self) {
            self.is_canceled = ::std::option::Option::None;
        }

        pub fn has_is_canceled(&self) -> bool {
            self.is_canceled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_canceled(&mut self, v: bool) {
            self.is_canceled = ::std::option::Option::Some(v);
        }

        // optional bool is_used = 5;

        pub fn is_used(&self) -> bool {
            self.is_used.unwrap_or(false)
        }

        pub fn clear_is_used(&mut self) {
            self.is_used = ::std::option::Option::None;
        }

        pub fn has_is_used(&self) -> bool {
            self.is_used.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_used(&mut self, v: bool) {
            self.is_used = ::std::option::Option::Some(v);
        }

        // optional uint32 time_removed = 6;

        pub fn time_removed(&self) -> u32 {
            self.time_removed.unwrap_or(0)
        }

        pub fn clear_time_removed(&mut self) {
            self.time_removed = ::std::option::Option::None;
        }

        pub fn has_time_removed(&self) -> bool {
            self.time_removed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_removed(&mut self, v: u32) {
            self.time_removed = ::std::option::Option::Some(v);
        }

        // optional uint32 time_first = 7;

        pub fn time_first(&self) -> u32 {
            self.time_first.unwrap_or(0)
        }

        pub fn clear_time_first(&mut self) {
            self.time_first = ::std::option::Option::None;
        }

        pub fn has_time_first(&self) -> bool {
            self.time_first.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_first(&mut self, v: u32) {
            self.time_first = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Lender| { &m.steamid },
                |m: &mut Lender| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_created",
                |m: &Lender| { &m.time_created },
                |m: &mut Lender| { &mut m.time_created },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_pending",
                |m: &Lender| { &m.is_pending },
                |m: &mut Lender| { &mut m.is_pending },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_canceled",
                |m: &Lender| { &m.is_canceled },
                |m: &mut Lender| { &mut m.is_canceled },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "is_used",
                |m: &Lender| { &m.is_used },
                |m: &mut Lender| { &mut m.is_used },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_removed",
                |m: &Lender| { &m.time_removed },
                |m: &mut Lender| { &mut m.time_removed },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_first",
                |m: &Lender| { &m.time_first },
                |m: &mut Lender| { &mut m.time_first },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Lender>(
                "CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Lender {
        const NAME: &'static str = "Lender";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.is_pending = ::std::option::Option::Some(is.read_bool()?);
                    },
                    32 => {
                        self.is_canceled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.is_used = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.time_removed = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    56 => {
                        self.time_first = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.time_created {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.is_pending {
                my_size += 1 + 1;
            }
            if let Some(v) = self.is_canceled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.is_used {
                my_size += 1 + 1;
            }
            if let Some(v) = self.time_removed {
                my_size += crate::rt::uint32_size(6, v);
            }
            if let Some(v) = self.time_first {
                my_size += crate::rt::uint32_size(7, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.time_created {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.is_pending {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.is_canceled {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.is_used {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.time_removed {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.time_first {
                os.write_uint32(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Lender {
            Lender::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.time_created = ::std::option::Option::None;
            self.is_pending = ::std::option::Option::None;
            self.is_canceled = ::std::option::Option::None;
            self.is_used = ::std::option::Option::None;
            self.time_removed = ::std::option::Option::None;
            self.time_first = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Lender {
            static instance: Lender = Lender {
                steamid: ::std::option::Option::None,
                time_created: ::std::option::Option::None,
                is_pending: ::std::option::Option::None,
                is_canceled: ::std::option::Option::None,
                is_used: ::std::option::Option::None,
                time_removed: ::std::option::Option::None,
                time_first: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Lender {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Lender {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Lender {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CDeviceAuth_GetExcludedGamesInLibrary_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetExcludedGamesInLibrary_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetExcludedGamesInLibrary_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetExcludedGamesInLibrary_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetExcludedGamesInLibrary_Request {
    fn default() -> &'a CDeviceAuth_GetExcludedGamesInLibrary_Request {
        <CDeviceAuth_GetExcludedGamesInLibrary_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetExcludedGamesInLibrary_Request {
    pub fn new() -> CDeviceAuth_GetExcludedGamesInLibrary_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_GetExcludedGamesInLibrary_Request| { &m.steamid },
            |m: &mut CDeviceAuth_GetExcludedGamesInLibrary_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetExcludedGamesInLibrary_Request>(
            "CDeviceAuth_GetExcludedGamesInLibrary_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetExcludedGamesInLibrary_Request {
    const NAME: &'static str = "CDeviceAuth_GetExcludedGamesInLibrary_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetExcludedGamesInLibrary_Request {
        CDeviceAuth_GetExcludedGamesInLibrary_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetExcludedGamesInLibrary_Request {
        static instance: CDeviceAuth_GetExcludedGamesInLibrary_Request = CDeviceAuth_GetExcludedGamesInLibrary_Request {
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetExcludedGamesInLibrary_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetExcludedGamesInLibrary_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetExcludedGamesInLibrary_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetExcludedGamesInLibrary_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetExcludedGamesInLibrary_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetExcludedGamesInLibrary_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
    pub excluded_games: ::std::vec::Vec<cdevice_auth_get_excluded_games_in_library_response::ExcludedGame>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetExcludedGamesInLibrary_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetExcludedGamesInLibrary_Response {
    fn default() -> &'a CDeviceAuth_GetExcludedGamesInLibrary_Response {
        <CDeviceAuth_GetExcludedGamesInLibrary_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetExcludedGamesInLibrary_Response {
    pub fn new() -> CDeviceAuth_GetExcludedGamesInLibrary_Response {
        ::std::default::Default::default()
    }

    // repeated .CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;

    pub fn excluded_games(&self) -> &[cdevice_auth_get_excluded_games_in_library_response::ExcludedGame] {
        &self.excluded_games
    }

    pub fn clear_excluded_games(&mut self) {
        self.excluded_games.clear();
    }

    // Param is passed by value, moved
    pub fn set_excluded_games(&mut self, v: ::std::vec::Vec<cdevice_auth_get_excluded_games_in_library_response::ExcludedGame>) {
        self.excluded_games = v;
    }

    // Mutable pointer to the field.
    pub fn mut_excluded_games(&mut self) -> &mut ::std::vec::Vec<cdevice_auth_get_excluded_games_in_library_response::ExcludedGame> {
        &mut self.excluded_games
    }

    // Take field
    pub fn take_excluded_games(&mut self) -> ::std::vec::Vec<cdevice_auth_get_excluded_games_in_library_response::ExcludedGame> {
        ::std::mem::replace(&mut self.excluded_games, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "excluded_games",
            |m: &CDeviceAuth_GetExcludedGamesInLibrary_Response| { &m.excluded_games },
            |m: &mut CDeviceAuth_GetExcludedGamesInLibrary_Response| { &mut m.excluded_games },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetExcludedGamesInLibrary_Response>(
            "CDeviceAuth_GetExcludedGamesInLibrary_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetExcludedGamesInLibrary_Response {
    const NAME: &'static str = "CDeviceAuth_GetExcludedGamesInLibrary_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.excluded_games.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.excluded_games {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.excluded_games {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetExcludedGamesInLibrary_Response {
        CDeviceAuth_GetExcludedGamesInLibrary_Response::new()
    }

    fn clear(&mut self) {
        self.excluded_games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetExcludedGamesInLibrary_Response {
        static instance: CDeviceAuth_GetExcludedGamesInLibrary_Response = CDeviceAuth_GetExcludedGamesInLibrary_Response {
            excluded_games: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetExcludedGamesInLibrary_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetExcludedGamesInLibrary_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetExcludedGamesInLibrary_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetExcludedGamesInLibrary_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDeviceAuth_GetExcludedGamesInLibrary_Response`
pub mod cdevice_auth_get_excluded_games_in_library_response {
    // @@protoc_insertion_point(message:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ExcludedGame {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
        pub game_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.vac_banned)
        pub vac_banned: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.package_excluded)
        pub package_excluded: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ExcludedGame {
        fn default() -> &'a ExcludedGame {
            <ExcludedGame as crate::Message>::default_instance()
        }
    }

    impl ExcludedGame {
        pub fn new() -> ExcludedGame {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional string game_name = 2;

        pub fn game_name(&self) -> &str {
            match self.game_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_game_name(&mut self) {
            self.game_name = ::std::option::Option::None;
        }

        pub fn has_game_name(&self) -> bool {
            self.game_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_game_name(&mut self, v: ::std::string::String) {
            self.game_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_game_name(&mut self) -> &mut ::std::string::String {
            if self.game_name.is_none() {
                self.game_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.game_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_game_name(&mut self) -> ::std::string::String {
            self.game_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool vac_banned = 3;

        pub fn vac_banned(&self) -> bool {
            self.vac_banned.unwrap_or(false)
        }

        pub fn clear_vac_banned(&mut self) {
            self.vac_banned = ::std::option::Option::None;
        }

        pub fn has_vac_banned(&self) -> bool {
            self.vac_banned.is_some()
        }

        // Param is passed by value, moved
        pub fn set_vac_banned(&mut self, v: bool) {
            self.vac_banned = ::std::option::Option::Some(v);
        }

        // optional bool package_excluded = 4;

        pub fn package_excluded(&self) -> bool {
            self.package_excluded.unwrap_or(false)
        }

        pub fn clear_package_excluded(&mut self) {
            self.package_excluded = ::std::option::Option::None;
        }

        pub fn has_package_excluded(&self) -> bool {
            self.package_excluded.is_some()
        }

        // Param is passed by value, moved
        pub fn set_package_excluded(&mut self, v: bool) {
            self.package_excluded = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &ExcludedGame| { &m.appid },
                |m: &mut ExcludedGame| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "game_name",
                |m: &ExcludedGame| { &m.game_name },
                |m: &mut ExcludedGame| { &mut m.game_name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "vac_banned",
                |m: &ExcludedGame| { &m.vac_banned },
                |m: &mut ExcludedGame| { &mut m.vac_banned },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "package_excluded",
                |m: &ExcludedGame| { &m.package_excluded },
                |m: &mut ExcludedGame| { &mut m.package_excluded },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ExcludedGame>(
                "CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ExcludedGame {
        const NAME: &'static str = "ExcludedGame";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.game_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.vac_banned = ::std::option::Option::Some(is.read_bool()?);
                    },
                    32 => {
                        self.package_excluded = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.game_name.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.vac_banned {
                my_size += 1 + 1;
            }
            if let Some(v) = self.package_excluded {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.game_name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.vac_banned {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.package_excluded {
                os.write_bool(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ExcludedGame {
            ExcludedGame::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.game_name = ::std::option::Option::None;
            self.vac_banned = ::std::option::Option::None;
            self.package_excluded = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ExcludedGame {
            static instance: ExcludedGame = ExcludedGame {
                appid: ::std::option::Option::None,
                game_name: ::std::option::Option::None,
                vac_banned: ::std::option::Option::None,
                package_excluded: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ExcludedGame {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ExcludedGame {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ExcludedGame {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CDeviceAuth_GetBorrowerPlayHistory_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetBorrowerPlayHistory_Request {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetBorrowerPlayHistory_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetBorrowerPlayHistory_Request {
    fn default() -> &'a CDeviceAuth_GetBorrowerPlayHistory_Request {
        <CDeviceAuth_GetBorrowerPlayHistory_Request as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetBorrowerPlayHistory_Request {
    pub fn new() -> CDeviceAuth_GetBorrowerPlayHistory_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CDeviceAuth_GetBorrowerPlayHistory_Request| { &m.steamid },
            |m: &mut CDeviceAuth_GetBorrowerPlayHistory_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CDeviceAuth_GetBorrowerPlayHistory_Request| { &m.appid },
            |m: &mut CDeviceAuth_GetBorrowerPlayHistory_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetBorrowerPlayHistory_Request>(
            "CDeviceAuth_GetBorrowerPlayHistory_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetBorrowerPlayHistory_Request {
    const NAME: &'static str = "CDeviceAuth_GetBorrowerPlayHistory_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetBorrowerPlayHistory_Request {
        CDeviceAuth_GetBorrowerPlayHistory_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetBorrowerPlayHistory_Request {
        static instance: CDeviceAuth_GetBorrowerPlayHistory_Request = CDeviceAuth_GetBorrowerPlayHistory_Request {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetBorrowerPlayHistory_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetBorrowerPlayHistory_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetBorrowerPlayHistory_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetBorrowerPlayHistory_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CDeviceAuth_GetBorrowerPlayHistory_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDeviceAuth_GetBorrowerPlayHistory_Response {
    // message fields
    // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history)
    pub lender_history: ::std::vec::Vec<cdevice_auth_get_borrower_play_history_response::LenderHistory>,
    // special fields
    // @@protoc_insertion_point(special_field:CDeviceAuth_GetBorrowerPlayHistory_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDeviceAuth_GetBorrowerPlayHistory_Response {
    fn default() -> &'a CDeviceAuth_GetBorrowerPlayHistory_Response {
        <CDeviceAuth_GetBorrowerPlayHistory_Response as crate::Message>::default_instance()
    }
}

impl CDeviceAuth_GetBorrowerPlayHistory_Response {
    pub fn new() -> CDeviceAuth_GetBorrowerPlayHistory_Response {
        ::std::default::Default::default()
    }

    // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;

    pub fn lender_history(&self) -> &[cdevice_auth_get_borrower_play_history_response::LenderHistory] {
        &self.lender_history
    }

    pub fn clear_lender_history(&mut self) {
        self.lender_history.clear();
    }

    // Param is passed by value, moved
    pub fn set_lender_history(&mut self, v: ::std::vec::Vec<cdevice_auth_get_borrower_play_history_response::LenderHistory>) {
        self.lender_history = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lender_history(&mut self) -> &mut ::std::vec::Vec<cdevice_auth_get_borrower_play_history_response::LenderHistory> {
        &mut self.lender_history
    }

    // Take field
    pub fn take_lender_history(&mut self) -> ::std::vec::Vec<cdevice_auth_get_borrower_play_history_response::LenderHistory> {
        ::std::mem::replace(&mut self.lender_history, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lender_history",
            |m: &CDeviceAuth_GetBorrowerPlayHistory_Response| { &m.lender_history },
            |m: &mut CDeviceAuth_GetBorrowerPlayHistory_Response| { &mut m.lender_history },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CDeviceAuth_GetBorrowerPlayHistory_Response>(
            "CDeviceAuth_GetBorrowerPlayHistory_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CDeviceAuth_GetBorrowerPlayHistory_Response {
    const NAME: &'static str = "CDeviceAuth_GetBorrowerPlayHistory_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.lender_history.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.lender_history {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.lender_history {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDeviceAuth_GetBorrowerPlayHistory_Response {
        CDeviceAuth_GetBorrowerPlayHistory_Response::new()
    }

    fn clear(&mut self) {
        self.lender_history.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDeviceAuth_GetBorrowerPlayHistory_Response {
        static instance: CDeviceAuth_GetBorrowerPlayHistory_Response = CDeviceAuth_GetBorrowerPlayHistory_Response {
            lender_history: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CDeviceAuth_GetBorrowerPlayHistory_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CDeviceAuth_GetBorrowerPlayHistory_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CDeviceAuth_GetBorrowerPlayHistory_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CDeviceAuth_GetBorrowerPlayHistory_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CDeviceAuth_GetBorrowerPlayHistory_Response`
pub mod cdevice_auth_get_borrower_play_history_response {
    // @@protoc_insertion_point(message:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct GameHistory {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.time_last)
        pub time_last: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.time_total)
        pub time_total: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a GameHistory {
        fn default() -> &'a GameHistory {
            <GameHistory as crate::Message>::default_instance()
        }
    }

    impl GameHistory {
        pub fn new() -> GameHistory {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 time_last = 2;

        pub fn time_last(&self) -> u32 {
            self.time_last.unwrap_or(0)
        }

        pub fn clear_time_last(&mut self) {
            self.time_last = ::std::option::Option::None;
        }

        pub fn has_time_last(&self) -> bool {
            self.time_last.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_last(&mut self, v: u32) {
            self.time_last = ::std::option::Option::Some(v);
        }

        // optional uint32 time_total = 3;

        pub fn time_total(&self) -> u32 {
            self.time_total.unwrap_or(0)
        }

        pub fn clear_time_total(&mut self) {
            self.time_total = ::std::option::Option::None;
        }

        pub fn has_time_total(&self) -> bool {
            self.time_total.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_total(&mut self, v: u32) {
            self.time_total = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &GameHistory| { &m.appid },
                |m: &mut GameHistory| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_last",
                |m: &GameHistory| { &m.time_last },
                |m: &mut GameHistory| { &mut m.time_last },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_total",
                |m: &GameHistory| { &m.time_total },
                |m: &mut GameHistory| { &mut m.time_total },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<GameHistory>(
                "CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for GameHistory {
        const NAME: &'static str = "GameHistory";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.time_last = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.time_total = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.time_last {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.time_total {
                my_size += crate::rt::uint32_size(3, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.time_last {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.time_total {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> GameHistory {
            GameHistory::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.time_last = ::std::option::Option::None;
            self.time_total = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static GameHistory {
            static instance: GameHistory = GameHistory {
                appid: ::std::option::Option::None,
                time_last: ::std::option::Option::None,
                time_total: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for GameHistory {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for GameHistory {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for GameHistory {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LenderHistory {
        // message fields
        // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history)
        pub game_history: ::std::vec::Vec<GameHistory>,
        // special fields
        // @@protoc_insertion_point(special_field:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LenderHistory {
        fn default() -> &'a LenderHistory {
            <LenderHistory as crate::Message>::default_instance()
        }
    }

    impl LenderHistory {
        pub fn new() -> LenderHistory {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;

        pub fn game_history(&self) -> &[GameHistory] {
            &self.game_history
        }

        pub fn clear_game_history(&mut self) {
            self.game_history.clear();
        }

        // Param is passed by value, moved
        pub fn set_game_history(&mut self, v: ::std::vec::Vec<GameHistory>) {
            self.game_history = v;
        }

        // Mutable pointer to the field.
        pub fn mut_game_history(&mut self) -> &mut ::std::vec::Vec<GameHistory> {
            &mut self.game_history
        }

        // Take field
        pub fn take_game_history(&mut self) -> ::std::vec::Vec<GameHistory> {
            ::std::mem::replace(&mut self.game_history, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &LenderHistory| { &m.steamid },
                |m: &mut LenderHistory| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "game_history",
                |m: &LenderHistory| { &m.game_history },
                |m: &mut LenderHistory| { &mut m.game_history },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<LenderHistory>(
                "CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for LenderHistory {
        const NAME: &'static str = "LenderHistory";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    18 => {
                        self.game_history.push(is.read_message()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            for value in &self.game_history {
                let len = value.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            for v in &self.game_history {
                crate::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LenderHistory {
            LenderHistory::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.game_history.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LenderHistory {
            static instance: LenderHistory = LenderHistory {
                steamid: ::std::option::Option::None,
                game_history: ::std::vec::Vec::new(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for LenderHistory {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LenderHistory {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for LenderHistory {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*steammessages_deviceauth.steamclient.proto\x1a\x18steammessages_base.\
    proto\x1a,steammessages_unified_base.steamclient.proto\"r\n+CDeviceAuth_\
    GetOwnAuthorizedDevices_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x06R\x07steamid\x12)\n\x10include_canceled\x18\x02\x20\x01(\x08R\x0finc\
    ludeCanceled\"\xad\x03\n,CDeviceAuth_GetOwnAuthorizedDevices_Response\
    \x12N\n\x07devices\x18\x01\x20\x03(\x0b24.CDeviceAuth_GetOwnAuthorizedDe\
    vices_Response.DeviceR\x07devices\x1a\xac\x02\n\x06Device\x12*\n\x11auth\
    _device_token\x18\x01\x20\x01(\x06R\x0fauthDeviceToken\x12\x1f\n\x0bdevi\
    ce_name\x18\x02\x20\x01(\tR\ndeviceName\x12\x1d\n\nis_pending\x18\x03\
    \x20\x01(\x08R\tisPending\x12\x1f\n\x0bis_canceled\x18\x04\x20\x01(\x08R\
    \nisCanceled\x12$\n\x0elast_time_used\x18\x05\x20\x01(\rR\x0clastTimeUse\
    d\x12(\n\x10last_borrower_id\x18\x06\x20\x01(\x06R\x0elastBorrowerId\x12\
    &\n\x0flast_app_played\x18\x07\x20\x01(\rR\rlastAppPlayed\x12\x1d\n\nis_\
    limited\x18\x08\x20\x01(\x08R\tisLimited\"\xb6\x01\n.CDeviceAuth_AcceptA\
    uthorizationRequest_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\
    \x07steamid\x12*\n\x11auth_device_token\x18\x02\x20\x01(\x06R\x0fauthDev\
    iceToken\x12\x1b\n\tauth_code\x18\x03\x20\x01(\x06R\x08authCode\x12!\n\
    \x0cfrom_steamid\x18\x04\x20\x01(\x06R\x0bfromSteamid\"1\n/CDeviceAuth_A\
    cceptAuthorizationRequest_Response\"q\n)CDeviceAuth_AuthorizeRemoteDevic\
    e_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12*\n\
    \x11auth_device_token\x18\x02\x20\x01(\x06R\x0fauthDeviceToken\",\n*CDev\
    iceAuth_AuthorizeRemoteDevice_Response\"s\n+CDeviceAuth_DeauthorizeRemot\
    eDevice_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\
    \x12*\n\x11auth_device_token\x18\x02\x20\x01(\x06R\x0fauthDeviceToken\".\
    \n,CDeviceAuth_DeauthorizeRemoteDevice_Response\"H\n,CDeviceAuth_GetUsed\
    AuthorizedDevices_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07\
    steamid\"\xcb\x02\n-CDeviceAuth_GetUsedAuthorizedDevices_Response\x12O\n\
    \x07devices\x18\x01\x20\x03(\x0b25.CDeviceAuth_GetUsedAuthorizedDevices_\
    Response.DeviceR\x07devices\x1a\xc8\x01\n\x06Device\x12*\n\x11auth_devic\
    e_token\x18\x01\x20\x01(\x06R\x0fauthDeviceToken\x12\x1f\n\x0bdevice_nam\
    e\x18\x02\x20\x01(\tR\ndeviceName\x12#\n\rowner_steamid\x18\x03\x20\x01(\
    \x06R\x0cownerSteamid\x12$\n\x0elast_time_used\x18\x04\x20\x01(\rR\x0cla\
    stTimeUsed\x12&\n\x0flast_app_played\x18\x05\x20\x01(\rR\rlastAppPlayed\
    \"\x9a\x01\n*CDeviceAuth_GetAuthorizedBorrowers_Request\x12\x18\n\x07ste\
    amid\x18\x01\x20\x01(\x06R\x07steamid\x12)\n\x10include_canceled\x18\x02\
    \x20\x01(\x08R\x0fincludeCanceled\x12'\n\x0finclude_pending\x18\x03\x20\
    \x01(\x08R\x0eincludePending\"\x8c\x02\n+CDeviceAuth_GetAuthorizedBorrow\
    ers_Response\x12S\n\tborrowers\x18\x01\x20\x03(\x0b25.CDeviceAuth_GetAut\
    horizedBorrowers_Response.BorrowerR\tborrowers\x1a\x87\x01\n\x08Borrower\
    \x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x1d\n\nis_pen\
    ding\x18\x02\x20\x01(\x08R\tisPending\x12\x1f\n\x0bis_canceled\x18\x03\
    \x20\x01(\x08R\nisCanceled\x12!\n\x0ctime_created\x18\x04\x20\x01(\rR\
    \x0btimeCreated\"q\n*CDeviceAuth_AddAuthorizedBorrowers_Request\x12\x18\
    \n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12)\n\x10steamid_borrowe\
    r\x18\x02\x20\x03(\x06R\x0fsteamidBorrower\"U\n+CDeviceAuth_AddAuthorize\
    dBorrowers_Response\x12&\n\x0fseconds_to_wait\x18\x01\x20\x01(\x05R\rsec\
    ondsToWait\"t\n-CDeviceAuth_RemoveAuthorizedBorrowers_Request\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12)\n\x10steamid_borrower\
    \x18\x02\x20\x03(\x06R\x0fsteamidBorrower\"0\n.CDeviceAuth_RemoveAuthori\
    zedBorrowers_Response\"\x9b\x01\n+CDeviceAuth_GetAuthorizedAsBorrower_Re\
    quest\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12)\n\x10in\
    clude_canceled\x18\x02\x20\x01(\x08R\x0fincludeCanceled\x12'\n\x0finclud\
    e_pending\x18\x03\x20\x01(\x08R\x0eincludePending\"\xe1\x02\n,CDeviceAut\
    h_GetAuthorizedAsBorrower_Response\x12N\n\x07lenders\x18\x01\x20\x03(\
    \x0b24.CDeviceAuth_GetAuthorizedAsBorrower_Response.LenderR\x07lenders\
    \x1a\xe0\x01\n\x06Lender\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07s\
    teamid\x12!\n\x0ctime_created\x18\x02\x20\x01(\rR\x0btimeCreated\x12\x1d\
    \n\nis_pending\x18\x03\x20\x01(\x08R\tisPending\x12\x1f\n\x0bis_canceled\
    \x18\x04\x20\x01(\x08R\nisCanceled\x12\x17\n\x07is_used\x18\x05\x20\x01(\
    \x08R\x06isUsed\x12!\n\x0ctime_removed\x18\x06\x20\x01(\rR\x0btimeRemove\
    d\x12\x1d\n\ntime_first\x18\x07\x20\x01(\rR\ttimeFirst\"I\n-CDeviceAuth_\
    GetExcludedGamesInLibrary_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\
    \x06R\x07steamid\"\xa3\x02\n.CDeviceAuth_GetExcludedGamesInLibrary_Respo\
    nse\x12c\n\x0eexcluded_games\x18\x01\x20\x03(\x0b2<.CDeviceAuth_GetExclu\
    dedGamesInLibrary_Response.ExcludedGameR\rexcludedGames\x1a\x8b\x01\n\
    \x0cExcludedGame\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x1b\
    \n\tgame_name\x18\x02\x20\x01(\tR\x08gameName\x12\x1d\n\nvac_banned\x18\
    \x03\x20\x01(\x08R\tvacBanned\x12)\n\x10package_excluded\x18\x04\x20\x01\
    (\x08R\x0fpackageExcluded\"\\\n*CDeviceAuth_GetBorrowerPlayHistory_Reque\
    st\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05ap\
    pid\x18\x02\x20\x01(\rR\x05appid\"\xfa\x02\n+CDeviceAuth_GetBorrowerPlay\
    History_Response\x12a\n\x0elender_history\x18\x01\x20\x03(\x0b2:.CDevice\
    Auth_GetBorrowerPlayHistory_Response.LenderHistoryR\rlenderHistory\x1a_\
    \n\x0bGameHistory\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\
    \x1b\n\ttime_last\x18\x02\x20\x01(\rR\x08timeLast\x12\x1d\n\ntime_total\
    \x18\x03\x20\x01(\rR\ttimeTotal\x1a\x86\x01\n\rLenderHistory\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12[\n\x0cgame_history\x18\
    \x02\x20\x03(\x0b28.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHist\
    oryR\x0bgameHistory2\xbd\n\n\nDeviceAuth\x12v\n\x17GetOwnAuthorizedDevic\
    es\x12,.CDeviceAuth_GetOwnAuthorizedDevices_Request\x1a-.CDeviceAuth_Get\
    OwnAuthorizedDevices_Response\x12\x7f\n\x1aAcceptAuthorizationRequest\
    \x12/.CDeviceAuth_AcceptAuthorizationRequest_Request\x1a0.CDeviceAuth_Ac\
    ceptAuthorizationRequest_Response\x12p\n\x15AuthorizeRemoteDevice\x12*.C\
    DeviceAuth_AuthorizeRemoteDevice_Request\x1a+.CDeviceAuth_AuthorizeRemot\
    eDevice_Response\x12v\n\x17DeauthorizeRemoteDevice\x12,.CDeviceAuth_Deau\
    thorizeRemoteDevice_Request\x1a-.CDeviceAuth_DeauthorizeRemoteDevice_Res\
    ponse\x12y\n\x18GetUsedAuthorizedDevices\x12-.CDeviceAuth_GetUsedAuthori\
    zedDevices_Request\x1a..CDeviceAuth_GetUsedAuthorizedDevices_Response\
    \x12s\n\x16GetAuthorizedBorrowers\x12+.CDeviceAuth_GetAuthorizedBorrower\
    s_Request\x1a,.CDeviceAuth_GetAuthorizedBorrowers_Response\x12s\n\x16Add\
    AuthorizedBorrowers\x12+.CDeviceAuth_AddAuthorizedBorrowers_Request\x1a,\
    .CDeviceAuth_AddAuthorizedBorrowers_Response\x12|\n\x19RemoveAuthorizedB\
    orrowers\x12..CDeviceAuth_RemoveAuthorizedBorrowers_Request\x1a/.CDevice\
    Auth_RemoveAuthorizedBorrowers_Response\x12v\n\x17GetAuthorizedAsBorrowe\
    r\x12,.CDeviceAuth_GetAuthorizedAsBorrower_Request\x1a-.CDeviceAuth_GetA\
    uthorizedAsBorrower_Response\x12|\n\x19GetExcludedGamesInLibrary\x12..CD\
    eviceAuth_GetExcludedGamesInLibrary_Request\x1a/.CDeviceAuth_GetExcluded\
    GamesInLibrary_Response\x12s\n\x16GetBorrowerPlayHistory\x12+.CDeviceAut\
    h_GetBorrowerPlayHistory_Request\x1a,.CDeviceAuth_GetBorrowerPlayHistory\
    _ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(29);
            messages.push(CDeviceAuth_GetOwnAuthorizedDevices_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetOwnAuthorizedDevices_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_AcceptAuthorizationRequest_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_AcceptAuthorizationRequest_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_AuthorizeRemoteDevice_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_AuthorizeRemoteDevice_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_DeauthorizeRemoteDevice_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_DeauthorizeRemoteDevice_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetUsedAuthorizedDevices_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetUsedAuthorizedDevices_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetAuthorizedBorrowers_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetAuthorizedBorrowers_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_AddAuthorizedBorrowers_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_AddAuthorizedBorrowers_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_RemoveAuthorizedBorrowers_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_RemoveAuthorizedBorrowers_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetAuthorizedAsBorrower_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetAuthorizedAsBorrower_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetExcludedGamesInLibrary_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetExcludedGamesInLibrary_Response::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetBorrowerPlayHistory_Request::generated_message_descriptor_data());
            messages.push(CDeviceAuth_GetBorrowerPlayHistory_Response::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_own_authorized_devices_response::Device::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_used_authorized_devices_response::Device::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_authorized_borrowers_response::Borrower::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_authorized_as_borrower_response::Lender::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_excluded_games_in_library_response::ExcludedGame::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_borrower_play_history_response::GameHistory::generated_message_descriptor_data());
            messages.push(cdevice_auth_get_borrower_play_history_response::LenderHistory::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
