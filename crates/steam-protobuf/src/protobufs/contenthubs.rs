// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `contenthubs.proto`

// @@protoc_insertion_point(message:CStorePageFilter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorePageFilter {
    // message fields
    // @@protoc_insertion_point(field:CStorePageFilter.sale_filter)
    pub sale_filter: crate::MessageField<cstore_page_filter::SalePageFilter>,
    // @@protoc_insertion_point(field:CStorePageFilter.content_hub_filter)
    pub content_hub_filter: crate::MessageField<cstore_page_filter::ContentHubFilter>,
    // @@protoc_insertion_point(field:CStorePageFilter.store_filters)
    pub store_filters: ::std::vec::Vec<cstore_page_filter::StoreFilter>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorePageFilter.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorePageFilter {
    fn default() -> &'a CStorePageFilter {
        <CStorePageFilter as crate::Message>::default_instance()
    }
}

impl CStorePageFilter {
    pub fn new() -> CStorePageFilter {
        ::std::default::Default::default()
    }

    // optional .CStorePageFilter.SalePageFilter sale_filter = 1;

    pub fn sale_filter(&self) -> &cstore_page_filter::SalePageFilter {
        self.sale_filter.as_ref().unwrap_or_else(|| <cstore_page_filter::SalePageFilter as crate::Message>::default_instance())
    }

    pub fn clear_sale_filter(&mut self) {
        self.sale_filter.clear();
    }

    pub fn has_sale_filter(&self) -> bool {
        self.sale_filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sale_filter(&mut self, v: cstore_page_filter::SalePageFilter) {
        self.sale_filter = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sale_filter(&mut self) -> &mut cstore_page_filter::SalePageFilter {
        self.sale_filter.mut_or_insert_default()
    }

    // Take field
    pub fn take_sale_filter(&mut self) -> cstore_page_filter::SalePageFilter {
        self.sale_filter.take().unwrap_or_else(|| cstore_page_filter::SalePageFilter::new())
    }

    // optional .CStorePageFilter.ContentHubFilter content_hub_filter = 2;

    pub fn content_hub_filter(&self) -> &cstore_page_filter::ContentHubFilter {
        self.content_hub_filter.as_ref().unwrap_or_else(|| <cstore_page_filter::ContentHubFilter as crate::Message>::default_instance())
    }

    pub fn clear_content_hub_filter(&mut self) {
        self.content_hub_filter.clear();
    }

    pub fn has_content_hub_filter(&self) -> bool {
        self.content_hub_filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_hub_filter(&mut self, v: cstore_page_filter::ContentHubFilter) {
        self.content_hub_filter = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_hub_filter(&mut self) -> &mut cstore_page_filter::ContentHubFilter {
        self.content_hub_filter.mut_or_insert_default()
    }

    // Take field
    pub fn take_content_hub_filter(&mut self) -> cstore_page_filter::ContentHubFilter {
        self.content_hub_filter.take().unwrap_or_else(|| cstore_page_filter::ContentHubFilter::new())
    }

    // repeated .CStorePageFilter.StoreFilter store_filters = 3;

    pub fn store_filters(&self) -> &[cstore_page_filter::StoreFilter] {
        &self.store_filters
    }

    pub fn clear_store_filters(&mut self) {
        self.store_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_store_filters(&mut self, v: ::std::vec::Vec<cstore_page_filter::StoreFilter>) {
        self.store_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_store_filters(&mut self) -> &mut ::std::vec::Vec<cstore_page_filter::StoreFilter> {
        &mut self.store_filters
    }

    // Take field
    pub fn take_store_filters(&mut self) -> ::std::vec::Vec<cstore_page_filter::StoreFilter> {
        ::std::mem::replace(&mut self.store_filters, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, cstore_page_filter::SalePageFilter>(
            "sale_filter",
            |m: &CStorePageFilter| { &m.sale_filter },
            |m: &mut CStorePageFilter| { &mut m.sale_filter },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, cstore_page_filter::ContentHubFilter>(
            "content_hub_filter",
            |m: &CStorePageFilter| { &m.content_hub_filter },
            |m: &mut CStorePageFilter| { &mut m.content_hub_filter },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "store_filters",
            |m: &CStorePageFilter| { &m.store_filters },
            |m: &mut CStorePageFilter| { &mut m.store_filters },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CStorePageFilter>(
            "CStorePageFilter",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CStorePageFilter {
    const NAME: &'static str = "CStorePageFilter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.sale_filter)?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.content_hub_filter)?;
                },
                26 => {
                    self.store_filters.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sale_filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.content_hub_filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.store_filters {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sale_filter.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.content_hub_filter.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.store_filters {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorePageFilter {
        CStorePageFilter::new()
    }

    fn clear(&mut self) {
        self.sale_filter.clear();
        self.content_hub_filter.clear();
        self.store_filters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorePageFilter {
        static instance: CStorePageFilter = CStorePageFilter {
            sale_filter: crate::MessageField::none(),
            content_hub_filter: crate::MessageField::none(),
            store_filters: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CStorePageFilter {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CStorePageFilter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CStorePageFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CStorePageFilter {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CStorePageFilter`
pub mod cstore_page_filter {
    // @@protoc_insertion_point(message:CStorePageFilter.SalePageFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SalePageFilter {
        // message fields
        // @@protoc_insertion_point(field:CStorePageFilter.SalePageFilter.sale_tagid)
        pub sale_tagid: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CStorePageFilter.SalePageFilter.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SalePageFilter {
        fn default() -> &'a SalePageFilter {
            <SalePageFilter as crate::Message>::default_instance()
        }
    }

    impl SalePageFilter {
        pub fn new() -> SalePageFilter {
            ::std::default::Default::default()
        }

        // optional uint32 sale_tagid = 1;

        pub fn sale_tagid(&self) -> u32 {
            self.sale_tagid.unwrap_or(0)
        }

        pub fn clear_sale_tagid(&mut self) {
            self.sale_tagid = ::std::option::Option::None;
        }

        pub fn has_sale_tagid(&self) -> bool {
            self.sale_tagid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sale_tagid(&mut self, v: u32) {
            self.sale_tagid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sale_tagid",
                |m: &SalePageFilter| { &m.sale_tagid },
                |m: &mut SalePageFilter| { &mut m.sale_tagid },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<SalePageFilter>(
                "CStorePageFilter.SalePageFilter",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for SalePageFilter {
        const NAME: &'static str = "SalePageFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sale_tagid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sale_tagid {
                my_size += crate::rt::uint32_size(1, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.sale_tagid {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SalePageFilter {
            SalePageFilter::new()
        }

        fn clear(&mut self) {
            self.sale_tagid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SalePageFilter {
            static instance: SalePageFilter = SalePageFilter {
                sale_tagid: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for SalePageFilter {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CStorePageFilter.SalePageFilter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SalePageFilter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for SalePageFilter {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CStorePageFilter.ContentHubFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ContentHubFilter {
        // message fields
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.hub_type)
        pub hub_type: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.hub_category)
        pub hub_category: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.hub_tagid)
        pub hub_tagid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.discount_filter)
        pub discount_filter: ::std::option::Option<crate::EnumOrUnknown<super::EContentHubDiscountFilterType>>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.optin)
        pub optin: crate::MessageField<content_hub_filter::OptInInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:CStorePageFilter.ContentHubFilter.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ContentHubFilter {
        fn default() -> &'a ContentHubFilter {
            <ContentHubFilter as crate::Message>::default_instance()
        }
    }

    impl ContentHubFilter {
        pub fn new() -> ContentHubFilter {
            ::std::default::Default::default()
        }

        // optional string hub_type = 1;

        pub fn hub_type(&self) -> &str {
            match self.hub_type.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_hub_type(&mut self) {
            self.hub_type = ::std::option::Option::None;
        }

        pub fn has_hub_type(&self) -> bool {
            self.hub_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hub_type(&mut self, v: ::std::string::String) {
            self.hub_type = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_hub_type(&mut self) -> &mut ::std::string::String {
            if self.hub_type.is_none() {
                self.hub_type = ::std::option::Option::Some(::std::string::String::new());
            }
            self.hub_type.as_mut().unwrap()
        }

        // Take field
        pub fn take_hub_type(&mut self) -> ::std::string::String {
            self.hub_type.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string hub_category = 2;

        pub fn hub_category(&self) -> &str {
            match self.hub_category.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_hub_category(&mut self) {
            self.hub_category = ::std::option::Option::None;
        }

        pub fn has_hub_category(&self) -> bool {
            self.hub_category.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hub_category(&mut self, v: ::std::string::String) {
            self.hub_category = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_hub_category(&mut self) -> &mut ::std::string::String {
            if self.hub_category.is_none() {
                self.hub_category = ::std::option::Option::Some(::std::string::String::new());
            }
            self.hub_category.as_mut().unwrap()
        }

        // Take field
        pub fn take_hub_category(&mut self) -> ::std::string::String {
            self.hub_category.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 hub_tagid = 3;

        pub fn hub_tagid(&self) -> u32 {
            self.hub_tagid.unwrap_or(0)
        }

        pub fn clear_hub_tagid(&mut self) {
            self.hub_tagid = ::std::option::Option::None;
        }

        pub fn has_hub_tagid(&self) -> bool {
            self.hub_tagid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hub_tagid(&mut self, v: u32) {
            self.hub_tagid = ::std::option::Option::Some(v);
        }

        // optional .EContentHubDiscountFilterType discount_filter = 4;

        pub fn discount_filter(&self) -> super::EContentHubDiscountFilterType {
            match self.discount_filter {
                Some(e) => e.enum_value_or(super::EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None),
                None => super::EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None,
            }
        }

        pub fn clear_discount_filter(&mut self) {
            self.discount_filter = ::std::option::Option::None;
        }

        pub fn has_discount_filter(&self) -> bool {
            self.discount_filter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_discount_filter(&mut self, v: super::EContentHubDiscountFilterType) {
            self.discount_filter = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
        }

        // optional .CStorePageFilter.ContentHubFilter.OptInInfo optin = 5;

        pub fn optin(&self) -> &content_hub_filter::OptInInfo {
            self.optin.as_ref().unwrap_or_else(|| <content_hub_filter::OptInInfo as crate::Message>::default_instance())
        }

        pub fn clear_optin(&mut self) {
            self.optin.clear();
        }

        pub fn has_optin(&self) -> bool {
            self.optin.is_some()
        }

        // Param is passed by value, moved
        pub fn set_optin(&mut self, v: content_hub_filter::OptInInfo) {
            self.optin = crate::MessageField::some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_optin(&mut self) -> &mut content_hub_filter::OptInInfo {
            self.optin.mut_or_insert_default()
        }

        // Take field
        pub fn take_optin(&mut self) -> content_hub_filter::OptInInfo {
            self.optin.take().unwrap_or_else(|| content_hub_filter::OptInInfo::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "hub_type",
                |m: &ContentHubFilter| { &m.hub_type },
                |m: &mut ContentHubFilter| { &mut m.hub_type },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "hub_category",
                |m: &ContentHubFilter| { &m.hub_category },
                |m: &mut ContentHubFilter| { &mut m.hub_category },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "hub_tagid",
                |m: &ContentHubFilter| { &m.hub_tagid },
                |m: &mut ContentHubFilter| { &mut m.hub_tagid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "discount_filter",
                |m: &ContentHubFilter| { &m.discount_filter },
                |m: &mut ContentHubFilter| { &mut m.discount_filter },
            ));
            fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, content_hub_filter::OptInInfo>(
                "optin",
                |m: &ContentHubFilter| { &m.optin },
                |m: &mut ContentHubFilter| { &mut m.optin },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<ContentHubFilter>(
                "CStorePageFilter.ContentHubFilter",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for ContentHubFilter {
        const NAME: &'static str = "ContentHubFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.hub_type = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.hub_category = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.hub_tagid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.discount_filter = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    42 => {
                        crate::rt::read_singular_message_into_field(is, &mut self.optin)?;
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hub_type.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.hub_category.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            if let Some(v) = self.hub_tagid {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.discount_filter {
                my_size += crate::rt::int32_size(4, v.value());
            }
            if let Some(v) = self.optin.as_ref() {
                let len = v.compute_size();
                my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.hub_type.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.hub_category.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.hub_tagid {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.discount_filter {
                os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.optin.as_ref() {
                crate::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ContentHubFilter {
            ContentHubFilter::new()
        }

        fn clear(&mut self) {
            self.hub_type = ::std::option::Option::None;
            self.hub_category = ::std::option::Option::None;
            self.hub_tagid = ::std::option::Option::None;
            self.discount_filter = ::std::option::Option::None;
            self.optin.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ContentHubFilter {
            static instance: ContentHubFilter = ContentHubFilter {
                hub_type: ::std::option::Option::None,
                hub_category: ::std::option::Option::None,
                hub_tagid: ::std::option::Option::None,
                discount_filter: ::std::option::Option::None,
                optin: crate::MessageField::none(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for ContentHubFilter {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CStorePageFilter.ContentHubFilter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ContentHubFilter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for ContentHubFilter {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `ContentHubFilter`
    pub mod content_hub_filter {
        // @@protoc_insertion_point(message:CStorePageFilter.ContentHubFilter.OptInInfo)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct OptInInfo {
            // message fields
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.name)
            pub name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.optin_tagid)
            pub optin_tagid: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.prune_tagid)
            pub prune_tagid: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.optin_only)
            pub optin_only: ::std::option::Option<bool>,
            // special fields
            // @@protoc_insertion_point(special_field:CStorePageFilter.ContentHubFilter.OptInInfo.special_fields)
            pub special_fields: crate::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a OptInInfo {
            fn default() -> &'a OptInInfo {
                <OptInInfo as crate::Message>::default_instance()
            }
        }

        impl OptInInfo {
            pub fn new() -> OptInInfo {
                ::std::default::Default::default()
            }

            // optional string name = 1;

            pub fn name(&self) -> &str {
                match self.name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_name(&mut self) {
                self.name = ::std::option::Option::None;
            }

            pub fn has_name(&self) -> bool {
                self.name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: ::std::string::String) {
                self.name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_name(&mut self) -> &mut ::std::string::String {
                if self.name.is_none() {
                    self.name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.name.as_mut().unwrap()
            }

            // Take field
            pub fn take_name(&mut self) -> ::std::string::String {
                self.name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional uint32 optin_tagid = 2;

            pub fn optin_tagid(&self) -> u32 {
                self.optin_tagid.unwrap_or(0)
            }

            pub fn clear_optin_tagid(&mut self) {
                self.optin_tagid = ::std::option::Option::None;
            }

            pub fn has_optin_tagid(&self) -> bool {
                self.optin_tagid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_optin_tagid(&mut self, v: u32) {
                self.optin_tagid = ::std::option::Option::Some(v);
            }

            // optional uint32 prune_tagid = 3;

            pub fn prune_tagid(&self) -> u32 {
                self.prune_tagid.unwrap_or(0)
            }

            pub fn clear_prune_tagid(&mut self) {
                self.prune_tagid = ::std::option::Option::None;
            }

            pub fn has_prune_tagid(&self) -> bool {
                self.prune_tagid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_prune_tagid(&mut self, v: u32) {
                self.prune_tagid = ::std::option::Option::Some(v);
            }

            // optional bool optin_only = 4;

            pub fn optin_only(&self) -> bool {
                self.optin_only.unwrap_or(false)
            }

            pub fn clear_optin_only(&mut self) {
                self.optin_only = ::std::option::Option::None;
            }

            pub fn has_optin_only(&self) -> bool {
                self.optin_only.is_some()
            }

            // Param is passed by value, moved
            pub fn set_optin_only(&mut self, v: bool) {
                self.optin_only = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(4);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "name",
                    |m: &OptInInfo| { &m.name },
                    |m: &mut OptInInfo| { &mut m.name },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "optin_tagid",
                    |m: &OptInInfo| { &m.optin_tagid },
                    |m: &mut OptInInfo| { &mut m.optin_tagid },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "prune_tagid",
                    |m: &OptInInfo| { &m.prune_tagid },
                    |m: &mut OptInInfo| { &mut m.prune_tagid },
                ));
                fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                    "optin_only",
                    |m: &OptInInfo| { &m.optin_only },
                    |m: &mut OptInInfo| { &mut m.optin_only },
                ));
                crate::reflect::GeneratedMessageDescriptorData::new_2::<OptInInfo>(
                    "CStorePageFilter.ContentHubFilter.OptInInfo",
                    fields,
                    oneofs,
                )
            }
        }

        impl crate::Message for OptInInfo {
            const NAME: &'static str = "OptInInfo";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.name = ::std::option::Option::Some(is.read_string()?);
                        },
                        16 => {
                            self.optin_tagid = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        24 => {
                            self.prune_tagid = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        32 => {
                            self.optin_only = ::std::option::Option::Some(is.read_bool()?);
                        },
                        tag => {
                            crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.name.as_ref() {
                    my_size += crate::rt::string_size(1, &v);
                }
                if let Some(v) = self.optin_tagid {
                    my_size += crate::rt::uint32_size(2, v);
                }
                if let Some(v) = self.prune_tagid {
                    my_size += crate::rt::uint32_size(3, v);
                }
                if let Some(v) = self.optin_only {
                    my_size += 1 + 1;
                }
                my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
                if let Some(v) = self.name.as_ref() {
                    os.write_string(1, v)?;
                }
                if let Some(v) = self.optin_tagid {
                    os.write_uint32(2, v)?;
                }
                if let Some(v) = self.prune_tagid {
                    os.write_uint32(3, v)?;
                }
                if let Some(v) = self.optin_only {
                    os.write_bool(4, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &crate::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> OptInInfo {
                OptInInfo::new()
            }

            fn clear(&mut self) {
                self.name = ::std::option::Option::None;
                self.optin_tagid = ::std::option::Option::None;
                self.prune_tagid = ::std::option::Option::None;
                self.optin_only = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static OptInInfo {
                static instance: OptInInfo = OptInInfo {
                    name: ::std::option::Option::None,
                    optin_tagid: ::std::option::Option::None,
                    prune_tagid: ::std::option::Option::None,
                    optin_only: ::std::option::Option::None,
                    special_fields: crate::SpecialFields::new(),
                };
                &instance
            }
        }

        impl crate::MessageFull for OptInInfo {
            fn descriptor() -> crate::reflect::MessageDescriptor {
                static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("CStorePageFilter.ContentHubFilter.OptInInfo").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for OptInInfo {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                crate::text_format::fmt(self, f)
            }
        }

        impl crate::reflect::ProtobufValue for OptInInfo {
            type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:CStorePageFilter.StoreFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StoreFilter {
        // message fields
        // @@protoc_insertion_point(field:CStorePageFilter.StoreFilter.filter_json)
        pub filter_json: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CStorePageFilter.StoreFilter.cache_key)
        pub cache_key: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CStorePageFilter.StoreFilter.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StoreFilter {
        fn default() -> &'a StoreFilter {
            <StoreFilter as crate::Message>::default_instance()
        }
    }

    impl StoreFilter {
        pub fn new() -> StoreFilter {
            ::std::default::Default::default()
        }

        // optional string filter_json = 1;

        pub fn filter_json(&self) -> &str {
            match self.filter_json.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_filter_json(&mut self) {
            self.filter_json = ::std::option::Option::None;
        }

        pub fn has_filter_json(&self) -> bool {
            self.filter_json.is_some()
        }

        // Param is passed by value, moved
        pub fn set_filter_json(&mut self, v: ::std::string::String) {
            self.filter_json = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_filter_json(&mut self) -> &mut ::std::string::String {
            if self.filter_json.is_none() {
                self.filter_json = ::std::option::Option::Some(::std::string::String::new());
            }
            self.filter_json.as_mut().unwrap()
        }

        // Take field
        pub fn take_filter_json(&mut self) -> ::std::string::String {
            self.filter_json.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string cache_key = 2;

        pub fn cache_key(&self) -> &str {
            match self.cache_key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_cache_key(&mut self) {
            self.cache_key = ::std::option::Option::None;
        }

        pub fn has_cache_key(&self) -> bool {
            self.cache_key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cache_key(&mut self, v: ::std::string::String) {
            self.cache_key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_cache_key(&mut self) -> &mut ::std::string::String {
            if self.cache_key.is_none() {
                self.cache_key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.cache_key.as_mut().unwrap()
        }

        // Take field
        pub fn take_cache_key(&mut self) -> ::std::string::String {
            self.cache_key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "filter_json",
                |m: &StoreFilter| { &m.filter_json },
                |m: &mut StoreFilter| { &mut m.filter_json },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "cache_key",
                |m: &StoreFilter| { &m.cache_key },
                |m: &mut StoreFilter| { &mut m.cache_key },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<StoreFilter>(
                "CStorePageFilter.StoreFilter",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for StoreFilter {
        const NAME: &'static str = "StoreFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.filter_json = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.cache_key = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.filter_json.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.cache_key.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.filter_json.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.cache_key.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StoreFilter {
            StoreFilter::new()
        }

        fn clear(&mut self) {
            self.filter_json = ::std::option::Option::None;
            self.cache_key = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StoreFilter {
            static instance: StoreFilter = StoreFilter {
                filter_json: ::std::option::Option::None,
                cache_key: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for StoreFilter {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CStorePageFilter.StoreFilter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StoreFilter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for StoreFilter {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EContentHubDiscountFilterType)
pub enum EContentHubDiscountFilterType {
    // @@protoc_insertion_point(enum_value:EContentHubDiscountFilterType.k_EContentHubDiscountFilterType_None)
    k_EContentHubDiscountFilterType_None = 0,
    // @@protoc_insertion_point(enum_value:EContentHubDiscountFilterType.k_EContentHubDiscountFilterType_DiscountsOnly)
    k_EContentHubDiscountFilterType_DiscountsOnly = 1,
    // @@protoc_insertion_point(enum_value:EContentHubDiscountFilterType.k_EContentHubDiscountFilterType_PrioritizeDiscounts)
    k_EContentHubDiscountFilterType_PrioritizeDiscounts = 2,
}

impl crate::Enum for EContentHubDiscountFilterType {
    const NAME: &'static str = "EContentHubDiscountFilterType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EContentHubDiscountFilterType> {
        match value {
            0 => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None),
            1 => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_DiscountsOnly),
            2 => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_PrioritizeDiscounts),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EContentHubDiscountFilterType> {
        match str {
            "k_EContentHubDiscountFilterType_None" => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None),
            "k_EContentHubDiscountFilterType_DiscountsOnly" => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_DiscountsOnly),
            "k_EContentHubDiscountFilterType_PrioritizeDiscounts" => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_PrioritizeDiscounts),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EContentHubDiscountFilterType] = &[
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None,
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_DiscountsOnly,
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_PrioritizeDiscounts,
    ];
}

impl crate::EnumFull for EContentHubDiscountFilterType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EContentHubDiscountFilterType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EContentHubDiscountFilterType {
    fn default() -> Self {
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None
    }
}

impl EContentHubDiscountFilterType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EContentHubDiscountFilterType>("EContentHubDiscountFilterType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11contenthubs.proto\x1a\x18steammessages_base.proto\"\x8f\x06\n\x10C\
    StorePageFilter\x12A\n\x0bsale_filter\x18\x01\x20\x01(\x0b2\x20.CStorePa\
    geFilter.SalePageFilterR\nsaleFilter\x12P\n\x12content_hub_filter\x18\
    \x02\x20\x01(\x0b2\".CStorePageFilter.ContentHubFilterR\x10contentHubFil\
    ter\x12B\n\rstore_filters\x18\x03\x20\x03(\x0b2\x1d.CStorePageFilter.Sto\
    reFilterR\x0cstoreFilters\x1a/\n\x0eSalePageFilter\x12\x1d\n\nsale_tagid\
    \x18\x01\x20\x01(\rR\tsaleTagid\x1a\xa3\x03\n\x10ContentHubFilter\x12\
    \x19\n\x08hub_type\x18\x01\x20\x01(\tR\x07hubType\x12!\n\x0chub_category\
    \x18\x02\x20\x01(\tR\x0bhubCategory\x12\x1b\n\thub_tagid\x18\x03\x20\x01\
    (\rR\x08hubTagid\x12m\n\x0fdiscount_filter\x18\x04\x20\x01(\x0e2\x1e.ECo\
    ntentHubDiscountFilterType:$k_EContentHubDiscountFilterType_NoneR\x0edis\
    countFilter\x12B\n\x05optin\x18\x05\x20\x01(\x0b2,.CStorePageFilter.Cont\
    entHubFilter.OptInInfoR\x05optin\x1a\x80\x01\n\tOptInInfo\x12\x12\n\x04n\
    ame\x18\x01\x20\x01(\tR\x04name\x12\x1f\n\x0boptin_tagid\x18\x02\x20\x01\
    (\rR\noptinTagid\x12\x1f\n\x0bprune_tagid\x18\x03\x20\x01(\rR\npruneTagi\
    d\x12\x1d\n\noptin_only\x18\x04\x20\x01(\x08R\toptinOnly\x1aK\n\x0bStore\
    Filter\x12\x1f\n\x0bfilter_json\x18\x01\x20\x01(\tR\nfilterJson\x12\x1b\
    \n\tcache_key\x18\x02\x20\x01(\tR\x08cacheKey*\xb5\x01\n\x1dEContentHubD\
    iscountFilterType\x12(\n$k_EContentHubDiscountFilterType_None\x10\0\x121\
    \n-k_EContentHubDiscountFilterType_DiscountsOnly\x10\x01\x127\n3k_EConte\
    ntHubDiscountFilterType_PrioritizeDiscounts\x10\x02B\tH\x01\x80\x01\x01\
    \x80\xb5\x18\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CStorePageFilter::generated_message_descriptor_data());
            messages.push(cstore_page_filter::SalePageFilter::generated_message_descriptor_data());
            messages.push(cstore_page_filter::ContentHubFilter::generated_message_descriptor_data());
            messages.push(cstore_page_filter::StoreFilter::generated_message_descriptor_data());
            messages.push(cstore_page_filter::content_hub_filter::OptInInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EContentHubDiscountFilterType::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
