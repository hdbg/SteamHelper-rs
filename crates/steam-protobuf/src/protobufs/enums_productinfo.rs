// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `enums_productinfo.proto`

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EContentDescriptorID)
pub enum EContentDescriptorID {
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_NudityOrSexualContent)
    k_EContentDescriptor_NudityOrSexualContent = 1,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_FrequentViolenceOrGore)
    k_EContentDescriptor_FrequentViolenceOrGore = 2,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_AdultOnlySexualContent)
    k_EContentDescriptor_AdultOnlySexualContent = 3,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_GratuitousSexualContent)
    k_EContentDescriptor_GratuitousSexualContent = 4,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_AnyMatureContent)
    k_EContentDescriptor_AnyMatureContent = 5,
}

impl crate::Enum for EContentDescriptorID {
    const NAME: &'static str = "EContentDescriptorID";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EContentDescriptorID> {
        match value {
            1 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent),
            2 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore),
            3 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent),
            4 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent),
            5 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AnyMatureContent),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EContentDescriptorID> {
        match str {
            "k_EContentDescriptor_NudityOrSexualContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent),
            "k_EContentDescriptor_FrequentViolenceOrGore" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore),
            "k_EContentDescriptor_AdultOnlySexualContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent),
            "k_EContentDescriptor_GratuitousSexualContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent),
            "k_EContentDescriptor_AnyMatureContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AnyMatureContent),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EContentDescriptorID] = &[
        EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent,
        EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore,
        EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent,
        EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent,
        EContentDescriptorID::k_EContentDescriptor_AnyMatureContent,
    ];
}

impl crate::EnumFull for EContentDescriptorID {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EContentDescriptorID").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent => 0,
            EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore => 1,
            EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent => 2,
            EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent => 3,
            EContentDescriptorID::k_EContentDescriptor_AnyMatureContent => 4,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EContentDescriptorID {
    fn default() -> Self {
        EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent
    }
}

impl EContentDescriptorID {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EContentDescriptorID>("EContentDescriptorID")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17enums_productinfo.proto\x1a\x18steammessages_base.proto*\x85\x02\n\
    \x14EContentDescriptorID\x12.\n*k_EContentDescriptor_NudityOrSexualConte\
    nt\x10\x01\x12/\n+k_EContentDescriptor_FrequentViolenceOrGore\x10\x02\
    \x12/\n+k_EContentDescriptor_AdultOnlySexualContent\x10\x03\x120\n,k_ECo\
    ntentDescriptor_GratuitousSexualContent\x10\x04\x12)\n%k_EContentDescrip\
    tor_AnyMatureContent\x10\x05B\tH\x01\x80\x01\x01\x80\xb5\x18\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EContentDescriptorID::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
