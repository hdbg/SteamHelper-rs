// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_gamescope.proto`

// @@protoc_insertion_point(message:CMsgDisplayInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDisplayInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgDisplayInfo.make)
    pub make: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.model)
    pub model: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.connector_name)
    pub connector_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.supported_refresh_rates)
    pub supported_refresh_rates: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.supported_frame_rates)
    pub supported_frame_rates: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.is_external)
    pub is_external: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDisplayInfo.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDisplayInfo {
    fn default() -> &'a CMsgDisplayInfo {
        <CMsgDisplayInfo as crate::Message>::default_instance()
    }
}

impl CMsgDisplayInfo {
    pub fn new() -> CMsgDisplayInfo {
        ::std::default::Default::default()
    }

    // optional string make = 1;

    pub fn make(&self) -> &str {
        match self.make.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_make(&mut self) {
        self.make = ::std::option::Option::None;
    }

    pub fn has_make(&self) -> bool {
        self.make.is_some()
    }

    // Param is passed by value, moved
    pub fn set_make(&mut self, v: ::std::string::String) {
        self.make = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_make(&mut self) -> &mut ::std::string::String {
        if self.make.is_none() {
            self.make = ::std::option::Option::Some(::std::string::String::new());
        }
        self.make.as_mut().unwrap()
    }

    // Take field
    pub fn take_make(&mut self) -> ::std::string::String {
        self.make.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string model = 2;

    pub fn model(&self) -> &str {
        match self.model.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_model(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        self.model.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        if self.model.is_none() {
            self.model = ::std::option::Option::Some(::std::string::String::new());
        }
        self.model.as_mut().unwrap()
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        self.model.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string connector_name = 3;

    pub fn connector_name(&self) -> &str {
        match self.connector_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connector_name(&mut self) {
        self.connector_name = ::std::option::Option::None;
    }

    pub fn has_connector_name(&self) -> bool {
        self.connector_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connector_name(&mut self, v: ::std::string::String) {
        self.connector_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connector_name(&mut self) -> &mut ::std::string::String {
        if self.connector_name.is_none() {
            self.connector_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connector_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_connector_name(&mut self) -> ::std::string::String {
        self.connector_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated int32 supported_refresh_rates = 4;

    pub fn supported_refresh_rates(&self) -> &[i32] {
        &self.supported_refresh_rates
    }

    pub fn clear_supported_refresh_rates(&mut self) {
        self.supported_refresh_rates.clear();
    }

    // Param is passed by value, moved
    pub fn set_supported_refresh_rates(&mut self, v: ::std::vec::Vec<i32>) {
        self.supported_refresh_rates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_supported_refresh_rates(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.supported_refresh_rates
    }

    // Take field
    pub fn take_supported_refresh_rates(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.supported_refresh_rates, ::std::vec::Vec::new())
    }

    // repeated int32 supported_frame_rates = 5;

    pub fn supported_frame_rates(&self) -> &[i32] {
        &self.supported_frame_rates
    }

    pub fn clear_supported_frame_rates(&mut self) {
        self.supported_frame_rates.clear();
    }

    // Param is passed by value, moved
    pub fn set_supported_frame_rates(&mut self, v: ::std::vec::Vec<i32>) {
        self.supported_frame_rates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_supported_frame_rates(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.supported_frame_rates
    }

    // Take field
    pub fn take_supported_frame_rates(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.supported_frame_rates, ::std::vec::Vec::new())
    }

    // optional bool is_external = 6;

    pub fn is_external(&self) -> bool {
        self.is_external.unwrap_or(false)
    }

    pub fn clear_is_external(&mut self) {
        self.is_external = ::std::option::Option::None;
    }

    pub fn has_is_external(&self) -> bool {
        self.is_external.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_external(&mut self, v: bool) {
        self.is_external = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "make",
            |m: &CMsgDisplayInfo| { &m.make },
            |m: &mut CMsgDisplayInfo| { &mut m.make },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "model",
            |m: &CMsgDisplayInfo| { &m.model },
            |m: &mut CMsgDisplayInfo| { &mut m.model },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "connector_name",
            |m: &CMsgDisplayInfo| { &m.connector_name },
            |m: &mut CMsgDisplayInfo| { &mut m.connector_name },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "supported_refresh_rates",
            |m: &CMsgDisplayInfo| { &m.supported_refresh_rates },
            |m: &mut CMsgDisplayInfo| { &mut m.supported_refresh_rates },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "supported_frame_rates",
            |m: &CMsgDisplayInfo| { &m.supported_frame_rates },
            |m: &mut CMsgDisplayInfo| { &mut m.supported_frame_rates },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_external",
            |m: &CMsgDisplayInfo| { &m.is_external },
            |m: &mut CMsgDisplayInfo| { &mut m.is_external },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgDisplayInfo>(
            "CMsgDisplayInfo",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgDisplayInfo {
    const NAME: &'static str = "CMsgDisplayInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.make = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.model = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.connector_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.supported_refresh_rates)?;
                },
                32 => {
                    self.supported_refresh_rates.push(is.read_int32()?);
                },
                42 => {
                    is.read_repeated_packed_int32_into(&mut self.supported_frame_rates)?;
                },
                40 => {
                    self.supported_frame_rates.push(is.read_int32()?);
                },
                48 => {
                    self.is_external = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.make.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.model.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.connector_name.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        for value in &self.supported_refresh_rates {
            my_size += crate::rt::int32_size(4, *value);
        };
        for value in &self.supported_frame_rates {
            my_size += crate::rt::int32_size(5, *value);
        };
        if let Some(v) = self.is_external {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.make.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.model.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.connector_name.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.supported_refresh_rates {
            os.write_int32(4, *v)?;
        };
        for v in &self.supported_frame_rates {
            os.write_int32(5, *v)?;
        };
        if let Some(v) = self.is_external {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDisplayInfo {
        CMsgDisplayInfo::new()
    }

    fn clear(&mut self) {
        self.make = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.connector_name = ::std::option::Option::None;
        self.supported_refresh_rates.clear();
        self.supported_frame_rates.clear();
        self.is_external = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDisplayInfo {
        static instance: CMsgDisplayInfo = CMsgDisplayInfo {
            make: ::std::option::Option::None,
            model: ::std::option::Option::None,
            connector_name: ::std::option::Option::None,
            supported_refresh_rates: ::std::vec::Vec::new(),
            supported_frame_rates: ::std::vec::Vec::new(),
            is_external: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgDisplayInfo {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgDisplayInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgDisplayInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgDisplayInfo {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgGamescopeState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGamescopeState {
    // message fields
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_service_available)
    pub is_service_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_reshade_supported)
    pub is_reshade_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_app_hdr_enabled)
    pub is_app_hdr_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_app_refresh_rate_supported)
    pub is_app_refresh_rate_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.active_display_info)
    pub active_display_info: crate::MessageField<CMsgDisplayInfo>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_app_refresh_rate_capable)
    pub is_app_refresh_rate_capable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_refresh_rate_switching_supported)
    pub is_refresh_rate_switching_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_refresh_rate_switching_restricted)
    pub is_refresh_rate_switching_restricted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_hdr_visualization_supported)
    pub is_hdr_visualization_supported: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGamescopeState.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGamescopeState {
    fn default() -> &'a CMsgGamescopeState {
        <CMsgGamescopeState as crate::Message>::default_instance()
    }
}

impl CMsgGamescopeState {
    pub fn new() -> CMsgGamescopeState {
        ::std::default::Default::default()
    }

    // optional bool is_service_available = 1;

    pub fn is_service_available(&self) -> bool {
        self.is_service_available.unwrap_or(false)
    }

    pub fn clear_is_service_available(&mut self) {
        self.is_service_available = ::std::option::Option::None;
    }

    pub fn has_is_service_available(&self) -> bool {
        self.is_service_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_service_available(&mut self, v: bool) {
        self.is_service_available = ::std::option::Option::Some(v);
    }

    // optional bool is_reshade_supported = 2;

    pub fn is_reshade_supported(&self) -> bool {
        self.is_reshade_supported.unwrap_or(false)
    }

    pub fn clear_is_reshade_supported(&mut self) {
        self.is_reshade_supported = ::std::option::Option::None;
    }

    pub fn has_is_reshade_supported(&self) -> bool {
        self.is_reshade_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_reshade_supported(&mut self, v: bool) {
        self.is_reshade_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_app_hdr_enabled = 3;

    pub fn is_app_hdr_enabled(&self) -> bool {
        self.is_app_hdr_enabled.unwrap_or(false)
    }

    pub fn clear_is_app_hdr_enabled(&mut self) {
        self.is_app_hdr_enabled = ::std::option::Option::None;
    }

    pub fn has_is_app_hdr_enabled(&self) -> bool {
        self.is_app_hdr_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_app_hdr_enabled(&mut self, v: bool) {
        self.is_app_hdr_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_app_refresh_rate_supported = 4;

    pub fn is_app_refresh_rate_supported(&self) -> bool {
        self.is_app_refresh_rate_supported.unwrap_or(false)
    }

    pub fn clear_is_app_refresh_rate_supported(&mut self) {
        self.is_app_refresh_rate_supported = ::std::option::Option::None;
    }

    pub fn has_is_app_refresh_rate_supported(&self) -> bool {
        self.is_app_refresh_rate_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_app_refresh_rate_supported(&mut self, v: bool) {
        self.is_app_refresh_rate_supported = ::std::option::Option::Some(v);
    }

    // optional .CMsgDisplayInfo active_display_info = 5;

    pub fn active_display_info(&self) -> &CMsgDisplayInfo {
        self.active_display_info.as_ref().unwrap_or_else(|| <CMsgDisplayInfo as crate::Message>::default_instance())
    }

    pub fn clear_active_display_info(&mut self) {
        self.active_display_info.clear();
    }

    pub fn has_active_display_info(&self) -> bool {
        self.active_display_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_display_info(&mut self, v: CMsgDisplayInfo) {
        self.active_display_info = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_active_display_info(&mut self) -> &mut CMsgDisplayInfo {
        self.active_display_info.mut_or_insert_default()
    }

    // Take field
    pub fn take_active_display_info(&mut self) -> CMsgDisplayInfo {
        self.active_display_info.take().unwrap_or_else(|| CMsgDisplayInfo::new())
    }

    // optional bool is_app_refresh_rate_capable = 6;

    pub fn is_app_refresh_rate_capable(&self) -> bool {
        self.is_app_refresh_rate_capable.unwrap_or(false)
    }

    pub fn clear_is_app_refresh_rate_capable(&mut self) {
        self.is_app_refresh_rate_capable = ::std::option::Option::None;
    }

    pub fn has_is_app_refresh_rate_capable(&self) -> bool {
        self.is_app_refresh_rate_capable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_app_refresh_rate_capable(&mut self, v: bool) {
        self.is_app_refresh_rate_capable = ::std::option::Option::Some(v);
    }

    // optional bool is_refresh_rate_switching_supported = 7;

    pub fn is_refresh_rate_switching_supported(&self) -> bool {
        self.is_refresh_rate_switching_supported.unwrap_or(false)
    }

    pub fn clear_is_refresh_rate_switching_supported(&mut self) {
        self.is_refresh_rate_switching_supported = ::std::option::Option::None;
    }

    pub fn has_is_refresh_rate_switching_supported(&self) -> bool {
        self.is_refresh_rate_switching_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_refresh_rate_switching_supported(&mut self, v: bool) {
        self.is_refresh_rate_switching_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_refresh_rate_switching_restricted = 8;

    pub fn is_refresh_rate_switching_restricted(&self) -> bool {
        self.is_refresh_rate_switching_restricted.unwrap_or(false)
    }

    pub fn clear_is_refresh_rate_switching_restricted(&mut self) {
        self.is_refresh_rate_switching_restricted = ::std::option::Option::None;
    }

    pub fn has_is_refresh_rate_switching_restricted(&self) -> bool {
        self.is_refresh_rate_switching_restricted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_refresh_rate_switching_restricted(&mut self, v: bool) {
        self.is_refresh_rate_switching_restricted = ::std::option::Option::Some(v);
    }

    // optional bool is_hdr_visualization_supported = 9;

    pub fn is_hdr_visualization_supported(&self) -> bool {
        self.is_hdr_visualization_supported.unwrap_or(false)
    }

    pub fn clear_is_hdr_visualization_supported(&mut self) {
        self.is_hdr_visualization_supported = ::std::option::Option::None;
    }

    pub fn has_is_hdr_visualization_supported(&self) -> bool {
        self.is_hdr_visualization_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_hdr_visualization_supported(&mut self, v: bool) {
        self.is_hdr_visualization_supported = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_service_available",
            |m: &CMsgGamescopeState| { &m.is_service_available },
            |m: &mut CMsgGamescopeState| { &mut m.is_service_available },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_reshade_supported",
            |m: &CMsgGamescopeState| { &m.is_reshade_supported },
            |m: &mut CMsgGamescopeState| { &mut m.is_reshade_supported },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_app_hdr_enabled",
            |m: &CMsgGamescopeState| { &m.is_app_hdr_enabled },
            |m: &mut CMsgGamescopeState| { &mut m.is_app_hdr_enabled },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_app_refresh_rate_supported",
            |m: &CMsgGamescopeState| { &m.is_app_refresh_rate_supported },
            |m: &mut CMsgGamescopeState| { &mut m.is_app_refresh_rate_supported },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgDisplayInfo>(
            "active_display_info",
            |m: &CMsgGamescopeState| { &m.active_display_info },
            |m: &mut CMsgGamescopeState| { &mut m.active_display_info },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_app_refresh_rate_capable",
            |m: &CMsgGamescopeState| { &m.is_app_refresh_rate_capable },
            |m: &mut CMsgGamescopeState| { &mut m.is_app_refresh_rate_capable },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_refresh_rate_switching_supported",
            |m: &CMsgGamescopeState| { &m.is_refresh_rate_switching_supported },
            |m: &mut CMsgGamescopeState| { &mut m.is_refresh_rate_switching_supported },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_refresh_rate_switching_restricted",
            |m: &CMsgGamescopeState| { &m.is_refresh_rate_switching_restricted },
            |m: &mut CMsgGamescopeState| { &mut m.is_refresh_rate_switching_restricted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_hdr_visualization_supported",
            |m: &CMsgGamescopeState| { &m.is_hdr_visualization_supported },
            |m: &mut CMsgGamescopeState| { &mut m.is_hdr_visualization_supported },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGamescopeState>(
            "CMsgGamescopeState",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgGamescopeState {
    const NAME: &'static str = "CMsgGamescopeState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_service_available = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.is_reshade_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.is_app_hdr_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.is_app_refresh_rate_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.active_display_info)?;
                },
                48 => {
                    self.is_app_refresh_rate_capable = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.is_refresh_rate_switching_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_refresh_rate_switching_restricted = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.is_hdr_visualization_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_service_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_reshade_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_app_hdr_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_app_refresh_rate_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.active_display_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.is_app_refresh_rate_capable {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_refresh_rate_switching_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_refresh_rate_switching_restricted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_hdr_visualization_supported {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.is_service_available {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.is_reshade_supported {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.is_app_hdr_enabled {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.is_app_refresh_rate_supported {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.active_display_info.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.is_app_refresh_rate_capable {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.is_refresh_rate_switching_supported {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_refresh_rate_switching_restricted {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.is_hdr_visualization_supported {
            os.write_bool(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGamescopeState {
        CMsgGamescopeState::new()
    }

    fn clear(&mut self) {
        self.is_service_available = ::std::option::Option::None;
        self.is_reshade_supported = ::std::option::Option::None;
        self.is_app_hdr_enabled = ::std::option::Option::None;
        self.is_app_refresh_rate_supported = ::std::option::Option::None;
        self.active_display_info.clear();
        self.is_app_refresh_rate_capable = ::std::option::Option::None;
        self.is_refresh_rate_switching_supported = ::std::option::Option::None;
        self.is_refresh_rate_switching_restricted = ::std::option::Option::None;
        self.is_hdr_visualization_supported = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGamescopeState {
        static instance: CMsgGamescopeState = CMsgGamescopeState {
            is_service_available: ::std::option::Option::None,
            is_reshade_supported: ::std::option::Option::None,
            is_app_hdr_enabled: ::std::option::Option::None,
            is_app_refresh_rate_supported: ::std::option::Option::None,
            active_display_info: crate::MessageField::none(),
            is_app_refresh_rate_capable: ::std::option::Option::None,
            is_refresh_rate_switching_supported: ::std::option::Option::None,
            is_refresh_rate_switching_restricted: ::std::option::Option::None,
            is_hdr_visualization_supported: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgGamescopeState {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGamescopeState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGamescopeState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgGamescopeState {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGamescope_GetState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_GetState_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_GetState_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_GetState_Request {
    fn default() -> &'a CGamescope_GetState_Request {
        <CGamescope_GetState_Request as crate::Message>::default_instance()
    }
}

impl CGamescope_GetState_Request {
    pub fn new() -> CGamescope_GetState_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGamescope_GetState_Request>(
            "CGamescope_GetState_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGamescope_GetState_Request {
    const NAME: &'static str = "CGamescope_GetState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_GetState_Request {
        CGamescope_GetState_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_GetState_Request {
        static instance: CGamescope_GetState_Request = CGamescope_GetState_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGamescope_GetState_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGamescope_GetState_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGamescope_GetState_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGamescope_GetState_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGamescope_GetState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_GetState_Response {
    // message fields
    // @@protoc_insertion_point(field:CGamescope_GetState_Response.state)
    pub state: crate::MessageField<CMsgGamescopeState>,
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_GetState_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_GetState_Response {
    fn default() -> &'a CGamescope_GetState_Response {
        <CGamescope_GetState_Response as crate::Message>::default_instance()
    }
}

impl CGamescope_GetState_Response {
    pub fn new() -> CGamescope_GetState_Response {
        ::std::default::Default::default()
    }

    // optional .CMsgGamescopeState state = 1;

    pub fn state(&self) -> &CMsgGamescopeState {
        self.state.as_ref().unwrap_or_else(|| <CMsgGamescopeState as crate::Message>::default_instance())
    }

    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: CMsgGamescopeState) {
        self.state = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut CMsgGamescopeState {
        self.state.mut_or_insert_default()
    }

    // Take field
    pub fn take_state(&mut self) -> CMsgGamescopeState {
        self.state.take().unwrap_or_else(|| CMsgGamescopeState::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGamescopeState>(
            "state",
            |m: &CGamescope_GetState_Response| { &m.state },
            |m: &mut CGamescope_GetState_Response| { &mut m.state },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGamescope_GetState_Response>(
            "CGamescope_GetState_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGamescope_GetState_Response {
    const NAME: &'static str = "CGamescope_GetState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.state.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_GetState_Response {
        CGamescope_GetState_Response::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_GetState_Response {
        static instance: CGamescope_GetState_Response = CGamescope_GetState_Response {
            state: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGamescope_GetState_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGamescope_GetState_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGamescope_GetState_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGamescope_GetState_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGamescope_StateChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_StateChanged_Notification {
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_StateChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_StateChanged_Notification {
    fn default() -> &'a CGamescope_StateChanged_Notification {
        <CGamescope_StateChanged_Notification as crate::Message>::default_instance()
    }
}

impl CGamescope_StateChanged_Notification {
    pub fn new() -> CGamescope_StateChanged_Notification {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGamescope_StateChanged_Notification>(
            "CGamescope_StateChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGamescope_StateChanged_Notification {
    const NAME: &'static str = "CGamescope_StateChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_StateChanged_Notification {
        CGamescope_StateChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_StateChanged_Notification {
        static instance: CGamescope_StateChanged_Notification = CGamescope_StateChanged_Notification {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGamescope_StateChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGamescope_StateChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGamescope_StateChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGamescope_StateChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGamescope_SetBlurParams_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_SetBlurParams_Request {
    // message fields
    // @@protoc_insertion_point(field:CGamescope_SetBlurParams_Request.mode)
    pub mode: ::std::option::Option<crate::EnumOrUnknown<super::enums::EGamescopeBlurMode>>,
    // @@protoc_insertion_point(field:CGamescope_SetBlurParams_Request.radius)
    pub radius: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CGamescope_SetBlurParams_Request.fade_duration_ms)
    pub fade_duration_ms: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_SetBlurParams_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_SetBlurParams_Request {
    fn default() -> &'a CGamescope_SetBlurParams_Request {
        <CGamescope_SetBlurParams_Request as crate::Message>::default_instance()
    }
}

impl CGamescope_SetBlurParams_Request {
    pub fn new() -> CGamescope_SetBlurParams_Request {
        ::std::default::Default::default()
    }

    // optional .EGamescopeBlurMode mode = 1;

    pub fn mode(&self) -> super::enums::EGamescopeBlurMode {
        match self.mode {
            Some(e) => e.enum_value_or(super::enums::EGamescopeBlurMode::k_EGamescopeBlurMode_Disabled),
            None => super::enums::EGamescopeBlurMode::k_EGamescopeBlurMode_Disabled,
        }
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: super::enums::EGamescopeBlurMode) {
        self.mode = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional int32 radius = 2;

    pub fn radius(&self) -> i32 {
        self.radius.unwrap_or(0)
    }

    pub fn clear_radius(&mut self) {
        self.radius = ::std::option::Option::None;
    }

    pub fn has_radius(&self) -> bool {
        self.radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius(&mut self, v: i32) {
        self.radius = ::std::option::Option::Some(v);
    }

    // optional int32 fade_duration_ms = 3;

    pub fn fade_duration_ms(&self) -> i32 {
        self.fade_duration_ms.unwrap_or(0)
    }

    pub fn clear_fade_duration_ms(&mut self) {
        self.fade_duration_ms = ::std::option::Option::None;
    }

    pub fn has_fade_duration_ms(&self) -> bool {
        self.fade_duration_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fade_duration_ms(&mut self, v: i32) {
        self.fade_duration_ms = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mode",
            |m: &CGamescope_SetBlurParams_Request| { &m.mode },
            |m: &mut CGamescope_SetBlurParams_Request| { &mut m.mode },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "radius",
            |m: &CGamescope_SetBlurParams_Request| { &m.radius },
            |m: &mut CGamescope_SetBlurParams_Request| { &mut m.radius },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "fade_duration_ms",
            |m: &CGamescope_SetBlurParams_Request| { &m.fade_duration_ms },
            |m: &mut CGamescope_SetBlurParams_Request| { &mut m.fade_duration_ms },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGamescope_SetBlurParams_Request>(
            "CGamescope_SetBlurParams_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGamescope_SetBlurParams_Request {
    const NAME: &'static str = "CGamescope_SetBlurParams_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.radius = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.fade_duration_ms = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.mode {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.radius {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.fade_duration_ms {
            my_size += crate::rt::int32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.mode {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.radius {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.fade_duration_ms {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_SetBlurParams_Request {
        CGamescope_SetBlurParams_Request::new()
    }

    fn clear(&mut self) {
        self.mode = ::std::option::Option::None;
        self.radius = ::std::option::Option::None;
        self.fade_duration_ms = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_SetBlurParams_Request {
        static instance: CGamescope_SetBlurParams_Request = CGamescope_SetBlurParams_Request {
            mode: ::std::option::Option::None,
            radius: ::std::option::Option::None,
            fade_duration_ms: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGamescope_SetBlurParams_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGamescope_SetBlurParams_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGamescope_SetBlurParams_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGamescope_SetBlurParams_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGamescope_SetBlurParams_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_SetBlurParams_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_SetBlurParams_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_SetBlurParams_Response {
    fn default() -> &'a CGamescope_SetBlurParams_Response {
        <CGamescope_SetBlurParams_Response as crate::Message>::default_instance()
    }
}

impl CGamescope_SetBlurParams_Response {
    pub fn new() -> CGamescope_SetBlurParams_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGamescope_SetBlurParams_Response>(
            "CGamescope_SetBlurParams_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGamescope_SetBlurParams_Response {
    const NAME: &'static str = "CGamescope_SetBlurParams_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_SetBlurParams_Response {
        CGamescope_SetBlurParams_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_SetBlurParams_Response {
        static instance: CGamescope_SetBlurParams_Response = CGamescope_SetBlurParams_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGamescope_SetBlurParams_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGamescope_SetBlurParams_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGamescope_SetBlurParams_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGamescope_SetBlurParams_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dwebuimessages_gamescope.proto\x1a\x0benums.proto\x1a\x18steammessa\
    ges_base.proto\x1a\x18webuimessages_base.proto\"\xef\x01\n\x0fCMsgDispla\
    yInfo\x12\x12\n\x04make\x18\x01\x20\x01(\tR\x04make\x12\x14\n\x05model\
    \x18\x02\x20\x01(\tR\x05model\x12%\n\x0econnector_name\x18\x03\x20\x01(\
    \tR\rconnectorName\x126\n\x17supported_refresh_rates\x18\x04\x20\x03(\
    \x05R\x15supportedRefreshRates\x122\n\x15supported_frame_rates\x18\x05\
    \x20\x03(\x05R\x13supportedFrameRates\x12\x1f\n\x0bis_external\x18\x06\
    \x20\x01(\x08R\nisExternal\"\xca\x04\n\x12CMsgGamescopeState\x120\n\x14i\
    s_service_available\x18\x01\x20\x01(\x08R\x12isServiceAvailable\x120\n\
    \x14is_reshade_supported\x18\x02\x20\x01(\x08R\x12isReshadeSupported\x12\
    +\n\x12is_app_hdr_enabled\x18\x03\x20\x01(\x08R\x0fisAppHdrEnabled\x12@\
    \n\x1dis_app_refresh_rate_supported\x18\x04\x20\x01(\x08R\x19isAppRefres\
    hRateSupported\x12@\n\x13active_display_info\x18\x05\x20\x01(\x0b2\x10.C\
    MsgDisplayInfoR\x11activeDisplayInfo\x12<\n\x1bis_app_refresh_rate_capab\
    le\x18\x06\x20\x01(\x08R\x17isAppRefreshRateCapable\x12L\n#is_refresh_ra\
    te_switching_supported\x18\x07\x20\x01(\x08R\x1fisRefreshRateSwitchingSu\
    pported\x12N\n$is_refresh_rate_switching_restricted\x18\x08\x20\x01(\x08\
    R\x20isRefreshRateSwitchingRestricted\x12C\n\x1eis_hdr_visualization_sup\
    ported\x18\t\x20\x01(\x08R\x1bisHdrVisualizationSupported\"\x1d\n\x1bCGa\
    mescope_GetState_Request\"I\n\x1cCGamescope_GetState_Response\x12)\n\x05\
    state\x18\x01\x20\x01(\x0b2\x13.CMsgGamescopeStateR\x05state\"&\n$CGames\
    cope_StateChanged_Notification\"\xac\x01\n\x20CGamescope_SetBlurParams_R\
    equest\x12F\n\x04mode\x18\x01\x20\x01(\x0e2\x13.EGamescopeBlurMode:\x1dk\
    _EGamescopeBlurMode_DisabledR\x04mode\x12\x16\n\x06radius\x18\x02\x20\
    \x01(\x05R\x06radius\x12(\n\x10fade_duration_ms\x18\x03\x20\x01(\x05R\
    \x0efadeDurationMs\"#\n!CGamescope_SetBlurParams_Response2\x81\x02\n\tGa\
    mescope\x12G\n\x08GetState\x12\x1c.CGamescope_GetState_Request\x1a\x1d.C\
    Gamescope_GetState_Response\x12M\n\x12NotifyStateChanged\x12%.CGamescope\
    _StateChanged_Notification\x1a\x10.WebUINoResponse\x12V\n\rSetBlurParams\
    \x12!.CGamescope_SetBlurParams_Request\x1a\".CGamescope_SetBlurParams_Re\
    sponse\x1a\x04\x80\x97\"\x01B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::enums::file_descriptor().clone());
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::webuimessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CMsgDisplayInfo::generated_message_descriptor_data());
            messages.push(CMsgGamescopeState::generated_message_descriptor_data());
            messages.push(CGamescope_GetState_Request::generated_message_descriptor_data());
            messages.push(CGamescope_GetState_Response::generated_message_descriptor_data());
            messages.push(CGamescope_StateChanged_Notification::generated_message_descriptor_data());
            messages.push(CGamescope_SetBlurParams_Request::generated_message_descriptor_data());
            messages.push(CGamescope_SetBlurParams_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
