// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_clientserver_appinfo.proto`

// @@protoc_insertion_point(message:CMsgClientAppInfoUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientAppInfoUpdate {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientAppInfoUpdate.last_changenumber)
    pub last_changenumber: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientAppInfoUpdate.send_changelist)
    pub send_changelist: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientAppInfoUpdate.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientAppInfoUpdate {
    fn default() -> &'a CMsgClientAppInfoUpdate {
        <CMsgClientAppInfoUpdate as crate::Message>::default_instance()
    }
}

impl CMsgClientAppInfoUpdate {
    pub fn new() -> CMsgClientAppInfoUpdate {
        ::std::default::Default::default()
    }

    // optional uint32 last_changenumber = 1;

    pub fn last_changenumber(&self) -> u32 {
        self.last_changenumber.unwrap_or(0)
    }

    pub fn clear_last_changenumber(&mut self) {
        self.last_changenumber = ::std::option::Option::None;
    }

    pub fn has_last_changenumber(&self) -> bool {
        self.last_changenumber.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_changenumber(&mut self, v: u32) {
        self.last_changenumber = ::std::option::Option::Some(v);
    }

    // optional bool send_changelist = 2;

    pub fn send_changelist(&self) -> bool {
        self.send_changelist.unwrap_or(false)
    }

    pub fn clear_send_changelist(&mut self) {
        self.send_changelist = ::std::option::Option::None;
    }

    pub fn has_send_changelist(&self) -> bool {
        self.send_changelist.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_changelist(&mut self, v: bool) {
        self.send_changelist = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "last_changenumber",
            |m: &CMsgClientAppInfoUpdate| { &m.last_changenumber },
            |m: &mut CMsgClientAppInfoUpdate| { &mut m.last_changenumber },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_changelist",
            |m: &CMsgClientAppInfoUpdate| { &m.send_changelist },
            |m: &mut CMsgClientAppInfoUpdate| { &mut m.send_changelist },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientAppInfoUpdate>(
            "CMsgClientAppInfoUpdate",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientAppInfoUpdate {
    const NAME: &'static str = "CMsgClientAppInfoUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.last_changenumber = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.send_changelist = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.last_changenumber {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.send_changelist {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.last_changenumber {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.send_changelist {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientAppInfoUpdate {
        CMsgClientAppInfoUpdate::new()
    }

    fn clear(&mut self) {
        self.last_changenumber = ::std::option::Option::None;
        self.send_changelist = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientAppInfoUpdate {
        static instance: CMsgClientAppInfoUpdate = CMsgClientAppInfoUpdate {
            last_changenumber: ::std::option::Option::None,
            send_changelist: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientAppInfoUpdate {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientAppInfoUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientAppInfoUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientAppInfoUpdate {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientAppInfoChanges)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientAppInfoChanges {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientAppInfoChanges.current_change_number)
    pub current_change_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientAppInfoChanges.force_full_update)
    pub force_full_update: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientAppInfoChanges.appIDs)
    pub appIDs: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientAppInfoChanges.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientAppInfoChanges {
    fn default() -> &'a CMsgClientAppInfoChanges {
        <CMsgClientAppInfoChanges as crate::Message>::default_instance()
    }
}

impl CMsgClientAppInfoChanges {
    pub fn new() -> CMsgClientAppInfoChanges {
        ::std::default::Default::default()
    }

    // optional uint32 current_change_number = 1;

    pub fn current_change_number(&self) -> u32 {
        self.current_change_number.unwrap_or(0)
    }

    pub fn clear_current_change_number(&mut self) {
        self.current_change_number = ::std::option::Option::None;
    }

    pub fn has_current_change_number(&self) -> bool {
        self.current_change_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_change_number(&mut self, v: u32) {
        self.current_change_number = ::std::option::Option::Some(v);
    }

    // optional bool force_full_update = 2;

    pub fn force_full_update(&self) -> bool {
        self.force_full_update.unwrap_or(false)
    }

    pub fn clear_force_full_update(&mut self) {
        self.force_full_update = ::std::option::Option::None;
    }

    pub fn has_force_full_update(&self) -> bool {
        self.force_full_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_full_update(&mut self, v: bool) {
        self.force_full_update = ::std::option::Option::Some(v);
    }

    // repeated uint32 appIDs = 3;

    pub fn appIDs(&self) -> &[u32] {
        &self.appIDs
    }

    pub fn clear_appIDs(&mut self) {
        self.appIDs.clear();
    }

    // Param is passed by value, moved
    pub fn set_appIDs(&mut self, v: ::std::vec::Vec<u32>) {
        self.appIDs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appIDs(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appIDs
    }

    // Take field
    pub fn take_appIDs(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appIDs, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "current_change_number",
            |m: &CMsgClientAppInfoChanges| { &m.current_change_number },
            |m: &mut CMsgClientAppInfoChanges| { &mut m.current_change_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "force_full_update",
            |m: &CMsgClientAppInfoChanges| { &m.force_full_update },
            |m: &mut CMsgClientAppInfoChanges| { &mut m.force_full_update },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appIDs",
            |m: &CMsgClientAppInfoChanges| { &m.appIDs },
            |m: &mut CMsgClientAppInfoChanges| { &mut m.appIDs },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientAppInfoChanges>(
            "CMsgClientAppInfoChanges",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientAppInfoChanges {
    const NAME: &'static str = "CMsgClientAppInfoChanges";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.current_change_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.force_full_update = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    is.read_repeated_packed_uint32_into(&mut self.appIDs)?;
                },
                24 => {
                    self.appIDs.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.current_change_number {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.force_full_update {
            my_size += 1 + 1;
        }
        for value in &self.appIDs {
            my_size += crate::rt::uint32_size(3, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.current_change_number {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.force_full_update {
            os.write_bool(2, v)?;
        }
        for v in &self.appIDs {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientAppInfoChanges {
        CMsgClientAppInfoChanges::new()
    }

    fn clear(&mut self) {
        self.current_change_number = ::std::option::Option::None;
        self.force_full_update = ::std::option::Option::None;
        self.appIDs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientAppInfoChanges {
        static instance: CMsgClientAppInfoChanges = CMsgClientAppInfoChanges {
            current_change_number: ::std::option::Option::None,
            force_full_update: ::std::option::Option::None,
            appIDs: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientAppInfoChanges {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientAppInfoChanges").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientAppInfoChanges {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientAppInfoChanges {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientAppInfoRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientAppInfoRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientAppInfoRequest.apps)
    pub apps: ::std::vec::Vec<cmsg_client_app_info_request::App>,
    // @@protoc_insertion_point(field:CMsgClientAppInfoRequest.supports_batches)
    pub supports_batches: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientAppInfoRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientAppInfoRequest {
    fn default() -> &'a CMsgClientAppInfoRequest {
        <CMsgClientAppInfoRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientAppInfoRequest {
    pub fn new() -> CMsgClientAppInfoRequest {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientAppInfoRequest.App apps = 1;

    pub fn apps(&self) -> &[cmsg_client_app_info_request::App] {
        &self.apps
    }

    pub fn clear_apps(&mut self) {
        self.apps.clear();
    }

    // Param is passed by value, moved
    pub fn set_apps(&mut self, v: ::std::vec::Vec<cmsg_client_app_info_request::App>) {
        self.apps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_apps(&mut self) -> &mut ::std::vec::Vec<cmsg_client_app_info_request::App> {
        &mut self.apps
    }

    // Take field
    pub fn take_apps(&mut self) -> ::std::vec::Vec<cmsg_client_app_info_request::App> {
        ::std::mem::replace(&mut self.apps, ::std::vec::Vec::new())
    }

    // optional bool supports_batches = 2;

    pub fn supports_batches(&self) -> bool {
        self.supports_batches.unwrap_or(false)
    }

    pub fn clear_supports_batches(&mut self) {
        self.supports_batches = ::std::option::Option::None;
    }

    pub fn has_supports_batches(&self) -> bool {
        self.supports_batches.is_some()
    }

    // Param is passed by value, moved
    pub fn set_supports_batches(&mut self, v: bool) {
        self.supports_batches = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apps",
            |m: &CMsgClientAppInfoRequest| { &m.apps },
            |m: &mut CMsgClientAppInfoRequest| { &mut m.apps },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "supports_batches",
            |m: &CMsgClientAppInfoRequest| { &m.supports_batches },
            |m: &mut CMsgClientAppInfoRequest| { &mut m.supports_batches },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientAppInfoRequest>(
            "CMsgClientAppInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientAppInfoRequest {
    const NAME: &'static str = "CMsgClientAppInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.apps.push(is.read_message()?);
                },
                16 => {
                    self.supports_batches = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.apps {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.supports_batches {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.apps {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.supports_batches {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientAppInfoRequest {
        CMsgClientAppInfoRequest::new()
    }

    fn clear(&mut self) {
        self.apps.clear();
        self.supports_batches = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientAppInfoRequest {
        static instance: CMsgClientAppInfoRequest = CMsgClientAppInfoRequest {
            apps: ::std::vec::Vec::new(),
            supports_batches: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientAppInfoRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientAppInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientAppInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientAppInfoRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientAppInfoRequest`
pub mod cmsg_client_app_info_request {
    // @@protoc_insertion_point(message:CMsgClientAppInfoRequest.App)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct App {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientAppInfoRequest.App.app_id)
        pub app_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientAppInfoRequest.App.section_flags)
        pub section_flags: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientAppInfoRequest.App.section_CRC)
        pub section_CRC: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientAppInfoRequest.App.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a App {
        fn default() -> &'a App {
            <App as crate::Message>::default_instance()
        }
    }

    impl App {
        pub fn new() -> App {
            ::std::default::Default::default()
        }

        // optional uint32 app_id = 1;

        pub fn app_id(&self) -> u32 {
            self.app_id.unwrap_or(0)
        }

        pub fn clear_app_id(&mut self) {
            self.app_id = ::std::option::Option::None;
        }

        pub fn has_app_id(&self) -> bool {
            self.app_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_app_id(&mut self, v: u32) {
            self.app_id = ::std::option::Option::Some(v);
        }

        // optional uint32 section_flags = 2;

        pub fn section_flags(&self) -> u32 {
            self.section_flags.unwrap_or(0)
        }

        pub fn clear_section_flags(&mut self) {
            self.section_flags = ::std::option::Option::None;
        }

        pub fn has_section_flags(&self) -> bool {
            self.section_flags.is_some()
        }

        // Param is passed by value, moved
        pub fn set_section_flags(&mut self, v: u32) {
            self.section_flags = ::std::option::Option::Some(v);
        }

        // repeated uint32 section_CRC = 3;

        pub fn section_CRC(&self) -> &[u32] {
            &self.section_CRC
        }

        pub fn clear_section_CRC(&mut self) {
            self.section_CRC.clear();
        }

        // Param is passed by value, moved
        pub fn set_section_CRC(&mut self, v: ::std::vec::Vec<u32>) {
            self.section_CRC = v;
        }

        // Mutable pointer to the field.
        pub fn mut_section_CRC(&mut self) -> &mut ::std::vec::Vec<u32> {
            &mut self.section_CRC
        }

        // Take field
        pub fn take_section_CRC(&mut self) -> ::std::vec::Vec<u32> {
            ::std::mem::replace(&mut self.section_CRC, ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "app_id",
                |m: &App| { &m.app_id },
                |m: &mut App| { &mut m.app_id },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "section_flags",
                |m: &App| { &m.section_flags },
                |m: &mut App| { &mut m.section_flags },
            ));
            fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "section_CRC",
                |m: &App| { &m.section_CRC },
                |m: &mut App| { &mut m.section_CRC },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<App>(
                "CMsgClientAppInfoRequest.App",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for App {
        const NAME: &'static str = "App";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.section_flags = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint32_into(&mut self.section_CRC)?;
                    },
                    24 => {
                        self.section_CRC.push(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.app_id {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.section_flags {
                my_size += crate::rt::uint32_size(2, v);
            }
            for value in &self.section_CRC {
                my_size += crate::rt::uint32_size(3, *value);
            };
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.app_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.section_flags {
                os.write_uint32(2, v)?;
            }
            for v in &self.section_CRC {
                os.write_uint32(3, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> App {
            App::new()
        }

        fn clear(&mut self) {
            self.app_id = ::std::option::Option::None;
            self.section_flags = ::std::option::Option::None;
            self.section_CRC.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static App {
            static instance: App = App {
                app_id: ::std::option::Option::None,
                section_flags: ::std::option::Option::None,
                section_CRC: ::std::vec::Vec::new(),
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for App {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientAppInfoRequest.App").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for App {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for App {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientPICSChangesSinceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPICSChangesSinceRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceRequest.since_change_number)
    pub since_change_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceRequest.send_app_info_changes)
    pub send_app_info_changes: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceRequest.send_package_info_changes)
    pub send_package_info_changes: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceRequest.num_app_info_cached)
    pub num_app_info_cached: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceRequest.num_package_info_cached)
    pub num_package_info_cached: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPICSChangesSinceRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPICSChangesSinceRequest {
    fn default() -> &'a CMsgClientPICSChangesSinceRequest {
        <CMsgClientPICSChangesSinceRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientPICSChangesSinceRequest {
    pub fn new() -> CMsgClientPICSChangesSinceRequest {
        ::std::default::Default::default()
    }

    // optional uint32 since_change_number = 1;

    pub fn since_change_number(&self) -> u32 {
        self.since_change_number.unwrap_or(0)
    }

    pub fn clear_since_change_number(&mut self) {
        self.since_change_number = ::std::option::Option::None;
    }

    pub fn has_since_change_number(&self) -> bool {
        self.since_change_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_since_change_number(&mut self, v: u32) {
        self.since_change_number = ::std::option::Option::Some(v);
    }

    // optional bool send_app_info_changes = 2;

    pub fn send_app_info_changes(&self) -> bool {
        self.send_app_info_changes.unwrap_or(false)
    }

    pub fn clear_send_app_info_changes(&mut self) {
        self.send_app_info_changes = ::std::option::Option::None;
    }

    pub fn has_send_app_info_changes(&self) -> bool {
        self.send_app_info_changes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_app_info_changes(&mut self, v: bool) {
        self.send_app_info_changes = ::std::option::Option::Some(v);
    }

    // optional bool send_package_info_changes = 3;

    pub fn send_package_info_changes(&self) -> bool {
        self.send_package_info_changes.unwrap_or(false)
    }

    pub fn clear_send_package_info_changes(&mut self) {
        self.send_package_info_changes = ::std::option::Option::None;
    }

    pub fn has_send_package_info_changes(&self) -> bool {
        self.send_package_info_changes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_package_info_changes(&mut self, v: bool) {
        self.send_package_info_changes = ::std::option::Option::Some(v);
    }

    // optional uint32 num_app_info_cached = 4;

    pub fn num_app_info_cached(&self) -> u32 {
        self.num_app_info_cached.unwrap_or(0)
    }

    pub fn clear_num_app_info_cached(&mut self) {
        self.num_app_info_cached = ::std::option::Option::None;
    }

    pub fn has_num_app_info_cached(&self) -> bool {
        self.num_app_info_cached.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_app_info_cached(&mut self, v: u32) {
        self.num_app_info_cached = ::std::option::Option::Some(v);
    }

    // optional uint32 num_package_info_cached = 5;

    pub fn num_package_info_cached(&self) -> u32 {
        self.num_package_info_cached.unwrap_or(0)
    }

    pub fn clear_num_package_info_cached(&mut self) {
        self.num_package_info_cached = ::std::option::Option::None;
    }

    pub fn has_num_package_info_cached(&self) -> bool {
        self.num_package_info_cached.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_package_info_cached(&mut self, v: u32) {
        self.num_package_info_cached = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "since_change_number",
            |m: &CMsgClientPICSChangesSinceRequest| { &m.since_change_number },
            |m: &mut CMsgClientPICSChangesSinceRequest| { &mut m.since_change_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_app_info_changes",
            |m: &CMsgClientPICSChangesSinceRequest| { &m.send_app_info_changes },
            |m: &mut CMsgClientPICSChangesSinceRequest| { &mut m.send_app_info_changes },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_package_info_changes",
            |m: &CMsgClientPICSChangesSinceRequest| { &m.send_package_info_changes },
            |m: &mut CMsgClientPICSChangesSinceRequest| { &mut m.send_package_info_changes },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_app_info_cached",
            |m: &CMsgClientPICSChangesSinceRequest| { &m.num_app_info_cached },
            |m: &mut CMsgClientPICSChangesSinceRequest| { &mut m.num_app_info_cached },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_package_info_cached",
            |m: &CMsgClientPICSChangesSinceRequest| { &m.num_package_info_cached },
            |m: &mut CMsgClientPICSChangesSinceRequest| { &mut m.num_package_info_cached },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientPICSChangesSinceRequest>(
            "CMsgClientPICSChangesSinceRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientPICSChangesSinceRequest {
    const NAME: &'static str = "CMsgClientPICSChangesSinceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.since_change_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.send_app_info_changes = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.send_package_info_changes = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.num_app_info_cached = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.num_package_info_cached = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.since_change_number {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.send_app_info_changes {
            my_size += 1 + 1;
        }
        if let Some(v) = self.send_package_info_changes {
            my_size += 1 + 1;
        }
        if let Some(v) = self.num_app_info_cached {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.num_package_info_cached {
            my_size += crate::rt::uint32_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.since_change_number {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.send_app_info_changes {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.send_package_info_changes {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.num_app_info_cached {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.num_package_info_cached {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPICSChangesSinceRequest {
        CMsgClientPICSChangesSinceRequest::new()
    }

    fn clear(&mut self) {
        self.since_change_number = ::std::option::Option::None;
        self.send_app_info_changes = ::std::option::Option::None;
        self.send_package_info_changes = ::std::option::Option::None;
        self.num_app_info_cached = ::std::option::Option::None;
        self.num_package_info_cached = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPICSChangesSinceRequest {
        static instance: CMsgClientPICSChangesSinceRequest = CMsgClientPICSChangesSinceRequest {
            since_change_number: ::std::option::Option::None,
            send_app_info_changes: ::std::option::Option::None,
            send_package_info_changes: ::std::option::Option::None,
            num_app_info_cached: ::std::option::Option::None,
            num_package_info_cached: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientPICSChangesSinceRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientPICSChangesSinceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientPICSChangesSinceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientPICSChangesSinceRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientPICSChangesSinceResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPICSChangesSinceResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.current_change_number)
    pub current_change_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.since_change_number)
    pub since_change_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.force_full_update)
    pub force_full_update: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.package_changes)
    pub package_changes: ::std::vec::Vec<cmsg_client_picschanges_since_response::PackageChange>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.app_changes)
    pub app_changes: ::std::vec::Vec<cmsg_client_picschanges_since_response::AppChange>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.force_full_app_update)
    pub force_full_app_update: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.force_full_package_update)
    pub force_full_package_update: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPICSChangesSinceResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPICSChangesSinceResponse {
    fn default() -> &'a CMsgClientPICSChangesSinceResponse {
        <CMsgClientPICSChangesSinceResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientPICSChangesSinceResponse {
    pub fn new() -> CMsgClientPICSChangesSinceResponse {
        ::std::default::Default::default()
    }

    // optional uint32 current_change_number = 1;

    pub fn current_change_number(&self) -> u32 {
        self.current_change_number.unwrap_or(0)
    }

    pub fn clear_current_change_number(&mut self) {
        self.current_change_number = ::std::option::Option::None;
    }

    pub fn has_current_change_number(&self) -> bool {
        self.current_change_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_change_number(&mut self, v: u32) {
        self.current_change_number = ::std::option::Option::Some(v);
    }

    // optional uint32 since_change_number = 2;

    pub fn since_change_number(&self) -> u32 {
        self.since_change_number.unwrap_or(0)
    }

    pub fn clear_since_change_number(&mut self) {
        self.since_change_number = ::std::option::Option::None;
    }

    pub fn has_since_change_number(&self) -> bool {
        self.since_change_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_since_change_number(&mut self, v: u32) {
        self.since_change_number = ::std::option::Option::Some(v);
    }

    // optional bool force_full_update = 3;

    pub fn force_full_update(&self) -> bool {
        self.force_full_update.unwrap_or(false)
    }

    pub fn clear_force_full_update(&mut self) {
        self.force_full_update = ::std::option::Option::None;
    }

    pub fn has_force_full_update(&self) -> bool {
        self.force_full_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_full_update(&mut self, v: bool) {
        self.force_full_update = ::std::option::Option::Some(v);
    }

    // repeated .CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;

    pub fn package_changes(&self) -> &[cmsg_client_picschanges_since_response::PackageChange] {
        &self.package_changes
    }

    pub fn clear_package_changes(&mut self) {
        self.package_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_changes(&mut self, v: ::std::vec::Vec<cmsg_client_picschanges_since_response::PackageChange>) {
        self.package_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_package_changes(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picschanges_since_response::PackageChange> {
        &mut self.package_changes
    }

    // Take field
    pub fn take_package_changes(&mut self) -> ::std::vec::Vec<cmsg_client_picschanges_since_response::PackageChange> {
        ::std::mem::replace(&mut self.package_changes, ::std::vec::Vec::new())
    }

    // repeated .CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;

    pub fn app_changes(&self) -> &[cmsg_client_picschanges_since_response::AppChange] {
        &self.app_changes
    }

    pub fn clear_app_changes(&mut self) {
        self.app_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_changes(&mut self, v: ::std::vec::Vec<cmsg_client_picschanges_since_response::AppChange>) {
        self.app_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_changes(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picschanges_since_response::AppChange> {
        &mut self.app_changes
    }

    // Take field
    pub fn take_app_changes(&mut self) -> ::std::vec::Vec<cmsg_client_picschanges_since_response::AppChange> {
        ::std::mem::replace(&mut self.app_changes, ::std::vec::Vec::new())
    }

    // optional bool force_full_app_update = 6;

    pub fn force_full_app_update(&self) -> bool {
        self.force_full_app_update.unwrap_or(false)
    }

    pub fn clear_force_full_app_update(&mut self) {
        self.force_full_app_update = ::std::option::Option::None;
    }

    pub fn has_force_full_app_update(&self) -> bool {
        self.force_full_app_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_full_app_update(&mut self, v: bool) {
        self.force_full_app_update = ::std::option::Option::Some(v);
    }

    // optional bool force_full_package_update = 7;

    pub fn force_full_package_update(&self) -> bool {
        self.force_full_package_update.unwrap_or(false)
    }

    pub fn clear_force_full_package_update(&mut self) {
        self.force_full_package_update = ::std::option::Option::None;
    }

    pub fn has_force_full_package_update(&self) -> bool {
        self.force_full_package_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force_full_package_update(&mut self, v: bool) {
        self.force_full_package_update = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "current_change_number",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.current_change_number },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.current_change_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "since_change_number",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.since_change_number },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.since_change_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "force_full_update",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.force_full_update },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.force_full_update },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "package_changes",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.package_changes },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.package_changes },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "app_changes",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.app_changes },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.app_changes },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "force_full_app_update",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.force_full_app_update },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.force_full_app_update },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "force_full_package_update",
            |m: &CMsgClientPICSChangesSinceResponse| { &m.force_full_package_update },
            |m: &mut CMsgClientPICSChangesSinceResponse| { &mut m.force_full_package_update },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientPICSChangesSinceResponse>(
            "CMsgClientPICSChangesSinceResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientPICSChangesSinceResponse {
    const NAME: &'static str = "CMsgClientPICSChangesSinceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.current_change_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.since_change_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.force_full_update = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.package_changes.push(is.read_message()?);
                },
                42 => {
                    self.app_changes.push(is.read_message()?);
                },
                48 => {
                    self.force_full_app_update = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.force_full_package_update = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.current_change_number {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.since_change_number {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.force_full_update {
            my_size += 1 + 1;
        }
        for value in &self.package_changes {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.app_changes {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.force_full_app_update {
            my_size += 1 + 1;
        }
        if let Some(v) = self.force_full_package_update {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.current_change_number {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.since_change_number {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.force_full_update {
            os.write_bool(3, v)?;
        }
        for v in &self.package_changes {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.app_changes {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.force_full_app_update {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.force_full_package_update {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPICSChangesSinceResponse {
        CMsgClientPICSChangesSinceResponse::new()
    }

    fn clear(&mut self) {
        self.current_change_number = ::std::option::Option::None;
        self.since_change_number = ::std::option::Option::None;
        self.force_full_update = ::std::option::Option::None;
        self.package_changes.clear();
        self.app_changes.clear();
        self.force_full_app_update = ::std::option::Option::None;
        self.force_full_package_update = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPICSChangesSinceResponse {
        static instance: CMsgClientPICSChangesSinceResponse = CMsgClientPICSChangesSinceResponse {
            current_change_number: ::std::option::Option::None,
            since_change_number: ::std::option::Option::None,
            force_full_update: ::std::option::Option::None,
            package_changes: ::std::vec::Vec::new(),
            app_changes: ::std::vec::Vec::new(),
            force_full_app_update: ::std::option::Option::None,
            force_full_package_update: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientPICSChangesSinceResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientPICSChangesSinceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientPICSChangesSinceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientPICSChangesSinceResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientPICSChangesSinceResponse`
pub mod cmsg_client_picschanges_since_response {
    // @@protoc_insertion_point(message:CMsgClientPICSChangesSinceResponse.PackageChange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PackageChange {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.PackageChange.packageid)
        pub packageid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.PackageChange.change_number)
        pub change_number: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.PackageChange.needs_token)
        pub needs_token: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSChangesSinceResponse.PackageChange.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PackageChange {
        fn default() -> &'a PackageChange {
            <PackageChange as crate::Message>::default_instance()
        }
    }

    impl PackageChange {
        pub fn new() -> PackageChange {
            ::std::default::Default::default()
        }

        // optional uint32 packageid = 1;

        pub fn packageid(&self) -> u32 {
            self.packageid.unwrap_or(0)
        }

        pub fn clear_packageid(&mut self) {
            self.packageid = ::std::option::Option::None;
        }

        pub fn has_packageid(&self) -> bool {
            self.packageid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_packageid(&mut self, v: u32) {
            self.packageid = ::std::option::Option::Some(v);
        }

        // optional uint32 change_number = 2;

        pub fn change_number(&self) -> u32 {
            self.change_number.unwrap_or(0)
        }

        pub fn clear_change_number(&mut self) {
            self.change_number = ::std::option::Option::None;
        }

        pub fn has_change_number(&self) -> bool {
            self.change_number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_change_number(&mut self, v: u32) {
            self.change_number = ::std::option::Option::Some(v);
        }

        // optional bool needs_token = 3;

        pub fn needs_token(&self) -> bool {
            self.needs_token.unwrap_or(false)
        }

        pub fn clear_needs_token(&mut self) {
            self.needs_token = ::std::option::Option::None;
        }

        pub fn has_needs_token(&self) -> bool {
            self.needs_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_needs_token(&mut self, v: bool) {
            self.needs_token = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "packageid",
                |m: &PackageChange| { &m.packageid },
                |m: &mut PackageChange| { &mut m.packageid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "change_number",
                |m: &PackageChange| { &m.change_number },
                |m: &mut PackageChange| { &mut m.change_number },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "needs_token",
                |m: &PackageChange| { &m.needs_token },
                |m: &mut PackageChange| { &mut m.needs_token },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PackageChange>(
                "CMsgClientPICSChangesSinceResponse.PackageChange",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PackageChange {
        const NAME: &'static str = "PackageChange";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.change_number = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.needs_token = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.packageid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.change_number {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.needs_token {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.packageid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.change_number {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.needs_token {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PackageChange {
            PackageChange::new()
        }

        fn clear(&mut self) {
            self.packageid = ::std::option::Option::None;
            self.change_number = ::std::option::Option::None;
            self.needs_token = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PackageChange {
            static instance: PackageChange = PackageChange {
                packageid: ::std::option::Option::None,
                change_number: ::std::option::Option::None,
                needs_token: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PackageChange {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSChangesSinceResponse.PackageChange").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PackageChange {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PackageChange {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgClientPICSChangesSinceResponse.AppChange)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AppChange {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.AppChange.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.AppChange.change_number)
        pub change_number: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSChangesSinceResponse.AppChange.needs_token)
        pub needs_token: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSChangesSinceResponse.AppChange.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AppChange {
        fn default() -> &'a AppChange {
            <AppChange as crate::Message>::default_instance()
        }
    }

    impl AppChange {
        pub fn new() -> AppChange {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 change_number = 2;

        pub fn change_number(&self) -> u32 {
            self.change_number.unwrap_or(0)
        }

        pub fn clear_change_number(&mut self) {
            self.change_number = ::std::option::Option::None;
        }

        pub fn has_change_number(&self) -> bool {
            self.change_number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_change_number(&mut self, v: u32) {
            self.change_number = ::std::option::Option::Some(v);
        }

        // optional bool needs_token = 3;

        pub fn needs_token(&self) -> bool {
            self.needs_token.unwrap_or(false)
        }

        pub fn clear_needs_token(&mut self) {
            self.needs_token = ::std::option::Option::None;
        }

        pub fn has_needs_token(&self) -> bool {
            self.needs_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_needs_token(&mut self, v: bool) {
            self.needs_token = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &AppChange| { &m.appid },
                |m: &mut AppChange| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "change_number",
                |m: &AppChange| { &m.change_number },
                |m: &mut AppChange| { &mut m.change_number },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "needs_token",
                |m: &AppChange| { &m.needs_token },
                |m: &mut AppChange| { &mut m.needs_token },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<AppChange>(
                "CMsgClientPICSChangesSinceResponse.AppChange",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for AppChange {
        const NAME: &'static str = "AppChange";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.change_number = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.needs_token = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.change_number {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.needs_token {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.change_number {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.needs_token {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AppChange {
            AppChange::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.change_number = ::std::option::Option::None;
            self.needs_token = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AppChange {
            static instance: AppChange = AppChange {
                appid: ::std::option::Option::None,
                change_number: ::std::option::Option::None,
                needs_token: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for AppChange {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSChangesSinceResponse.AppChange").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AppChange {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for AppChange {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientPICSProductInfoRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPICSProductInfoRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.packages)
    pub packages: ::std::vec::Vec<cmsg_client_picsproduct_info_request::PackageInfo>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.apps)
    pub apps: ::std::vec::Vec<cmsg_client_picsproduct_info_request::AppInfo>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.meta_data_only)
    pub meta_data_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.num_prev_failed)
    pub num_prev_failed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.OBSOLETE_supports_package_tokens)
    pub OBSOLETE_supports_package_tokens: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.sequence_number)
    pub sequence_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.single_response)
    pub single_response: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPICSProductInfoRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPICSProductInfoRequest {
    fn default() -> &'a CMsgClientPICSProductInfoRequest {
        <CMsgClientPICSProductInfoRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientPICSProductInfoRequest {
    pub fn new() -> CMsgClientPICSProductInfoRequest {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;

    pub fn packages(&self) -> &[cmsg_client_picsproduct_info_request::PackageInfo] {
        &self.packages
    }

    pub fn clear_packages(&mut self) {
        self.packages.clear();
    }

    // Param is passed by value, moved
    pub fn set_packages(&mut self, v: ::std::vec::Vec<cmsg_client_picsproduct_info_request::PackageInfo>) {
        self.packages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_packages(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picsproduct_info_request::PackageInfo> {
        &mut self.packages
    }

    // Take field
    pub fn take_packages(&mut self) -> ::std::vec::Vec<cmsg_client_picsproduct_info_request::PackageInfo> {
        ::std::mem::replace(&mut self.packages, ::std::vec::Vec::new())
    }

    // repeated .CMsgClientPICSProductInfoRequest.AppInfo apps = 2;

    pub fn apps(&self) -> &[cmsg_client_picsproduct_info_request::AppInfo] {
        &self.apps
    }

    pub fn clear_apps(&mut self) {
        self.apps.clear();
    }

    // Param is passed by value, moved
    pub fn set_apps(&mut self, v: ::std::vec::Vec<cmsg_client_picsproduct_info_request::AppInfo>) {
        self.apps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_apps(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picsproduct_info_request::AppInfo> {
        &mut self.apps
    }

    // Take field
    pub fn take_apps(&mut self) -> ::std::vec::Vec<cmsg_client_picsproduct_info_request::AppInfo> {
        ::std::mem::replace(&mut self.apps, ::std::vec::Vec::new())
    }

    // optional bool meta_data_only = 3;

    pub fn meta_data_only(&self) -> bool {
        self.meta_data_only.unwrap_or(false)
    }

    pub fn clear_meta_data_only(&mut self) {
        self.meta_data_only = ::std::option::Option::None;
    }

    pub fn has_meta_data_only(&self) -> bool {
        self.meta_data_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta_data_only(&mut self, v: bool) {
        self.meta_data_only = ::std::option::Option::Some(v);
    }

    // optional uint32 num_prev_failed = 4;

    pub fn num_prev_failed(&self) -> u32 {
        self.num_prev_failed.unwrap_or(0)
    }

    pub fn clear_num_prev_failed(&mut self) {
        self.num_prev_failed = ::std::option::Option::None;
    }

    pub fn has_num_prev_failed(&self) -> bool {
        self.num_prev_failed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_prev_failed(&mut self, v: u32) {
        self.num_prev_failed = ::std::option::Option::Some(v);
    }

    // optional uint32 OBSOLETE_supports_package_tokens = 5;

    pub fn OBSOLETE_supports_package_tokens(&self) -> u32 {
        self.OBSOLETE_supports_package_tokens.unwrap_or(0)
    }

    pub fn clear_OBSOLETE_supports_package_tokens(&mut self) {
        self.OBSOLETE_supports_package_tokens = ::std::option::Option::None;
    }

    pub fn has_OBSOLETE_supports_package_tokens(&self) -> bool {
        self.OBSOLETE_supports_package_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_OBSOLETE_supports_package_tokens(&mut self, v: u32) {
        self.OBSOLETE_supports_package_tokens = ::std::option::Option::Some(v);
    }

    // optional uint32 sequence_number = 6;

    pub fn sequence_number(&self) -> u32 {
        self.sequence_number.unwrap_or(0)
    }

    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = ::std::option::Option::None;
    }

    pub fn has_sequence_number(&self) -> bool {
        self.sequence_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: u32) {
        self.sequence_number = ::std::option::Option::Some(v);
    }

    // optional bool single_response = 7;

    pub fn single_response(&self) -> bool {
        self.single_response.unwrap_or(false)
    }

    pub fn clear_single_response(&mut self) {
        self.single_response = ::std::option::Option::None;
    }

    pub fn has_single_response(&self) -> bool {
        self.single_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_single_response(&mut self, v: bool) {
        self.single_response = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "packages",
            |m: &CMsgClientPICSProductInfoRequest| { &m.packages },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.packages },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apps",
            |m: &CMsgClientPICSProductInfoRequest| { &m.apps },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.apps },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "meta_data_only",
            |m: &CMsgClientPICSProductInfoRequest| { &m.meta_data_only },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.meta_data_only },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_prev_failed",
            |m: &CMsgClientPICSProductInfoRequest| { &m.num_prev_failed },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.num_prev_failed },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "OBSOLETE_supports_package_tokens",
            |m: &CMsgClientPICSProductInfoRequest| { &m.OBSOLETE_supports_package_tokens },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.OBSOLETE_supports_package_tokens },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sequence_number",
            |m: &CMsgClientPICSProductInfoRequest| { &m.sequence_number },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.sequence_number },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "single_response",
            |m: &CMsgClientPICSProductInfoRequest| { &m.single_response },
            |m: &mut CMsgClientPICSProductInfoRequest| { &mut m.single_response },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientPICSProductInfoRequest>(
            "CMsgClientPICSProductInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientPICSProductInfoRequest {
    const NAME: &'static str = "CMsgClientPICSProductInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.packages.push(is.read_message()?);
                },
                18 => {
                    self.apps.push(is.read_message()?);
                },
                24 => {
                    self.meta_data_only = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.num_prev_failed = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.OBSOLETE_supports_package_tokens = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.sequence_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.single_response = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.packages {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.apps {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.meta_data_only {
            my_size += 1 + 1;
        }
        if let Some(v) = self.num_prev_failed {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.OBSOLETE_supports_package_tokens {
            my_size += crate::rt::uint32_size(5, v);
        }
        if let Some(v) = self.sequence_number {
            my_size += crate::rt::uint32_size(6, v);
        }
        if let Some(v) = self.single_response {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.packages {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.apps {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.meta_data_only {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.num_prev_failed {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.OBSOLETE_supports_package_tokens {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.sequence_number {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.single_response {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPICSProductInfoRequest {
        CMsgClientPICSProductInfoRequest::new()
    }

    fn clear(&mut self) {
        self.packages.clear();
        self.apps.clear();
        self.meta_data_only = ::std::option::Option::None;
        self.num_prev_failed = ::std::option::Option::None;
        self.OBSOLETE_supports_package_tokens = ::std::option::Option::None;
        self.sequence_number = ::std::option::Option::None;
        self.single_response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPICSProductInfoRequest {
        static instance: CMsgClientPICSProductInfoRequest = CMsgClientPICSProductInfoRequest {
            packages: ::std::vec::Vec::new(),
            apps: ::std::vec::Vec::new(),
            meta_data_only: ::std::option::Option::None,
            num_prev_failed: ::std::option::Option::None,
            OBSOLETE_supports_package_tokens: ::std::option::Option::None,
            sequence_number: ::std::option::Option::None,
            single_response: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientPICSProductInfoRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientPICSProductInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientPICSProductInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientPICSProductInfoRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientPICSProductInfoRequest`
pub mod cmsg_client_picsproduct_info_request {
    // @@protoc_insertion_point(message:CMsgClientPICSProductInfoRequest.AppInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AppInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.AppInfo.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.AppInfo.access_token)
        pub access_token: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.AppInfo.only_public_obsolete)
        pub only_public_obsolete: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSProductInfoRequest.AppInfo.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AppInfo {
        fn default() -> &'a AppInfo {
            <AppInfo as crate::Message>::default_instance()
        }
    }

    impl AppInfo {
        pub fn new() -> AppInfo {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint64 access_token = 2;

        pub fn access_token(&self) -> u64 {
            self.access_token.unwrap_or(0)
        }

        pub fn clear_access_token(&mut self) {
            self.access_token = ::std::option::Option::None;
        }

        pub fn has_access_token(&self) -> bool {
            self.access_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token(&mut self, v: u64) {
            self.access_token = ::std::option::Option::Some(v);
        }

        // optional bool only_public_obsolete = 3;

        pub fn only_public_obsolete(&self) -> bool {
            self.only_public_obsolete.unwrap_or(false)
        }

        pub fn clear_only_public_obsolete(&mut self) {
            self.only_public_obsolete = ::std::option::Option::None;
        }

        pub fn has_only_public_obsolete(&self) -> bool {
            self.only_public_obsolete.is_some()
        }

        // Param is passed by value, moved
        pub fn set_only_public_obsolete(&mut self, v: bool) {
            self.only_public_obsolete = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &AppInfo| { &m.appid },
                |m: &mut AppInfo| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "access_token",
                |m: &AppInfo| { &m.access_token },
                |m: &mut AppInfo| { &mut m.access_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "only_public_obsolete",
                |m: &AppInfo| { &m.only_public_obsolete },
                |m: &mut AppInfo| { &mut m.only_public_obsolete },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<AppInfo>(
                "CMsgClientPICSProductInfoRequest.AppInfo",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for AppInfo {
        const NAME: &'static str = "AppInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.access_token = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.only_public_obsolete = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.access_token {
                my_size += crate::rt::uint64_size(2, v);
            }
            if let Some(v) = self.only_public_obsolete {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.access_token {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.only_public_obsolete {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AppInfo {
            AppInfo::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.access_token = ::std::option::Option::None;
            self.only_public_obsolete = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AppInfo {
            static instance: AppInfo = AppInfo {
                appid: ::std::option::Option::None,
                access_token: ::std::option::Option::None,
                only_public_obsolete: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for AppInfo {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSProductInfoRequest.AppInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AppInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for AppInfo {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgClientPICSProductInfoRequest.PackageInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PackageInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.PackageInfo.packageid)
        pub packageid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoRequest.PackageInfo.access_token)
        pub access_token: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSProductInfoRequest.PackageInfo.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PackageInfo {
        fn default() -> &'a PackageInfo {
            <PackageInfo as crate::Message>::default_instance()
        }
    }

    impl PackageInfo {
        pub fn new() -> PackageInfo {
            ::std::default::Default::default()
        }

        // optional uint32 packageid = 1;

        pub fn packageid(&self) -> u32 {
            self.packageid.unwrap_or(0)
        }

        pub fn clear_packageid(&mut self) {
            self.packageid = ::std::option::Option::None;
        }

        pub fn has_packageid(&self) -> bool {
            self.packageid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_packageid(&mut self, v: u32) {
            self.packageid = ::std::option::Option::Some(v);
        }

        // optional uint64 access_token = 2;

        pub fn access_token(&self) -> u64 {
            self.access_token.unwrap_or(0)
        }

        pub fn clear_access_token(&mut self) {
            self.access_token = ::std::option::Option::None;
        }

        pub fn has_access_token(&self) -> bool {
            self.access_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token(&mut self, v: u64) {
            self.access_token = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "packageid",
                |m: &PackageInfo| { &m.packageid },
                |m: &mut PackageInfo| { &mut m.packageid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "access_token",
                |m: &PackageInfo| { &m.access_token },
                |m: &mut PackageInfo| { &mut m.access_token },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PackageInfo>(
                "CMsgClientPICSProductInfoRequest.PackageInfo",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PackageInfo {
        const NAME: &'static str = "PackageInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.access_token = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.packageid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.access_token {
                my_size += crate::rt::uint64_size(2, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.packageid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.access_token {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PackageInfo {
            PackageInfo::new()
        }

        fn clear(&mut self) {
            self.packageid = ::std::option::Option::None;
            self.access_token = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PackageInfo {
            static instance: PackageInfo = PackageInfo {
                packageid: ::std::option::Option::None,
                access_token: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PackageInfo {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSProductInfoRequest.PackageInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PackageInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PackageInfo {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientPICSProductInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPICSProductInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.apps)
    pub apps: ::std::vec::Vec<cmsg_client_picsproduct_info_response::AppInfo>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.unknown_appids)
    pub unknown_appids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.packages)
    pub packages: ::std::vec::Vec<cmsg_client_picsproduct_info_response::PackageInfo>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.unknown_packageids)
    pub unknown_packageids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.meta_data_only)
    pub meta_data_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.response_pending)
    pub response_pending: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.http_min_size)
    pub http_min_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.http_host)
    pub http_host: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPICSProductInfoResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPICSProductInfoResponse {
    fn default() -> &'a CMsgClientPICSProductInfoResponse {
        <CMsgClientPICSProductInfoResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientPICSProductInfoResponse {
    pub fn new() -> CMsgClientPICSProductInfoResponse {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientPICSProductInfoResponse.AppInfo apps = 1;

    pub fn apps(&self) -> &[cmsg_client_picsproduct_info_response::AppInfo] {
        &self.apps
    }

    pub fn clear_apps(&mut self) {
        self.apps.clear();
    }

    // Param is passed by value, moved
    pub fn set_apps(&mut self, v: ::std::vec::Vec<cmsg_client_picsproduct_info_response::AppInfo>) {
        self.apps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_apps(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picsproduct_info_response::AppInfo> {
        &mut self.apps
    }

    // Take field
    pub fn take_apps(&mut self) -> ::std::vec::Vec<cmsg_client_picsproduct_info_response::AppInfo> {
        ::std::mem::replace(&mut self.apps, ::std::vec::Vec::new())
    }

    // repeated uint32 unknown_appids = 2;

    pub fn unknown_appids(&self) -> &[u32] {
        &self.unknown_appids
    }

    pub fn clear_unknown_appids(&mut self) {
        self.unknown_appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_unknown_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.unknown_appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unknown_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.unknown_appids
    }

    // Take field
    pub fn take_unknown_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.unknown_appids, ::std::vec::Vec::new())
    }

    // repeated .CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;

    pub fn packages(&self) -> &[cmsg_client_picsproduct_info_response::PackageInfo] {
        &self.packages
    }

    pub fn clear_packages(&mut self) {
        self.packages.clear();
    }

    // Param is passed by value, moved
    pub fn set_packages(&mut self, v: ::std::vec::Vec<cmsg_client_picsproduct_info_response::PackageInfo>) {
        self.packages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_packages(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picsproduct_info_response::PackageInfo> {
        &mut self.packages
    }

    // Take field
    pub fn take_packages(&mut self) -> ::std::vec::Vec<cmsg_client_picsproduct_info_response::PackageInfo> {
        ::std::mem::replace(&mut self.packages, ::std::vec::Vec::new())
    }

    // repeated uint32 unknown_packageids = 4;

    pub fn unknown_packageids(&self) -> &[u32] {
        &self.unknown_packageids
    }

    pub fn clear_unknown_packageids(&mut self) {
        self.unknown_packageids.clear();
    }

    // Param is passed by value, moved
    pub fn set_unknown_packageids(&mut self, v: ::std::vec::Vec<u32>) {
        self.unknown_packageids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unknown_packageids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.unknown_packageids
    }

    // Take field
    pub fn take_unknown_packageids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.unknown_packageids, ::std::vec::Vec::new())
    }

    // optional bool meta_data_only = 5;

    pub fn meta_data_only(&self) -> bool {
        self.meta_data_only.unwrap_or(false)
    }

    pub fn clear_meta_data_only(&mut self) {
        self.meta_data_only = ::std::option::Option::None;
    }

    pub fn has_meta_data_only(&self) -> bool {
        self.meta_data_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta_data_only(&mut self, v: bool) {
        self.meta_data_only = ::std::option::Option::Some(v);
    }

    // optional bool response_pending = 6;

    pub fn response_pending(&self) -> bool {
        self.response_pending.unwrap_or(false)
    }

    pub fn clear_response_pending(&mut self) {
        self.response_pending = ::std::option::Option::None;
    }

    pub fn has_response_pending(&self) -> bool {
        self.response_pending.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_pending(&mut self, v: bool) {
        self.response_pending = ::std::option::Option::Some(v);
    }

    // optional uint32 http_min_size = 7;

    pub fn http_min_size(&self) -> u32 {
        self.http_min_size.unwrap_or(0)
    }

    pub fn clear_http_min_size(&mut self) {
        self.http_min_size = ::std::option::Option::None;
    }

    pub fn has_http_min_size(&self) -> bool {
        self.http_min_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_min_size(&mut self, v: u32) {
        self.http_min_size = ::std::option::Option::Some(v);
    }

    // optional string http_host = 8;

    pub fn http_host(&self) -> &str {
        match self.http_host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_http_host(&mut self) {
        self.http_host = ::std::option::Option::None;
    }

    pub fn has_http_host(&self) -> bool {
        self.http_host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_host(&mut self, v: ::std::string::String) {
        self.http_host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_host(&mut self) -> &mut ::std::string::String {
        if self.http_host.is_none() {
            self.http_host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.http_host.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_host(&mut self) -> ::std::string::String {
        self.http_host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apps",
            |m: &CMsgClientPICSProductInfoResponse| { &m.apps },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.apps },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unknown_appids",
            |m: &CMsgClientPICSProductInfoResponse| { &m.unknown_appids },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.unknown_appids },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "packages",
            |m: &CMsgClientPICSProductInfoResponse| { &m.packages },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.packages },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unknown_packageids",
            |m: &CMsgClientPICSProductInfoResponse| { &m.unknown_packageids },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.unknown_packageids },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "meta_data_only",
            |m: &CMsgClientPICSProductInfoResponse| { &m.meta_data_only },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.meta_data_only },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "response_pending",
            |m: &CMsgClientPICSProductInfoResponse| { &m.response_pending },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.response_pending },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "http_min_size",
            |m: &CMsgClientPICSProductInfoResponse| { &m.http_min_size },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.http_min_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "http_host",
            |m: &CMsgClientPICSProductInfoResponse| { &m.http_host },
            |m: &mut CMsgClientPICSProductInfoResponse| { &mut m.http_host },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientPICSProductInfoResponse>(
            "CMsgClientPICSProductInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientPICSProductInfoResponse {
    const NAME: &'static str = "CMsgClientPICSProductInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.apps.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.unknown_appids)?;
                },
                16 => {
                    self.unknown_appids.push(is.read_uint32()?);
                },
                26 => {
                    self.packages.push(is.read_message()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.unknown_packageids)?;
                },
                32 => {
                    self.unknown_packageids.push(is.read_uint32()?);
                },
                40 => {
                    self.meta_data_only = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.response_pending = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.http_min_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    self.http_host = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.apps {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.unknown_appids {
            my_size += crate::rt::uint32_size(2, *value);
        };
        for value in &self.packages {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.unknown_packageids {
            my_size += crate::rt::uint32_size(4, *value);
        };
        if let Some(v) = self.meta_data_only {
            my_size += 1 + 1;
        }
        if let Some(v) = self.response_pending {
            my_size += 1 + 1;
        }
        if let Some(v) = self.http_min_size {
            my_size += crate::rt::uint32_size(7, v);
        }
        if let Some(v) = self.http_host.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.apps {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.unknown_appids {
            os.write_uint32(2, *v)?;
        };
        for v in &self.packages {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.unknown_packageids {
            os.write_uint32(4, *v)?;
        };
        if let Some(v) = self.meta_data_only {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.response_pending {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.http_min_size {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.http_host.as_ref() {
            os.write_string(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPICSProductInfoResponse {
        CMsgClientPICSProductInfoResponse::new()
    }

    fn clear(&mut self) {
        self.apps.clear();
        self.unknown_appids.clear();
        self.packages.clear();
        self.unknown_packageids.clear();
        self.meta_data_only = ::std::option::Option::None;
        self.response_pending = ::std::option::Option::None;
        self.http_min_size = ::std::option::Option::None;
        self.http_host = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPICSProductInfoResponse {
        static instance: CMsgClientPICSProductInfoResponse = CMsgClientPICSProductInfoResponse {
            apps: ::std::vec::Vec::new(),
            unknown_appids: ::std::vec::Vec::new(),
            packages: ::std::vec::Vec::new(),
            unknown_packageids: ::std::vec::Vec::new(),
            meta_data_only: ::std::option::Option::None,
            response_pending: ::std::option::Option::None,
            http_min_size: ::std::option::Option::None,
            http_host: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientPICSProductInfoResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientPICSProductInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientPICSProductInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientPICSProductInfoResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientPICSProductInfoResponse`
pub mod cmsg_client_picsproduct_info_response {
    // @@protoc_insertion_point(message:CMsgClientPICSProductInfoResponse.AppInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AppInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.change_number)
        pub change_number: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.missing_token)
        pub missing_token: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.sha)
        pub sha: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.buffer)
        pub buffer: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.only_public)
        pub only_public: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.AppInfo.size)
        pub size: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSProductInfoResponse.AppInfo.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AppInfo {
        fn default() -> &'a AppInfo {
            <AppInfo as crate::Message>::default_instance()
        }
    }

    impl AppInfo {
        pub fn new() -> AppInfo {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 change_number = 2;

        pub fn change_number(&self) -> u32 {
            self.change_number.unwrap_or(0)
        }

        pub fn clear_change_number(&mut self) {
            self.change_number = ::std::option::Option::None;
        }

        pub fn has_change_number(&self) -> bool {
            self.change_number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_change_number(&mut self, v: u32) {
            self.change_number = ::std::option::Option::Some(v);
        }

        // optional bool missing_token = 3;

        pub fn missing_token(&self) -> bool {
            self.missing_token.unwrap_or(false)
        }

        pub fn clear_missing_token(&mut self) {
            self.missing_token = ::std::option::Option::None;
        }

        pub fn has_missing_token(&self) -> bool {
            self.missing_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_missing_token(&mut self, v: bool) {
            self.missing_token = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 4;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::bytes::Bytes) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::bytes::Bytes {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::bytes::Bytes {
            self.sha.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional bytes buffer = 5;

        pub fn buffer(&self) -> &[u8] {
            match self.buffer.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_buffer(&mut self) {
            self.buffer = ::std::option::Option::None;
        }

        pub fn has_buffer(&self) -> bool {
            self.buffer.is_some()
        }

        // Param is passed by value, moved
        pub fn set_buffer(&mut self, v: ::bytes::Bytes) {
            self.buffer = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_buffer(&mut self) -> &mut ::bytes::Bytes {
            if self.buffer.is_none() {
                self.buffer = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.buffer.as_mut().unwrap()
        }

        // Take field
        pub fn take_buffer(&mut self) -> ::bytes::Bytes {
            self.buffer.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional bool only_public = 6;

        pub fn only_public(&self) -> bool {
            self.only_public.unwrap_or(false)
        }

        pub fn clear_only_public(&mut self) {
            self.only_public = ::std::option::Option::None;
        }

        pub fn has_only_public(&self) -> bool {
            self.only_public.is_some()
        }

        // Param is passed by value, moved
        pub fn set_only_public(&mut self, v: bool) {
            self.only_public = ::std::option::Option::Some(v);
        }

        // optional uint32 size = 7;

        pub fn size(&self) -> u32 {
            self.size.unwrap_or(0)
        }

        pub fn clear_size(&mut self) {
            self.size = ::std::option::Option::None;
        }

        pub fn has_size(&self) -> bool {
            self.size.is_some()
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: u32) {
            self.size = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(7);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &AppInfo| { &m.appid },
                |m: &mut AppInfo| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "change_number",
                |m: &AppInfo| { &m.change_number },
                |m: &mut AppInfo| { &mut m.change_number },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "missing_token",
                |m: &AppInfo| { &m.missing_token },
                |m: &mut AppInfo| { &mut m.missing_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha",
                |m: &AppInfo| { &m.sha },
                |m: &mut AppInfo| { &mut m.sha },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "buffer",
                |m: &AppInfo| { &m.buffer },
                |m: &mut AppInfo| { &mut m.buffer },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "only_public",
                |m: &AppInfo| { &m.only_public },
                |m: &mut AppInfo| { &mut m.only_public },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "size",
                |m: &AppInfo| { &m.size },
                |m: &mut AppInfo| { &mut m.size },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<AppInfo>(
                "CMsgClientPICSProductInfoResponse.AppInfo",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for AppInfo {
        const NAME: &'static str = "AppInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.change_number = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.missing_token = ::std::option::Option::Some(is.read_bool()?);
                    },
                    34 => {
                        self.sha = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    42 => {
                        self.buffer = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    48 => {
                        self.only_public = ::std::option::Option::Some(is.read_bool()?);
                    },
                    56 => {
                        self.size = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.change_number {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.missing_token {
                my_size += 1 + 1;
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += crate::rt::bytes_size(4, &v);
            }
            if let Some(v) = self.buffer.as_ref() {
                my_size += crate::rt::bytes_size(5, &v);
            }
            if let Some(v) = self.only_public {
                my_size += 1 + 1;
            }
            if let Some(v) = self.size {
                my_size += crate::rt::uint32_size(7, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.change_number {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.missing_token {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(4, v)?;
            }
            if let Some(v) = self.buffer.as_ref() {
                os.write_bytes(5, v)?;
            }
            if let Some(v) = self.only_public {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.size {
                os.write_uint32(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AppInfo {
            AppInfo::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.change_number = ::std::option::Option::None;
            self.missing_token = ::std::option::Option::None;
            self.sha = ::std::option::Option::None;
            self.buffer = ::std::option::Option::None;
            self.only_public = ::std::option::Option::None;
            self.size = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AppInfo {
            static instance: AppInfo = AppInfo {
                appid: ::std::option::Option::None,
                change_number: ::std::option::Option::None,
                missing_token: ::std::option::Option::None,
                sha: ::std::option::Option::None,
                buffer: ::std::option::Option::None,
                only_public: ::std::option::Option::None,
                size: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for AppInfo {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSProductInfoResponse.AppInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AppInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for AppInfo {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgClientPICSProductInfoResponse.PackageInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PackageInfo {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.PackageInfo.packageid)
        pub packageid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.PackageInfo.change_number)
        pub change_number: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.PackageInfo.missing_token)
        pub missing_token: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.PackageInfo.sha)
        pub sha: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.PackageInfo.buffer)
        pub buffer: ::std::option::Option<::bytes::Bytes>,
        // @@protoc_insertion_point(field:CMsgClientPICSProductInfoResponse.PackageInfo.size)
        pub size: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSProductInfoResponse.PackageInfo.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PackageInfo {
        fn default() -> &'a PackageInfo {
            <PackageInfo as crate::Message>::default_instance()
        }
    }

    impl PackageInfo {
        pub fn new() -> PackageInfo {
            ::std::default::Default::default()
        }

        // optional uint32 packageid = 1;

        pub fn packageid(&self) -> u32 {
            self.packageid.unwrap_or(0)
        }

        pub fn clear_packageid(&mut self) {
            self.packageid = ::std::option::Option::None;
        }

        pub fn has_packageid(&self) -> bool {
            self.packageid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_packageid(&mut self, v: u32) {
            self.packageid = ::std::option::Option::Some(v);
        }

        // optional uint32 change_number = 2;

        pub fn change_number(&self) -> u32 {
            self.change_number.unwrap_or(0)
        }

        pub fn clear_change_number(&mut self) {
            self.change_number = ::std::option::Option::None;
        }

        pub fn has_change_number(&self) -> bool {
            self.change_number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_change_number(&mut self, v: u32) {
            self.change_number = ::std::option::Option::Some(v);
        }

        // optional bool missing_token = 3;

        pub fn missing_token(&self) -> bool {
            self.missing_token.unwrap_or(false)
        }

        pub fn clear_missing_token(&mut self) {
            self.missing_token = ::std::option::Option::None;
        }

        pub fn has_missing_token(&self) -> bool {
            self.missing_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_missing_token(&mut self, v: bool) {
            self.missing_token = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 4;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::bytes::Bytes) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::bytes::Bytes {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::bytes::Bytes {
            self.sha.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional bytes buffer = 5;

        pub fn buffer(&self) -> &[u8] {
            match self.buffer.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_buffer(&mut self) {
            self.buffer = ::std::option::Option::None;
        }

        pub fn has_buffer(&self) -> bool {
            self.buffer.is_some()
        }

        // Param is passed by value, moved
        pub fn set_buffer(&mut self, v: ::bytes::Bytes) {
            self.buffer = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_buffer(&mut self) -> &mut ::bytes::Bytes {
            if self.buffer.is_none() {
                self.buffer = ::std::option::Option::Some(::bytes::Bytes::new());
            }
            self.buffer.as_mut().unwrap()
        }

        // Take field
        pub fn take_buffer(&mut self) -> ::bytes::Bytes {
            self.buffer.take().unwrap_or_else(|| ::bytes::Bytes::new())
        }

        // optional uint32 size = 6;

        pub fn size(&self) -> u32 {
            self.size.unwrap_or(0)
        }

        pub fn clear_size(&mut self) {
            self.size = ::std::option::Option::None;
        }

        pub fn has_size(&self) -> bool {
            self.size.is_some()
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: u32) {
            self.size = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "packageid",
                |m: &PackageInfo| { &m.packageid },
                |m: &mut PackageInfo| { &mut m.packageid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "change_number",
                |m: &PackageInfo| { &m.change_number },
                |m: &mut PackageInfo| { &mut m.change_number },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "missing_token",
                |m: &PackageInfo| { &m.missing_token },
                |m: &mut PackageInfo| { &mut m.missing_token },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sha",
                |m: &PackageInfo| { &m.sha },
                |m: &mut PackageInfo| { &mut m.sha },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "buffer",
                |m: &PackageInfo| { &m.buffer },
                |m: &mut PackageInfo| { &mut m.buffer },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "size",
                |m: &PackageInfo| { &m.size },
                |m: &mut PackageInfo| { &mut m.size },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PackageInfo>(
                "CMsgClientPICSProductInfoResponse.PackageInfo",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PackageInfo {
        const NAME: &'static str = "PackageInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.change_number = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.missing_token = ::std::option::Option::Some(is.read_bool()?);
                    },
                    34 => {
                        self.sha = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    42 => {
                        self.buffer = ::std::option::Option::Some(is.read_tokio_bytes()?);
                    },
                    48 => {
                        self.size = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.packageid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.change_number {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.missing_token {
                my_size += 1 + 1;
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += crate::rt::bytes_size(4, &v);
            }
            if let Some(v) = self.buffer.as_ref() {
                my_size += crate::rt::bytes_size(5, &v);
            }
            if let Some(v) = self.size {
                my_size += crate::rt::uint32_size(6, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.packageid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.change_number {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.missing_token {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(4, v)?;
            }
            if let Some(v) = self.buffer.as_ref() {
                os.write_bytes(5, v)?;
            }
            if let Some(v) = self.size {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PackageInfo {
            PackageInfo::new()
        }

        fn clear(&mut self) {
            self.packageid = ::std::option::Option::None;
            self.change_number = ::std::option::Option::None;
            self.missing_token = ::std::option::Option::None;
            self.sha = ::std::option::Option::None;
            self.buffer = ::std::option::Option::None;
            self.size = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PackageInfo {
            static instance: PackageInfo = PackageInfo {
                packageid: ::std::option::Option::None,
                change_number: ::std::option::Option::None,
                missing_token: ::std::option::Option::None,
                sha: ::std::option::Option::None,
                buffer: ::std::option::Option::None,
                size: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PackageInfo {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSProductInfoResponse.PackageInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PackageInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PackageInfo {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgClientPICSAccessTokenRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPICSAccessTokenRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenRequest.packageids)
    pub packageids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenRequest.appids)
    pub appids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPICSAccessTokenRequest.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPICSAccessTokenRequest {
    fn default() -> &'a CMsgClientPICSAccessTokenRequest {
        <CMsgClientPICSAccessTokenRequest as crate::Message>::default_instance()
    }
}

impl CMsgClientPICSAccessTokenRequest {
    pub fn new() -> CMsgClientPICSAccessTokenRequest {
        ::std::default::Default::default()
    }

    // repeated uint32 packageids = 1;

    pub fn packageids(&self) -> &[u32] {
        &self.packageids
    }

    pub fn clear_packageids(&mut self) {
        self.packageids.clear();
    }

    // Param is passed by value, moved
    pub fn set_packageids(&mut self, v: ::std::vec::Vec<u32>) {
        self.packageids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_packageids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.packageids
    }

    // Take field
    pub fn take_packageids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.packageids, ::std::vec::Vec::new())
    }

    // repeated uint32 appids = 2;

    pub fn appids(&self) -> &[u32] {
        &self.appids
    }

    pub fn clear_appids(&mut self) {
        self.appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids
    }

    // Take field
    pub fn take_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "packageids",
            |m: &CMsgClientPICSAccessTokenRequest| { &m.packageids },
            |m: &mut CMsgClientPICSAccessTokenRequest| { &mut m.packageids },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids",
            |m: &CMsgClientPICSAccessTokenRequest| { &m.appids },
            |m: &mut CMsgClientPICSAccessTokenRequest| { &mut m.appids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientPICSAccessTokenRequest>(
            "CMsgClientPICSAccessTokenRequest",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientPICSAccessTokenRequest {
    const NAME: &'static str = "CMsgClientPICSAccessTokenRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.packageids)?;
                },
                8 => {
                    self.packageids.push(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids)?;
                },
                16 => {
                    self.appids.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.packageids {
            my_size += crate::rt::uint32_size(1, *value);
        };
        for value in &self.appids {
            my_size += crate::rt::uint32_size(2, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.packageids {
            os.write_uint32(1, *v)?;
        };
        for v in &self.appids {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPICSAccessTokenRequest {
        CMsgClientPICSAccessTokenRequest::new()
    }

    fn clear(&mut self) {
        self.packageids.clear();
        self.appids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPICSAccessTokenRequest {
        static instance: CMsgClientPICSAccessTokenRequest = CMsgClientPICSAccessTokenRequest {
            packageids: ::std::vec::Vec::new(),
            appids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientPICSAccessTokenRequest {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientPICSAccessTokenRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientPICSAccessTokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientPICSAccessTokenRequest {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgClientPICSAccessTokenResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPICSAccessTokenResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.package_access_tokens)
    pub package_access_tokens: ::std::vec::Vec<cmsg_client_picsaccess_token_response::PackageToken>,
    // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.package_denied_tokens)
    pub package_denied_tokens: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.app_access_tokens)
    pub app_access_tokens: ::std::vec::Vec<cmsg_client_picsaccess_token_response::AppToken>,
    // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.app_denied_tokens)
    pub app_denied_tokens: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPICSAccessTokenResponse.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPICSAccessTokenResponse {
    fn default() -> &'a CMsgClientPICSAccessTokenResponse {
        <CMsgClientPICSAccessTokenResponse as crate::Message>::default_instance()
    }
}

impl CMsgClientPICSAccessTokenResponse {
    pub fn new() -> CMsgClientPICSAccessTokenResponse {
        ::std::default::Default::default()
    }

    // repeated .CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;

    pub fn package_access_tokens(&self) -> &[cmsg_client_picsaccess_token_response::PackageToken] {
        &self.package_access_tokens
    }

    pub fn clear_package_access_tokens(&mut self) {
        self.package_access_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_access_tokens(&mut self, v: ::std::vec::Vec<cmsg_client_picsaccess_token_response::PackageToken>) {
        self.package_access_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_package_access_tokens(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picsaccess_token_response::PackageToken> {
        &mut self.package_access_tokens
    }

    // Take field
    pub fn take_package_access_tokens(&mut self) -> ::std::vec::Vec<cmsg_client_picsaccess_token_response::PackageToken> {
        ::std::mem::replace(&mut self.package_access_tokens, ::std::vec::Vec::new())
    }

    // repeated uint32 package_denied_tokens = 2;

    pub fn package_denied_tokens(&self) -> &[u32] {
        &self.package_denied_tokens
    }

    pub fn clear_package_denied_tokens(&mut self) {
        self.package_denied_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_denied_tokens(&mut self, v: ::std::vec::Vec<u32>) {
        self.package_denied_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_package_denied_tokens(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.package_denied_tokens
    }

    // Take field
    pub fn take_package_denied_tokens(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.package_denied_tokens, ::std::vec::Vec::new())
    }

    // repeated .CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;

    pub fn app_access_tokens(&self) -> &[cmsg_client_picsaccess_token_response::AppToken] {
        &self.app_access_tokens
    }

    pub fn clear_app_access_tokens(&mut self) {
        self.app_access_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_access_tokens(&mut self, v: ::std::vec::Vec<cmsg_client_picsaccess_token_response::AppToken>) {
        self.app_access_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_access_tokens(&mut self) -> &mut ::std::vec::Vec<cmsg_client_picsaccess_token_response::AppToken> {
        &mut self.app_access_tokens
    }

    // Take field
    pub fn take_app_access_tokens(&mut self) -> ::std::vec::Vec<cmsg_client_picsaccess_token_response::AppToken> {
        ::std::mem::replace(&mut self.app_access_tokens, ::std::vec::Vec::new())
    }

    // repeated uint32 app_denied_tokens = 4;

    pub fn app_denied_tokens(&self) -> &[u32] {
        &self.app_denied_tokens
    }

    pub fn clear_app_denied_tokens(&mut self) {
        self.app_denied_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_denied_tokens(&mut self, v: ::std::vec::Vec<u32>) {
        self.app_denied_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_denied_tokens(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.app_denied_tokens
    }

    // Take field
    pub fn take_app_denied_tokens(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.app_denied_tokens, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "package_access_tokens",
            |m: &CMsgClientPICSAccessTokenResponse| { &m.package_access_tokens },
            |m: &mut CMsgClientPICSAccessTokenResponse| { &mut m.package_access_tokens },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "package_denied_tokens",
            |m: &CMsgClientPICSAccessTokenResponse| { &m.package_denied_tokens },
            |m: &mut CMsgClientPICSAccessTokenResponse| { &mut m.package_denied_tokens },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "app_access_tokens",
            |m: &CMsgClientPICSAccessTokenResponse| { &m.app_access_tokens },
            |m: &mut CMsgClientPICSAccessTokenResponse| { &mut m.app_access_tokens },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "app_denied_tokens",
            |m: &CMsgClientPICSAccessTokenResponse| { &m.app_denied_tokens },
            |m: &mut CMsgClientPICSAccessTokenResponse| { &mut m.app_denied_tokens },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgClientPICSAccessTokenResponse>(
            "CMsgClientPICSAccessTokenResponse",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgClientPICSAccessTokenResponse {
    const NAME: &'static str = "CMsgClientPICSAccessTokenResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.package_access_tokens.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.package_denied_tokens)?;
                },
                16 => {
                    self.package_denied_tokens.push(is.read_uint32()?);
                },
                26 => {
                    self.app_access_tokens.push(is.read_message()?);
                },
                34 => {
                    is.read_repeated_packed_uint32_into(&mut self.app_denied_tokens)?;
                },
                32 => {
                    self.app_denied_tokens.push(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.package_access_tokens {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.package_denied_tokens {
            my_size += crate::rt::uint32_size(2, *value);
        };
        for value in &self.app_access_tokens {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.app_denied_tokens {
            my_size += crate::rt::uint32_size(4, *value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.package_access_tokens {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.package_denied_tokens {
            os.write_uint32(2, *v)?;
        };
        for v in &self.app_access_tokens {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.app_denied_tokens {
            os.write_uint32(4, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPICSAccessTokenResponse {
        CMsgClientPICSAccessTokenResponse::new()
    }

    fn clear(&mut self) {
        self.package_access_tokens.clear();
        self.package_denied_tokens.clear();
        self.app_access_tokens.clear();
        self.app_denied_tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPICSAccessTokenResponse {
        static instance: CMsgClientPICSAccessTokenResponse = CMsgClientPICSAccessTokenResponse {
            package_access_tokens: ::std::vec::Vec::new(),
            package_denied_tokens: ::std::vec::Vec::new(),
            app_access_tokens: ::std::vec::Vec::new(),
            app_denied_tokens: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgClientPICSAccessTokenResponse {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgClientPICSAccessTokenResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgClientPICSAccessTokenResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgClientPICSAccessTokenResponse {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgClientPICSAccessTokenResponse`
pub mod cmsg_client_picsaccess_token_response {
    // @@protoc_insertion_point(message:CMsgClientPICSAccessTokenResponse.PackageToken)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PackageToken {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.PackageToken.packageid)
        pub packageid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.PackageToken.access_token)
        pub access_token: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSAccessTokenResponse.PackageToken.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PackageToken {
        fn default() -> &'a PackageToken {
            <PackageToken as crate::Message>::default_instance()
        }
    }

    impl PackageToken {
        pub fn new() -> PackageToken {
            ::std::default::Default::default()
        }

        // optional uint32 packageid = 1;

        pub fn packageid(&self) -> u32 {
            self.packageid.unwrap_or(0)
        }

        pub fn clear_packageid(&mut self) {
            self.packageid = ::std::option::Option::None;
        }

        pub fn has_packageid(&self) -> bool {
            self.packageid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_packageid(&mut self, v: u32) {
            self.packageid = ::std::option::Option::Some(v);
        }

        // optional uint64 access_token = 2;

        pub fn access_token(&self) -> u64 {
            self.access_token.unwrap_or(0)
        }

        pub fn clear_access_token(&mut self) {
            self.access_token = ::std::option::Option::None;
        }

        pub fn has_access_token(&self) -> bool {
            self.access_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token(&mut self, v: u64) {
            self.access_token = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "packageid",
                |m: &PackageToken| { &m.packageid },
                |m: &mut PackageToken| { &mut m.packageid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "access_token",
                |m: &PackageToken| { &m.access_token },
                |m: &mut PackageToken| { &mut m.access_token },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<PackageToken>(
                "CMsgClientPICSAccessTokenResponse.PackageToken",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for PackageToken {
        const NAME: &'static str = "PackageToken";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.access_token = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.packageid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.access_token {
                my_size += crate::rt::uint64_size(2, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.packageid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.access_token {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PackageToken {
            PackageToken::new()
        }

        fn clear(&mut self) {
            self.packageid = ::std::option::Option::None;
            self.access_token = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PackageToken {
            static instance: PackageToken = PackageToken {
                packageid: ::std::option::Option::None,
                access_token: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for PackageToken {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSAccessTokenResponse.PackageToken").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PackageToken {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for PackageToken {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CMsgClientPICSAccessTokenResponse.AppToken)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AppToken {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.AppToken.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientPICSAccessTokenResponse.AppToken.access_token)
        pub access_token: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientPICSAccessTokenResponse.AppToken.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AppToken {
        fn default() -> &'a AppToken {
            <AppToken as crate::Message>::default_instance()
        }
    }

    impl AppToken {
        pub fn new() -> AppToken {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint64 access_token = 2;

        pub fn access_token(&self) -> u64 {
            self.access_token.unwrap_or(0)
        }

        pub fn clear_access_token(&mut self) {
            self.access_token = ::std::option::Option::None;
        }

        pub fn has_access_token(&self) -> bool {
            self.access_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token(&mut self, v: u64) {
            self.access_token = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &AppToken| { &m.appid },
                |m: &mut AppToken| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "access_token",
                |m: &AppToken| { &m.access_token },
                |m: &mut AppToken| { &mut m.access_token },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<AppToken>(
                "CMsgClientPICSAccessTokenResponse.AppToken",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for AppToken {
        const NAME: &'static str = "AppToken";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.access_token = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(1, v);
            }
            if let Some(v) = self.access_token {
                my_size += crate::rt::uint64_size(2, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.access_token {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AppToken {
            AppToken::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.access_token = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AppToken {
            static instance: AppToken = AppToken {
                appid: ::std::option::Option::None,
                access_token: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for AppToken {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgClientPICSAccessTokenResponse.AppToken").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AppToken {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for AppToken {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(steammessages_clientserver_appinfo.proto\x1a\x18steammessages_base.pr\
    oto\"o\n\x17CMsgClientAppInfoUpdate\x12+\n\x11last_changenumber\x18\x01\
    \x20\x01(\rR\x10lastChangenumber\x12'\n\x0fsend_changelist\x18\x02\x20\
    \x01(\x08R\x0esendChangelist\"\x92\x01\n\x18CMsgClientAppInfoChanges\x12\
    2\n\x15current_change_number\x18\x01\x20\x01(\rR\x13currentChangeNumber\
    \x12*\n\x11force_full_update\x18\x02\x20\x01(\x08R\x0fforceFullUpdate\
    \x12\x16\n\x06appIDs\x18\x03\x20\x03(\rR\x06appIDs\"\xe3\x01\n\x18CMsgCl\
    ientAppInfoRequest\x121\n\x04apps\x18\x01\x20\x03(\x0b2\x1d.CMsgClientAp\
    pInfoRequest.AppR\x04apps\x120\n\x10supports_batches\x18\x02\x20\x01(\
    \x08:\x05falseR\x0fsupportsBatches\x1ab\n\x03App\x12\x15\n\x06app_id\x18\
    \x01\x20\x01(\rR\x05appId\x12#\n\rsection_flags\x18\x02\x20\x01(\rR\x0cs\
    ectionFlags\x12\x1f\n\x0bsection_CRC\x18\x03\x20\x03(\rR\nsectionCRC\"\
    \xa7\x02\n!CMsgClientPICSChangesSinceRequest\x12.\n\x13since_change_numb\
    er\x18\x01\x20\x01(\rR\x11sinceChangeNumber\x121\n\x15send_app_info_chan\
    ges\x18\x02\x20\x01(\x08R\x12sendAppInfoChanges\x129\n\x19send_package_i\
    nfo_changes\x18\x03\x20\x01(\x08R\x16sendPackageInfoChanges\x12-\n\x13nu\
    m_app_info_cached\x18\x04\x20\x01(\rR\x10numAppInfoCached\x125\n\x17num_\
    package_info_cached\x18\x05\x20\x01(\rR\x14numPackageInfoCached\"\xac\
    \x05\n\"CMsgClientPICSChangesSinceResponse\x122\n\x15current_change_numb\
    er\x18\x01\x20\x01(\rR\x13currentChangeNumber\x12.\n\x13since_change_num\
    ber\x18\x02\x20\x01(\rR\x11sinceChangeNumber\x12*\n\x11force_full_update\
    \x18\x03\x20\x01(\x08R\x0fforceFullUpdate\x12Z\n\x0fpackage_changes\x18\
    \x04\x20\x03(\x0b21.CMsgClientPICSChangesSinceResponse.PackageChangeR\
    \x0epackageChanges\x12N\n\x0bapp_changes\x18\x05\x20\x03(\x0b2-.CMsgClie\
    ntPICSChangesSinceResponse.AppChangeR\nappChanges\x121\n\x15force_full_a\
    pp_update\x18\x06\x20\x01(\x08R\x12forceFullAppUpdate\x129\n\x19force_fu\
    ll_package_update\x18\x07\x20\x01(\x08R\x16forceFullPackageUpdate\x1as\n\
    \rPackageChange\x12\x1c\n\tpackageid\x18\x01\x20\x01(\rR\tpackageid\x12#\
    \n\rchange_number\x18\x02\x20\x01(\rR\x0cchangeNumber\x12\x1f\n\x0bneeds\
    _token\x18\x03\x20\x01(\x08R\nneedsToken\x1ag\n\tAppChange\x12\x14\n\x05\
    appid\x18\x01\x20\x01(\rR\x05appid\x12#\n\rchange_number\x18\x02\x20\x01\
    (\rR\x0cchangeNumber\x12\x1f\n\x0bneeds_token\x18\x03\x20\x01(\x08R\nnee\
    dsToken\"\xdb\x04\n\x20CMsgClientPICSProductInfoRequest\x12I\n\x08packag\
    es\x18\x01\x20\x03(\x0b2-.CMsgClientPICSProductInfoRequest.PackageInfoR\
    \x08packages\x12=\n\x04apps\x18\x02\x20\x03(\x0b2).CMsgClientPICSProduct\
    InfoRequest.AppInfoR\x04apps\x12$\n\x0emeta_data_only\x18\x03\x20\x01(\
    \x08R\x0cmetaDataOnly\x12&\n\x0fnum_prev_failed\x18\x04\x20\x01(\rR\rnum\
    PrevFailed\x12G\n\x20OBSOLETE_supports_package_tokens\x18\x05\x20\x01(\r\
    R\x1dOBSOLETESupportsPackageTokens\x12'\n\x0fsequence_number\x18\x06\x20\
    \x01(\rR\x0esequenceNumber\x12'\n\x0fsingle_response\x18\x07\x20\x01(\
    \x08R\x0esingleResponse\x1at\n\x07AppInfo\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12!\n\x0caccess_token\x18\x02\x20\x01(\x04R\x0baccess\
    Token\x120\n\x14only_public_obsolete\x18\x03\x20\x01(\x08R\x12onlyPublic\
    Obsolete\x1aN\n\x0bPackageInfo\x12\x1c\n\tpackageid\x18\x01\x20\x01(\rR\
    \tpackageid\x12!\n\x0caccess_token\x18\x02\x20\x01(\x04R\x0baccessToken\
    \"\x9e\x06\n!CMsgClientPICSProductInfoResponse\x12>\n\x04apps\x18\x01\
    \x20\x03(\x0b2*.CMsgClientPICSProductInfoResponse.AppInfoR\x04apps\x12%\
    \n\x0eunknown_appids\x18\x02\x20\x03(\rR\runknownAppids\x12J\n\x08packag\
    es\x18\x03\x20\x03(\x0b2..CMsgClientPICSProductInfoResponse.PackageInfoR\
    \x08packages\x12-\n\x12unknown_packageids\x18\x04\x20\x03(\rR\x11unknown\
    Packageids\x12$\n\x0emeta_data_only\x18\x05\x20\x01(\x08R\x0cmetaDataOnl\
    y\x12)\n\x10response_pending\x18\x06\x20\x01(\x08R\x0fresponsePending\
    \x12\"\n\rhttp_min_size\x18\x07\x20\x01(\rR\x0bhttpMinSize\x12\x1b\n\tht\
    tp_host\x18\x08\x20\x01(\tR\x08httpHost\x1a\xc8\x01\n\x07AppInfo\x12\x14\
    \n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12#\n\rchange_number\x18\x02\
    \x20\x01(\rR\x0cchangeNumber\x12#\n\rmissing_token\x18\x03\x20\x01(\x08R\
    \x0cmissingToken\x12\x10\n\x03sha\x18\x04\x20\x01(\x0cR\x03sha\x12\x16\n\
    \x06buffer\x18\x05\x20\x01(\x0cR\x06buffer\x12\x1f\n\x0bonly_public\x18\
    \x06\x20\x01(\x08R\nonlyPublic\x12\x12\n\x04size\x18\x07\x20\x01(\rR\x04\
    size\x1a\xb3\x01\n\x0bPackageInfo\x12\x1c\n\tpackageid\x18\x01\x20\x01(\
    \rR\tpackageid\x12#\n\rchange_number\x18\x02\x20\x01(\rR\x0cchangeNumber\
    \x12#\n\rmissing_token\x18\x03\x20\x01(\x08R\x0cmissingToken\x12\x10\n\
    \x03sha\x18\x04\x20\x01(\x0cR\x03sha\x12\x16\n\x06buffer\x18\x05\x20\x01\
    (\x0cR\x06buffer\x12\x12\n\x04size\x18\x06\x20\x01(\rR\x04size:\x04\x88\
    \xb5\x18\0\"Z\n\x20CMsgClientPICSAccessTokenRequest\x12\x1e\n\npackageid\
    s\x18\x01\x20\x03(\rR\npackageids\x12\x16\n\x06appids\x18\x02\x20\x03(\r\
    R\x06appids\"\xd7\x03\n!CMsgClientPICSAccessTokenResponse\x12c\n\x15pack\
    age_access_tokens\x18\x01\x20\x03(\x0b2/.CMsgClientPICSAccessTokenRespon\
    se.PackageTokenR\x13packageAccessTokens\x122\n\x15package_denied_tokens\
    \x18\x02\x20\x03(\rR\x13packageDeniedTokens\x12W\n\x11app_access_tokens\
    \x18\x03\x20\x03(\x0b2+.CMsgClientPICSAccessTokenResponse.AppTokenR\x0fa\
    ppAccessTokens\x12*\n\x11app_denied_tokens\x18\x04\x20\x03(\rR\x0fappDen\
    iedTokens\x1aO\n\x0cPackageToken\x12\x1c\n\tpackageid\x18\x01\x20\x01(\r\
    R\tpackageid\x12!\n\x0caccess_token\x18\x02\x20\x01(\x04R\x0baccessToken\
    \x1aC\n\x08AppToken\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12!\
    \n\x0caccess_token\x18\x02\x20\x01(\x04R\x0baccessTokenB\x05H\x01\x80\
    \x01\0\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_base::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(18);
            messages.push(CMsgClientAppInfoUpdate::generated_message_descriptor_data());
            messages.push(CMsgClientAppInfoChanges::generated_message_descriptor_data());
            messages.push(CMsgClientAppInfoRequest::generated_message_descriptor_data());
            messages.push(CMsgClientPICSChangesSinceRequest::generated_message_descriptor_data());
            messages.push(CMsgClientPICSChangesSinceResponse::generated_message_descriptor_data());
            messages.push(CMsgClientPICSProductInfoRequest::generated_message_descriptor_data());
            messages.push(CMsgClientPICSProductInfoResponse::generated_message_descriptor_data());
            messages.push(CMsgClientPICSAccessTokenRequest::generated_message_descriptor_data());
            messages.push(CMsgClientPICSAccessTokenResponse::generated_message_descriptor_data());
            messages.push(cmsg_client_app_info_request::App::generated_message_descriptor_data());
            messages.push(cmsg_client_picschanges_since_response::PackageChange::generated_message_descriptor_data());
            messages.push(cmsg_client_picschanges_since_response::AppChange::generated_message_descriptor_data());
            messages.push(cmsg_client_picsproduct_info_request::AppInfo::generated_message_descriptor_data());
            messages.push(cmsg_client_picsproduct_info_request::PackageInfo::generated_message_descriptor_data());
            messages.push(cmsg_client_picsproduct_info_response::AppInfo::generated_message_descriptor_data());
            messages.push(cmsg_client_picsproduct_info_response::PackageInfo::generated_message_descriptor_data());
            messages.push(cmsg_client_picsaccess_token_response::PackageToken::generated_message_descriptor_data());
            messages.push(cmsg_client_picsaccess_token_response::AppToken::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
