// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gamenotifications.steamclient.proto`

// @@protoc_insertion_point(message:CGameNotifications_Variable)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_Variable {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_Variable.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_Variable.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_Variable.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Variable {
    fn default() -> &'a CGameNotifications_Variable {
        <CGameNotifications_Variable as crate::Message>::default_instance()
    }
}

impl CGameNotifications_Variable {
    pub fn new() -> CGameNotifications_Variable {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &CGameNotifications_Variable| { &m.key },
            |m: &mut CGameNotifications_Variable| { &mut m.key },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CGameNotifications_Variable| { &m.value },
            |m: &mut CGameNotifications_Variable| { &mut m.value },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_Variable>(
            "CGameNotifications_Variable",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_Variable {
    const NAME: &'static str = "CGameNotifications_Variable";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_Variable {
        CGameNotifications_Variable::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_Variable {
        static instance: CGameNotifications_Variable = CGameNotifications_Variable {
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_Variable {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_Variable").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_Variable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_Variable {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_LocalizedText)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_LocalizedText {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.token)
    pub token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.variables)
    pub variables: ::std::vec::Vec<CGameNotifications_Variable>,
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.rendered_text)
    pub rendered_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_LocalizedText.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_LocalizedText {
    fn default() -> &'a CGameNotifications_LocalizedText {
        <CGameNotifications_LocalizedText as crate::Message>::default_instance()
    }
}

impl CGameNotifications_LocalizedText {
    pub fn new() -> CGameNotifications_LocalizedText {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CGameNotifications_Variable variables = 2;

    pub fn variables(&self) -> &[CGameNotifications_Variable] {
        &self.variables
    }

    pub fn clear_variables(&mut self) {
        self.variables.clear();
    }

    // Param is passed by value, moved
    pub fn set_variables(&mut self, v: ::std::vec::Vec<CGameNotifications_Variable>) {
        self.variables = v;
    }

    // Mutable pointer to the field.
    pub fn mut_variables(&mut self) -> &mut ::std::vec::Vec<CGameNotifications_Variable> {
        &mut self.variables
    }

    // Take field
    pub fn take_variables(&mut self) -> ::std::vec::Vec<CGameNotifications_Variable> {
        ::std::mem::replace(&mut self.variables, ::std::vec::Vec::new())
    }

    // optional string rendered_text = 3;

    pub fn rendered_text(&self) -> &str {
        match self.rendered_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rendered_text(&mut self) {
        self.rendered_text = ::std::option::Option::None;
    }

    pub fn has_rendered_text(&self) -> bool {
        self.rendered_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rendered_text(&mut self, v: ::std::string::String) {
        self.rendered_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rendered_text(&mut self) -> &mut ::std::string::String {
        if self.rendered_text.is_none() {
            self.rendered_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.rendered_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_rendered_text(&mut self) -> ::std::string::String {
        self.rendered_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CGameNotifications_LocalizedText| { &m.token },
            |m: &mut CGameNotifications_LocalizedText| { &mut m.token },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "variables",
            |m: &CGameNotifications_LocalizedText| { &m.variables },
            |m: &mut CGameNotifications_LocalizedText| { &mut m.variables },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rendered_text",
            |m: &CGameNotifications_LocalizedText| { &m.rendered_text },
            |m: &mut CGameNotifications_LocalizedText| { &mut m.rendered_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_LocalizedText>(
            "CGameNotifications_LocalizedText",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_LocalizedText {
    const NAME: &'static str = "CGameNotifications_LocalizedText";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.variables.push(is.read_message()?);
                },
                26 => {
                    self.rendered_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        for value in &self.variables {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.rendered_text.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.variables {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.rendered_text.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_LocalizedText {
        CGameNotifications_LocalizedText::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.variables.clear();
        self.rendered_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_LocalizedText {
        static instance: CGameNotifications_LocalizedText = CGameNotifications_LocalizedText {
            token: ::std::option::Option::None,
            variables: ::std::vec::Vec::new(),
            rendered_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_LocalizedText {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_LocalizedText").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_LocalizedText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_LocalizedText {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UserStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UserStatus {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.state)
    pub state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.title)
    pub title: crate::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.message)
    pub message: crate::MessageField<CGameNotifications_LocalizedText>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UserStatus.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UserStatus {
    fn default() -> &'a CGameNotifications_UserStatus {
        <CGameNotifications_UserStatus as crate::Message>::default_instance()
    }
}

impl CGameNotifications_UserStatus {
    pub fn new() -> CGameNotifications_UserStatus {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string state = 2;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CGameNotifications_LocalizedText title = 3;

    pub fn title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| <CGameNotifications_LocalizedText as crate::Message>::default_instance())
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        self.title.mut_or_insert_default()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // optional .CGameNotifications_LocalizedText message = 4;

    pub fn message(&self) -> &CGameNotifications_LocalizedText {
        self.message.as_ref().unwrap_or_else(|| <CGameNotifications_LocalizedText as crate::Message>::default_instance())
    }

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: CGameNotifications_LocalizedText) {
        self.message = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut CGameNotifications_LocalizedText {
        self.message.mut_or_insert_default()
    }

    // Take field
    pub fn take_message(&mut self) -> CGameNotifications_LocalizedText {
        self.message.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_UserStatus| { &m.steamid },
            |m: &mut CGameNotifications_UserStatus| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CGameNotifications_UserStatus| { &m.state },
            |m: &mut CGameNotifications_UserStatus| { &mut m.state },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_UserStatus| { &m.title },
            |m: &mut CGameNotifications_UserStatus| { &mut m.title },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "message",
            |m: &CGameNotifications_UserStatus| { &m.message },
            |m: &mut CGameNotifications_UserStatus| { &mut m.message },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UserStatus>(
            "CGameNotifications_UserStatus",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_UserStatus {
    const NAME: &'static str = "CGameNotifications_UserStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.state.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.message.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UserStatus {
        CGameNotifications_UserStatus::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.title.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UserStatus {
        static instance: CGameNotifications_UserStatus = CGameNotifications_UserStatus {
            steamid: ::std::option::Option::None,
            state: ::std::option::Option::None,
            title: crate::MessageField::none(),
            message: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_UserStatus {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UserStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UserStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_UserStatus {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_CreateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_CreateSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.title)
    pub title: crate::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.users)
    pub users: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_CreateSession_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Request {
    fn default() -> &'a CGameNotifications_CreateSession_Request {
        <CGameNotifications_CreateSession_Request as crate::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Request {
    pub fn new() -> CGameNotifications_CreateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 2;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_LocalizedText title = 3;

    pub fn title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| <CGameNotifications_LocalizedText as crate::Message>::default_instance())
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        self.title.mut_or_insert_default()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // repeated .CGameNotifications_UserStatus users = 4;

    pub fn users(&self) -> &[CGameNotifications_UserStatus] {
        &self.users
    }

    pub fn clear_users(&mut self) {
        self.users.clear();
    }

    // Param is passed by value, moved
    pub fn set_users(&mut self, v: ::std::vec::Vec<CGameNotifications_UserStatus>) {
        self.users = v;
    }

    // Mutable pointer to the field.
    pub fn mut_users(&mut self) -> &mut ::std::vec::Vec<CGameNotifications_UserStatus> {
        &mut self.users
    }

    // Take field
    pub fn take_users(&mut self) -> ::std::vec::Vec<CGameNotifications_UserStatus> {
        ::std::mem::replace(&mut self.users, ::std::vec::Vec::new())
    }

    // optional fixed64 steamid = 5;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_CreateSession_Request| { &m.appid },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "context",
            |m: &CGameNotifications_CreateSession_Request| { &m.context },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.context },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_CreateSession_Request| { &m.title },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.title },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "users",
            |m: &CGameNotifications_CreateSession_Request| { &m.users },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.users },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_CreateSession_Request| { &m.steamid },
            |m: &mut CGameNotifications_CreateSession_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_CreateSession_Request>(
            "CGameNotifications_CreateSession_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_CreateSession_Request {
    const NAME: &'static str = "CGameNotifications_CreateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    self.users.push(is.read_message()?);
                },
                41 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.context {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.users {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_CreateSession_Request {
        CGameNotifications_CreateSession_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Request {
        static instance: CGameNotifications_CreateSession_Request = CGameNotifications_CreateSession_Request {
            appid: ::std::option::Option::None,
            context: ::std::option::Option::None,
            title: crate::MessageField::none(),
            users: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_CreateSession_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_CreateSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_CreateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_CreateSession_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_CreateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_CreateSession_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Response.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_CreateSession_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Response {
    fn default() -> &'a CGameNotifications_CreateSession_Response {
        <CGameNotifications_CreateSession_Response as crate::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Response {
    pub fn new() -> CGameNotifications_CreateSession_Response {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_CreateSession_Response| { &m.sessionid },
            |m: &mut CGameNotifications_CreateSession_Response| { &mut m.sessionid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_CreateSession_Response>(
            "CGameNotifications_CreateSession_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_CreateSession_Response {
    const NAME: &'static str = "CGameNotifications_CreateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_CreateSession_Response {
        CGameNotifications_CreateSession_Response::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Response {
        static instance: CGameNotifications_CreateSession_Response = CGameNotifications_CreateSession_Response {
            sessionid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_CreateSession_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_CreateSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_CreateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_CreateSession_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_DeleteSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_DeleteSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_DeleteSession_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Request {
    fn default() -> &'a CGameNotifications_DeleteSession_Request {
        <CGameNotifications_DeleteSession_Request as crate::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Request {
    pub fn new() -> CGameNotifications_DeleteSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_DeleteSession_Request| { &m.sessionid },
            |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.sessionid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_DeleteSession_Request| { &m.appid },
            |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_DeleteSession_Request| { &m.steamid },
            |m: &mut CGameNotifications_DeleteSession_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_DeleteSession_Request>(
            "CGameNotifications_DeleteSession_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_DeleteSession_Request {
    const NAME: &'static str = "CGameNotifications_DeleteSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_DeleteSession_Request {
        CGameNotifications_DeleteSession_Request::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Request {
        static instance: CGameNotifications_DeleteSession_Request = CGameNotifications_DeleteSession_Request {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_DeleteSession_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_DeleteSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_DeleteSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_DeleteSession_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_DeleteSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_DeleteSession_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_DeleteSession_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Response {
    fn default() -> &'a CGameNotifications_DeleteSession_Response {
        <CGameNotifications_DeleteSession_Response as crate::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Response {
    pub fn new() -> CGameNotifications_DeleteSession_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_DeleteSession_Response>(
            "CGameNotifications_DeleteSession_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_DeleteSession_Response {
    const NAME: &'static str = "CGameNotifications_DeleteSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_DeleteSession_Response {
        CGameNotifications_DeleteSession_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Response {
        static instance: CGameNotifications_DeleteSession_Response = CGameNotifications_DeleteSession_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_DeleteSession_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_DeleteSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_DeleteSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_DeleteSession_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.title)
    pub title: crate::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.users)
    pub users: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateSession_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Request {
    fn default() -> &'a CGameNotifications_UpdateSession_Request {
        <CGameNotifications_UpdateSession_Request as crate::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Request {
    pub fn new() -> CGameNotifications_UpdateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_LocalizedText title = 3;

    pub fn title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| <CGameNotifications_LocalizedText as crate::Message>::default_instance())
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        self.title.mut_or_insert_default()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // repeated .CGameNotifications_UserStatus users = 4;

    pub fn users(&self) -> &[CGameNotifications_UserStatus] {
        &self.users
    }

    pub fn clear_users(&mut self) {
        self.users.clear();
    }

    // Param is passed by value, moved
    pub fn set_users(&mut self, v: ::std::vec::Vec<CGameNotifications_UserStatus>) {
        self.users = v;
    }

    // Mutable pointer to the field.
    pub fn mut_users(&mut self) -> &mut ::std::vec::Vec<CGameNotifications_UserStatus> {
        &mut self.users
    }

    // Take field
    pub fn take_users(&mut self) -> ::std::vec::Vec<CGameNotifications_UserStatus> {
        ::std::mem::replace(&mut self.users, ::std::vec::Vec::new())
    }

    // optional fixed64 steamid = 6;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_UpdateSession_Request| { &m.sessionid },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.sessionid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_UpdateSession_Request| { &m.appid },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_UpdateSession_Request| { &m.title },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.title },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "users",
            |m: &CGameNotifications_UpdateSession_Request| { &m.users },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.users },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_UpdateSession_Request| { &m.steamid },
            |m: &mut CGameNotifications_UpdateSession_Request| { &mut m.steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateSession_Request>(
            "CGameNotifications_UpdateSession_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_UpdateSession_Request {
    const NAME: &'static str = "CGameNotifications_UpdateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    self.users.push(is.read_message()?);
                },
                49 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.users {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateSession_Request {
        CGameNotifications_UpdateSession_Request::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Request {
        static instance: CGameNotifications_UpdateSession_Request = CGameNotifications_UpdateSession_Request {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            title: crate::MessageField::none(),
            users: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_UpdateSession_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateSession_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_UpdateSession_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateSession_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateSession_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Response {
    fn default() -> &'a CGameNotifications_UpdateSession_Response {
        <CGameNotifications_UpdateSession_Response as crate::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Response {
    pub fn new() -> CGameNotifications_UpdateSession_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateSession_Response>(
            "CGameNotifications_UpdateSession_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_UpdateSession_Response {
    const NAME: &'static str = "CGameNotifications_UpdateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateSession_Response {
        CGameNotifications_UpdateSession_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Response {
        static instance: CGameNotifications_UpdateSession_Response = CGameNotifications_UpdateSession_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_UpdateSession_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateSession_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_UpdateSession_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_EnumerateSessions_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_EnumerateSessions_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
    pub include_all_user_messages: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
    pub include_auth_user_message: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_EnumerateSessions_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Request {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Request {
        <CGameNotifications_EnumerateSessions_Request as crate::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Request {
    pub fn new() -> CGameNotifications_EnumerateSessions_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool include_all_user_messages = 3;

    pub fn include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.unwrap_or(false)
    }

    pub fn clear_include_all_user_messages(&mut self) {
        self.include_all_user_messages = ::std::option::Option::None;
    }

    pub fn has_include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_all_user_messages(&mut self, v: bool) {
        self.include_all_user_messages = ::std::option::Option::Some(v);
    }

    // optional bool include_auth_user_message = 4;

    pub fn include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.unwrap_or(false)
    }

    pub fn clear_include_auth_user_message(&mut self) {
        self.include_auth_user_message = ::std::option::Option::None;
    }

    pub fn has_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_auth_user_message(&mut self, v: bool) {
        self.include_auth_user_message = ::std::option::Option::Some(v);
    }

    // optional string language = 5;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.appid },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_all_user_messages",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.include_all_user_messages },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.include_all_user_messages },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_auth_user_message",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.include_auth_user_message },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.include_auth_user_message },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CGameNotifications_EnumerateSessions_Request| { &m.language },
            |m: &mut CGameNotifications_EnumerateSessions_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_EnumerateSessions_Request>(
            "CGameNotifications_EnumerateSessions_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_EnumerateSessions_Request {
    const NAME: &'static str = "CGameNotifications_EnumerateSessions_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.include_all_user_messages = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.include_auth_user_message = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.include_all_user_messages {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_auth_user_message {
            my_size += 1 + 1;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.include_all_user_messages {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.include_auth_user_message {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_EnumerateSessions_Request {
        CGameNotifications_EnumerateSessions_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.include_all_user_messages = ::std::option::Option::None;
        self.include_auth_user_message = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Request {
        static instance: CGameNotifications_EnumerateSessions_Request = CGameNotifications_EnumerateSessions_Request {
            appid: ::std::option::Option::None,
            include_all_user_messages: ::std::option::Option::None,
            include_auth_user_message: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_EnumerateSessions_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_EnumerateSessions_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_EnumerateSessions_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_EnumerateSessions_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_Session)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_Session {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_Session.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.appid)
    pub appid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.title)
    pub title: crate::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.time_updated)
    pub time_updated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.user_status)
    pub user_status: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_Session.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Session {
    fn default() -> &'a CGameNotifications_Session {
        <CGameNotifications_Session as crate::Message>::default_instance()
    }
}

impl CGameNotifications_Session {
    pub fn new() -> CGameNotifications_Session {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint64 appid = 2;

    pub fn appid(&self) -> u64 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u64) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 3;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_LocalizedText title = 4;

    pub fn title(&self) -> &CGameNotifications_LocalizedText {
        self.title.as_ref().unwrap_or_else(|| <CGameNotifications_LocalizedText as crate::Message>::default_instance())
    }

    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: CGameNotifications_LocalizedText) {
        self.title = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut CGameNotifications_LocalizedText {
        self.title.mut_or_insert_default()
    }

    // Take field
    pub fn take_title(&mut self) -> CGameNotifications_LocalizedText {
        self.title.take().unwrap_or_else(|| CGameNotifications_LocalizedText::new())
    }

    // optional uint32 time_created = 5;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 time_updated = 6;

    pub fn time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }

    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    // repeated .CGameNotifications_UserStatus user_status = 7;

    pub fn user_status(&self) -> &[CGameNotifications_UserStatus] {
        &self.user_status
    }

    pub fn clear_user_status(&mut self) {
        self.user_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_status(&mut self, v: ::std::vec::Vec<CGameNotifications_UserStatus>) {
        self.user_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_status(&mut self) -> &mut ::std::vec::Vec<CGameNotifications_UserStatus> {
        &mut self.user_status
    }

    // Take field
    pub fn take_user_status(&mut self) -> ::std::vec::Vec<CGameNotifications_UserStatus> {
        ::std::mem::replace(&mut self.user_status, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_Session| { &m.sessionid },
            |m: &mut CGameNotifications_Session| { &mut m.sessionid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_Session| { &m.appid },
            |m: &mut CGameNotifications_Session| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "context",
            |m: &CGameNotifications_Session| { &m.context },
            |m: &mut CGameNotifications_Session| { &mut m.context },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_LocalizedText>(
            "title",
            |m: &CGameNotifications_Session| { &m.title },
            |m: &mut CGameNotifications_Session| { &mut m.title },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &CGameNotifications_Session| { &m.time_created },
            |m: &mut CGameNotifications_Session| { &mut m.time_created },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_updated",
            |m: &CGameNotifications_Session| { &m.time_updated },
            |m: &mut CGameNotifications_Session| { &mut m.time_updated },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "user_status",
            |m: &CGameNotifications_Session| { &m.user_status },
            |m: &mut CGameNotifications_Session| { &mut m.user_status },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_Session>(
            "CGameNotifications_Session",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_Session {
    const NAME: &'static str = "CGameNotifications_Session";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                40 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.time_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.user_status.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.context {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_created {
            my_size += crate::rt::uint32_size(5, v);
        }
        if let Some(v) = self.time_updated {
            my_size += crate::rt::uint32_size(6, v);
        }
        for value in &self.user_status {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(6, v)?;
        }
        for v in &self.user_status {
            crate::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_Session {
        CGameNotifications_Session::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.time_created = ::std::option::Option::None;
        self.time_updated = ::std::option::Option::None;
        self.user_status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_Session {
        static instance: CGameNotifications_Session = CGameNotifications_Session {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            context: ::std::option::Option::None,
            title: crate::MessageField::none(),
            time_created: ::std::option::Option::None,
            time_updated: ::std::option::Option::None,
            user_status: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_Session {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_Session").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_Session {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_Session {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_EnumerateSessions_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_EnumerateSessions_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Response.sessions)
    pub sessions: ::std::vec::Vec<CGameNotifications_Session>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_EnumerateSessions_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Response {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Response {
        <CGameNotifications_EnumerateSessions_Response as crate::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Response {
    pub fn new() -> CGameNotifications_EnumerateSessions_Response {
        ::std::default::Default::default()
    }

    // repeated .CGameNotifications_Session sessions = 1;

    pub fn sessions(&self) -> &[CGameNotifications_Session] {
        &self.sessions
    }

    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::std::vec::Vec<CGameNotifications_Session>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::std::vec::Vec<CGameNotifications_Session> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::std::vec::Vec<CGameNotifications_Session> {
        ::std::mem::replace(&mut self.sessions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sessions",
            |m: &CGameNotifications_EnumerateSessions_Response| { &m.sessions },
            |m: &mut CGameNotifications_EnumerateSessions_Response| { &mut m.sessions },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_EnumerateSessions_Response>(
            "CGameNotifications_EnumerateSessions_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_EnumerateSessions_Response {
    const NAME: &'static str = "CGameNotifications_EnumerateSessions_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.sessions {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_EnumerateSessions_Response {
        CGameNotifications_EnumerateSessions_Response::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Response {
        static instance: CGameNotifications_EnumerateSessions_Response = CGameNotifications_EnumerateSessions_Response {
            sessions: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_EnumerateSessions_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_EnumerateSessions_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_EnumerateSessions_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_EnumerateSessions_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_GetSessionDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.sessions)
    pub sessions: ::std::vec::Vec<cgame_notifications_get_session_details_request::RequestedSession>,
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Request {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Request {
        <CGameNotifications_GetSessionDetails_Request as crate::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Request {
    pub fn new() -> CGameNotifications_GetSessionDetails_Request {
        ::std::default::Default::default()
    }

    // repeated .CGameNotifications_GetSessionDetails_Request.RequestedSession sessions = 1;

    pub fn sessions(&self) -> &[cgame_notifications_get_session_details_request::RequestedSession] {
        &self.sessions
    }

    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::std::vec::Vec<cgame_notifications_get_session_details_request::RequestedSession>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::std::vec::Vec<cgame_notifications_get_session_details_request::RequestedSession> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::std::vec::Vec<cgame_notifications_get_session_details_request::RequestedSession> {
        ::std::mem::replace(&mut self.sessions, ::std::vec::Vec::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string language = 3;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sessions",
            |m: &CGameNotifications_GetSessionDetails_Request| { &m.sessions },
            |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.sessions },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_GetSessionDetails_Request| { &m.appid },
            |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CGameNotifications_GetSessionDetails_Request| { &m.language },
            |m: &mut CGameNotifications_GetSessionDetails_Request| { &mut m.language },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_GetSessionDetails_Request>(
            "CGameNotifications_GetSessionDetails_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_GetSessionDetails_Request {
    const NAME: &'static str = "CGameNotifications_GetSessionDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.sessions {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_GetSessionDetails_Request {
        CGameNotifications_GetSessionDetails_Request::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.appid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Request {
        static instance: CGameNotifications_GetSessionDetails_Request = CGameNotifications_GetSessionDetails_Request {
            sessions: ::std::vec::Vec::new(),
            appid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_GetSessionDetails_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_GetSessionDetails_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_GetSessionDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameNotifications_GetSessionDetails_Request`
pub mod cgame_notifications_get_session_details_request {
    // @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Request.RequestedSession)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestedSession {
        // message fields
        // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
        pub sessionid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
        pub include_auth_user_message: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Request.RequestedSession.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestedSession {
        fn default() -> &'a RequestedSession {
            <RequestedSession as crate::Message>::default_instance()
        }
    }

    impl RequestedSession {
        pub fn new() -> RequestedSession {
            ::std::default::Default::default()
        }

        // optional uint64 sessionid = 1;

        pub fn sessionid(&self) -> u64 {
            self.sessionid.unwrap_or(0)
        }

        pub fn clear_sessionid(&mut self) {
            self.sessionid = ::std::option::Option::None;
        }

        pub fn has_sessionid(&self) -> bool {
            self.sessionid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sessionid(&mut self, v: u64) {
            self.sessionid = ::std::option::Option::Some(v);
        }

        // optional bool include_auth_user_message = 3;

        pub fn include_auth_user_message(&self) -> bool {
            self.include_auth_user_message.unwrap_or(false)
        }

        pub fn clear_include_auth_user_message(&mut self) {
            self.include_auth_user_message = ::std::option::Option::None;
        }

        pub fn has_include_auth_user_message(&self) -> bool {
            self.include_auth_user_message.is_some()
        }

        // Param is passed by value, moved
        pub fn set_include_auth_user_message(&mut self, v: bool) {
            self.include_auth_user_message = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "sessionid",
                |m: &RequestedSession| { &m.sessionid },
                |m: &mut RequestedSession| { &mut m.sessionid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "include_auth_user_message",
                |m: &RequestedSession| { &m.include_auth_user_message },
                |m: &mut RequestedSession| { &mut m.include_auth_user_message },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<RequestedSession>(
                "CGameNotifications_GetSessionDetails_Request.RequestedSession",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for RequestedSession {
        const NAME: &'static str = "RequestedSession";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.include_auth_user_message = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sessionid {
                my_size += crate::rt::uint64_size(1, v);
            }
            if let Some(v) = self.include_auth_user_message {
                my_size += 1 + 1;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.sessionid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.include_auth_user_message {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestedSession {
            RequestedSession::new()
        }

        fn clear(&mut self) {
            self.sessionid = ::std::option::Option::None;
            self.include_auth_user_message = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestedSession {
            static instance: RequestedSession = RequestedSession {
                sessionid: ::std::option::Option::None,
                include_auth_user_message: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for RequestedSession {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGameNotifications_GetSessionDetails_Request.RequestedSession").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RequestedSession {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for RequestedSession {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_GetSessionDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Response.sessions)
    pub sessions: ::std::vec::Vec<CGameNotifications_Session>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Response {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Response {
        <CGameNotifications_GetSessionDetails_Response as crate::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Response {
    pub fn new() -> CGameNotifications_GetSessionDetails_Response {
        ::std::default::Default::default()
    }

    // repeated .CGameNotifications_Session sessions = 1;

    pub fn sessions(&self) -> &[CGameNotifications_Session] {
        &self.sessions
    }

    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::std::vec::Vec<CGameNotifications_Session>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::std::vec::Vec<CGameNotifications_Session> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::std::vec::Vec<CGameNotifications_Session> {
        ::std::mem::replace(&mut self.sessions, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sessions",
            |m: &CGameNotifications_GetSessionDetails_Response| { &m.sessions },
            |m: &mut CGameNotifications_GetSessionDetails_Response| { &mut m.sessions },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_GetSessionDetails_Response>(
            "CGameNotifications_GetSessionDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_GetSessionDetails_Response {
    const NAME: &'static str = "CGameNotifications_GetSessionDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.sessions {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_GetSessionDetails_Response {
        CGameNotifications_GetSessionDetails_Response::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Response {
        static instance: CGameNotifications_GetSessionDetails_Response = CGameNotifications_GetSessionDetails_Response {
            sessions: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_GetSessionDetails_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_GetSessionDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_GetSessionDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_GetSessionDetails_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GameNotificationSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GameNotificationSettings {
    // message fields
    // @@protoc_insertion_point(field:GameNotificationSettings.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:GameNotificationSettings.allow_notifications)
    pub allow_notifications: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:GameNotificationSettings.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameNotificationSettings {
    fn default() -> &'a GameNotificationSettings {
        <GameNotificationSettings as crate::Message>::default_instance()
    }
}

impl GameNotificationSettings {
    pub fn new() -> GameNotificationSettings {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool allow_notifications = 2;

    pub fn allow_notifications(&self) -> bool {
        self.allow_notifications.unwrap_or(false)
    }

    pub fn clear_allow_notifications(&mut self) {
        self.allow_notifications = ::std::option::Option::None;
    }

    pub fn has_allow_notifications(&self) -> bool {
        self.allow_notifications.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_notifications(&mut self, v: bool) {
        self.allow_notifications = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &GameNotificationSettings| { &m.appid },
            |m: &mut GameNotificationSettings| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_notifications",
            |m: &GameNotificationSettings| { &m.allow_notifications },
            |m: &mut GameNotificationSettings| { &mut m.allow_notifications },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<GameNotificationSettings>(
            "GameNotificationSettings",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for GameNotificationSettings {
    const NAME: &'static str = "GameNotificationSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.allow_notifications = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.allow_notifications {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.allow_notifications {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameNotificationSettings {
        GameNotificationSettings::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.allow_notifications = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameNotificationSettings {
        static instance: GameNotificationSettings = GameNotificationSettings {
            appid: ::std::option::Option::None,
            allow_notifications: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for GameNotificationSettings {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameNotificationSettings").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameNotificationSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for GameNotificationSettings {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateNotificationSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateNotificationSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
    pub game_notification_settings: ::std::vec::Vec<GameNotificationSettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateNotificationSettings_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Request {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Request {
        <CGameNotifications_UpdateNotificationSettings_Request as crate::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Request {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        ::std::default::Default::default()
    }

    // repeated .GameNotificationSettings game_notification_settings = 1;

    pub fn game_notification_settings(&self) -> &[GameNotificationSettings] {
        &self.game_notification_settings
    }

    pub fn clear_game_notification_settings(&mut self) {
        self.game_notification_settings.clear();
    }

    // Param is passed by value, moved
    pub fn set_game_notification_settings(&mut self, v: ::std::vec::Vec<GameNotificationSettings>) {
        self.game_notification_settings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_game_notification_settings(&mut self) -> &mut ::std::vec::Vec<GameNotificationSettings> {
        &mut self.game_notification_settings
    }

    // Take field
    pub fn take_game_notification_settings(&mut self) -> ::std::vec::Vec<GameNotificationSettings> {
        ::std::mem::replace(&mut self.game_notification_settings, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "game_notification_settings",
            |m: &CGameNotifications_UpdateNotificationSettings_Request| { &m.game_notification_settings },
            |m: &mut CGameNotifications_UpdateNotificationSettings_Request| { &mut m.game_notification_settings },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateNotificationSettings_Request>(
            "CGameNotifications_UpdateNotificationSettings_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_UpdateNotificationSettings_Request {
    const NAME: &'static str = "CGameNotifications_UpdateNotificationSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.game_notification_settings.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.game_notification_settings {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.game_notification_settings {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        CGameNotifications_UpdateNotificationSettings_Request::new()
    }

    fn clear(&mut self) {
        self.game_notification_settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Request {
        static instance: CGameNotifications_UpdateNotificationSettings_Request = CGameNotifications_UpdateNotificationSettings_Request {
            game_notification_settings: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_UpdateNotificationSettings_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateNotificationSettings_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateNotificationSettings_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_UpdateNotificationSettings_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateNotificationSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateNotificationSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateNotificationSettings_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Response {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Response {
        <CGameNotifications_UpdateNotificationSettings_Response as crate::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Response {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_UpdateNotificationSettings_Response>(
            "CGameNotifications_UpdateNotificationSettings_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_UpdateNotificationSettings_Response {
    const NAME: &'static str = "CGameNotifications_UpdateNotificationSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        CGameNotifications_UpdateNotificationSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Response {
        static instance: CGameNotifications_UpdateNotificationSettings_Response = CGameNotifications_UpdateNotificationSettings_Response {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_UpdateNotificationSettings_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_UpdateNotificationSettings_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_UpdateNotificationSettings_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_UpdateNotificationSettings_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_OnNotificationsRequested_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_OnNotificationsRequested_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_OnNotificationsRequested_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnNotificationsRequested_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_OnNotificationsRequested_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnNotificationsRequested_Notification {
    fn default() -> &'a CGameNotifications_OnNotificationsRequested_Notification {
        <CGameNotifications_OnNotificationsRequested_Notification as crate::Message>::default_instance()
    }
}

impl CGameNotifications_OnNotificationsRequested_Notification {
    pub fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_OnNotificationsRequested_Notification| { &m.steamid },
            |m: &mut CGameNotifications_OnNotificationsRequested_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_OnNotificationsRequested_Notification| { &m.appid },
            |m: &mut CGameNotifications_OnNotificationsRequested_Notification| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_OnNotificationsRequested_Notification>(
            "CGameNotifications_OnNotificationsRequested_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_OnNotificationsRequested_Notification {
    const NAME: &'static str = "CGameNotifications_OnNotificationsRequested_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        CGameNotifications_OnNotificationsRequested_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_OnNotificationsRequested_Notification {
        static instance: CGameNotifications_OnNotificationsRequested_Notification = CGameNotifications_OnNotificationsRequested_Notification {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_OnNotificationsRequested_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_OnNotificationsRequested_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_OnNotificationsRequested_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_OnNotificationsRequested_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameNotifications_OnUserStatusChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_OnUserStatusChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.status)
    pub status: crate::MessageField<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.removed)
    pub removed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_OnUserStatusChanged_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnUserStatusChanged_Notification {
    fn default() -> &'a CGameNotifications_OnUserStatusChanged_Notification {
        <CGameNotifications_OnUserStatusChanged_Notification as crate::Message>::default_instance()
    }
}

impl CGameNotifications_OnUserStatusChanged_Notification {
    pub fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 sessionid = 2;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional .CGameNotifications_UserStatus status = 4;

    pub fn status(&self) -> &CGameNotifications_UserStatus {
        self.status.as_ref().unwrap_or_else(|| <CGameNotifications_UserStatus as crate::Message>::default_instance())
    }

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CGameNotifications_UserStatus) {
        self.status = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CGameNotifications_UserStatus {
        self.status.mut_or_insert_default()
    }

    // Take field
    pub fn take_status(&mut self) -> CGameNotifications_UserStatus {
        self.status.take().unwrap_or_else(|| CGameNotifications_UserStatus::new())
    }

    // optional bool removed = 5;

    pub fn removed(&self) -> bool {
        self.removed.unwrap_or(false)
    }

    pub fn clear_removed(&mut self) {
        self.removed = ::std::option::Option::None;
    }

    pub fn has_removed(&self) -> bool {
        self.removed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_removed(&mut self, v: bool) {
        self.removed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.steamid },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sessionid",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.sessionid },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.sessionid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.appid },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CGameNotifications_UserStatus>(
            "status",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.status },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.status },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "removed",
            |m: &CGameNotifications_OnUserStatusChanged_Notification| { &m.removed },
            |m: &mut CGameNotifications_OnUserStatusChanged_Notification| { &mut m.removed },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameNotifications_OnUserStatusChanged_Notification>(
            "CGameNotifications_OnUserStatusChanged_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameNotifications_OnUserStatusChanged_Notification {
    const NAME: &'static str = "CGameNotifications_OnUserStatusChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                40 => {
                    self.removed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sessionid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.removed {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.sessionid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.removed {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        CGameNotifications_OnUserStatusChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.status.clear();
        self.removed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_OnUserStatusChanged_Notification {
        static instance: CGameNotifications_OnUserStatusChanged_Notification = CGameNotifications_OnUserStatusChanged_Notification {
            steamid: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            status: crate::MessageField::none(),
            removed: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameNotifications_OnUserStatusChanged_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameNotifications_OnUserStatusChanged_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameNotifications_OnUserStatusChanged_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameNotifications_OnUserStatusChanged_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1steammessages_gamenotifications.steamclient.proto\x1a\x18steammessage\
    s_base.proto\x1a,steammessages_unified_base.steamclient.proto\"E\n\x1bCG\
    ameNotifications_Variable\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"\x99\x01\n\x20CGameNot\
    ifications_LocalizedText\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\
    \x12:\n\tvariables\x18\x02\x20\x03(\x0b2\x1c.CGameNotifications_Variable\
    R\tvariables\x12#\n\rrendered_text\x18\x03\x20\x01(\tR\x0crenderedText\"\
    \xc5\x01\n\x1dCGameNotifications_UserStatus\x12\x18\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamid\x12\x14\n\x05state\x18\x02\x20\x01(\tR\x05stat\
    e\x127\n\x05title\x18\x03\x20\x01(\x0b2!.CGameNotifications_LocalizedTex\
    tR\x05title\x12;\n\x07message\x18\x04\x20\x01(\x0b2!.CGameNotifications_\
    LocalizedTextR\x07message\"\xe3\x01\n(CGameNotifications_CreateSession_R\
    equest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07cont\
    ext\x18\x02\x20\x01(\x04R\x07context\x127\n\x05title\x18\x03\x20\x01(\
    \x0b2!.CGameNotifications_LocalizedTextR\x05title\x124\n\x05users\x18\
    \x04\x20\x03(\x0b2\x1e.CGameNotifications_UserStatusR\x05users\x12\x18\n\
    \x07steamid\x18\x05\x20\x01(\x06R\x07steamid\"I\n)CGameNotifications_Cre\
    ateSession_Response\x12\x1c\n\tsessionid\x18\x01\x20\x01(\x04R\tsessioni\
    d\"x\n(CGameNotifications_DeleteSession_Request\x12\x1c\n\tsessionid\x18\
    \x01\x20\x01(\x04R\tsessionid\x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05\
    appid\x12\x18\n\x07steamid\x18\x03\x20\x01(\x06R\x07steamid\"+\n)CGameNo\
    tifications_DeleteSession_Response\"\xe7\x01\n(CGameNotifications_Update\
    Session_Request\x12\x1c\n\tsessionid\x18\x01\x20\x01(\x04R\tsessionid\
    \x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x127\n\x05title\x18\x03\
    \x20\x01(\x0b2!.CGameNotifications_LocalizedTextR\x05title\x124\n\x05use\
    rs\x18\x04\x20\x03(\x0b2\x1e.CGameNotifications_UserStatusR\x05users\x12\
    \x18\n\x07steamid\x18\x06\x20\x01(\x06R\x07steamid\"+\n)CGameNotificatio\
    ns_UpdateSession_Response\"\xd6\x01\n,CGameNotifications_EnumerateSessio\
    ns_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x129\n\x19inc\
    lude_all_user_messages\x18\x03\x20\x01(\x08R\x16includeAllUserMessages\
    \x129\n\x19include_auth_user_message\x18\x04\x20\x01(\x08R\x16includeAut\
    hUserMessage\x12\x1a\n\x08language\x18\x05\x20\x01(\tR\x08language\"\xaa\
    \x02\n\x1aCGameNotifications_Session\x12\x1c\n\tsessionid\x18\x01\x20\
    \x01(\x04R\tsessionid\x12\x14\n\x05appid\x18\x02\x20\x01(\x04R\x05appid\
    \x12\x18\n\x07context\x18\x03\x20\x01(\x04R\x07context\x127\n\x05title\
    \x18\x04\x20\x01(\x0b2!.CGameNotifications_LocalizedTextR\x05title\x12!\
    \n\x0ctime_created\x18\x05\x20\x01(\rR\x0btimeCreated\x12!\n\x0ctime_upd\
    ated\x18\x06\x20\x01(\rR\x0btimeUpdated\x12?\n\x0buser_status\x18\x07\
    \x20\x03(\x0b2\x1e.CGameNotifications_UserStatusR\nuserStatus\"h\n-CGame\
    Notifications_EnumerateSessions_Response\x127\n\x08sessions\x18\x01\x20\
    \x03(\x0b2\x1b.CGameNotifications_SessionR\x08sessions\"\xa9\x02\n,CGame\
    Notifications_GetSessionDetails_Request\x12Z\n\x08sessions\x18\x01\x20\
    \x03(\x0b2>.CGameNotifications_GetSessionDetails_Request.RequestedSessio\
    nR\x08sessions\x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12\x1a\n\
    \x08language\x18\x03\x20\x01(\tR\x08language\x1ak\n\x10RequestedSession\
    \x12\x1c\n\tsessionid\x18\x01\x20\x01(\x04R\tsessionid\x129\n\x19include\
    _auth_user_message\x18\x03\x20\x01(\x08R\x16includeAuthUserMessage\"h\n-\
    CGameNotifications_GetSessionDetails_Response\x127\n\x08sessions\x18\x01\
    \x20\x03(\x0b2\x1b.CGameNotifications_SessionR\x08sessions\"a\n\x18GameN\
    otificationSettings\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12/\
    \n\x13allow_notifications\x18\x02\x20\x01(\x08R\x12allowNotifications\"\
    \x90\x01\n5CGameNotifications_UpdateNotificationSettings_Request\x12W\n\
    \x1agame_notification_settings\x18\x01\x20\x03(\x0b2\x19.GameNotificatio\
    nSettingsR\x18gameNotificationSettings\"8\n6CGameNotifications_UpdateNot\
    ificationSettings_Response\"j\n8CGameNotifications_OnNotificationsReques\
    ted_Notification\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\
    \x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\"\xd5\x01\n3CGameNotifi\
    cations_OnUserStatusChanged_Notification\x12\x18\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamid\x12\x1c\n\tsessionid\x18\x02\x20\x01(\x04R\tse\
    ssionid\x12\x14\n\x05appid\x18\x03\x20\x01(\rR\x05appid\x126\n\x06status\
    \x18\x04\x20\x01(\x0b2\x1e.CGameNotifications_UserStatusR\x06status\x12\
    \x18\n\x07removed\x18\x05\x20\x01(\x08R\x07removed2\xcf\x05\n\x11GameNot\
    ifications\x12j\n\x11UserCreateSession\x12).CGameNotifications_CreateSes\
    sion_Request\x1a*.CGameNotifications_CreateSession_Response\x12j\n\x11Us\
    erDeleteSession\x12).CGameNotifications_DeleteSession_Request\x1a*.CGame\
    Notifications_DeleteSession_Response\x12j\n\x11UserUpdateSession\x12).CG\
    ameNotifications_UpdateSession_Request\x1a*.CGameNotifications_UpdateSes\
    sion_Response\x12r\n\x11EnumerateSessions\x12-.CGameNotifications_Enumer\
    ateSessions_Request\x1a..CGameNotifications_EnumerateSessions_Response\
    \x12r\n\x11GetSessionDetails\x12-.CGameNotifications_GetSessionDetails_R\
    equest\x1a..CGameNotifications_GetSessionDetails_Response\x12\x8d\x01\n\
    \x1aUpdateNotificationSettings\x126.CGameNotifications_UpdateNotificatio\
    nSettings_Request\x1a7.CGameNotifications_UpdateNotificationSettings_Res\
    ponse2\xdd\x01\n\x17GameNotificationsClient\x12b\n\x18OnNotificationsReq\
    uested\x129.CGameNotifications_OnNotificationsRequested_Notification\x1a\
    \x0b.NoResponse\x12X\n\x13OnUserStatusChanged\x124.CGameNotifications_On\
    UserStatusChanged_Notification\x1a\x0b.NoResponse\x1a\x04\xc0\xb5\x18\
    \x02B\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(20);
            messages.push(CGameNotifications_Variable::generated_message_descriptor_data());
            messages.push(CGameNotifications_LocalizedText::generated_message_descriptor_data());
            messages.push(CGameNotifications_UserStatus::generated_message_descriptor_data());
            messages.push(CGameNotifications_CreateSession_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_CreateSession_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_DeleteSession_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_DeleteSession_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateSession_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateSession_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_EnumerateSessions_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_Session::generated_message_descriptor_data());
            messages.push(CGameNotifications_EnumerateSessions_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_GetSessionDetails_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_GetSessionDetails_Response::generated_message_descriptor_data());
            messages.push(GameNotificationSettings::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateNotificationSettings_Request::generated_message_descriptor_data());
            messages.push(CGameNotifications_UpdateNotificationSettings_Response::generated_message_descriptor_data());
            messages.push(CGameNotifications_OnNotificationsRequested_Notification::generated_message_descriptor_data());
            messages.push(CGameNotifications_OnUserStatusChanged_Notification::generated_message_descriptor_data());
            messages.push(cgame_notifications_get_session_details_request::RequestedSession::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
