// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_contentsystem.steamclient.proto`

// @@protoc_insertion_point(message:CContentServerDirectory_ConnectedSteamPipeServerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_ConnectedSteamPipeServerInfo {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_ConnectedSteamPipeServerInfo.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ConnectedSteamPipeServerInfo.source_id)
    pub source_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ConnectedSteamPipeServerInfo.hostname)
    pub hostname: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_ConnectedSteamPipeServerInfo.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_ConnectedSteamPipeServerInfo {
    fn default() -> &'a CContentServerDirectory_ConnectedSteamPipeServerInfo {
        <CContentServerDirectory_ConnectedSteamPipeServerInfo as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_ConnectedSteamPipeServerInfo {
    pub fn new() -> CContentServerDirectory_ConnectedSteamPipeServerInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 source_id = 2;

    pub fn source_id(&self) -> i32 {
        self.source_id.unwrap_or(0)
    }

    pub fn clear_source_id(&mut self) {
        self.source_id = ::std::option::Option::None;
    }

    pub fn has_source_id(&self) -> bool {
        self.source_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_id(&mut self, v: i32) {
        self.source_id = ::std::option::Option::Some(v);
    }

    // optional string hostname = 3;

    pub fn hostname(&self) -> &str {
        match self.hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostname(&mut self) {
        self.hostname = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        self.hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        if self.hostname.is_none() {
            self.hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        self.hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CContentServerDirectory_ConnectedSteamPipeServerInfo| { &m.type_ },
            |m: &mut CContentServerDirectory_ConnectedSteamPipeServerInfo| { &mut m.type_ },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_id",
            |m: &CContentServerDirectory_ConnectedSteamPipeServerInfo| { &m.source_id },
            |m: &mut CContentServerDirectory_ConnectedSteamPipeServerInfo| { &mut m.source_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hostname",
            |m: &CContentServerDirectory_ConnectedSteamPipeServerInfo| { &m.hostname },
            |m: &mut CContentServerDirectory_ConnectedSteamPipeServerInfo| { &mut m.hostname },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_ConnectedSteamPipeServerInfo>(
            "CContentServerDirectory_ConnectedSteamPipeServerInfo",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_ConnectedSteamPipeServerInfo {
    const NAME: &'static str = "CContentServerDirectory_ConnectedSteamPipeServerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.source_id = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    self.hostname = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.source_id {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.hostname.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.source_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.hostname.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_ConnectedSteamPipeServerInfo {
        CContentServerDirectory_ConnectedSteamPipeServerInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.source_id = ::std::option::Option::None;
        self.hostname = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_ConnectedSteamPipeServerInfo {
        static instance: CContentServerDirectory_ConnectedSteamPipeServerInfo = CContentServerDirectory_ConnectedSteamPipeServerInfo {
            type_: ::std::option::Option::None,
            source_id: ::std::option::Option::None,
            hostname: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_ConnectedSteamPipeServerInfo {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_ConnectedSteamPipeServerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_ConnectedSteamPipeServerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_ConnectedSteamPipeServerInfo {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetServersForSteamPipe_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetServersForSteamPipe_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.cell_id)
    pub cell_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.max_servers)
    pub max_servers: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.ip_override)
    pub ip_override: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.launcher_type)
    pub launcher_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.ipv6_public)
    pub ipv6_public: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Request.current_connections)
    pub current_connections: ::std::vec::Vec<CContentServerDirectory_ConnectedSteamPipeServerInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetServersForSteamPipe_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetServersForSteamPipe_Request {
    fn default() -> &'a CContentServerDirectory_GetServersForSteamPipe_Request {
        <CContentServerDirectory_GetServersForSteamPipe_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetServersForSteamPipe_Request {
    pub fn new() -> CContentServerDirectory_GetServersForSteamPipe_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cell_id = 1;

    pub fn cell_id(&self) -> u32 {
        self.cell_id.unwrap_or(0)
    }

    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: u32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional uint32 max_servers = 2;

    pub fn max_servers(&self) -> u32 {
        self.max_servers.unwrap_or(20u32)
    }

    pub fn clear_max_servers(&mut self) {
        self.max_servers = ::std::option::Option::None;
    }

    pub fn has_max_servers(&self) -> bool {
        self.max_servers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_servers(&mut self, v: u32) {
        self.max_servers = ::std::option::Option::Some(v);
    }

    // optional string ip_override = 3;

    pub fn ip_override(&self) -> &str {
        match self.ip_override.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_override(&mut self) {
        self.ip_override = ::std::option::Option::None;
    }

    pub fn has_ip_override(&self) -> bool {
        self.ip_override.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_override(&mut self, v: ::std::string::String) {
        self.ip_override = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_override(&mut self) -> &mut ::std::string::String {
        if self.ip_override.is_none() {
            self.ip_override = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_override.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_override(&mut self) -> ::std::string::String {
        self.ip_override.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 launcher_type = 4;

    pub fn launcher_type(&self) -> i32 {
        self.launcher_type.unwrap_or(0i32)
    }

    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: i32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional string ipv6_public = 5;

    pub fn ipv6_public(&self) -> &str {
        match self.ipv6_public.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ipv6_public(&mut self) {
        self.ipv6_public = ::std::option::Option::None;
    }

    pub fn has_ipv6_public(&self) -> bool {
        self.ipv6_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv6_public(&mut self, v: ::std::string::String) {
        self.ipv6_public = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipv6_public(&mut self) -> &mut ::std::string::String {
        if self.ipv6_public.is_none() {
            self.ipv6_public = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ipv6_public.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipv6_public(&mut self) -> ::std::string::String {
        self.ipv6_public.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CContentServerDirectory_ConnectedSteamPipeServerInfo current_connections = 6;

    pub fn current_connections(&self) -> &[CContentServerDirectory_ConnectedSteamPipeServerInfo] {
        &self.current_connections
    }

    pub fn clear_current_connections(&mut self) {
        self.current_connections.clear();
    }

    // Param is passed by value, moved
    pub fn set_current_connections(&mut self, v: ::std::vec::Vec<CContentServerDirectory_ConnectedSteamPipeServerInfo>) {
        self.current_connections = v;
    }

    // Mutable pointer to the field.
    pub fn mut_current_connections(&mut self) -> &mut ::std::vec::Vec<CContentServerDirectory_ConnectedSteamPipeServerInfo> {
        &mut self.current_connections
    }

    // Take field
    pub fn take_current_connections(&mut self) -> ::std::vec::Vec<CContentServerDirectory_ConnectedSteamPipeServerInfo> {
        ::std::mem::replace(&mut self.current_connections, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "cell_id",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.cell_id },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.cell_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_servers",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.max_servers },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.max_servers },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_override",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.ip_override },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.ip_override },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "launcher_type",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.launcher_type },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.launcher_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ipv6_public",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.ipv6_public },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.ipv6_public },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "current_connections",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Request| { &m.current_connections },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Request| { &mut m.current_connections },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetServersForSteamPipe_Request>(
            "CContentServerDirectory_GetServersForSteamPipe_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetServersForSteamPipe_Request {
    const NAME: &'static str = "CContentServerDirectory_GetServersForSteamPipe_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cell_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.max_servers = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.ip_override = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.launcher_type = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.ipv6_public = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.current_connections.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cell_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.max_servers {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.ip_override.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        if let Some(v) = self.launcher_type {
            my_size += crate::rt::int32_size(4, v);
        }
        if let Some(v) = self.ipv6_public.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        for value in &self.current_connections {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.cell_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.max_servers {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.ip_override.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.launcher_type {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.ipv6_public.as_ref() {
            os.write_string(5, v)?;
        }
        for v in &self.current_connections {
            crate::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetServersForSteamPipe_Request {
        CContentServerDirectory_GetServersForSteamPipe_Request::new()
    }

    fn clear(&mut self) {
        self.cell_id = ::std::option::Option::None;
        self.max_servers = ::std::option::Option::None;
        self.ip_override = ::std::option::Option::None;
        self.launcher_type = ::std::option::Option::None;
        self.ipv6_public = ::std::option::Option::None;
        self.current_connections.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetServersForSteamPipe_Request {
        static instance: CContentServerDirectory_GetServersForSteamPipe_Request = CContentServerDirectory_GetServersForSteamPipe_Request {
            cell_id: ::std::option::Option::None,
            max_servers: ::std::option::Option::None,
            ip_override: ::std::option::Option::None,
            launcher_type: ::std::option::Option::None,
            ipv6_public: ::std::option::Option::None,
            current_connections: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetServersForSteamPipe_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetServersForSteamPipe_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetServersForSteamPipe_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetServersForSteamPipe_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_ServerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_ServerInfo {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.source_id)
    pub source_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.cell_id)
    pub cell_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.load)
    pub load: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.weighted_load)
    pub weighted_load: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.num_entries_in_client_list)
    pub num_entries_in_client_list: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.steam_china_only)
    pub steam_china_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.host)
    pub host: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.vhost)
    pub vhost: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.use_as_proxy)
    pub use_as_proxy: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.proxy_request_path_template)
    pub proxy_request_path_template: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.https_support)
    pub https_support: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.allowed_app_ids)
    pub allowed_app_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.preferred_server)
    pub preferred_server: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentServerDirectory_ServerInfo.priority_class)
    pub priority_class: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_ServerInfo.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_ServerInfo {
    fn default() -> &'a CContentServerDirectory_ServerInfo {
        <CContentServerDirectory_ServerInfo as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_ServerInfo {
    pub fn new() -> CContentServerDirectory_ServerInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 source_id = 2;

    pub fn source_id(&self) -> i32 {
        self.source_id.unwrap_or(0)
    }

    pub fn clear_source_id(&mut self) {
        self.source_id = ::std::option::Option::None;
    }

    pub fn has_source_id(&self) -> bool {
        self.source_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_id(&mut self, v: i32) {
        self.source_id = ::std::option::Option::Some(v);
    }

    // optional int32 cell_id = 3;

    pub fn cell_id(&self) -> i32 {
        self.cell_id.unwrap_or(0)
    }

    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: i32) {
        self.cell_id = ::std::option::Option::Some(v);
    }

    // optional int32 load = 4;

    pub fn load(&self) -> i32 {
        self.load.unwrap_or(0)
    }

    pub fn clear_load(&mut self) {
        self.load = ::std::option::Option::None;
    }

    pub fn has_load(&self) -> bool {
        self.load.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load(&mut self, v: i32) {
        self.load = ::std::option::Option::Some(v);
    }

    // optional float weighted_load = 5;

    pub fn weighted_load(&self) -> f32 {
        self.weighted_load.unwrap_or(0.)
    }

    pub fn clear_weighted_load(&mut self) {
        self.weighted_load = ::std::option::Option::None;
    }

    pub fn has_weighted_load(&self) -> bool {
        self.weighted_load.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weighted_load(&mut self, v: f32) {
        self.weighted_load = ::std::option::Option::Some(v);
    }

    // optional int32 num_entries_in_client_list = 6;

    pub fn num_entries_in_client_list(&self) -> i32 {
        self.num_entries_in_client_list.unwrap_or(0)
    }

    pub fn clear_num_entries_in_client_list(&mut self) {
        self.num_entries_in_client_list = ::std::option::Option::None;
    }

    pub fn has_num_entries_in_client_list(&self) -> bool {
        self.num_entries_in_client_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_entries_in_client_list(&mut self, v: i32) {
        self.num_entries_in_client_list = ::std::option::Option::Some(v);
    }

    // optional bool steam_china_only = 7;

    pub fn steam_china_only(&self) -> bool {
        self.steam_china_only.unwrap_or(false)
    }

    pub fn clear_steam_china_only(&mut self) {
        self.steam_china_only = ::std::option::Option::None;
    }

    pub fn has_steam_china_only(&self) -> bool {
        self.steam_china_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_china_only(&mut self, v: bool) {
        self.steam_china_only = ::std::option::Option::Some(v);
    }

    // optional string host = 8;

    pub fn host(&self) -> &str {
        match self.host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_host(&mut self) {
        self.host = ::std::option::Option::None;
    }

    pub fn has_host(&self) -> bool {
        self.host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        if self.host.is_none() {
            self.host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.host.as_mut().unwrap()
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        self.host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string vhost = 9;

    pub fn vhost(&self) -> &str {
        match self.vhost.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_vhost(&mut self) {
        self.vhost = ::std::option::Option::None;
    }

    pub fn has_vhost(&self) -> bool {
        self.vhost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vhost(&mut self, v: ::std::string::String) {
        self.vhost = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vhost(&mut self) -> &mut ::std::string::String {
        if self.vhost.is_none() {
            self.vhost = ::std::option::Option::Some(::std::string::String::new());
        }
        self.vhost.as_mut().unwrap()
    }

    // Take field
    pub fn take_vhost(&mut self) -> ::std::string::String {
        self.vhost.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool use_as_proxy = 10;

    pub fn use_as_proxy(&self) -> bool {
        self.use_as_proxy.unwrap_or(false)
    }

    pub fn clear_use_as_proxy(&mut self) {
        self.use_as_proxy = ::std::option::Option::None;
    }

    pub fn has_use_as_proxy(&self) -> bool {
        self.use_as_proxy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_as_proxy(&mut self, v: bool) {
        self.use_as_proxy = ::std::option::Option::Some(v);
    }

    // optional string proxy_request_path_template = 11;

    pub fn proxy_request_path_template(&self) -> &str {
        match self.proxy_request_path_template.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_proxy_request_path_template(&mut self) {
        self.proxy_request_path_template = ::std::option::Option::None;
    }

    pub fn has_proxy_request_path_template(&self) -> bool {
        self.proxy_request_path_template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proxy_request_path_template(&mut self, v: ::std::string::String) {
        self.proxy_request_path_template = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proxy_request_path_template(&mut self) -> &mut ::std::string::String {
        if self.proxy_request_path_template.is_none() {
            self.proxy_request_path_template = ::std::option::Option::Some(::std::string::String::new());
        }
        self.proxy_request_path_template.as_mut().unwrap()
    }

    // Take field
    pub fn take_proxy_request_path_template(&mut self) -> ::std::string::String {
        self.proxy_request_path_template.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string https_support = 12;

    pub fn https_support(&self) -> &str {
        match self.https_support.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_https_support(&mut self) {
        self.https_support = ::std::option::Option::None;
    }

    pub fn has_https_support(&self) -> bool {
        self.https_support.is_some()
    }

    // Param is passed by value, moved
    pub fn set_https_support(&mut self, v: ::std::string::String) {
        self.https_support = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_https_support(&mut self) -> &mut ::std::string::String {
        if self.https_support.is_none() {
            self.https_support = ::std::option::Option::Some(::std::string::String::new());
        }
        self.https_support.as_mut().unwrap()
    }

    // Take field
    pub fn take_https_support(&mut self) -> ::std::string::String {
        self.https_support.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 allowed_app_ids = 13;

    pub fn allowed_app_ids(&self) -> &[u32] {
        &self.allowed_app_ids
    }

    pub fn clear_allowed_app_ids(&mut self) {
        self.allowed_app_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_app_ids(&mut self, v: ::std::vec::Vec<u32>) {
        self.allowed_app_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_app_ids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.allowed_app_ids
    }

    // Take field
    pub fn take_allowed_app_ids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.allowed_app_ids, ::std::vec::Vec::new())
    }

    // optional bool preferred_server = 14;

    pub fn preferred_server(&self) -> bool {
        self.preferred_server.unwrap_or(false)
    }

    pub fn clear_preferred_server(&mut self) {
        self.preferred_server = ::std::option::Option::None;
    }

    pub fn has_preferred_server(&self) -> bool {
        self.preferred_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preferred_server(&mut self, v: bool) {
        self.preferred_server = ::std::option::Option::Some(v);
    }

    // optional uint32 priority_class = 15;

    pub fn priority_class(&self) -> u32 {
        self.priority_class.unwrap_or(0)
    }

    pub fn clear_priority_class(&mut self) {
        self.priority_class = ::std::option::Option::None;
    }

    pub fn has_priority_class(&self) -> bool {
        self.priority_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority_class(&mut self, v: u32) {
        self.priority_class = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CContentServerDirectory_ServerInfo| { &m.type_ },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.type_ },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_id",
            |m: &CContentServerDirectory_ServerInfo| { &m.source_id },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.source_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "cell_id",
            |m: &CContentServerDirectory_ServerInfo| { &m.cell_id },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.cell_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "load",
            |m: &CContentServerDirectory_ServerInfo| { &m.load },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.load },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "weighted_load",
            |m: &CContentServerDirectory_ServerInfo| { &m.weighted_load },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.weighted_load },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_entries_in_client_list",
            |m: &CContentServerDirectory_ServerInfo| { &m.num_entries_in_client_list },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.num_entries_in_client_list },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_china_only",
            |m: &CContentServerDirectory_ServerInfo| { &m.steam_china_only },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.steam_china_only },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "host",
            |m: &CContentServerDirectory_ServerInfo| { &m.host },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.host },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "vhost",
            |m: &CContentServerDirectory_ServerInfo| { &m.vhost },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.vhost },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_as_proxy",
            |m: &CContentServerDirectory_ServerInfo| { &m.use_as_proxy },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.use_as_proxy },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "proxy_request_path_template",
            |m: &CContentServerDirectory_ServerInfo| { &m.proxy_request_path_template },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.proxy_request_path_template },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "https_support",
            |m: &CContentServerDirectory_ServerInfo| { &m.https_support },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.https_support },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_app_ids",
            |m: &CContentServerDirectory_ServerInfo| { &m.allowed_app_ids },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.allowed_app_ids },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "preferred_server",
            |m: &CContentServerDirectory_ServerInfo| { &m.preferred_server },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.preferred_server },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "priority_class",
            |m: &CContentServerDirectory_ServerInfo| { &m.priority_class },
            |m: &mut CContentServerDirectory_ServerInfo| { &mut m.priority_class },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_ServerInfo>(
            "CContentServerDirectory_ServerInfo",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_ServerInfo {
    const NAME: &'static str = "CContentServerDirectory_ServerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.source_id = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.cell_id = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.load = ::std::option::Option::Some(is.read_int32()?);
                },
                45 => {
                    self.weighted_load = ::std::option::Option::Some(is.read_float()?);
                },
                48 => {
                    self.num_entries_in_client_list = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.steam_china_only = ::std::option::Option::Some(is.read_bool()?);
                },
                66 => {
                    self.host = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.vhost = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.use_as_proxy = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.proxy_request_path_template = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.https_support = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    is.read_repeated_packed_uint32_into(&mut self.allowed_app_ids)?;
                },
                104 => {
                    self.allowed_app_ids.push(is.read_uint32()?);
                },
                112 => {
                    self.preferred_server = ::std::option::Option::Some(is.read_bool()?);
                },
                120 => {
                    self.priority_class = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.source_id {
            my_size += crate::rt::int32_size(2, v);
        }
        if let Some(v) = self.cell_id {
            my_size += crate::rt::int32_size(3, v);
        }
        if let Some(v) = self.load {
            my_size += crate::rt::int32_size(4, v);
        }
        if let Some(v) = self.weighted_load {
            my_size += 1 + 4;
        }
        if let Some(v) = self.num_entries_in_client_list {
            my_size += crate::rt::int32_size(6, v);
        }
        if let Some(v) = self.steam_china_only {
            my_size += 1 + 1;
        }
        if let Some(v) = self.host.as_ref() {
            my_size += crate::rt::string_size(8, &v);
        }
        if let Some(v) = self.vhost.as_ref() {
            my_size += crate::rt::string_size(9, &v);
        }
        if let Some(v) = self.use_as_proxy {
            my_size += 1 + 1;
        }
        if let Some(v) = self.proxy_request_path_template.as_ref() {
            my_size += crate::rt::string_size(11, &v);
        }
        if let Some(v) = self.https_support.as_ref() {
            my_size += crate::rt::string_size(12, &v);
        }
        for value in &self.allowed_app_ids {
            my_size += crate::rt::uint32_size(13, *value);
        };
        if let Some(v) = self.preferred_server {
            my_size += 1 + 1;
        }
        if let Some(v) = self.priority_class {
            my_size += crate::rt::uint32_size(15, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.source_id {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.cell_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.load {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.weighted_load {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.num_entries_in_client_list {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.steam_china_only {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.host.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.vhost.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.use_as_proxy {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.proxy_request_path_template.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.https_support.as_ref() {
            os.write_string(12, v)?;
        }
        for v in &self.allowed_app_ids {
            os.write_uint32(13, *v)?;
        };
        if let Some(v) = self.preferred_server {
            os.write_bool(14, v)?;
        }
        if let Some(v) = self.priority_class {
            os.write_uint32(15, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_ServerInfo {
        CContentServerDirectory_ServerInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.source_id = ::std::option::Option::None;
        self.cell_id = ::std::option::Option::None;
        self.load = ::std::option::Option::None;
        self.weighted_load = ::std::option::Option::None;
        self.num_entries_in_client_list = ::std::option::Option::None;
        self.steam_china_only = ::std::option::Option::None;
        self.host = ::std::option::Option::None;
        self.vhost = ::std::option::Option::None;
        self.use_as_proxy = ::std::option::Option::None;
        self.proxy_request_path_template = ::std::option::Option::None;
        self.https_support = ::std::option::Option::None;
        self.allowed_app_ids.clear();
        self.preferred_server = ::std::option::Option::None;
        self.priority_class = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_ServerInfo {
        static instance: CContentServerDirectory_ServerInfo = CContentServerDirectory_ServerInfo {
            type_: ::std::option::Option::None,
            source_id: ::std::option::Option::None,
            cell_id: ::std::option::Option::None,
            load: ::std::option::Option::None,
            weighted_load: ::std::option::Option::None,
            num_entries_in_client_list: ::std::option::Option::None,
            steam_china_only: ::std::option::Option::None,
            host: ::std::option::Option::None,
            vhost: ::std::option::Option::None,
            use_as_proxy: ::std::option::Option::None,
            proxy_request_path_template: ::std::option::Option::None,
            https_support: ::std::option::Option::None,
            allowed_app_ids: ::std::vec::Vec::new(),
            preferred_server: ::std::option::Option::None,
            priority_class: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_ServerInfo {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_ServerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_ServerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_ServerInfo {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetServersForSteamPipe_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetServersForSteamPipe_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Response.servers)
    pub servers: ::std::vec::Vec<CContentServerDirectory_ServerInfo>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetServersForSteamPipe_Response.no_change)
    pub no_change: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetServersForSteamPipe_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetServersForSteamPipe_Response {
    fn default() -> &'a CContentServerDirectory_GetServersForSteamPipe_Response {
        <CContentServerDirectory_GetServersForSteamPipe_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetServersForSteamPipe_Response {
    pub fn new() -> CContentServerDirectory_GetServersForSteamPipe_Response {
        ::std::default::Default::default()
    }

    // repeated .CContentServerDirectory_ServerInfo servers = 1;

    pub fn servers(&self) -> &[CContentServerDirectory_ServerInfo] {
        &self.servers
    }

    pub fn clear_servers(&mut self) {
        self.servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_servers(&mut self, v: ::std::vec::Vec<CContentServerDirectory_ServerInfo>) {
        self.servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servers(&mut self) -> &mut ::std::vec::Vec<CContentServerDirectory_ServerInfo> {
        &mut self.servers
    }

    // Take field
    pub fn take_servers(&mut self) -> ::std::vec::Vec<CContentServerDirectory_ServerInfo> {
        ::std::mem::replace(&mut self.servers, ::std::vec::Vec::new())
    }

    // optional bool no_change = 2;

    pub fn no_change(&self) -> bool {
        self.no_change.unwrap_or(false)
    }

    pub fn clear_no_change(&mut self) {
        self.no_change = ::std::option::Option::None;
    }

    pub fn has_no_change(&self) -> bool {
        self.no_change.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_change(&mut self, v: bool) {
        self.no_change = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servers",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Response| { &m.servers },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Response| { &mut m.servers },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "no_change",
            |m: &CContentServerDirectory_GetServersForSteamPipe_Response| { &m.no_change },
            |m: &mut CContentServerDirectory_GetServersForSteamPipe_Response| { &mut m.no_change },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetServersForSteamPipe_Response>(
            "CContentServerDirectory_GetServersForSteamPipe_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetServersForSteamPipe_Response {
    const NAME: &'static str = "CContentServerDirectory_GetServersForSteamPipe_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.servers.push(is.read_message()?);
                },
                16 => {
                    self.no_change = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.no_change {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.servers {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.no_change {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetServersForSteamPipe_Response {
        CContentServerDirectory_GetServersForSteamPipe_Response::new()
    }

    fn clear(&mut self) {
        self.servers.clear();
        self.no_change = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetServersForSteamPipe_Response {
        static instance: CContentServerDirectory_GetServersForSteamPipe_Response = CContentServerDirectory_GetServersForSteamPipe_Response {
            servers: ::std::vec::Vec::new(),
            no_change: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetServersForSteamPipe_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetServersForSteamPipe_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetServersForSteamPipe_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetServersForSteamPipe_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetDepotPatchInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetDepotPatchInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.source_manifestid)
    pub source_manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Request.target_manifestid)
    pub target_manifestid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetDepotPatchInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetDepotPatchInfo_Request {
    fn default() -> &'a CContentServerDirectory_GetDepotPatchInfo_Request {
        <CContentServerDirectory_GetDepotPatchInfo_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetDepotPatchInfo_Request {
    pub fn new() -> CContentServerDirectory_GetDepotPatchInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional uint64 source_manifestid = 3;

    pub fn source_manifestid(&self) -> u64 {
        self.source_manifestid.unwrap_or(0)
    }

    pub fn clear_source_manifestid(&mut self) {
        self.source_manifestid = ::std::option::Option::None;
    }

    pub fn has_source_manifestid(&self) -> bool {
        self.source_manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_manifestid(&mut self, v: u64) {
        self.source_manifestid = ::std::option::Option::Some(v);
    }

    // optional uint64 target_manifestid = 4;

    pub fn target_manifestid(&self) -> u64 {
        self.target_manifestid.unwrap_or(0)
    }

    pub fn clear_target_manifestid(&mut self) {
        self.target_manifestid = ::std::option::Option::None;
    }

    pub fn has_target_manifestid(&self) -> bool {
        self.target_manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_manifestid(&mut self, v: u64) {
        self.target_manifestid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.appid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "depotid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.depotid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.depotid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_manifestid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.source_manifestid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.source_manifestid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "target_manifestid",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Request| { &m.target_manifestid },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Request| { &mut m.target_manifestid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetDepotPatchInfo_Request>(
            "CContentServerDirectory_GetDepotPatchInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetDepotPatchInfo_Request {
    const NAME: &'static str = "CContentServerDirectory_GetDepotPatchInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.source_manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.target_manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.source_manifestid {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.target_manifestid {
            my_size += crate::rt::uint64_size(4, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.source_manifestid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.target_manifestid {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetDepotPatchInfo_Request {
        CContentServerDirectory_GetDepotPatchInfo_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.source_manifestid = ::std::option::Option::None;
        self.target_manifestid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetDepotPatchInfo_Request {
        static instance: CContentServerDirectory_GetDepotPatchInfo_Request = CContentServerDirectory_GetDepotPatchInfo_Request {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            source_manifestid: ::std::option::Option::None,
            target_manifestid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetDepotPatchInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetDepotPatchInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetDepotPatchInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetDepotPatchInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetDepotPatchInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetDepotPatchInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Response.is_available)
    pub is_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Response.patch_size)
    pub patch_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetDepotPatchInfo_Response.patched_chunks_size)
    pub patched_chunks_size: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetDepotPatchInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetDepotPatchInfo_Response {
    fn default() -> &'a CContentServerDirectory_GetDepotPatchInfo_Response {
        <CContentServerDirectory_GetDepotPatchInfo_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetDepotPatchInfo_Response {
    pub fn new() -> CContentServerDirectory_GetDepotPatchInfo_Response {
        ::std::default::Default::default()
    }

    // optional bool is_available = 1;

    pub fn is_available(&self) -> bool {
        self.is_available.unwrap_or(false)
    }

    pub fn clear_is_available(&mut self) {
        self.is_available = ::std::option::Option::None;
    }

    pub fn has_is_available(&self) -> bool {
        self.is_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_available(&mut self, v: bool) {
        self.is_available = ::std::option::Option::Some(v);
    }

    // optional uint64 patch_size = 2;

    pub fn patch_size(&self) -> u64 {
        self.patch_size.unwrap_or(0)
    }

    pub fn clear_patch_size(&mut self) {
        self.patch_size = ::std::option::Option::None;
    }

    pub fn has_patch_size(&self) -> bool {
        self.patch_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_patch_size(&mut self, v: u64) {
        self.patch_size = ::std::option::Option::Some(v);
    }

    // optional uint64 patched_chunks_size = 3;

    pub fn patched_chunks_size(&self) -> u64 {
        self.patched_chunks_size.unwrap_or(0)
    }

    pub fn clear_patched_chunks_size(&mut self) {
        self.patched_chunks_size = ::std::option::Option::None;
    }

    pub fn has_patched_chunks_size(&self) -> bool {
        self.patched_chunks_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_patched_chunks_size(&mut self, v: u64) {
        self.patched_chunks_size = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_available",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Response| { &m.is_available },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Response| { &mut m.is_available },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "patch_size",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Response| { &m.patch_size },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Response| { &mut m.patch_size },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "patched_chunks_size",
            |m: &CContentServerDirectory_GetDepotPatchInfo_Response| { &m.patched_chunks_size },
            |m: &mut CContentServerDirectory_GetDepotPatchInfo_Response| { &mut m.patched_chunks_size },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetDepotPatchInfo_Response>(
            "CContentServerDirectory_GetDepotPatchInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetDepotPatchInfo_Response {
    const NAME: &'static str = "CContentServerDirectory_GetDepotPatchInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_available = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.patch_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.patched_chunks_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.patch_size {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.patched_chunks_size {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.is_available {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.patch_size {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.patched_chunks_size {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetDepotPatchInfo_Response {
        CContentServerDirectory_GetDepotPatchInfo_Response::new()
    }

    fn clear(&mut self) {
        self.is_available = ::std::option::Option::None;
        self.patch_size = ::std::option::Option::None;
        self.patched_chunks_size = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetDepotPatchInfo_Response {
        static instance: CContentServerDirectory_GetDepotPatchInfo_Response = CContentServerDirectory_GetDepotPatchInfo_Response {
            is_available: ::std::option::Option::None,
            patch_size: ::std::option::Option::None,
            patched_chunks_size: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetDepotPatchInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetDepotPatchInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetDepotPatchInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetDepotPatchInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetClientUpdateHosts_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetClientUpdateHosts_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Request.cached_signature)
    pub cached_signature: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetClientUpdateHosts_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetClientUpdateHosts_Request {
    fn default() -> &'a CContentServerDirectory_GetClientUpdateHosts_Request {
        <CContentServerDirectory_GetClientUpdateHosts_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetClientUpdateHosts_Request {
    pub fn new() -> CContentServerDirectory_GetClientUpdateHosts_Request {
        ::std::default::Default::default()
    }

    // optional string cached_signature = 1;

    pub fn cached_signature(&self) -> &str {
        match self.cached_signature.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_cached_signature(&mut self) {
        self.cached_signature = ::std::option::Option::None;
    }

    pub fn has_cached_signature(&self) -> bool {
        self.cached_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cached_signature(&mut self, v: ::std::string::String) {
        self.cached_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cached_signature(&mut self) -> &mut ::std::string::String {
        if self.cached_signature.is_none() {
            self.cached_signature = ::std::option::Option::Some(::std::string::String::new());
        }
        self.cached_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_cached_signature(&mut self) -> ::std::string::String {
        self.cached_signature.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "cached_signature",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Request| { &m.cached_signature },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Request| { &mut m.cached_signature },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetClientUpdateHosts_Request>(
            "CContentServerDirectory_GetClientUpdateHosts_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetClientUpdateHosts_Request {
    const NAME: &'static str = "CContentServerDirectory_GetClientUpdateHosts_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cached_signature = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cached_signature.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.cached_signature.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetClientUpdateHosts_Request {
        CContentServerDirectory_GetClientUpdateHosts_Request::new()
    }

    fn clear(&mut self) {
        self.cached_signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetClientUpdateHosts_Request {
        static instance: CContentServerDirectory_GetClientUpdateHosts_Request = CContentServerDirectory_GetClientUpdateHosts_Request {
            cached_signature: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetClientUpdateHosts_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetClientUpdateHosts_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetClientUpdateHosts_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetClientUpdateHosts_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetClientUpdateHosts_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetClientUpdateHosts_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Response.hosts_kv)
    pub hosts_kv: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Response.valid_until_time)
    pub valid_until_time: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetClientUpdateHosts_Response.ip_country)
    pub ip_country: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetClientUpdateHosts_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetClientUpdateHosts_Response {
    fn default() -> &'a CContentServerDirectory_GetClientUpdateHosts_Response {
        <CContentServerDirectory_GetClientUpdateHosts_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetClientUpdateHosts_Response {
    pub fn new() -> CContentServerDirectory_GetClientUpdateHosts_Response {
        ::std::default::Default::default()
    }

    // optional string hosts_kv = 1;

    pub fn hosts_kv(&self) -> &str {
        match self.hosts_kv.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hosts_kv(&mut self) {
        self.hosts_kv = ::std::option::Option::None;
    }

    pub fn has_hosts_kv(&self) -> bool {
        self.hosts_kv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hosts_kv(&mut self, v: ::std::string::String) {
        self.hosts_kv = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hosts_kv(&mut self) -> &mut ::std::string::String {
        if self.hosts_kv.is_none() {
            self.hosts_kv = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hosts_kv.as_mut().unwrap()
    }

    // Take field
    pub fn take_hosts_kv(&mut self) -> ::std::string::String {
        self.hosts_kv.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 valid_until_time = 2;

    pub fn valid_until_time(&self) -> u64 {
        self.valid_until_time.unwrap_or(0)
    }

    pub fn clear_valid_until_time(&mut self) {
        self.valid_until_time = ::std::option::Option::None;
    }

    pub fn has_valid_until_time(&self) -> bool {
        self.valid_until_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid_until_time(&mut self, v: u64) {
        self.valid_until_time = ::std::option::Option::Some(v);
    }

    // optional string ip_country = 3;

    pub fn ip_country(&self) -> &str {
        match self.ip_country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_country(&mut self) {
        self.ip_country = ::std::option::Option::None;
    }

    pub fn has_ip_country(&self) -> bool {
        self.ip_country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_country(&mut self, v: ::std::string::String) {
        self.ip_country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_country(&mut self) -> &mut ::std::string::String {
        if self.ip_country.is_none() {
            self.ip_country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_country.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_country(&mut self) -> ::std::string::String {
        self.ip_country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hosts_kv",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Response| { &m.hosts_kv },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Response| { &mut m.hosts_kv },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "valid_until_time",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Response| { &m.valid_until_time },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Response| { &mut m.valid_until_time },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_country",
            |m: &CContentServerDirectory_GetClientUpdateHosts_Response| { &m.ip_country },
            |m: &mut CContentServerDirectory_GetClientUpdateHosts_Response| { &mut m.ip_country },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetClientUpdateHosts_Response>(
            "CContentServerDirectory_GetClientUpdateHosts_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetClientUpdateHosts_Response {
    const NAME: &'static str = "CContentServerDirectory_GetClientUpdateHosts_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hosts_kv = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.valid_until_time = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.ip_country = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hosts_kv.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.valid_until_time {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.ip_country.as_ref() {
            my_size += crate::rt::string_size(3, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.hosts_kv.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.valid_until_time {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.ip_country.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetClientUpdateHosts_Response {
        CContentServerDirectory_GetClientUpdateHosts_Response::new()
    }

    fn clear(&mut self) {
        self.hosts_kv = ::std::option::Option::None;
        self.valid_until_time = ::std::option::Option::None;
        self.ip_country = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetClientUpdateHosts_Response {
        static instance: CContentServerDirectory_GetClientUpdateHosts_Response = CContentServerDirectory_GetClientUpdateHosts_Response {
            hosts_kv: ::std::option::Option::None,
            valid_until_time: ::std::option::Option::None,
            ip_country: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetClientUpdateHosts_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetClientUpdateHosts_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetClientUpdateHosts_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetClientUpdateHosts_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetManifestRequestCode_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetManifestRequestCode_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetManifestRequestCode_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetManifestRequestCode_Request.depot_id)
    pub depot_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetManifestRequestCode_Request.manifest_id)
    pub manifest_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetManifestRequestCode_Request.app_branch)
    pub app_branch: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetManifestRequestCode_Request.branch_password_hash)
    pub branch_password_hash: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetManifestRequestCode_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetManifestRequestCode_Request {
    fn default() -> &'a CContentServerDirectory_GetManifestRequestCode_Request {
        <CContentServerDirectory_GetManifestRequestCode_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetManifestRequestCode_Request {
    pub fn new() -> CContentServerDirectory_GetManifestRequestCode_Request {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 depot_id = 2;

    pub fn depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }

    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional uint64 manifest_id = 3;

    pub fn manifest_id(&self) -> u64 {
        self.manifest_id.unwrap_or(0)
    }

    pub fn clear_manifest_id(&mut self) {
        self.manifest_id = ::std::option::Option::None;
    }

    pub fn has_manifest_id(&self) -> bool {
        self.manifest_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_id(&mut self, v: u64) {
        self.manifest_id = ::std::option::Option::Some(v);
    }

    // optional string app_branch = 4;

    pub fn app_branch(&self) -> &str {
        match self.app_branch.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_app_branch(&mut self) {
        self.app_branch = ::std::option::Option::None;
    }

    pub fn has_app_branch(&self) -> bool {
        self.app_branch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_branch(&mut self, v: ::std::string::String) {
        self.app_branch = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_branch(&mut self) -> &mut ::std::string::String {
        if self.app_branch.is_none() {
            self.app_branch = ::std::option::Option::Some(::std::string::String::new());
        }
        self.app_branch.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_branch(&mut self) -> ::std::string::String {
        self.app_branch.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string branch_password_hash = 5;

    pub fn branch_password_hash(&self) -> &str {
        match self.branch_password_hash.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_branch_password_hash(&mut self) {
        self.branch_password_hash = ::std::option::Option::None;
    }

    pub fn has_branch_password_hash(&self) -> bool {
        self.branch_password_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_branch_password_hash(&mut self, v: ::std::string::String) {
        self.branch_password_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_password_hash(&mut self) -> &mut ::std::string::String {
        if self.branch_password_hash.is_none() {
            self.branch_password_hash = ::std::option::Option::Some(::std::string::String::new());
        }
        self.branch_password_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_branch_password_hash(&mut self) -> ::std::string::String {
        self.branch_password_hash.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CContentServerDirectory_GetManifestRequestCode_Request| { &m.app_id },
            |m: &mut CContentServerDirectory_GetManifestRequestCode_Request| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "depot_id",
            |m: &CContentServerDirectory_GetManifestRequestCode_Request| { &m.depot_id },
            |m: &mut CContentServerDirectory_GetManifestRequestCode_Request| { &mut m.depot_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifest_id",
            |m: &CContentServerDirectory_GetManifestRequestCode_Request| { &m.manifest_id },
            |m: &mut CContentServerDirectory_GetManifestRequestCode_Request| { &mut m.manifest_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_branch",
            |m: &CContentServerDirectory_GetManifestRequestCode_Request| { &m.app_branch },
            |m: &mut CContentServerDirectory_GetManifestRequestCode_Request| { &mut m.app_branch },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "branch_password_hash",
            |m: &CContentServerDirectory_GetManifestRequestCode_Request| { &m.branch_password_hash },
            |m: &mut CContentServerDirectory_GetManifestRequestCode_Request| { &mut m.branch_password_hash },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetManifestRequestCode_Request>(
            "CContentServerDirectory_GetManifestRequestCode_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetManifestRequestCode_Request {
    const NAME: &'static str = "CContentServerDirectory_GetManifestRequestCode_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.manifest_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    self.app_branch = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.branch_password_hash = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depot_id {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.manifest_id {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.app_branch.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.branch_password_hash.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depot_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.manifest_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.app_branch.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.branch_password_hash.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetManifestRequestCode_Request {
        CContentServerDirectory_GetManifestRequestCode_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.depot_id = ::std::option::Option::None;
        self.manifest_id = ::std::option::Option::None;
        self.app_branch = ::std::option::Option::None;
        self.branch_password_hash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetManifestRequestCode_Request {
        static instance: CContentServerDirectory_GetManifestRequestCode_Request = CContentServerDirectory_GetManifestRequestCode_Request {
            app_id: ::std::option::Option::None,
            depot_id: ::std::option::Option::None,
            manifest_id: ::std::option::Option::None,
            app_branch: ::std::option::Option::None,
            branch_password_hash: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetManifestRequestCode_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetManifestRequestCode_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetManifestRequestCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetManifestRequestCode_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetManifestRequestCode_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetManifestRequestCode_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetManifestRequestCode_Response.manifest_request_code)
    pub manifest_request_code: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetManifestRequestCode_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetManifestRequestCode_Response {
    fn default() -> &'a CContentServerDirectory_GetManifestRequestCode_Response {
        <CContentServerDirectory_GetManifestRequestCode_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetManifestRequestCode_Response {
    pub fn new() -> CContentServerDirectory_GetManifestRequestCode_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifest_request_code = 1;

    pub fn manifest_request_code(&self) -> u64 {
        self.manifest_request_code.unwrap_or(0)
    }

    pub fn clear_manifest_request_code(&mut self) {
        self.manifest_request_code = ::std::option::Option::None;
    }

    pub fn has_manifest_request_code(&self) -> bool {
        self.manifest_request_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_request_code(&mut self, v: u64) {
        self.manifest_request_code = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "manifest_request_code",
            |m: &CContentServerDirectory_GetManifestRequestCode_Response| { &m.manifest_request_code },
            |m: &mut CContentServerDirectory_GetManifestRequestCode_Response| { &mut m.manifest_request_code },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetManifestRequestCode_Response>(
            "CContentServerDirectory_GetManifestRequestCode_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetManifestRequestCode_Response {
    const NAME: &'static str = "CContentServerDirectory_GetManifestRequestCode_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.manifest_request_code = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manifest_request_code {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.manifest_request_code {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetManifestRequestCode_Response {
        CContentServerDirectory_GetManifestRequestCode_Response::new()
    }

    fn clear(&mut self) {
        self.manifest_request_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetManifestRequestCode_Response {
        static instance: CContentServerDirectory_GetManifestRequestCode_Response = CContentServerDirectory_GetManifestRequestCode_Response {
            manifest_request_code: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetManifestRequestCode_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetManifestRequestCode_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetManifestRequestCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetManifestRequestCode_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetCDNAuthToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetCDNAuthToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetCDNAuthToken_Request.depot_id)
    pub depot_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetCDNAuthToken_Request.host_name)
    pub host_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetCDNAuthToken_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetCDNAuthToken_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetCDNAuthToken_Request {
    fn default() -> &'a CContentServerDirectory_GetCDNAuthToken_Request {
        <CContentServerDirectory_GetCDNAuthToken_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetCDNAuthToken_Request {
    pub fn new() -> CContentServerDirectory_GetCDNAuthToken_Request {
        ::std::default::Default::default()
    }

    // optional uint32 depot_id = 1;

    pub fn depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }

    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional string host_name = 2;

    pub fn host_name(&self) -> &str {
        match self.host_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_host_name(&mut self) {
        self.host_name = ::std::option::Option::None;
    }

    pub fn has_host_name(&self) -> bool {
        self.host_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        if self.host_name.is_none() {
            self.host_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.host_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        self.host_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "depot_id",
            |m: &CContentServerDirectory_GetCDNAuthToken_Request| { &m.depot_id },
            |m: &mut CContentServerDirectory_GetCDNAuthToken_Request| { &mut m.depot_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "host_name",
            |m: &CContentServerDirectory_GetCDNAuthToken_Request| { &m.host_name },
            |m: &mut CContentServerDirectory_GetCDNAuthToken_Request| { &mut m.host_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CContentServerDirectory_GetCDNAuthToken_Request| { &m.app_id },
            |m: &mut CContentServerDirectory_GetCDNAuthToken_Request| { &mut m.app_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetCDNAuthToken_Request>(
            "CContentServerDirectory_GetCDNAuthToken_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetCDNAuthToken_Request {
    const NAME: &'static str = "CContentServerDirectory_GetCDNAuthToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.host_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.depot_id {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.host_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.depot_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.host_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetCDNAuthToken_Request {
        CContentServerDirectory_GetCDNAuthToken_Request::new()
    }

    fn clear(&mut self) {
        self.depot_id = ::std::option::Option::None;
        self.host_name = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetCDNAuthToken_Request {
        static instance: CContentServerDirectory_GetCDNAuthToken_Request = CContentServerDirectory_GetCDNAuthToken_Request {
            depot_id: ::std::option::Option::None,
            host_name: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetCDNAuthToken_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetCDNAuthToken_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetCDNAuthToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetCDNAuthToken_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetCDNAuthToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetCDNAuthToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetCDNAuthToken_Response.token)
    pub token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetCDNAuthToken_Response.expiration_time)
    pub expiration_time: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetCDNAuthToken_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetCDNAuthToken_Response {
    fn default() -> &'a CContentServerDirectory_GetCDNAuthToken_Response {
        <CContentServerDirectory_GetCDNAuthToken_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetCDNAuthToken_Response {
    pub fn new() -> CContentServerDirectory_GetCDNAuthToken_Response {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 expiration_time = 2;

    pub fn expiration_time(&self) -> u32 {
        self.expiration_time.unwrap_or(0)
    }

    pub fn clear_expiration_time(&mut self) {
        self.expiration_time = ::std::option::Option::None;
    }

    pub fn has_expiration_time(&self) -> bool {
        self.expiration_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration_time(&mut self, v: u32) {
        self.expiration_time = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &CContentServerDirectory_GetCDNAuthToken_Response| { &m.token },
            |m: &mut CContentServerDirectory_GetCDNAuthToken_Response| { &mut m.token },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiration_time",
            |m: &CContentServerDirectory_GetCDNAuthToken_Response| { &m.expiration_time },
            |m: &mut CContentServerDirectory_GetCDNAuthToken_Response| { &mut m.expiration_time },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetCDNAuthToken_Response>(
            "CContentServerDirectory_GetCDNAuthToken_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetCDNAuthToken_Response {
    const NAME: &'static str = "CContentServerDirectory_GetCDNAuthToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.expiration_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.expiration_time {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.expiration_time {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetCDNAuthToken_Response {
        CContentServerDirectory_GetCDNAuthToken_Response::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.expiration_time = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetCDNAuthToken_Response {
        static instance: CContentServerDirectory_GetCDNAuthToken_Response = CContentServerDirectory_GetCDNAuthToken_Response {
            token: ::std::option::Option::None,
            expiration_time: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetCDNAuthToken_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetCDNAuthToken_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetCDNAuthToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetCDNAuthToken_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_RequestPeerContentServer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_RequestPeerContentServer_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Request.remote_client_id)
    pub remote_client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Request.server_remote_client_id)
    pub server_remote_client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Request.current_build_id)
    pub current_build_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_RequestPeerContentServer_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_RequestPeerContentServer_Request {
    fn default() -> &'a CContentServerDirectory_RequestPeerContentServer_Request {
        <CContentServerDirectory_RequestPeerContentServer_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_RequestPeerContentServer_Request {
    pub fn new() -> CContentServerDirectory_RequestPeerContentServer_Request {
        ::std::default::Default::default()
    }

    // optional uint64 remote_client_id = 1;

    pub fn remote_client_id(&self) -> u64 {
        self.remote_client_id.unwrap_or(0)
    }

    pub fn clear_remote_client_id(&mut self) {
        self.remote_client_id = ::std::option::Option::None;
    }

    pub fn has_remote_client_id(&self) -> bool {
        self.remote_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_client_id(&mut self, v: u64) {
        self.remote_client_id = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 server_remote_client_id = 3;

    pub fn server_remote_client_id(&self) -> u64 {
        self.server_remote_client_id.unwrap_or(0)
    }

    pub fn clear_server_remote_client_id(&mut self) {
        self.server_remote_client_id = ::std::option::Option::None;
    }

    pub fn has_server_remote_client_id(&self) -> bool {
        self.server_remote_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_remote_client_id(&mut self, v: u64) {
        self.server_remote_client_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 4;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 current_build_id = 5;

    pub fn current_build_id(&self) -> u32 {
        self.current_build_id.unwrap_or(0)
    }

    pub fn clear_current_build_id(&mut self) {
        self.current_build_id = ::std::option::Option::None;
    }

    pub fn has_current_build_id(&self) -> bool {
        self.current_build_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_build_id(&mut self, v: u32) {
        self.current_build_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "remote_client_id",
            |m: &CContentServerDirectory_RequestPeerContentServer_Request| { &m.remote_client_id },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Request| { &mut m.remote_client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CContentServerDirectory_RequestPeerContentServer_Request| { &m.steamid },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_remote_client_id",
            |m: &CContentServerDirectory_RequestPeerContentServer_Request| { &m.server_remote_client_id },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Request| { &mut m.server_remote_client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CContentServerDirectory_RequestPeerContentServer_Request| { &m.app_id },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Request| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "current_build_id",
            |m: &CContentServerDirectory_RequestPeerContentServer_Request| { &m.current_build_id },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Request| { &mut m.current_build_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_RequestPeerContentServer_Request>(
            "CContentServerDirectory_RequestPeerContentServer_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_RequestPeerContentServer_Request {
    const NAME: &'static str = "CContentServerDirectory_RequestPeerContentServer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.remote_client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.server_remote_client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.current_build_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.remote_client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.server_remote_client_id {
            my_size += crate::rt::uint64_size(3, v);
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.current_build_id {
            my_size += crate::rt::uint32_size(5, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.remote_client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.server_remote_client_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.current_build_id {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_RequestPeerContentServer_Request {
        CContentServerDirectory_RequestPeerContentServer_Request::new()
    }

    fn clear(&mut self) {
        self.remote_client_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.server_remote_client_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.current_build_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_RequestPeerContentServer_Request {
        static instance: CContentServerDirectory_RequestPeerContentServer_Request = CContentServerDirectory_RequestPeerContentServer_Request {
            remote_client_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            server_remote_client_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            current_build_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_RequestPeerContentServer_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_RequestPeerContentServer_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_RequestPeerContentServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_RequestPeerContentServer_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_RequestPeerContentServer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_RequestPeerContentServer_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Response.server_port)
    pub server_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Response.installed_depots)
    pub installed_depots: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_RequestPeerContentServer_Response.access_token)
    pub access_token: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_RequestPeerContentServer_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_RequestPeerContentServer_Response {
    fn default() -> &'a CContentServerDirectory_RequestPeerContentServer_Response {
        <CContentServerDirectory_RequestPeerContentServer_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_RequestPeerContentServer_Response {
    pub fn new() -> CContentServerDirectory_RequestPeerContentServer_Response {
        ::std::default::Default::default()
    }

    // optional uint32 server_port = 1;

    pub fn server_port(&self) -> u32 {
        self.server_port.unwrap_or(0)
    }

    pub fn clear_server_port(&mut self) {
        self.server_port = ::std::option::Option::None;
    }

    pub fn has_server_port(&self) -> bool {
        self.server_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_port(&mut self, v: u32) {
        self.server_port = ::std::option::Option::Some(v);
    }

    // repeated uint32 installed_depots = 2;

    pub fn installed_depots(&self) -> &[u32] {
        &self.installed_depots
    }

    pub fn clear_installed_depots(&mut self) {
        self.installed_depots.clear();
    }

    // Param is passed by value, moved
    pub fn set_installed_depots(&mut self, v: ::std::vec::Vec<u32>) {
        self.installed_depots = v;
    }

    // Mutable pointer to the field.
    pub fn mut_installed_depots(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.installed_depots
    }

    // Take field
    pub fn take_installed_depots(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.installed_depots, ::std::vec::Vec::new())
    }

    // optional uint64 access_token = 3;

    pub fn access_token(&self) -> u64 {
        self.access_token.unwrap_or(0)
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: u64) {
        self.access_token = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_port",
            |m: &CContentServerDirectory_RequestPeerContentServer_Response| { &m.server_port },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Response| { &mut m.server_port },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "installed_depots",
            |m: &CContentServerDirectory_RequestPeerContentServer_Response| { &m.installed_depots },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Response| { &mut m.installed_depots },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "access_token",
            |m: &CContentServerDirectory_RequestPeerContentServer_Response| { &m.access_token },
            |m: &mut CContentServerDirectory_RequestPeerContentServer_Response| { &mut m.access_token },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_RequestPeerContentServer_Response>(
            "CContentServerDirectory_RequestPeerContentServer_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_RequestPeerContentServer_Response {
    const NAME: &'static str = "CContentServerDirectory_RequestPeerContentServer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.server_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.installed_depots)?;
                },
                16 => {
                    self.installed_depots.push(is.read_uint32()?);
                },
                24 => {
                    self.access_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_port {
            my_size += crate::rt::uint32_size(1, v);
        }
        for value in &self.installed_depots {
            my_size += crate::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.access_token {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.server_port {
            os.write_uint32(1, v)?;
        }
        for v in &self.installed_depots {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.access_token {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_RequestPeerContentServer_Response {
        CContentServerDirectory_RequestPeerContentServer_Response::new()
    }

    fn clear(&mut self) {
        self.server_port = ::std::option::Option::None;
        self.installed_depots.clear();
        self.access_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_RequestPeerContentServer_Response {
        static instance: CContentServerDirectory_RequestPeerContentServer_Response = CContentServerDirectory_RequestPeerContentServer_Response {
            server_port: ::std::option::Option::None,
            installed_depots: ::std::vec::Vec::new(),
            access_token: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_RequestPeerContentServer_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_RequestPeerContentServer_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_RequestPeerContentServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_RequestPeerContentServer_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetPeerContentInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetPeerContentInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetPeerContentInfo_Request.remote_client_id)
    pub remote_client_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetPeerContentInfo_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetPeerContentInfo_Request.server_remote_client_id)
    pub server_remote_client_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetPeerContentInfo_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetPeerContentInfo_Request {
    fn default() -> &'a CContentServerDirectory_GetPeerContentInfo_Request {
        <CContentServerDirectory_GetPeerContentInfo_Request as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetPeerContentInfo_Request {
    pub fn new() -> CContentServerDirectory_GetPeerContentInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint64 remote_client_id = 1;

    pub fn remote_client_id(&self) -> u64 {
        self.remote_client_id.unwrap_or(0)
    }

    pub fn clear_remote_client_id(&mut self) {
        self.remote_client_id = ::std::option::Option::None;
    }

    pub fn has_remote_client_id(&self) -> bool {
        self.remote_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_client_id(&mut self, v: u64) {
        self.remote_client_id = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 server_remote_client_id = 3;

    pub fn server_remote_client_id(&self) -> u64 {
        self.server_remote_client_id.unwrap_or(0)
    }

    pub fn clear_server_remote_client_id(&mut self) {
        self.server_remote_client_id = ::std::option::Option::None;
    }

    pub fn has_server_remote_client_id(&self) -> bool {
        self.server_remote_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_remote_client_id(&mut self, v: u64) {
        self.server_remote_client_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "remote_client_id",
            |m: &CContentServerDirectory_GetPeerContentInfo_Request| { &m.remote_client_id },
            |m: &mut CContentServerDirectory_GetPeerContentInfo_Request| { &mut m.remote_client_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CContentServerDirectory_GetPeerContentInfo_Request| { &m.steamid },
            |m: &mut CContentServerDirectory_GetPeerContentInfo_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_remote_client_id",
            |m: &CContentServerDirectory_GetPeerContentInfo_Request| { &m.server_remote_client_id },
            |m: &mut CContentServerDirectory_GetPeerContentInfo_Request| { &mut m.server_remote_client_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetPeerContentInfo_Request>(
            "CContentServerDirectory_GetPeerContentInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetPeerContentInfo_Request {
    const NAME: &'static str = "CContentServerDirectory_GetPeerContentInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.remote_client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.server_remote_client_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.remote_client_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += crate::rt::uint64_size(2, v);
        }
        if let Some(v) = self.server_remote_client_id {
            my_size += crate::rt::uint64_size(3, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.remote_client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.server_remote_client_id {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetPeerContentInfo_Request {
        CContentServerDirectory_GetPeerContentInfo_Request::new()
    }

    fn clear(&mut self) {
        self.remote_client_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.server_remote_client_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetPeerContentInfo_Request {
        static instance: CContentServerDirectory_GetPeerContentInfo_Request = CContentServerDirectory_GetPeerContentInfo_Request {
            remote_client_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            server_remote_client_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetPeerContentInfo_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetPeerContentInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetPeerContentInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetPeerContentInfo_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CContentServerDirectory_GetPeerContentInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentServerDirectory_GetPeerContentInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentServerDirectory_GetPeerContentInfo_Response.appids)
    pub appids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CContentServerDirectory_GetPeerContentInfo_Response.ip_public)
    pub ip_public: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentServerDirectory_GetPeerContentInfo_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentServerDirectory_GetPeerContentInfo_Response {
    fn default() -> &'a CContentServerDirectory_GetPeerContentInfo_Response {
        <CContentServerDirectory_GetPeerContentInfo_Response as crate::Message>::default_instance()
    }
}

impl CContentServerDirectory_GetPeerContentInfo_Response {
    pub fn new() -> CContentServerDirectory_GetPeerContentInfo_Response {
        ::std::default::Default::default()
    }

    // repeated uint32 appids = 1;

    pub fn appids(&self) -> &[u32] {
        &self.appids
    }

    pub fn clear_appids(&mut self) {
        self.appids.clear();
    }

    // Param is passed by value, moved
    pub fn set_appids(&mut self, v: ::std::vec::Vec<u32>) {
        self.appids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appids(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appids
    }

    // Take field
    pub fn take_appids(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appids, ::std::vec::Vec::new())
    }

    // optional string ip_public = 2;

    pub fn ip_public(&self) -> &str {
        match self.ip_public.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_public(&mut self) {
        self.ip_public = ::std::option::Option::None;
    }

    pub fn has_ip_public(&self) -> bool {
        self.ip_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_public(&mut self, v: ::std::string::String) {
        self.ip_public = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_public(&mut self) -> &mut ::std::string::String {
        if self.ip_public.is_none() {
            self.ip_public = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_public.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_public(&mut self) -> ::std::string::String {
        self.ip_public.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "appids",
            |m: &CContentServerDirectory_GetPeerContentInfo_Response| { &m.appids },
            |m: &mut CContentServerDirectory_GetPeerContentInfo_Response| { &mut m.appids },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ip_public",
            |m: &CContentServerDirectory_GetPeerContentInfo_Response| { &m.ip_public },
            |m: &mut CContentServerDirectory_GetPeerContentInfo_Response| { &mut m.ip_public },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CContentServerDirectory_GetPeerContentInfo_Response>(
            "CContentServerDirectory_GetPeerContentInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CContentServerDirectory_GetPeerContentInfo_Response {
    const NAME: &'static str = "CContentServerDirectory_GetPeerContentInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.appids)?;
                },
                8 => {
                    self.appids.push(is.read_uint32()?);
                },
                18 => {
                    self.ip_public = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.appids {
            my_size += crate::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.ip_public.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.appids {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.ip_public.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentServerDirectory_GetPeerContentInfo_Response {
        CContentServerDirectory_GetPeerContentInfo_Response::new()
    }

    fn clear(&mut self) {
        self.appids.clear();
        self.ip_public = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentServerDirectory_GetPeerContentInfo_Response {
        static instance: CContentServerDirectory_GetPeerContentInfo_Response = CContentServerDirectory_GetPeerContentInfo_Response {
            appids: ::std::vec::Vec::new(),
            ip_public: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CContentServerDirectory_GetPeerContentInfo_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CContentServerDirectory_GetPeerContentInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CContentServerDirectory_GetPeerContentInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CContentServerDirectory_GetPeerContentInfo_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-steammessages_contentsystem.steamclient.proto\x1a\x18steammessages_ba\
    se.proto\x1a,steammessages_unified_base.steamclient.proto\"\x83\x01\n4CC\
    ontentServerDirectory_ConnectedSteamPipeServerInfo\x12\x12\n\x04type\x18\
    \x01\x20\x01(\tR\x04type\x12\x1b\n\tsource_id\x18\x02\x20\x01(\x05R\x08s\
    ourceId\x12\x1a\n\x08hostname\x18\x03\x20\x01(\tR\x08hostname\"\xc8\x02\
    \n6CContentServerDirectory_GetServersForSteamPipe_Request\x12\x17\n\x07c\
    ell_id\x18\x01\x20\x01(\rR\x06cellId\x12#\n\x0bmax_servers\x18\x02\x20\
    \x01(\r:\x0220R\nmaxServers\x12\x1f\n\x0bip_override\x18\x03\x20\x01(\tR\
    \nipOverride\x12&\n\rlauncher_type\x18\x04\x20\x01(\x05:\x010R\x0claunch\
    erType\x12\x1f\n\x0bipv6_public\x18\x05\x20\x01(\tR\nipv6Public\x12f\n\
    \x13current_connections\x18\x06\x20\x03(\x0b25.CContentServerDirectory_C\
    onnectedSteamPipeServerInfoR\x12currentConnections\"\xb7\x04\n\"CContent\
    ServerDirectory_ServerInfo\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\
    \x12\x1b\n\tsource_id\x18\x02\x20\x01(\x05R\x08sourceId\x12\x17\n\x07cel\
    l_id\x18\x03\x20\x01(\x05R\x06cellId\x12\x12\n\x04load\x18\x04\x20\x01(\
    \x05R\x04load\x12#\n\rweighted_load\x18\x05\x20\x01(\x02R\x0cweightedLoa\
    d\x12:\n\x1anum_entries_in_client_list\x18\x06\x20\x01(\x05R\x16numEntri\
    esInClientList\x12(\n\x10steam_china_only\x18\x07\x20\x01(\x08R\x0esteam\
    ChinaOnly\x12\x12\n\x04host\x18\x08\x20\x01(\tR\x04host\x12\x14\n\x05vho\
    st\x18\t\x20\x01(\tR\x05vhost\x12\x20\n\x0cuse_as_proxy\x18\n\x20\x01(\
    \x08R\nuseAsProxy\x12=\n\x1bproxy_request_path_template\x18\x0b\x20\x01(\
    \tR\x18proxyRequestPathTemplate\x12#\n\rhttps_support\x18\x0c\x20\x01(\t\
    R\x0chttpsSupport\x12&\n\x0fallowed_app_ids\x18\r\x20\x03(\rR\rallowedAp\
    pIds\x12)\n\x10preferred_server\x18\x0e\x20\x01(\x08R\x0fpreferredServer\
    \x12%\n\x0epriority_class\x18\x0f\x20\x01(\rR\rpriorityClass\"\x95\x01\n\
    7CContentServerDirectory_GetServersForSteamPipe_Response\x12=\n\x07serve\
    rs\x18\x01\x20\x03(\x0b2#.CContentServerDirectory_ServerInfoR\x07servers\
    \x12\x1b\n\tno_change\x18\x02\x20\x01(\x08R\x08noChange\"\xbd\x01\n1CCon\
    tentServerDirectory_GetDepotPatchInfo_Request\x12\x14\n\x05appid\x18\x01\
    \x20\x01(\rR\x05appid\x12\x18\n\x07depotid\x18\x02\x20\x01(\rR\x07depoti\
    d\x12+\n\x11source_manifestid\x18\x03\x20\x01(\x04R\x10sourceManifestid\
    \x12+\n\x11target_manifestid\x18\x04\x20\x01(\x04R\x10targetManifestid\"\
    \xa6\x01\n2CContentServerDirectory_GetDepotPatchInfo_Response\x12!\n\x0c\
    is_available\x18\x01\x20\x01(\x08R\x0bisAvailable\x12\x1d\n\npatch_size\
    \x18\x02\x20\x01(\x04R\tpatchSize\x12.\n\x13patched_chunks_size\x18\x03\
    \x20\x01(\x04R\x11patchedChunksSize\"a\n4CContentServerDirectory_GetClie\
    ntUpdateHosts_Request\x12)\n\x10cached_signature\x18\x01\x20\x01(\tR\x0f\
    cachedSignature\"\x9b\x01\n5CContentServerDirectory_GetClientUpdateHosts\
    _Response\x12\x19\n\x08hosts_kv\x18\x01\x20\x01(\tR\x07hostsKv\x12(\n\
    \x10valid_until_time\x18\x02\x20\x01(\x04R\x0evalidUntilTime\x12\x1d\n\n\
    ip_country\x18\x03\x20\x01(\tR\tipCountry\"\xdc\x01\n6CContentServerDire\
    ctory_GetManifestRequestCode_Request\x12\x15\n\x06app_id\x18\x01\x20\x01\
    (\rR\x05appId\x12\x19\n\x08depot_id\x18\x02\x20\x01(\rR\x07depotId\x12\
    \x1f\n\x0bmanifest_id\x18\x03\x20\x01(\x04R\nmanifestId\x12\x1d\n\napp_b\
    ranch\x18\x04\x20\x01(\tR\tappBranch\x120\n\x14branch_password_hash\x18\
    \x05\x20\x01(\tR\x12branchPasswordHash\"m\n7CContentServerDirectory_GetM\
    anifestRequestCode_Response\x122\n\x15manifest_request_code\x18\x01\x20\
    \x01(\x04R\x13manifestRequestCode\"\x80\x01\n/CContentServerDirectory_Ge\
    tCDNAuthToken_Request\x12\x19\n\x08depot_id\x18\x01\x20\x01(\rR\x07depot\
    Id\x12\x1b\n\thost_name\x18\x02\x20\x01(\tR\x08hostName\x12\x15\n\x06app\
    _id\x18\x03\x20\x01(\rR\x05appId\"q\n0CContentServerDirectory_GetCDNAuth\
    Token_Response\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12'\n\
    \x0fexpiration_time\x18\x02\x20\x01(\rR\x0eexpirationTime\"\xf6\x01\n8CC\
    ontentServerDirectory_RequestPeerContentServer_Request\x12(\n\x10remote_\
    client_id\x18\x01\x20\x01(\x04R\x0eremoteClientId\x12\x18\n\x07steamid\
    \x18\x02\x20\x01(\x04R\x07steamid\x125\n\x17server_remote_client_id\x18\
    \x03\x20\x01(\x04R\x14serverRemoteClientId\x12\x15\n\x06app_id\x18\x04\
    \x20\x01(\rR\x05appId\x12(\n\x10current_build_id\x18\x05\x20\x01(\rR\x0e\
    currentBuildId\"\xaa\x01\n9CContentServerDirectory_RequestPeerContentSer\
    ver_Response\x12\x1f\n\x0bserver_port\x18\x01\x20\x01(\rR\nserverPort\
    \x12)\n\x10installed_depots\x18\x02\x20\x03(\rR\x0finstalledDepots\x12!\
    \n\x0caccess_token\x18\x03\x20\x01(\x04R\x0baccessToken\"\xaf\x01\n2CCon\
    tentServerDirectory_GetPeerContentInfo_Request\x12(\n\x10remote_client_i\
    d\x18\x01\x20\x01(\x04R\x0eremoteClientId\x12\x18\n\x07steamid\x18\x02\
    \x20\x01(\x04R\x07steamid\x125\n\x17server_remote_client_id\x18\x03\x20\
    \x01(\x04R\x14serverRemoteClientId\"j\n3CContentServerDirectory_GetPeerC\
    ontentInfo_Response\x12\x16\n\x06appids\x18\x01\x20\x03(\rR\x06appids\
    \x12\x1b\n\tip_public\x18\x02\x20\x01(\tR\x08ipPublic2\xc7\x07\n\x16Cont\
    entServerDirectory\x12\x8b\x01\n\x16GetServersForSteamPipe\x127.CContent\
    ServerDirectory_GetServersForSteamPipe_Request\x1a8.CContentServerDirect\
    ory_GetServersForSteamPipe_Response\x12|\n\x11GetDepotPatchInfo\x122.CCo\
    ntentServerDirectory_GetDepotPatchInfo_Request\x1a3.CContentServerDirect\
    ory_GetDepotPatchInfo_Response\x12\x85\x01\n\x14GetClientUpdateHosts\x12\
    5.CContentServerDirectory_GetClientUpdateHosts_Request\x1a6.CContentServ\
    erDirectory_GetClientUpdateHosts_Response\x12\x8b\x01\n\x16GetManifestRe\
    questCode\x127.CContentServerDirectory_GetManifestRequestCode_Request\
    \x1a8.CContentServerDirectory_GetManifestRequestCode_Response\x12v\n\x0f\
    GetCDNAuthToken\x120.CContentServerDirectory_GetCDNAuthToken_Request\x1a\
    1.CContentServerDirectory_GetCDNAuthToken_Response\x12\x91\x01\n\x18Requ\
    estPeerContentServer\x129.CContentServerDirectory_RequestPeerContentServ\
    er_Request\x1a:.CContentServerDirectory_RequestPeerContentServer_Respons\
    e\x12\x7f\n\x12GetPeerContentInfo\x123.CContentServerDirectory_GetPeerCo\
    ntentInfo_Request\x1a4.CContentServerDirectory_GetPeerContentInfo_Respon\
    seB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(CContentServerDirectory_ConnectedSteamPipeServerInfo::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetServersForSteamPipe_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_ServerInfo::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetServersForSteamPipe_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetDepotPatchInfo_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetDepotPatchInfo_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetClientUpdateHosts_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetClientUpdateHosts_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetManifestRequestCode_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetManifestRequestCode_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetCDNAuthToken_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetCDNAuthToken_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_RequestPeerContentServer_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_RequestPeerContentServer_Response::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetPeerContentInfo_Request::generated_message_descriptor_data());
            messages.push(CContentServerDirectory_GetPeerContentInfo_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
