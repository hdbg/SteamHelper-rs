// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_workshop.steamclient.proto`

// @@protoc_insertion_point(message:CWorkshop_GetEULAStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetEULAStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_GetEULAStatus_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetEULAStatus_Request {
    fn default() -> &'a CWorkshop_GetEULAStatus_Request {
        <CWorkshop_GetEULAStatus_Request as crate::Message>::default_instance()
    }
}

impl CWorkshop_GetEULAStatus_Request {
    pub fn new() -> CWorkshop_GetEULAStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CWorkshop_GetEULAStatus_Request| { &m.appid },
            |m: &mut CWorkshop_GetEULAStatus_Request| { &mut m.appid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CWorkshop_GetEULAStatus_Request>(
            "CWorkshop_GetEULAStatus_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CWorkshop_GetEULAStatus_Request {
    const NAME: &'static str = "CWorkshop_GetEULAStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetEULAStatus_Request {
        CWorkshop_GetEULAStatus_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetEULAStatus_Request {
        static instance: CWorkshop_GetEULAStatus_Request = CWorkshop_GetEULAStatus_Request {
            appid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CWorkshop_GetEULAStatus_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CWorkshop_GetEULAStatus_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CWorkshop_GetEULAStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CWorkshop_GetEULAStatus_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CWorkshop_GetEULAStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetEULAStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.version)
    pub version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.timestamp_action)
    pub timestamp_action: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.accepted)
    pub accepted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.needs_action)
    pub needs_action: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_GetEULAStatus_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetEULAStatus_Response {
    fn default() -> &'a CWorkshop_GetEULAStatus_Response {
        <CWorkshop_GetEULAStatus_Response as crate::Message>::default_instance()
    }
}

impl CWorkshop_GetEULAStatus_Response {
    pub fn new() -> CWorkshop_GetEULAStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 timestamp_action = 2;

    pub fn timestamp_action(&self) -> u32 {
        self.timestamp_action.unwrap_or(0)
    }

    pub fn clear_timestamp_action(&mut self) {
        self.timestamp_action = ::std::option::Option::None;
    }

    pub fn has_timestamp_action(&self) -> bool {
        self.timestamp_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_action(&mut self, v: u32) {
        self.timestamp_action = ::std::option::Option::Some(v);
    }

    // optional bool accepted = 3;

    pub fn accepted(&self) -> bool {
        self.accepted.unwrap_or(false)
    }

    pub fn clear_accepted(&mut self) {
        self.accepted = ::std::option::Option::None;
    }

    pub fn has_accepted(&self) -> bool {
        self.accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accepted(&mut self, v: bool) {
        self.accepted = ::std::option::Option::Some(v);
    }

    // optional bool needs_action = 4;

    pub fn needs_action(&self) -> bool {
        self.needs_action.unwrap_or(false)
    }

    pub fn clear_needs_action(&mut self) {
        self.needs_action = ::std::option::Option::None;
    }

    pub fn has_needs_action(&self) -> bool {
        self.needs_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_needs_action(&mut self, v: bool) {
        self.needs_action = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CWorkshop_GetEULAStatus_Response| { &m.version },
            |m: &mut CWorkshop_GetEULAStatus_Response| { &mut m.version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp_action",
            |m: &CWorkshop_GetEULAStatus_Response| { &m.timestamp_action },
            |m: &mut CWorkshop_GetEULAStatus_Response| { &mut m.timestamp_action },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "accepted",
            |m: &CWorkshop_GetEULAStatus_Response| { &m.accepted },
            |m: &mut CWorkshop_GetEULAStatus_Response| { &mut m.accepted },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "needs_action",
            |m: &CWorkshop_GetEULAStatus_Response| { &m.needs_action },
            |m: &mut CWorkshop_GetEULAStatus_Response| { &mut m.needs_action },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CWorkshop_GetEULAStatus_Response>(
            "CWorkshop_GetEULAStatus_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CWorkshop_GetEULAStatus_Response {
    const NAME: &'static str = "CWorkshop_GetEULAStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.timestamp_action = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.accepted = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.needs_action = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.timestamp_action {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.accepted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.needs_action {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.timestamp_action {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.accepted {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.needs_action {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetEULAStatus_Response {
        CWorkshop_GetEULAStatus_Response::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.timestamp_action = ::std::option::Option::None;
        self.accepted = ::std::option::Option::None;
        self.needs_action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetEULAStatus_Response {
        static instance: CWorkshop_GetEULAStatus_Response = CWorkshop_GetEULAStatus_Response {
            version: ::std::option::Option::None,
            timestamp_action: ::std::option::Option::None,
            accepted: ::std::option::Option::None,
            needs_action: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CWorkshop_GetEULAStatus_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CWorkshop_GetEULAStatus_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CWorkshop_GetEULAStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CWorkshop_GetEULAStatus_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(steammessages_workshop.steamclient.proto\x1a\x18steammessages_base.pr\
    oto\x1a,steammessages_unified_base.steamclient.proto\"7\n\x1fCWorkshop_G\
    etEULAStatus_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"\
    \xa6\x01\n\x20CWorkshop_GetEULAStatus_Response\x12\x18\n\x07version\x18\
    \x01\x20\x01(\rR\x07version\x12)\n\x10timestamp_action\x18\x02\x20\x01(\
    \rR\x0ftimestampAction\x12\x1a\n\x08accepted\x18\x03\x20\x01(\x08R\x08ac\
    cepted\x12!\n\x0cneeds_action\x18\x04\x20\x01(\x08R\x0bneedsAction2`\n\
    \x08Workshop\x12T\n\rGetEULAStatus\x12\x20.CWorkshop_GetEULAStatus_Reque\
    st\x1a!.CWorkshop_GetEULAStatus_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CWorkshop_GetEULAStatus_Request::generated_message_descriptor_data());
            messages.push(CWorkshop_GetEULAStatus_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
