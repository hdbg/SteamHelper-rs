// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_parties.steamclient.proto`

// @@protoc_insertion_point(message:CParties_JoinParty_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_JoinParty_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_JoinParty_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_JoinParty_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_JoinParty_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Request {
    fn default() -> &'a CParties_JoinParty_Request {
        <CParties_JoinParty_Request as crate::Message>::default_instance()
    }
}

impl CParties_JoinParty_Request {
    pub fn new() -> CParties_JoinParty_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 beacon_id = 2;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CParties_JoinParty_Request| { &m.steamid },
            |m: &mut CParties_JoinParty_Request| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_JoinParty_Request| { &m.beacon_id },
            |m: &mut CParties_JoinParty_Request| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_JoinParty_Request>(
            "CParties_JoinParty_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_JoinParty_Request {
    const NAME: &'static str = "CParties_JoinParty_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.beacon_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_JoinParty_Request {
        CParties_JoinParty_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_JoinParty_Request {
        static instance: CParties_JoinParty_Request = CParties_JoinParty_Request {
            steamid: ::std::option::Option::None,
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_JoinParty_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_JoinParty_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_JoinParty_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_JoinParty_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_JoinParty_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_JoinParty_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_JoinParty_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_JoinParty_Response.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_JoinParty_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Response {
    fn default() -> &'a CParties_JoinParty_Response {
        <CParties_JoinParty_Response as crate::Message>::default_instance()
    }
}

impl CParties_JoinParty_Response {
    pub fn new() -> CParties_JoinParty_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 2;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_JoinParty_Response| { &m.beacon_id },
            |m: &mut CParties_JoinParty_Response| { &mut m.beacon_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "connect_string",
            |m: &CParties_JoinParty_Response| { &m.connect_string },
            |m: &mut CParties_JoinParty_Response| { &mut m.connect_string },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_JoinParty_Response>(
            "CParties_JoinParty_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_JoinParty_Response {
    const NAME: &'static str = "CParties_JoinParty_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.connect_string.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_JoinParty_Response {
        CParties_JoinParty_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.connect_string = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_JoinParty_Response {
        static instance: CParties_JoinParty_Response = CParties_JoinParty_Response {
            beacon_id: ::std::option::Option::None,
            connect_string: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_JoinParty_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_JoinParty_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_JoinParty_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_JoinParty_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_BeaconLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_BeaconLocation {
    // message fields
    // @@protoc_insertion_point(field:CParties_BeaconLocation.location_type)
    pub location_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_BeaconLocation.location_id)
    pub location_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_BeaconLocation.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_BeaconLocation {
    fn default() -> &'a CParties_BeaconLocation {
        <CParties_BeaconLocation as crate::Message>::default_instance()
    }
}

impl CParties_BeaconLocation {
    pub fn new() -> CParties_BeaconLocation {
        ::std::default::Default::default()
    }

    // optional uint32 location_type = 1;

    pub fn location_type(&self) -> u32 {
        self.location_type.unwrap_or(0)
    }

    pub fn clear_location_type(&mut self) {
        self.location_type = ::std::option::Option::None;
    }

    pub fn has_location_type(&self) -> bool {
        self.location_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_type(&mut self, v: u32) {
        self.location_type = ::std::option::Option::Some(v);
    }

    // optional uint64 location_id = 2;

    pub fn location_id(&self) -> u64 {
        self.location_id.unwrap_or(0)
    }

    pub fn clear_location_id(&mut self) {
        self.location_id = ::std::option::Option::None;
    }

    pub fn has_location_id(&self) -> bool {
        self.location_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_id(&mut self, v: u64) {
        self.location_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "location_type",
            |m: &CParties_BeaconLocation| { &m.location_type },
            |m: &mut CParties_BeaconLocation| { &mut m.location_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "location_id",
            |m: &CParties_BeaconLocation| { &m.location_id },
            |m: &mut CParties_BeaconLocation| { &mut m.location_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_BeaconLocation>(
            "CParties_BeaconLocation",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_BeaconLocation {
    const NAME: &'static str = "CParties_BeaconLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.location_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.location_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.location_type {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.location_id {
            my_size += crate::rt::uint64_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.location_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.location_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_BeaconLocation {
        CParties_BeaconLocation::new()
    }

    fn clear(&mut self) {
        self.location_type = ::std::option::Option::None;
        self.location_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_BeaconLocation {
        static instance: CParties_BeaconLocation = CParties_BeaconLocation {
            location_type: ::std::option::Option::None,
            location_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_BeaconLocation {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_BeaconLocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_BeaconLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_BeaconLocation {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CreateBeacon_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CreateBeacon_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.num_open_slots)
    pub num_open_slots: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.locations)
    pub locations: ::std::vec::Vec<CParties_BeaconLocation>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.metadata)
    pub metadata: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CreateBeacon_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Request {
    fn default() -> &'a CParties_CreateBeacon_Request {
        <CParties_CreateBeacon_Request as crate::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Request {
    pub fn new() -> CParties_CreateBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;

    pub fn num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }

    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }

    // repeated .CParties_BeaconLocation locations = 3;

    pub fn locations(&self) -> &[CParties_BeaconLocation] {
        &self.locations
    }

    pub fn clear_locations(&mut self) {
        self.locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_locations(&mut self, v: ::std::vec::Vec<CParties_BeaconLocation>) {
        self.locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_locations(&mut self) -> &mut ::std::vec::Vec<CParties_BeaconLocation> {
        &mut self.locations
    }

    // Take field
    pub fn take_locations(&mut self) -> ::std::vec::Vec<CParties_BeaconLocation> {
        ::std::mem::replace(&mut self.locations, ::std::vec::Vec::new())
    }

    // optional string connect_string = 4;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string metadata = 5;

    pub fn metadata(&self) -> &str {
        match self.metadata.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::string::String) {
        self.metadata = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::std::string::String {
        if self.metadata.is_none() {
            self.metadata = ::std::option::Option::Some(::std::string::String::new());
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::string::String {
        self.metadata.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CParties_CreateBeacon_Request| { &m.appid },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_open_slots",
            |m: &CParties_CreateBeacon_Request| { &m.num_open_slots },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.num_open_slots },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "locations",
            |m: &CParties_CreateBeacon_Request| { &m.locations },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.locations },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "connect_string",
            |m: &CParties_CreateBeacon_Request| { &m.connect_string },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.connect_string },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "metadata",
            |m: &CParties_CreateBeacon_Request| { &m.metadata },
            |m: &mut CParties_CreateBeacon_Request| { &mut m.metadata },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CreateBeacon_Request>(
            "CParties_CreateBeacon_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_CreateBeacon_Request {
    const NAME: &'static str = "CParties_CreateBeacon_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.num_open_slots = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.locations.push(is.read_message()?);
                },
                34 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.metadata = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.num_open_slots {
            my_size += crate::rt::uint32_size(2, v);
        }
        for value in &self.locations {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.connect_string.as_ref() {
            my_size += crate::rt::string_size(4, &v);
        }
        if let Some(v) = self.metadata.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        for v in &self.locations {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CreateBeacon_Request {
        CParties_CreateBeacon_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.locations.clear();
        self.connect_string = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Request {
        static instance: CParties_CreateBeacon_Request = CParties_CreateBeacon_Request {
            appid: ::std::option::Option::None,
            num_open_slots: ::std::option::Option::None,
            locations: ::std::vec::Vec::new(),
            connect_string: ::std::option::Option::None,
            metadata: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_CreateBeacon_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CreateBeacon_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CreateBeacon_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_CreateBeacon_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CreateBeacon_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CreateBeacon_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CreateBeacon_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Response {
    fn default() -> &'a CParties_CreateBeacon_Response {
        <CParties_CreateBeacon_Response as crate::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Response {
    pub fn new() -> CParties_CreateBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_CreateBeacon_Response| { &m.beacon_id },
            |m: &mut CParties_CreateBeacon_Response| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CreateBeacon_Response>(
            "CParties_CreateBeacon_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_CreateBeacon_Response {
    const NAME: &'static str = "CParties_CreateBeacon_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CreateBeacon_Response {
        CParties_CreateBeacon_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Response {
        static instance: CParties_CreateBeacon_Response = CParties_CreateBeacon_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_CreateBeacon_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CreateBeacon_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CreateBeacon_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_CreateBeacon_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_OnReservationCompleted_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_OnReservationCompleted_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Request.user_steamid)
    pub user_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_OnReservationCompleted_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Request {
    fn default() -> &'a CParties_OnReservationCompleted_Request {
        <CParties_OnReservationCompleted_Request as crate::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Request {
    pub fn new() -> CParties_OnReservationCompleted_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_OnReservationCompleted_Request| { &m.beacon_id },
            |m: &mut CParties_OnReservationCompleted_Request| { &mut m.beacon_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_steamid",
            |m: &CParties_OnReservationCompleted_Request| { &m.user_steamid },
            |m: &mut CParties_OnReservationCompleted_Request| { &mut m.user_steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_OnReservationCompleted_Request>(
            "CParties_OnReservationCompleted_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_OnReservationCompleted_Request {
    const NAME: &'static str = "CParties_OnReservationCompleted_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.user_steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_OnReservationCompleted_Request {
        CParties_OnReservationCompleted_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Request {
        static instance: CParties_OnReservationCompleted_Request = CParties_OnReservationCompleted_Request {
            beacon_id: ::std::option::Option::None,
            user_steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_OnReservationCompleted_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_OnReservationCompleted_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_OnReservationCompleted_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_OnReservationCompleted_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_OnReservationCompleted_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_OnReservationCompleted_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_OnReservationCompleted_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Response {
    fn default() -> &'a CParties_OnReservationCompleted_Response {
        <CParties_OnReservationCompleted_Response as crate::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Response {
    pub fn new() -> CParties_OnReservationCompleted_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_OnReservationCompleted_Response| { &m.beacon_id },
            |m: &mut CParties_OnReservationCompleted_Response| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_OnReservationCompleted_Response>(
            "CParties_OnReservationCompleted_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_OnReservationCompleted_Response {
    const NAME: &'static str = "CParties_OnReservationCompleted_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_OnReservationCompleted_Response {
        CParties_OnReservationCompleted_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Response {
        static instance: CParties_OnReservationCompleted_Response = CParties_OnReservationCompleted_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_OnReservationCompleted_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_OnReservationCompleted_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_OnReservationCompleted_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_OnReservationCompleted_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CancelReservation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CancelReservation_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_CancelReservation_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_CancelReservation_Request.user_steamid)
    pub user_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CancelReservation_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Request {
    fn default() -> &'a CParties_CancelReservation_Request {
        <CParties_CancelReservation_Request as crate::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Request {
    pub fn new() -> CParties_CancelReservation_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_CancelReservation_Request| { &m.beacon_id },
            |m: &mut CParties_CancelReservation_Request| { &mut m.beacon_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "user_steamid",
            |m: &CParties_CancelReservation_Request| { &m.user_steamid },
            |m: &mut CParties_CancelReservation_Request| { &mut m.user_steamid },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CancelReservation_Request>(
            "CParties_CancelReservation_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_CancelReservation_Request {
    const NAME: &'static str = "CParties_CancelReservation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.user_steamid {
            my_size += 1 + 8;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CancelReservation_Request {
        CParties_CancelReservation_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CancelReservation_Request {
        static instance: CParties_CancelReservation_Request = CParties_CancelReservation_Request {
            beacon_id: ::std::option::Option::None,
            user_steamid: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_CancelReservation_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CancelReservation_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CancelReservation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_CancelReservation_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_CancelReservation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CancelReservation_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_CancelReservation_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CancelReservation_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Response {
    fn default() -> &'a CParties_CancelReservation_Response {
        <CParties_CancelReservation_Response as crate::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Response {
    pub fn new() -> CParties_CancelReservation_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_CancelReservation_Response| { &m.beacon_id },
            |m: &mut CParties_CancelReservation_Response| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_CancelReservation_Response>(
            "CParties_CancelReservation_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_CancelReservation_Response {
    const NAME: &'static str = "CParties_CancelReservation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CancelReservation_Response {
        CParties_CancelReservation_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CancelReservation_Response {
        static instance: CParties_CancelReservation_Response = CParties_CancelReservation_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_CancelReservation_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_CancelReservation_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_CancelReservation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_CancelReservation_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_ChangeNumOpenSlots_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_ChangeNumOpenSlots_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Request.num_open_slots)
    pub num_open_slots: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_ChangeNumOpenSlots_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Request {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Request {
        <CParties_ChangeNumOpenSlots_Request as crate::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Request {
    pub fn new() -> CParties_ChangeNumOpenSlots_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;

    pub fn num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }

    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_ChangeNumOpenSlots_Request| { &m.beacon_id },
            |m: &mut CParties_ChangeNumOpenSlots_Request| { &mut m.beacon_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_open_slots",
            |m: &CParties_ChangeNumOpenSlots_Request| { &m.num_open_slots },
            |m: &mut CParties_ChangeNumOpenSlots_Request| { &mut m.num_open_slots },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_ChangeNumOpenSlots_Request>(
            "CParties_ChangeNumOpenSlots_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_ChangeNumOpenSlots_Request {
    const NAME: &'static str = "CParties_ChangeNumOpenSlots_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.num_open_slots = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.num_open_slots {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_ChangeNumOpenSlots_Request {
        CParties_ChangeNumOpenSlots_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Request {
        static instance: CParties_ChangeNumOpenSlots_Request = CParties_ChangeNumOpenSlots_Request {
            beacon_id: ::std::option::Option::None,
            num_open_slots: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_ChangeNumOpenSlots_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_ChangeNumOpenSlots_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_ChangeNumOpenSlots_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_ChangeNumOpenSlots_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_ChangeNumOpenSlots_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_ChangeNumOpenSlots_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_ChangeNumOpenSlots_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Response {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Response {
        <CParties_ChangeNumOpenSlots_Response as crate::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Response {
    pub fn new() -> CParties_ChangeNumOpenSlots_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_ChangeNumOpenSlots_Response| { &m.beacon_id },
            |m: &mut CParties_ChangeNumOpenSlots_Response| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_ChangeNumOpenSlots_Response>(
            "CParties_ChangeNumOpenSlots_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_ChangeNumOpenSlots_Response {
    const NAME: &'static str = "CParties_ChangeNumOpenSlots_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_ChangeNumOpenSlots_Response {
        CParties_ChangeNumOpenSlots_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Response {
        static instance: CParties_ChangeNumOpenSlots_Response = CParties_ChangeNumOpenSlots_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_ChangeNumOpenSlots_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_ChangeNumOpenSlots_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_ChangeNumOpenSlots_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_ChangeNumOpenSlots_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_DestroyBeacon_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_DestroyBeacon_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_DestroyBeacon_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_DestroyBeacon_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Request {
    fn default() -> &'a CParties_DestroyBeacon_Request {
        <CParties_DestroyBeacon_Request as crate::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Request {
    pub fn new() -> CParties_DestroyBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_DestroyBeacon_Request| { &m.beacon_id },
            |m: &mut CParties_DestroyBeacon_Request| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_DestroyBeacon_Request>(
            "CParties_DestroyBeacon_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_DestroyBeacon_Request {
    const NAME: &'static str = "CParties_DestroyBeacon_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_DestroyBeacon_Request {
        CParties_DestroyBeacon_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Request {
        static instance: CParties_DestroyBeacon_Request = CParties_DestroyBeacon_Request {
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_DestroyBeacon_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_DestroyBeacon_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_DestroyBeacon_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_DestroyBeacon_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CParties_DestroyBeacon_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_DestroyBeacon_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_DestroyBeacon_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_DestroyBeacon_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Response {
    fn default() -> &'a CParties_DestroyBeacon_Response {
        <CParties_DestroyBeacon_Response as crate::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Response {
    pub fn new() -> CParties_DestroyBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "beacon_id",
            |m: &CParties_DestroyBeacon_Response| { &m.beacon_id },
            |m: &mut CParties_DestroyBeacon_Response| { &mut m.beacon_id },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CParties_DestroyBeacon_Response>(
            "CParties_DestroyBeacon_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CParties_DestroyBeacon_Response {
    const NAME: &'static str = "CParties_DestroyBeacon_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += crate::rt::uint64_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_DestroyBeacon_Response {
        CParties_DestroyBeacon_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Response {
        static instance: CParties_DestroyBeacon_Response = CParties_DestroyBeacon_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CParties_DestroyBeacon_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CParties_DestroyBeacon_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CParties_DestroyBeacon_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CParties_DestroyBeacon_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_parties.steamclient.proto\x1a\x18steammessages_base.pro\
    to\x1a,steammessages_unified_base.steamclient.proto\"S\n\x1aCParties_Joi\
    nParty_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\
    \x1b\n\tbeacon_id\x18\x02\x20\x01(\x04R\x08beaconId\"a\n\x1bCParties_Joi\
    nParty_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\
    \x12%\n\x0econnect_string\x18\x02\x20\x01(\tR\rconnectString\"_\n\x17CPa\
    rties_BeaconLocation\x12#\n\rlocation_type\x18\x01\x20\x01(\rR\x0clocati\
    onType\x12\x1f\n\x0blocation_id\x18\x02\x20\x01(\x04R\nlocationId\"\xd6\
    \x01\n\x1dCParties_CreateBeacon_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12$\n\x0enum_open_slots\x18\x02\x20\x01(\rR\x0cnumOpe\
    nSlots\x126\n\tlocations\x18\x03\x20\x03(\x0b2\x18.CParties_BeaconLocati\
    onR\tlocations\x12%\n\x0econnect_string\x18\x04\x20\x01(\tR\rconnectStri\
    ng\x12\x1a\n\x08metadata\x18\x05\x20\x01(\tR\x08metadata\"=\n\x1eCPartie\
    s_CreateBeacon_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08be\
    aconId\"i\n'CParties_OnReservationCompleted_Request\x12\x1b\n\tbeacon_id\
    \x18\x01\x20\x01(\x04R\x08beaconId\x12!\n\x0cuser_steamid\x18\x02\x20\
    \x01(\x06R\x0buserSteamid\"G\n(CParties_OnReservationCompleted_Response\
    \x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\"d\n\"CParties_C\
    ancelReservation_Request\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08b\
    eaconId\x12!\n\x0cuser_steamid\x18\x02\x20\x01(\x06R\x0buserSteamid\"B\n\
    #CParties_CancelReservation_Response\x12\x1b\n\tbeacon_id\x18\x01\x20\
    \x01(\x04R\x08beaconId\"h\n#CParties_ChangeNumOpenSlots_Request\x12\x1b\
    \n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\x12$\n\x0enum_open_slots\
    \x18\x02\x20\x01(\rR\x0cnumOpenSlots\"C\n$CParties_ChangeNumOpenSlots_Re\
    sponse\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\x08beaconId\"=\n\x1eCP\
    arties_DestroyBeacon_Request\x12\x1b\n\tbeacon_id\x18\x01\x20\x01(\x04R\
    \x08beaconId\">\n\x1fCParties_DestroyBeacon_Response\x12\x1b\n\tbeacon_i\
    d\x18\x01\x20\x01(\x04R\x08beaconId2\xa8\x04\n\x07Parties\x12F\n\tJoinPa\
    rty\x12\x1b.CParties_JoinParty_Request\x1a\x1c.CParties_JoinParty_Respon\
    se\x12O\n\x0cCreateBeacon\x12\x1e.CParties_CreateBeacon_Request\x1a\x1f.\
    CParties_CreateBeacon_Response\x12m\n\x16OnReservationCompleted\x12(.CPa\
    rties_OnReservationCompleted_Request\x1a).CParties_OnReservationComplete\
    d_Response\x12^\n\x11CancelReservation\x12#.CParties_CancelReservation_R\
    equest\x1a$.CParties_CancelReservation_Response\x12a\n\x12ChangeNumOpenS\
    lots\x12$.CParties_ChangeNumOpenSlots_Request\x1a%.CParties_ChangeNumOpe\
    nSlots_Response\x12R\n\rDestroyBeacon\x12\x1f.CParties_DestroyBeacon_Req\
    uest\x1a\x20.CParties_DestroyBeacon_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(13);
            messages.push(CParties_JoinParty_Request::generated_message_descriptor_data());
            messages.push(CParties_JoinParty_Response::generated_message_descriptor_data());
            messages.push(CParties_BeaconLocation::generated_message_descriptor_data());
            messages.push(CParties_CreateBeacon_Request::generated_message_descriptor_data());
            messages.push(CParties_CreateBeacon_Response::generated_message_descriptor_data());
            messages.push(CParties_OnReservationCompleted_Request::generated_message_descriptor_data());
            messages.push(CParties_OnReservationCompleted_Response::generated_message_descriptor_data());
            messages.push(CParties_CancelReservation_Request::generated_message_descriptor_data());
            messages.push(CParties_CancelReservation_Response::generated_message_descriptor_data());
            messages.push(CParties_ChangeNumOpenSlots_Request::generated_message_descriptor_data());
            messages.push(CParties_ChangeNumOpenSlots_Response::generated_message_descriptor_data());
            messages.push(CParties_DestroyBeacon_Request::generated_message_descriptor_data());
            messages.push(CParties_DestroyBeacon_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
