// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_unified_test.steamclient.proto`

// @@protoc_insertion_point(message:CMsgTest_MessageToClient_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToClient_Request {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToClient_Request.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToClient_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToClient_Request {
    fn default() -> &'a CMsgTest_MessageToClient_Request {
        <CMsgTest_MessageToClient_Request as crate::Message>::default_instance()
    }
}

impl CMsgTest_MessageToClient_Request {
    pub fn new() -> CMsgTest_MessageToClient_Request {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "some_text",
            |m: &CMsgTest_MessageToClient_Request| { &m.some_text },
            |m: &mut CMsgTest_MessageToClient_Request| { &mut m.some_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_MessageToClient_Request>(
            "CMsgTest_MessageToClient_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_MessageToClient_Request {
    const NAME: &'static str = "CMsgTest_MessageToClient_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToClient_Request {
        CMsgTest_MessageToClient_Request::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToClient_Request {
        static instance: CMsgTest_MessageToClient_Request = CMsgTest_MessageToClient_Request {
            some_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_MessageToClient_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_MessageToClient_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_MessageToClient_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_MessageToClient_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_MessageToClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToClient_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToClient_Response.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToClient_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToClient_Response {
    fn default() -> &'a CMsgTest_MessageToClient_Response {
        <CMsgTest_MessageToClient_Response as crate::Message>::default_instance()
    }
}

impl CMsgTest_MessageToClient_Response {
    pub fn new() -> CMsgTest_MessageToClient_Response {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "some_text",
            |m: &CMsgTest_MessageToClient_Response| { &m.some_text },
            |m: &mut CMsgTest_MessageToClient_Response| { &mut m.some_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_MessageToClient_Response>(
            "CMsgTest_MessageToClient_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_MessageToClient_Response {
    const NAME: &'static str = "CMsgTest_MessageToClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToClient_Response {
        CMsgTest_MessageToClient_Response::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToClient_Response {
        static instance: CMsgTest_MessageToClient_Response = CMsgTest_MessageToClient_Response {
            some_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_MessageToClient_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_MessageToClient_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_MessageToClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_MessageToClient_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_NotifyClient_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_NotifyClient_Notification {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_NotifyClient_Notification.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_NotifyClient_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NotifyClient_Notification {
    fn default() -> &'a CMsgTest_NotifyClient_Notification {
        <CMsgTest_NotifyClient_Notification as crate::Message>::default_instance()
    }
}

impl CMsgTest_NotifyClient_Notification {
    pub fn new() -> CMsgTest_NotifyClient_Notification {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "some_text",
            |m: &CMsgTest_NotifyClient_Notification| { &m.some_text },
            |m: &mut CMsgTest_NotifyClient_Notification| { &mut m.some_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_NotifyClient_Notification>(
            "CMsgTest_NotifyClient_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_NotifyClient_Notification {
    const NAME: &'static str = "CMsgTest_NotifyClient_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_NotifyClient_Notification {
        CMsgTest_NotifyClient_Notification::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_NotifyClient_Notification {
        static instance: CMsgTest_NotifyClient_Notification = CMsgTest_NotifyClient_Notification {
            some_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_NotifyClient_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_NotifyClient_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_NotifyClient_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_NotifyClient_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_MessageToServer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToServer_Request {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToServer_Request.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToServer_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToServer_Request {
    fn default() -> &'a CMsgTest_MessageToServer_Request {
        <CMsgTest_MessageToServer_Request as crate::Message>::default_instance()
    }
}

impl CMsgTest_MessageToServer_Request {
    pub fn new() -> CMsgTest_MessageToServer_Request {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "some_text",
            |m: &CMsgTest_MessageToServer_Request| { &m.some_text },
            |m: &mut CMsgTest_MessageToServer_Request| { &mut m.some_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_MessageToServer_Request>(
            "CMsgTest_MessageToServer_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_MessageToServer_Request {
    const NAME: &'static str = "CMsgTest_MessageToServer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToServer_Request {
        CMsgTest_MessageToServer_Request::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToServer_Request {
        static instance: CMsgTest_MessageToServer_Request = CMsgTest_MessageToServer_Request {
            some_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_MessageToServer_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_MessageToServer_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_MessageToServer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_MessageToServer_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_MessageToServer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToServer_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToServer_Response.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToServer_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToServer_Response {
    fn default() -> &'a CMsgTest_MessageToServer_Response {
        <CMsgTest_MessageToServer_Response as crate::Message>::default_instance()
    }
}

impl CMsgTest_MessageToServer_Response {
    pub fn new() -> CMsgTest_MessageToServer_Response {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "some_text",
            |m: &CMsgTest_MessageToServer_Response| { &m.some_text },
            |m: &mut CMsgTest_MessageToServer_Response| { &mut m.some_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_MessageToServer_Response>(
            "CMsgTest_MessageToServer_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_MessageToServer_Response {
    const NAME: &'static str = "CMsgTest_MessageToServer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToServer_Response {
        CMsgTest_MessageToServer_Response::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToServer_Response {
        static instance: CMsgTest_MessageToServer_Response = CMsgTest_MessageToServer_Response {
            some_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_MessageToServer_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_MessageToServer_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_MessageToServer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_MessageToServer_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_NotifyServer_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_NotifyServer_Notification {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_NotifyServer_Notification.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_NotifyServer_Notification.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NotifyServer_Notification {
    fn default() -> &'a CMsgTest_NotifyServer_Notification {
        <CMsgTest_NotifyServer_Notification as crate::Message>::default_instance()
    }
}

impl CMsgTest_NotifyServer_Notification {
    pub fn new() -> CMsgTest_NotifyServer_Notification {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "some_text",
            |m: &CMsgTest_NotifyServer_Notification| { &m.some_text },
            |m: &mut CMsgTest_NotifyServer_Notification| { &mut m.some_text },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_NotifyServer_Notification>(
            "CMsgTest_NotifyServer_Notification",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_NotifyServer_Notification {
    const NAME: &'static str = "CMsgTest_NotifyServer_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_NotifyServer_Notification {
        CMsgTest_NotifyServer_Notification::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_NotifyServer_Notification {
        static instance: CMsgTest_NotifyServer_Notification = CMsgTest_NotifyServer_Notification {
            some_text: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_NotifyServer_Notification {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_NotifyServer_Notification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_NotifyServer_Notification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_NotifyServer_Notification {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_NoBody_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_NoBody_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_NoBody_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NoBody_Request {
    fn default() -> &'a CMsgTest_NoBody_Request {
        <CMsgTest_NoBody_Request as crate::Message>::default_instance()
    }
}

impl CMsgTest_NoBody_Request {
    pub fn new() -> CMsgTest_NoBody_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_NoBody_Request>(
            "CMsgTest_NoBody_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_NoBody_Request {
    const NAME: &'static str = "CMsgTest_NoBody_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_NoBody_Request {
        CMsgTest_NoBody_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_NoBody_Request {
        static instance: CMsgTest_NoBody_Request = CMsgTest_NoBody_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_NoBody_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_NoBody_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_NoBody_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_NoBody_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgTest_CallClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_CallClient_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_CallClient_Response.testvalue)
    pub testvalue: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_CallClient_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_CallClient_Response {
    fn default() -> &'a CMsgTest_CallClient_Response {
        <CMsgTest_CallClient_Response as crate::Message>::default_instance()
    }
}

impl CMsgTest_CallClient_Response {
    pub fn new() -> CMsgTest_CallClient_Response {
        ::std::default::Default::default()
    }

    // optional int32 testvalue = 1;

    pub fn testvalue(&self) -> i32 {
        self.testvalue.unwrap_or(0)
    }

    pub fn clear_testvalue(&mut self) {
        self.testvalue = ::std::option::Option::None;
    }

    pub fn has_testvalue(&self) -> bool {
        self.testvalue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_testvalue(&mut self, v: i32) {
        self.testvalue = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "testvalue",
            |m: &CMsgTest_CallClient_Response| { &m.testvalue },
            |m: &mut CMsgTest_CallClient_Response| { &mut m.testvalue },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgTest_CallClient_Response>(
            "CMsgTest_CallClient_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgTest_CallClient_Response {
    const NAME: &'static str = "CMsgTest_CallClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.testvalue = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.testvalue {
            my_size += crate::rt::int32_size(1, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.testvalue {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_CallClient_Response {
        CMsgTest_CallClient_Response::new()
    }

    fn clear(&mut self) {
        self.testvalue = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_CallClient_Response {
        static instance: CMsgTest_CallClient_Response = CMsgTest_CallClient_Response {
            testvalue: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgTest_CallClient_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgTest_CallClient_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgTest_CallClient_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgTest_CallClient_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,steammessages_unified_test.steamclient.proto\x1a\x18steammessages_bas\
    e.proto\x1a,steammessages_unified_base.steamclient.proto\"?\n\x20CMsgTes\
    t_MessageToClient_Request\x12\x1b\n\tsome_text\x18\x01\x20\x01(\tR\x08so\
    meText\"@\n!CMsgTest_MessageToClient_Response\x12\x1b\n\tsome_text\x18\
    \x01\x20\x01(\tR\x08someText\"A\n\"CMsgTest_NotifyClient_Notification\
    \x12\x1b\n\tsome_text\x18\x01\x20\x01(\tR\x08someText\"?\n\x20CMsgTest_M\
    essageToServer_Request\x12\x1b\n\tsome_text\x18\x01\x20\x01(\tR\x08someT\
    ext\"@\n!CMsgTest_MessageToServer_Response\x12\x1b\n\tsome_text\x18\x01\
    \x20\x01(\tR\x08someText\"A\n\"CMsgTest_NotifyServer_Notification\x12\
    \x1b\n\tsome_text\x18\x01\x20\x01(\tR\x08someText\"\x19\n\x17CMsgTest_No\
    Body_Request\"<\n\x1cCMsgTest_CallClient_Response\x12\x1c\n\ttestvalue\
    \x18\x01\x20\x01(\x05R\ttestvalue2\xb3\x01\n\x0fTestSteamClient\x12X\n\
    \x0fMessageToClient\x12!.CMsgTest_MessageToClient_Request\x1a\".CMsgTest\
    _MessageToClient_Response\x12@\n\x0cNotifyClient\x12#.CMsgTest_NotifyCli\
    ent_Notification\x1a\x0b.NoResponse\x1a\x04\xc0\xb5\x18\x022\xb2\x01\n\
    \x14TestServerFromClient\x12X\n\x0fMessageToServer\x12!.CMsgTest_Message\
    ToServer_Request\x1a\".CMsgTest_MessageToServer_Response\x12@\n\x0cNotif\
    yServer\x12#.CMsgTest_NotifyServer_Notification\x1a\x0b.NoResponse2^\n\
    \x15TestExternalPrivilege\x12E\n\nCallClient\x12\x18.CMsgTest_NoBody_Req\
    uest\x1a\x1d.CMsgTest_CallClient_ResponseB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(CMsgTest_MessageToClient_Request::generated_message_descriptor_data());
            messages.push(CMsgTest_MessageToClient_Response::generated_message_descriptor_data());
            messages.push(CMsgTest_NotifyClient_Notification::generated_message_descriptor_data());
            messages.push(CMsgTest_MessageToServer_Request::generated_message_descriptor_data());
            messages.push(CMsgTest_MessageToServer_Response::generated_message_descriptor_data());
            messages.push(CMsgTest_NotifyServer_Notification::generated_message_descriptor_data());
            messages.push(CMsgTest_NoBody_Request::generated_message_descriptor_data());
            messages.push(CMsgTest_CallClient_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
