// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_appoverview.proto`

// @@protoc_insertion_point(message:CAppOverview_AppAssociation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAppOverview_AppAssociation {
    // message fields
    // @@protoc_insertion_point(field:CAppOverview_AppAssociation.type)
    pub type_: ::std::option::Option<crate::EnumOrUnknown<EAppAssociationType>>,
    // @@protoc_insertion_point(field:CAppOverview_AppAssociation.name)
    pub name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAppOverview_AppAssociation.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAppOverview_AppAssociation {
    fn default() -> &'a CAppOverview_AppAssociation {
        <CAppOverview_AppAssociation as crate::Message>::default_instance()
    }
}

impl CAppOverview_AppAssociation {
    pub fn new() -> CAppOverview_AppAssociation {
        ::std::default::Default::default()
    }

    // optional .EAppAssociationType type = 1;

    pub fn type_(&self) -> EAppAssociationType {
        match self.type_ {
            Some(e) => e.enum_value_or(EAppAssociationType::k_EAppAssociationTypeInvalid),
            None => EAppAssociationType::k_EAppAssociationTypeInvalid,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: EAppAssociationType) {
        self.type_ = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CAppOverview_AppAssociation| { &m.type_ },
            |m: &mut CAppOverview_AppAssociation| { &mut m.type_ },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &CAppOverview_AppAssociation| { &m.name },
            |m: &mut CAppOverview_AppAssociation| { &mut m.name },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAppOverview_AppAssociation>(
            "CAppOverview_AppAssociation",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAppOverview_AppAssociation {
    const NAME: &'static str = "CAppOverview_AppAssociation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += crate::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAppOverview_AppAssociation {
        CAppOverview_AppAssociation::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAppOverview_AppAssociation {
        static instance: CAppOverview_AppAssociation = CAppOverview_AppAssociation {
            type_: ::std::option::Option::None,
            name: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAppOverview_AppAssociation {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAppOverview_AppAssociation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAppOverview_AppAssociation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAppOverview_AppAssociation {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAppOverview_PerClientData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAppOverview_PerClientData {
    // message fields
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.clientid)
    pub clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.client_name)
    pub client_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.display_status)
    pub display_status: ::std::option::Option<crate::EnumOrUnknown<EDisplayStatus>>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.status_percentage)
    pub status_percentage: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.active_beta)
    pub active_beta: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.installed)
    pub installed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.bytes_downloaded)
    pub bytes_downloaded: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.bytes_total)
    pub bytes_total: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.streaming_to_local_client)
    pub streaming_to_local_client: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.is_available_on_current_platform)
    pub is_available_on_current_platform: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.is_invalid_os_type)
    pub is_invalid_os_type: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.playtime_left)
    pub playtime_left: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.cloud_status)
    pub cloud_status: ::std::option::Option<crate::EnumOrUnknown<EAppCloudStatus>>,
    // @@protoc_insertion_point(field:CAppOverview_PerClientData.update_available_but_disabled_by_app)
    pub update_available_but_disabled_by_app: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAppOverview_PerClientData.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAppOverview_PerClientData {
    fn default() -> &'a CAppOverview_PerClientData {
        <CAppOverview_PerClientData as crate::Message>::default_instance()
    }
}

impl CAppOverview_PerClientData {
    pub fn new() -> CAppOverview_PerClientData {
        ::std::default::Default::default()
    }

    // optional uint64 clientid = 1;

    pub fn clientid(&self) -> u64 {
        self.clientid.unwrap_or(0)
    }

    pub fn clear_clientid(&mut self) {
        self.clientid = ::std::option::Option::None;
    }

    pub fn has_clientid(&self) -> bool {
        self.clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientid(&mut self, v: u64) {
        self.clientid = ::std::option::Option::Some(v);
    }

    // optional string client_name = 2;

    pub fn client_name(&self) -> &str {
        match self.client_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_client_name(&mut self) {
        self.client_name = ::std::option::Option::None;
    }

    pub fn has_client_name(&self) -> bool {
        self.client_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_name(&mut self, v: ::std::string::String) {
        self.client_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_name(&mut self) -> &mut ::std::string::String {
        if self.client_name.is_none() {
            self.client_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.client_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_name(&mut self) -> ::std::string::String {
        self.client_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EDisplayStatus display_status = 3;

    pub fn display_status(&self) -> EDisplayStatus {
        match self.display_status {
            Some(e) => e.enum_value_or(EDisplayStatus::k_EDisplayStatusInvalid),
            None => EDisplayStatus::k_EDisplayStatusInvalid,
        }
    }

    pub fn clear_display_status(&mut self) {
        self.display_status = ::std::option::Option::None;
    }

    pub fn has_display_status(&self) -> bool {
        self.display_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_display_status(&mut self, v: EDisplayStatus) {
        self.display_status = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint32 status_percentage = 4;

    pub fn status_percentage(&self) -> u32 {
        self.status_percentage.unwrap_or(0u32)
    }

    pub fn clear_status_percentage(&mut self) {
        self.status_percentage = ::std::option::Option::None;
    }

    pub fn has_status_percentage(&self) -> bool {
        self.status_percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_percentage(&mut self, v: u32) {
        self.status_percentage = ::std::option::Option::Some(v);
    }

    // optional string active_beta = 5;

    pub fn active_beta(&self) -> &str {
        match self.active_beta.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_active_beta(&mut self) {
        self.active_beta = ::std::option::Option::None;
    }

    pub fn has_active_beta(&self) -> bool {
        self.active_beta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_beta(&mut self, v: ::std::string::String) {
        self.active_beta = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_active_beta(&mut self) -> &mut ::std::string::String {
        if self.active_beta.is_none() {
            self.active_beta = ::std::option::Option::Some(::std::string::String::new());
        }
        self.active_beta.as_mut().unwrap()
    }

    // Take field
    pub fn take_active_beta(&mut self) -> ::std::string::String {
        self.active_beta.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool installed = 6;

    pub fn installed(&self) -> bool {
        self.installed.unwrap_or(false)
    }

    pub fn clear_installed(&mut self) {
        self.installed = ::std::option::Option::None;
    }

    pub fn has_installed(&self) -> bool {
        self.installed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_installed(&mut self, v: bool) {
        self.installed = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_downloaded = 7;

    pub fn bytes_downloaded(&self) -> u64 {
        self.bytes_downloaded.unwrap_or(0u64)
    }

    pub fn clear_bytes_downloaded(&mut self) {
        self.bytes_downloaded = ::std::option::Option::None;
    }

    pub fn has_bytes_downloaded(&self) -> bool {
        self.bytes_downloaded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_downloaded(&mut self, v: u64) {
        self.bytes_downloaded = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_total = 8;

    pub fn bytes_total(&self) -> u64 {
        self.bytes_total.unwrap_or(0u64)
    }

    pub fn clear_bytes_total(&mut self) {
        self.bytes_total = ::std::option::Option::None;
    }

    pub fn has_bytes_total(&self) -> bool {
        self.bytes_total.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_total(&mut self, v: u64) {
        self.bytes_total = ::std::option::Option::Some(v);
    }

    // optional bool streaming_to_local_client = 9;

    pub fn streaming_to_local_client(&self) -> bool {
        self.streaming_to_local_client.unwrap_or(false)
    }

    pub fn clear_streaming_to_local_client(&mut self) {
        self.streaming_to_local_client = ::std::option::Option::None;
    }

    pub fn has_streaming_to_local_client(&self) -> bool {
        self.streaming_to_local_client.is_some()
    }

    // Param is passed by value, moved
    pub fn set_streaming_to_local_client(&mut self, v: bool) {
        self.streaming_to_local_client = ::std::option::Option::Some(v);
    }

    // optional bool is_available_on_current_platform = 10;

    pub fn is_available_on_current_platform(&self) -> bool {
        self.is_available_on_current_platform.unwrap_or(false)
    }

    pub fn clear_is_available_on_current_platform(&mut self) {
        self.is_available_on_current_platform = ::std::option::Option::None;
    }

    pub fn has_is_available_on_current_platform(&self) -> bool {
        self.is_available_on_current_platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_available_on_current_platform(&mut self, v: bool) {
        self.is_available_on_current_platform = ::std::option::Option::Some(v);
    }

    // optional bool is_invalid_os_type = 11;

    pub fn is_invalid_os_type(&self) -> bool {
        self.is_invalid_os_type.unwrap_or(false)
    }

    pub fn clear_is_invalid_os_type(&mut self) {
        self.is_invalid_os_type = ::std::option::Option::None;
    }

    pub fn has_is_invalid_os_type(&self) -> bool {
        self.is_invalid_os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_invalid_os_type(&mut self, v: bool) {
        self.is_invalid_os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 playtime_left = 12;

    pub fn playtime_left(&self) -> u32 {
        self.playtime_left.unwrap_or(0)
    }

    pub fn clear_playtime_left(&mut self) {
        self.playtime_left = ::std::option::Option::None;
    }

    pub fn has_playtime_left(&self) -> bool {
        self.playtime_left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_playtime_left(&mut self, v: u32) {
        self.playtime_left = ::std::option::Option::Some(v);
    }

    // optional .EAppCloudStatus cloud_status = 13;

    pub fn cloud_status(&self) -> EAppCloudStatus {
        match self.cloud_status {
            Some(e) => e.enum_value_or(EAppCloudStatus::k_EAppCloudStatusInvalid),
            None => EAppCloudStatus::k_EAppCloudStatusInvalid,
        }
    }

    pub fn clear_cloud_status(&mut self) {
        self.cloud_status = ::std::option::Option::None;
    }

    pub fn has_cloud_status(&self) -> bool {
        self.cloud_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cloud_status(&mut self, v: EAppCloudStatus) {
        self.cloud_status = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool update_available_but_disabled_by_app = 14;

    pub fn update_available_but_disabled_by_app(&self) -> bool {
        self.update_available_but_disabled_by_app.unwrap_or(false)
    }

    pub fn clear_update_available_but_disabled_by_app(&mut self) {
        self.update_available_but_disabled_by_app = ::std::option::Option::None;
    }

    pub fn has_update_available_but_disabled_by_app(&self) -> bool {
        self.update_available_but_disabled_by_app.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_available_but_disabled_by_app(&mut self, v: bool) {
        self.update_available_but_disabled_by_app = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "clientid",
            |m: &CAppOverview_PerClientData| { &m.clientid },
            |m: &mut CAppOverview_PerClientData| { &mut m.clientid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_name",
            |m: &CAppOverview_PerClientData| { &m.client_name },
            |m: &mut CAppOverview_PerClientData| { &mut m.client_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "display_status",
            |m: &CAppOverview_PerClientData| { &m.display_status },
            |m: &mut CAppOverview_PerClientData| { &mut m.display_status },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_percentage",
            |m: &CAppOverview_PerClientData| { &m.status_percentage },
            |m: &mut CAppOverview_PerClientData| { &mut m.status_percentage },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "active_beta",
            |m: &CAppOverview_PerClientData| { &m.active_beta },
            |m: &mut CAppOverview_PerClientData| { &mut m.active_beta },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "installed",
            |m: &CAppOverview_PerClientData| { &m.installed },
            |m: &mut CAppOverview_PerClientData| { &mut m.installed },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes_downloaded",
            |m: &CAppOverview_PerClientData| { &m.bytes_downloaded },
            |m: &mut CAppOverview_PerClientData| { &mut m.bytes_downloaded },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes_total",
            |m: &CAppOverview_PerClientData| { &m.bytes_total },
            |m: &mut CAppOverview_PerClientData| { &mut m.bytes_total },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "streaming_to_local_client",
            |m: &CAppOverview_PerClientData| { &m.streaming_to_local_client },
            |m: &mut CAppOverview_PerClientData| { &mut m.streaming_to_local_client },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_available_on_current_platform",
            |m: &CAppOverview_PerClientData| { &m.is_available_on_current_platform },
            |m: &mut CAppOverview_PerClientData| { &mut m.is_available_on_current_platform },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_invalid_os_type",
            |m: &CAppOverview_PerClientData| { &m.is_invalid_os_type },
            |m: &mut CAppOverview_PerClientData| { &mut m.is_invalid_os_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "playtime_left",
            |m: &CAppOverview_PerClientData| { &m.playtime_left },
            |m: &mut CAppOverview_PerClientData| { &mut m.playtime_left },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "cloud_status",
            |m: &CAppOverview_PerClientData| { &m.cloud_status },
            |m: &mut CAppOverview_PerClientData| { &mut m.cloud_status },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "update_available_but_disabled_by_app",
            |m: &CAppOverview_PerClientData| { &m.update_available_but_disabled_by_app },
            |m: &mut CAppOverview_PerClientData| { &mut m.update_available_but_disabled_by_app },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAppOverview_PerClientData>(
            "CAppOverview_PerClientData",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAppOverview_PerClientData {
    const NAME: &'static str = "CAppOverview_PerClientData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.clientid = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.client_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.display_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.status_percentage = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.active_beta = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.installed = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.bytes_downloaded = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.bytes_total = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.streaming_to_local_client = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.is_available_on_current_platform = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.is_invalid_os_type = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.playtime_left = ::std::option::Option::Some(is.read_uint32()?);
                },
                104 => {
                    self.cloud_status = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                112 => {
                    self.update_available_but_disabled_by_app = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clientid {
            my_size += crate::rt::uint64_size(1, v);
        }
        if let Some(v) = self.client_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.display_status {
            my_size += crate::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.status_percentage {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.active_beta.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.installed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.bytes_downloaded {
            my_size += crate::rt::uint64_size(7, v);
        }
        if let Some(v) = self.bytes_total {
            my_size += crate::rt::uint64_size(8, v);
        }
        if let Some(v) = self.streaming_to_local_client {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_available_on_current_platform {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_invalid_os_type {
            my_size += 1 + 1;
        }
        if let Some(v) = self.playtime_left {
            my_size += crate::rt::uint32_size(12, v);
        }
        if let Some(v) = self.cloud_status {
            my_size += crate::rt::int32_size(13, v.value());
        }
        if let Some(v) = self.update_available_but_disabled_by_app {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.clientid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.client_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.display_status {
            os.write_enum(3, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.status_percentage {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.active_beta.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.installed {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.bytes_downloaded {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.bytes_total {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.streaming_to_local_client {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.is_available_on_current_platform {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.is_invalid_os_type {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.playtime_left {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.cloud_status {
            os.write_enum(13, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.update_available_but_disabled_by_app {
            os.write_bool(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAppOverview_PerClientData {
        CAppOverview_PerClientData::new()
    }

    fn clear(&mut self) {
        self.clientid = ::std::option::Option::None;
        self.client_name = ::std::option::Option::None;
        self.display_status = ::std::option::Option::None;
        self.status_percentage = ::std::option::Option::None;
        self.active_beta = ::std::option::Option::None;
        self.installed = ::std::option::Option::None;
        self.bytes_downloaded = ::std::option::Option::None;
        self.bytes_total = ::std::option::Option::None;
        self.streaming_to_local_client = ::std::option::Option::None;
        self.is_available_on_current_platform = ::std::option::Option::None;
        self.is_invalid_os_type = ::std::option::Option::None;
        self.playtime_left = ::std::option::Option::None;
        self.cloud_status = ::std::option::Option::None;
        self.update_available_but_disabled_by_app = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAppOverview_PerClientData {
        static instance: CAppOverview_PerClientData = CAppOverview_PerClientData {
            clientid: ::std::option::Option::None,
            client_name: ::std::option::Option::None,
            display_status: ::std::option::Option::None,
            status_percentage: ::std::option::Option::None,
            active_beta: ::std::option::Option::None,
            installed: ::std::option::Option::None,
            bytes_downloaded: ::std::option::Option::None,
            bytes_total: ::std::option::Option::None,
            streaming_to_local_client: ::std::option::Option::None,
            is_available_on_current_platform: ::std::option::Option::None,
            is_invalid_os_type: ::std::option::Option::None,
            playtime_left: ::std::option::Option::None,
            cloud_status: ::std::option::Option::None,
            update_available_but_disabled_by_app: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAppOverview_PerClientData {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAppOverview_PerClientData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAppOverview_PerClientData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAppOverview_PerClientData {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAppOverview)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAppOverview {
    // message fields
    // @@protoc_insertion_point(field:CAppOverview.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.display_name)
    pub display_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.visible_in_game_list)
    pub visible_in_game_list: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview.subscribed_to)
    pub subscribed_to: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview.sort_as)
    pub sort_as: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.app_type)
    pub app_type: ::std::option::Option<crate::EnumOrUnknown<EProtoAppType>>,
    // @@protoc_insertion_point(field:CAppOverview.mru_index)
    pub mru_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.rt_recent_activity_time)
    pub rt_recent_activity_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.minutes_playtime_forever)
    pub minutes_playtime_forever: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.minutes_playtime_last_two_weeks)
    pub minutes_playtime_last_two_weeks: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.rt_last_time_played)
    pub rt_last_time_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.store_tag)
    pub store_tag: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CAppOverview.association)
    pub association: ::std::vec::Vec<CAppOverview_AppAssociation>,
    // @@protoc_insertion_point(field:CAppOverview.store_category)
    pub store_category: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CAppOverview.rt_original_release_date)
    pub rt_original_release_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.rt_steam_release_date)
    pub rt_steam_release_date: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.icon_hash)
    pub icon_hash: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.xbox_controller_support)
    pub xbox_controller_support: ::std::option::Option<crate::EnumOrUnknown<EAppControllerSupportLevel>>,
    // @@protoc_insertion_point(field:CAppOverview.vr_supported)
    pub vr_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview.metacritic_score)
    pub metacritic_score: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.size_on_disk)
    pub size_on_disk: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAppOverview.third_party_mod)
    pub third_party_mod: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview.icon_data)
    pub icon_data: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.icon_data_format)
    pub icon_data_format: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.gameid)
    pub gameid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.library_capsule_filename)
    pub library_capsule_filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.per_client_data)
    pub per_client_data: ::std::vec::Vec<CAppOverview_PerClientData>,
    // @@protoc_insertion_point(field:CAppOverview.most_available_clientid)
    pub most_available_clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAppOverview.selected_clientid)
    pub selected_clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAppOverview.rt_store_asset_mtime)
    pub rt_store_asset_mtime: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.rt_custom_image_mtime)
    pub rt_custom_image_mtime: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.optional_parent_app_id)
    pub optional_parent_app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.owner_account_id)
    pub owner_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.review_score_with_bombs)
    pub review_score_with_bombs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.review_percentage_with_bombs)
    pub review_percentage_with_bombs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.review_score_without_bombs)
    pub review_score_without_bombs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.review_percentage_without_bombs)
    pub review_percentage_without_bombs: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.library_id)
    pub library_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.vr_only)
    pub vr_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview.mastersub_appid)
    pub mastersub_appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.mastersub_includedwith_logo)
    pub mastersub_includedwith_logo: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.site_license_site_name)
    pub site_license_site_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.shortcut_override_appid)
    pub shortcut_override_appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.steam_deck_compat_category)
    pub steam_deck_compat_category: ::std::option::Option<crate::EnumOrUnknown<super::enums::ESteamDeckCompatibilityCategory>>,
    // @@protoc_insertion_point(field:CAppOverview.rt_last_time_locally_played)
    pub rt_last_time_locally_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.rt_purchased_time)
    pub rt_purchased_time: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.header_filename)
    pub header_filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAppOverview.local_cache_version)
    pub local_cache_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppOverview.ps4_controller_support)
    pub ps4_controller_support: ::std::option::Option<crate::EnumOrUnknown<EAppControllerSupportLevel>>,
    // @@protoc_insertion_point(field:CAppOverview.ps5_controller_support)
    pub ps5_controller_support: ::std::option::Option<crate::EnumOrUnknown<EAppControllerSupportLevel>>,
    // @@protoc_insertion_point(field:CAppOverview.gamepad_preferred)
    pub gamepad_preferred: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAppOverview.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAppOverview {
    fn default() -> &'a CAppOverview {
        <CAppOverview as crate::Message>::default_instance()
    }
}

impl CAppOverview {
    pub fn new() -> CAppOverview {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string display_name = 2;

    pub fn display_name(&self) -> &str {
        match self.display_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_display_name(&mut self) {
        self.display_name = ::std::option::Option::None;
    }

    pub fn has_display_name(&self) -> bool {
        self.display_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        if self.display_name.is_none() {
            self.display_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.display_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        self.display_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool visible_in_game_list = 4;

    pub fn visible_in_game_list(&self) -> bool {
        self.visible_in_game_list.unwrap_or(false)
    }

    pub fn clear_visible_in_game_list(&mut self) {
        self.visible_in_game_list = ::std::option::Option::None;
    }

    pub fn has_visible_in_game_list(&self) -> bool {
        self.visible_in_game_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visible_in_game_list(&mut self, v: bool) {
        self.visible_in_game_list = ::std::option::Option::Some(v);
    }

    // optional bool subscribed_to = 5;

    pub fn subscribed_to(&self) -> bool {
        self.subscribed_to.unwrap_or(false)
    }

    pub fn clear_subscribed_to(&mut self) {
        self.subscribed_to = ::std::option::Option::None;
    }

    pub fn has_subscribed_to(&self) -> bool {
        self.subscribed_to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subscribed_to(&mut self, v: bool) {
        self.subscribed_to = ::std::option::Option::Some(v);
    }

    // optional string sort_as = 6;

    pub fn sort_as(&self) -> &str {
        match self.sort_as.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sort_as(&mut self) {
        self.sort_as = ::std::option::Option::None;
    }

    pub fn has_sort_as(&self) -> bool {
        self.sort_as.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sort_as(&mut self, v: ::std::string::String) {
        self.sort_as = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sort_as(&mut self) -> &mut ::std::string::String {
        if self.sort_as.is_none() {
            self.sort_as = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sort_as.as_mut().unwrap()
    }

    // Take field
    pub fn take_sort_as(&mut self) -> ::std::string::String {
        self.sort_as.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EProtoAppType app_type = 7;

    pub fn app_type(&self) -> EProtoAppType {
        match self.app_type {
            Some(e) => e.enum_value_or(EProtoAppType::k_EAppTypeInvalid),
            None => EProtoAppType::k_EAppTypeInvalid,
        }
    }

    pub fn clear_app_type(&mut self) {
        self.app_type = ::std::option::Option::None;
    }

    pub fn has_app_type(&self) -> bool {
        self.app_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_type(&mut self, v: EProtoAppType) {
        self.app_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint32 mru_index = 13;

    pub fn mru_index(&self) -> u32 {
        self.mru_index.unwrap_or(0)
    }

    pub fn clear_mru_index(&mut self) {
        self.mru_index = ::std::option::Option::None;
    }

    pub fn has_mru_index(&self) -> bool {
        self.mru_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mru_index(&mut self, v: u32) {
        self.mru_index = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_recent_activity_time = 14;

    pub fn rt_recent_activity_time(&self) -> u32 {
        self.rt_recent_activity_time.unwrap_or(0u32)
    }

    pub fn clear_rt_recent_activity_time(&mut self) {
        self.rt_recent_activity_time = ::std::option::Option::None;
    }

    pub fn has_rt_recent_activity_time(&self) -> bool {
        self.rt_recent_activity_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_recent_activity_time(&mut self, v: u32) {
        self.rt_recent_activity_time = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_playtime_forever = 16;

    pub fn minutes_playtime_forever(&self) -> u32 {
        self.minutes_playtime_forever.unwrap_or(0u32)
    }

    pub fn clear_minutes_playtime_forever(&mut self) {
        self.minutes_playtime_forever = ::std::option::Option::None;
    }

    pub fn has_minutes_playtime_forever(&self) -> bool {
        self.minutes_playtime_forever.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_playtime_forever(&mut self, v: u32) {
        self.minutes_playtime_forever = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_playtime_last_two_weeks = 17;

    pub fn minutes_playtime_last_two_weeks(&self) -> u32 {
        self.minutes_playtime_last_two_weeks.unwrap_or(0u32)
    }

    pub fn clear_minutes_playtime_last_two_weeks(&mut self) {
        self.minutes_playtime_last_two_weeks = ::std::option::Option::None;
    }

    pub fn has_minutes_playtime_last_two_weeks(&self) -> bool {
        self.minutes_playtime_last_two_weeks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_playtime_last_two_weeks(&mut self, v: u32) {
        self.minutes_playtime_last_two_weeks = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_last_time_played = 18;

    pub fn rt_last_time_played(&self) -> u32 {
        self.rt_last_time_played.unwrap_or(0u32)
    }

    pub fn clear_rt_last_time_played(&mut self) {
        self.rt_last_time_played = ::std::option::Option::None;
    }

    pub fn has_rt_last_time_played(&self) -> bool {
        self.rt_last_time_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_last_time_played(&mut self, v: u32) {
        self.rt_last_time_played = ::std::option::Option::Some(v);
    }

    // repeated uint32 store_tag = 19;

    pub fn store_tag(&self) -> &[u32] {
        &self.store_tag
    }

    pub fn clear_store_tag(&mut self) {
        self.store_tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_store_tag(&mut self, v: ::std::vec::Vec<u32>) {
        self.store_tag = v;
    }

    // Mutable pointer to the field.
    pub fn mut_store_tag(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.store_tag
    }

    // Take field
    pub fn take_store_tag(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.store_tag, ::std::vec::Vec::new())
    }

    // repeated .CAppOverview_AppAssociation association = 20;

    pub fn association(&self) -> &[CAppOverview_AppAssociation] {
        &self.association
    }

    pub fn clear_association(&mut self) {
        self.association.clear();
    }

    // Param is passed by value, moved
    pub fn set_association(&mut self, v: ::std::vec::Vec<CAppOverview_AppAssociation>) {
        self.association = v;
    }

    // Mutable pointer to the field.
    pub fn mut_association(&mut self) -> &mut ::std::vec::Vec<CAppOverview_AppAssociation> {
        &mut self.association
    }

    // Take field
    pub fn take_association(&mut self) -> ::std::vec::Vec<CAppOverview_AppAssociation> {
        ::std::mem::replace(&mut self.association, ::std::vec::Vec::new())
    }

    // repeated uint32 store_category = 23;

    pub fn store_category(&self) -> &[u32] {
        &self.store_category
    }

    pub fn clear_store_category(&mut self) {
        self.store_category.clear();
    }

    // Param is passed by value, moved
    pub fn set_store_category(&mut self, v: ::std::vec::Vec<u32>) {
        self.store_category = v;
    }

    // Mutable pointer to the field.
    pub fn mut_store_category(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.store_category
    }

    // Take field
    pub fn take_store_category(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.store_category, ::std::vec::Vec::new())
    }

    // optional uint32 rt_original_release_date = 25;

    pub fn rt_original_release_date(&self) -> u32 {
        self.rt_original_release_date.unwrap_or(0u32)
    }

    pub fn clear_rt_original_release_date(&mut self) {
        self.rt_original_release_date = ::std::option::Option::None;
    }

    pub fn has_rt_original_release_date(&self) -> bool {
        self.rt_original_release_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_original_release_date(&mut self, v: u32) {
        self.rt_original_release_date = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_steam_release_date = 26;

    pub fn rt_steam_release_date(&self) -> u32 {
        self.rt_steam_release_date.unwrap_or(0u32)
    }

    pub fn clear_rt_steam_release_date(&mut self) {
        self.rt_steam_release_date = ::std::option::Option::None;
    }

    pub fn has_rt_steam_release_date(&self) -> bool {
        self.rt_steam_release_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_steam_release_date(&mut self, v: u32) {
        self.rt_steam_release_date = ::std::option::Option::Some(v);
    }

    // optional string icon_hash = 27;

    pub fn icon_hash(&self) -> &str {
        match self.icon_hash.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_icon_hash(&mut self) {
        self.icon_hash = ::std::option::Option::None;
    }

    pub fn has_icon_hash(&self) -> bool {
        self.icon_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_icon_hash(&mut self, v: ::std::string::String) {
        self.icon_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon_hash(&mut self) -> &mut ::std::string::String {
        if self.icon_hash.is_none() {
            self.icon_hash = ::std::option::Option::Some(::std::string::String::new());
        }
        self.icon_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_icon_hash(&mut self) -> ::std::string::String {
        self.icon_hash.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAppControllerSupportLevel xbox_controller_support = 31;

    pub fn xbox_controller_support(&self) -> EAppControllerSupportLevel {
        match self.xbox_controller_support {
            Some(e) => e.enum_value_or(EAppControllerSupportLevel::k_EAppControllerSupportLevelNone),
            None => EAppControllerSupportLevel::k_EAppControllerSupportLevelNone,
        }
    }

    pub fn clear_xbox_controller_support(&mut self) {
        self.xbox_controller_support = ::std::option::Option::None;
    }

    pub fn has_xbox_controller_support(&self) -> bool {
        self.xbox_controller_support.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xbox_controller_support(&mut self, v: EAppControllerSupportLevel) {
        self.xbox_controller_support = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool vr_supported = 32;

    pub fn vr_supported(&self) -> bool {
        self.vr_supported.unwrap_or(false)
    }

    pub fn clear_vr_supported(&mut self) {
        self.vr_supported = ::std::option::Option::None;
    }

    pub fn has_vr_supported(&self) -> bool {
        self.vr_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vr_supported(&mut self, v: bool) {
        self.vr_supported = ::std::option::Option::Some(v);
    }

    // optional uint32 metacritic_score = 36;

    pub fn metacritic_score(&self) -> u32 {
        self.metacritic_score.unwrap_or(0)
    }

    pub fn clear_metacritic_score(&mut self) {
        self.metacritic_score = ::std::option::Option::None;
    }

    pub fn has_metacritic_score(&self) -> bool {
        self.metacritic_score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metacritic_score(&mut self, v: u32) {
        self.metacritic_score = ::std::option::Option::Some(v);
    }

    // optional uint64 size_on_disk = 37;

    pub fn size_on_disk(&self) -> u64 {
        self.size_on_disk.unwrap_or(0)
    }

    pub fn clear_size_on_disk(&mut self) {
        self.size_on_disk = ::std::option::Option::None;
    }

    pub fn has_size_on_disk(&self) -> bool {
        self.size_on_disk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size_on_disk(&mut self, v: u64) {
        self.size_on_disk = ::std::option::Option::Some(v);
    }

    // optional bool third_party_mod = 38;

    pub fn third_party_mod(&self) -> bool {
        self.third_party_mod.unwrap_or(false)
    }

    pub fn clear_third_party_mod(&mut self) {
        self.third_party_mod = ::std::option::Option::None;
    }

    pub fn has_third_party_mod(&self) -> bool {
        self.third_party_mod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_third_party_mod(&mut self, v: bool) {
        self.third_party_mod = ::std::option::Option::Some(v);
    }

    // optional string icon_data = 39;

    pub fn icon_data(&self) -> &str {
        match self.icon_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_icon_data(&mut self) {
        self.icon_data = ::std::option::Option::None;
    }

    pub fn has_icon_data(&self) -> bool {
        self.icon_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_icon_data(&mut self, v: ::std::string::String) {
        self.icon_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon_data(&mut self) -> &mut ::std::string::String {
        if self.icon_data.is_none() {
            self.icon_data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.icon_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_icon_data(&mut self) -> ::std::string::String {
        self.icon_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string icon_data_format = 40;

    pub fn icon_data_format(&self) -> &str {
        match self.icon_data_format.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_icon_data_format(&mut self) {
        self.icon_data_format = ::std::option::Option::None;
    }

    pub fn has_icon_data_format(&self) -> bool {
        self.icon_data_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_icon_data_format(&mut self, v: ::std::string::String) {
        self.icon_data_format = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_icon_data_format(&mut self) -> &mut ::std::string::String {
        if self.icon_data_format.is_none() {
            self.icon_data_format = ::std::option::Option::Some(::std::string::String::new());
        }
        self.icon_data_format.as_mut().unwrap()
    }

    // Take field
    pub fn take_icon_data_format(&mut self) -> ::std::string::String {
        self.icon_data_format.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string gameid = 41;

    pub fn gameid(&self) -> &str {
        match self.gameid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: ::std::string::String) {
        self.gameid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gameid(&mut self) -> &mut ::std::string::String {
        if self.gameid.is_none() {
            self.gameid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gameid.as_mut().unwrap()
    }

    // Take field
    pub fn take_gameid(&mut self) -> ::std::string::String {
        self.gameid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string library_capsule_filename = 42;

    pub fn library_capsule_filename(&self) -> &str {
        match self.library_capsule_filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_library_capsule_filename(&mut self) {
        self.library_capsule_filename = ::std::option::Option::None;
    }

    pub fn has_library_capsule_filename(&self) -> bool {
        self.library_capsule_filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_library_capsule_filename(&mut self, v: ::std::string::String) {
        self.library_capsule_filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_library_capsule_filename(&mut self) -> &mut ::std::string::String {
        if self.library_capsule_filename.is_none() {
            self.library_capsule_filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.library_capsule_filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_library_capsule_filename(&mut self) -> ::std::string::String {
        self.library_capsule_filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CAppOverview_PerClientData per_client_data = 43;

    pub fn per_client_data(&self) -> &[CAppOverview_PerClientData] {
        &self.per_client_data
    }

    pub fn clear_per_client_data(&mut self) {
        self.per_client_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_per_client_data(&mut self, v: ::std::vec::Vec<CAppOverview_PerClientData>) {
        self.per_client_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_per_client_data(&mut self) -> &mut ::std::vec::Vec<CAppOverview_PerClientData> {
        &mut self.per_client_data
    }

    // Take field
    pub fn take_per_client_data(&mut self) -> ::std::vec::Vec<CAppOverview_PerClientData> {
        ::std::mem::replace(&mut self.per_client_data, ::std::vec::Vec::new())
    }

    // optional uint64 most_available_clientid = 44;

    pub fn most_available_clientid(&self) -> u64 {
        self.most_available_clientid.unwrap_or(0)
    }

    pub fn clear_most_available_clientid(&mut self) {
        self.most_available_clientid = ::std::option::Option::None;
    }

    pub fn has_most_available_clientid(&self) -> bool {
        self.most_available_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_most_available_clientid(&mut self, v: u64) {
        self.most_available_clientid = ::std::option::Option::Some(v);
    }

    // optional uint64 selected_clientid = 45;

    pub fn selected_clientid(&self) -> u64 {
        self.selected_clientid.unwrap_or(0)
    }

    pub fn clear_selected_clientid(&mut self) {
        self.selected_clientid = ::std::option::Option::None;
    }

    pub fn has_selected_clientid(&self) -> bool {
        self.selected_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_selected_clientid(&mut self, v: u64) {
        self.selected_clientid = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_store_asset_mtime = 46;

    pub fn rt_store_asset_mtime(&self) -> u32 {
        self.rt_store_asset_mtime.unwrap_or(0)
    }

    pub fn clear_rt_store_asset_mtime(&mut self) {
        self.rt_store_asset_mtime = ::std::option::Option::None;
    }

    pub fn has_rt_store_asset_mtime(&self) -> bool {
        self.rt_store_asset_mtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_store_asset_mtime(&mut self, v: u32) {
        self.rt_store_asset_mtime = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_custom_image_mtime = 47;

    pub fn rt_custom_image_mtime(&self) -> u32 {
        self.rt_custom_image_mtime.unwrap_or(0)
    }

    pub fn clear_rt_custom_image_mtime(&mut self) {
        self.rt_custom_image_mtime = ::std::option::Option::None;
    }

    pub fn has_rt_custom_image_mtime(&self) -> bool {
        self.rt_custom_image_mtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_custom_image_mtime(&mut self, v: u32) {
        self.rt_custom_image_mtime = ::std::option::Option::Some(v);
    }

    // optional uint32 optional_parent_app_id = 48;

    pub fn optional_parent_app_id(&self) -> u32 {
        self.optional_parent_app_id.unwrap_or(0)
    }

    pub fn clear_optional_parent_app_id(&mut self) {
        self.optional_parent_app_id = ::std::option::Option::None;
    }

    pub fn has_optional_parent_app_id(&self) -> bool {
        self.optional_parent_app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optional_parent_app_id(&mut self, v: u32) {
        self.optional_parent_app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 owner_account_id = 49;

    pub fn owner_account_id(&self) -> u32 {
        self.owner_account_id.unwrap_or(0)
    }

    pub fn clear_owner_account_id(&mut self) {
        self.owner_account_id = ::std::option::Option::None;
    }

    pub fn has_owner_account_id(&self) -> bool {
        self.owner_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_account_id(&mut self, v: u32) {
        self.owner_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 review_score_with_bombs = 53;

    pub fn review_score_with_bombs(&self) -> u32 {
        self.review_score_with_bombs.unwrap_or(0)
    }

    pub fn clear_review_score_with_bombs(&mut self) {
        self.review_score_with_bombs = ::std::option::Option::None;
    }

    pub fn has_review_score_with_bombs(&self) -> bool {
        self.review_score_with_bombs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_review_score_with_bombs(&mut self, v: u32) {
        self.review_score_with_bombs = ::std::option::Option::Some(v);
    }

    // optional uint32 review_percentage_with_bombs = 54;

    pub fn review_percentage_with_bombs(&self) -> u32 {
        self.review_percentage_with_bombs.unwrap_or(0)
    }

    pub fn clear_review_percentage_with_bombs(&mut self) {
        self.review_percentage_with_bombs = ::std::option::Option::None;
    }

    pub fn has_review_percentage_with_bombs(&self) -> bool {
        self.review_percentage_with_bombs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_review_percentage_with_bombs(&mut self, v: u32) {
        self.review_percentage_with_bombs = ::std::option::Option::Some(v);
    }

    // optional uint32 review_score_without_bombs = 55;

    pub fn review_score_without_bombs(&self) -> u32 {
        self.review_score_without_bombs.unwrap_or(0)
    }

    pub fn clear_review_score_without_bombs(&mut self) {
        self.review_score_without_bombs = ::std::option::Option::None;
    }

    pub fn has_review_score_without_bombs(&self) -> bool {
        self.review_score_without_bombs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_review_score_without_bombs(&mut self, v: u32) {
        self.review_score_without_bombs = ::std::option::Option::Some(v);
    }

    // optional uint32 review_percentage_without_bombs = 56;

    pub fn review_percentage_without_bombs(&self) -> u32 {
        self.review_percentage_without_bombs.unwrap_or(0)
    }

    pub fn clear_review_percentage_without_bombs(&mut self) {
        self.review_percentage_without_bombs = ::std::option::Option::None;
    }

    pub fn has_review_percentage_without_bombs(&self) -> bool {
        self.review_percentage_without_bombs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_review_percentage_without_bombs(&mut self, v: u32) {
        self.review_percentage_without_bombs = ::std::option::Option::Some(v);
    }

    // optional string library_id = 57;

    pub fn library_id(&self) -> &str {
        match self.library_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_library_id(&mut self) {
        self.library_id = ::std::option::Option::None;
    }

    pub fn has_library_id(&self) -> bool {
        self.library_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_library_id(&mut self, v: ::std::string::String) {
        self.library_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_library_id(&mut self) -> &mut ::std::string::String {
        if self.library_id.is_none() {
            self.library_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.library_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_library_id(&mut self) -> ::std::string::String {
        self.library_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool vr_only = 58;

    pub fn vr_only(&self) -> bool {
        self.vr_only.unwrap_or(false)
    }

    pub fn clear_vr_only(&mut self) {
        self.vr_only = ::std::option::Option::None;
    }

    pub fn has_vr_only(&self) -> bool {
        self.vr_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vr_only(&mut self, v: bool) {
        self.vr_only = ::std::option::Option::Some(v);
    }

    // optional uint32 mastersub_appid = 59;

    pub fn mastersub_appid(&self) -> u32 {
        self.mastersub_appid.unwrap_or(0)
    }

    pub fn clear_mastersub_appid(&mut self) {
        self.mastersub_appid = ::std::option::Option::None;
    }

    pub fn has_mastersub_appid(&self) -> bool {
        self.mastersub_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mastersub_appid(&mut self, v: u32) {
        self.mastersub_appid = ::std::option::Option::Some(v);
    }

    // optional string mastersub_includedwith_logo = 60;

    pub fn mastersub_includedwith_logo(&self) -> &str {
        match self.mastersub_includedwith_logo.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mastersub_includedwith_logo(&mut self) {
        self.mastersub_includedwith_logo = ::std::option::Option::None;
    }

    pub fn has_mastersub_includedwith_logo(&self) -> bool {
        self.mastersub_includedwith_logo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mastersub_includedwith_logo(&mut self, v: ::std::string::String) {
        self.mastersub_includedwith_logo = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mastersub_includedwith_logo(&mut self) -> &mut ::std::string::String {
        if self.mastersub_includedwith_logo.is_none() {
            self.mastersub_includedwith_logo = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mastersub_includedwith_logo.as_mut().unwrap()
    }

    // Take field
    pub fn take_mastersub_includedwith_logo(&mut self) -> ::std::string::String {
        self.mastersub_includedwith_logo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string site_license_site_name = 62;

    pub fn site_license_site_name(&self) -> &str {
        match self.site_license_site_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_site_license_site_name(&mut self) {
        self.site_license_site_name = ::std::option::Option::None;
    }

    pub fn has_site_license_site_name(&self) -> bool {
        self.site_license_site_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_license_site_name(&mut self, v: ::std::string::String) {
        self.site_license_site_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_site_license_site_name(&mut self) -> &mut ::std::string::String {
        if self.site_license_site_name.is_none() {
            self.site_license_site_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.site_license_site_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_site_license_site_name(&mut self) -> ::std::string::String {
        self.site_license_site_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 shortcut_override_appid = 63;

    pub fn shortcut_override_appid(&self) -> u32 {
        self.shortcut_override_appid.unwrap_or(0)
    }

    pub fn clear_shortcut_override_appid(&mut self) {
        self.shortcut_override_appid = ::std::option::Option::None;
    }

    pub fn has_shortcut_override_appid(&self) -> bool {
        self.shortcut_override_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shortcut_override_appid(&mut self, v: u32) {
        self.shortcut_override_appid = ::std::option::Option::Some(v);
    }

    // optional .ESteamDeckCompatibilityCategory steam_deck_compat_category = 64;

    pub fn steam_deck_compat_category(&self) -> super::enums::ESteamDeckCompatibilityCategory {
        match self.steam_deck_compat_category {
            Some(e) => e.enum_value_or(super::enums::ESteamDeckCompatibilityCategory::k_ESteamDeckCompatibilityCategory_Unknown),
            None => super::enums::ESteamDeckCompatibilityCategory::k_ESteamDeckCompatibilityCategory_Unknown,
        }
    }

    pub fn clear_steam_deck_compat_category(&mut self) {
        self.steam_deck_compat_category = ::std::option::Option::None;
    }

    pub fn has_steam_deck_compat_category(&self) -> bool {
        self.steam_deck_compat_category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_deck_compat_category(&mut self, v: super::enums::ESteamDeckCompatibilityCategory) {
        self.steam_deck_compat_category = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional uint32 rt_last_time_locally_played = 65;

    pub fn rt_last_time_locally_played(&self) -> u32 {
        self.rt_last_time_locally_played.unwrap_or(0)
    }

    pub fn clear_rt_last_time_locally_played(&mut self) {
        self.rt_last_time_locally_played = ::std::option::Option::None;
    }

    pub fn has_rt_last_time_locally_played(&self) -> bool {
        self.rt_last_time_locally_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_last_time_locally_played(&mut self, v: u32) {
        self.rt_last_time_locally_played = ::std::option::Option::Some(v);
    }

    // optional uint32 rt_purchased_time = 66;

    pub fn rt_purchased_time(&self) -> u32 {
        self.rt_purchased_time.unwrap_or(0)
    }

    pub fn clear_rt_purchased_time(&mut self) {
        self.rt_purchased_time = ::std::option::Option::None;
    }

    pub fn has_rt_purchased_time(&self) -> bool {
        self.rt_purchased_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rt_purchased_time(&mut self, v: u32) {
        self.rt_purchased_time = ::std::option::Option::Some(v);
    }

    // optional string header_filename = 67;

    pub fn header_filename(&self) -> &str {
        match self.header_filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_header_filename(&mut self) {
        self.header_filename = ::std::option::Option::None;
    }

    pub fn has_header_filename(&self) -> bool {
        self.header_filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_filename(&mut self, v: ::std::string::String) {
        self.header_filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_filename(&mut self) -> &mut ::std::string::String {
        if self.header_filename.is_none() {
            self.header_filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.header_filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_filename(&mut self) -> ::std::string::String {
        self.header_filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 local_cache_version = 68;

    pub fn local_cache_version(&self) -> u32 {
        self.local_cache_version.unwrap_or(0)
    }

    pub fn clear_local_cache_version(&mut self) {
        self.local_cache_version = ::std::option::Option::None;
    }

    pub fn has_local_cache_version(&self) -> bool {
        self.local_cache_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_cache_version(&mut self, v: u32) {
        self.local_cache_version = ::std::option::Option::Some(v);
    }

    // optional .EAppControllerSupportLevel ps4_controller_support = 69;

    pub fn ps4_controller_support(&self) -> EAppControllerSupportLevel {
        match self.ps4_controller_support {
            Some(e) => e.enum_value_or(EAppControllerSupportLevel::k_EAppControllerSupportLevelNone),
            None => EAppControllerSupportLevel::k_EAppControllerSupportLevelNone,
        }
    }

    pub fn clear_ps4_controller_support(&mut self) {
        self.ps4_controller_support = ::std::option::Option::None;
    }

    pub fn has_ps4_controller_support(&self) -> bool {
        self.ps4_controller_support.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ps4_controller_support(&mut self, v: EAppControllerSupportLevel) {
        self.ps4_controller_support = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional .EAppControllerSupportLevel ps5_controller_support = 70;

    pub fn ps5_controller_support(&self) -> EAppControllerSupportLevel {
        match self.ps5_controller_support {
            Some(e) => e.enum_value_or(EAppControllerSupportLevel::k_EAppControllerSupportLevelNone),
            None => EAppControllerSupportLevel::k_EAppControllerSupportLevelNone,
        }
    }

    pub fn clear_ps5_controller_support(&mut self) {
        self.ps5_controller_support = ::std::option::Option::None;
    }

    pub fn has_ps5_controller_support(&self) -> bool {
        self.ps5_controller_support.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ps5_controller_support(&mut self, v: EAppControllerSupportLevel) {
        self.ps5_controller_support = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    // optional bool gamepad_preferred = 71;

    pub fn gamepad_preferred(&self) -> bool {
        self.gamepad_preferred.unwrap_or(false)
    }

    pub fn clear_gamepad_preferred(&mut self) {
        self.gamepad_preferred = ::std::option::Option::None;
    }

    pub fn has_gamepad_preferred(&self) -> bool {
        self.gamepad_preferred.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gamepad_preferred(&mut self, v: bool) {
        self.gamepad_preferred = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(51);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CAppOverview| { &m.appid },
            |m: &mut CAppOverview| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "display_name",
            |m: &CAppOverview| { &m.display_name },
            |m: &mut CAppOverview| { &mut m.display_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "visible_in_game_list",
            |m: &CAppOverview| { &m.visible_in_game_list },
            |m: &mut CAppOverview| { &mut m.visible_in_game_list },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "subscribed_to",
            |m: &CAppOverview| { &m.subscribed_to },
            |m: &mut CAppOverview| { &mut m.subscribed_to },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sort_as",
            |m: &CAppOverview| { &m.sort_as },
            |m: &mut CAppOverview| { &mut m.sort_as },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_type",
            |m: &CAppOverview| { &m.app_type },
            |m: &mut CAppOverview| { &mut m.app_type },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mru_index",
            |m: &CAppOverview| { &m.mru_index },
            |m: &mut CAppOverview| { &mut m.mru_index },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_recent_activity_time",
            |m: &CAppOverview| { &m.rt_recent_activity_time },
            |m: &mut CAppOverview| { &mut m.rt_recent_activity_time },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "minutes_playtime_forever",
            |m: &CAppOverview| { &m.minutes_playtime_forever },
            |m: &mut CAppOverview| { &mut m.minutes_playtime_forever },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "minutes_playtime_last_two_weeks",
            |m: &CAppOverview| { &m.minutes_playtime_last_two_weeks },
            |m: &mut CAppOverview| { &mut m.minutes_playtime_last_two_weeks },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_last_time_played",
            |m: &CAppOverview| { &m.rt_last_time_played },
            |m: &mut CAppOverview| { &mut m.rt_last_time_played },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "store_tag",
            |m: &CAppOverview| { &m.store_tag },
            |m: &mut CAppOverview| { &mut m.store_tag },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "association",
            |m: &CAppOverview| { &m.association },
            |m: &mut CAppOverview| { &mut m.association },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "store_category",
            |m: &CAppOverview| { &m.store_category },
            |m: &mut CAppOverview| { &mut m.store_category },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_original_release_date",
            |m: &CAppOverview| { &m.rt_original_release_date },
            |m: &mut CAppOverview| { &mut m.rt_original_release_date },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_steam_release_date",
            |m: &CAppOverview| { &m.rt_steam_release_date },
            |m: &mut CAppOverview| { &mut m.rt_steam_release_date },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "icon_hash",
            |m: &CAppOverview| { &m.icon_hash },
            |m: &mut CAppOverview| { &mut m.icon_hash },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "xbox_controller_support",
            |m: &CAppOverview| { &m.xbox_controller_support },
            |m: &mut CAppOverview| { &mut m.xbox_controller_support },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "vr_supported",
            |m: &CAppOverview| { &m.vr_supported },
            |m: &mut CAppOverview| { &mut m.vr_supported },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "metacritic_score",
            |m: &CAppOverview| { &m.metacritic_score },
            |m: &mut CAppOverview| { &mut m.metacritic_score },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "size_on_disk",
            |m: &CAppOverview| { &m.size_on_disk },
            |m: &mut CAppOverview| { &mut m.size_on_disk },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "third_party_mod",
            |m: &CAppOverview| { &m.third_party_mod },
            |m: &mut CAppOverview| { &mut m.third_party_mod },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "icon_data",
            |m: &CAppOverview| { &m.icon_data },
            |m: &mut CAppOverview| { &mut m.icon_data },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "icon_data_format",
            |m: &CAppOverview| { &m.icon_data_format },
            |m: &mut CAppOverview| { &mut m.icon_data_format },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gameid",
            |m: &CAppOverview| { &m.gameid },
            |m: &mut CAppOverview| { &mut m.gameid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "library_capsule_filename",
            |m: &CAppOverview| { &m.library_capsule_filename },
            |m: &mut CAppOverview| { &mut m.library_capsule_filename },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "per_client_data",
            |m: &CAppOverview| { &m.per_client_data },
            |m: &mut CAppOverview| { &mut m.per_client_data },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "most_available_clientid",
            |m: &CAppOverview| { &m.most_available_clientid },
            |m: &mut CAppOverview| { &mut m.most_available_clientid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "selected_clientid",
            |m: &CAppOverview| { &m.selected_clientid },
            |m: &mut CAppOverview| { &mut m.selected_clientid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_store_asset_mtime",
            |m: &CAppOverview| { &m.rt_store_asset_mtime },
            |m: &mut CAppOverview| { &mut m.rt_store_asset_mtime },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_custom_image_mtime",
            |m: &CAppOverview| { &m.rt_custom_image_mtime },
            |m: &mut CAppOverview| { &mut m.rt_custom_image_mtime },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "optional_parent_app_id",
            |m: &CAppOverview| { &m.optional_parent_app_id },
            |m: &mut CAppOverview| { &mut m.optional_parent_app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "owner_account_id",
            |m: &CAppOverview| { &m.owner_account_id },
            |m: &mut CAppOverview| { &mut m.owner_account_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "review_score_with_bombs",
            |m: &CAppOverview| { &m.review_score_with_bombs },
            |m: &mut CAppOverview| { &mut m.review_score_with_bombs },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "review_percentage_with_bombs",
            |m: &CAppOverview| { &m.review_percentage_with_bombs },
            |m: &mut CAppOverview| { &mut m.review_percentage_with_bombs },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "review_score_without_bombs",
            |m: &CAppOverview| { &m.review_score_without_bombs },
            |m: &mut CAppOverview| { &mut m.review_score_without_bombs },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "review_percentage_without_bombs",
            |m: &CAppOverview| { &m.review_percentage_without_bombs },
            |m: &mut CAppOverview| { &mut m.review_percentage_without_bombs },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "library_id",
            |m: &CAppOverview| { &m.library_id },
            |m: &mut CAppOverview| { &mut m.library_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "vr_only",
            |m: &CAppOverview| { &m.vr_only },
            |m: &mut CAppOverview| { &mut m.vr_only },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mastersub_appid",
            |m: &CAppOverview| { &m.mastersub_appid },
            |m: &mut CAppOverview| { &mut m.mastersub_appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "mastersub_includedwith_logo",
            |m: &CAppOverview| { &m.mastersub_includedwith_logo },
            |m: &mut CAppOverview| { &mut m.mastersub_includedwith_logo },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "site_license_site_name",
            |m: &CAppOverview| { &m.site_license_site_name },
            |m: &mut CAppOverview| { &mut m.site_license_site_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "shortcut_override_appid",
            |m: &CAppOverview| { &m.shortcut_override_appid },
            |m: &mut CAppOverview| { &mut m.shortcut_override_appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steam_deck_compat_category",
            |m: &CAppOverview| { &m.steam_deck_compat_category },
            |m: &mut CAppOverview| { &mut m.steam_deck_compat_category },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_last_time_locally_played",
            |m: &CAppOverview| { &m.rt_last_time_locally_played },
            |m: &mut CAppOverview| { &mut m.rt_last_time_locally_played },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "rt_purchased_time",
            |m: &CAppOverview| { &m.rt_purchased_time },
            |m: &mut CAppOverview| { &mut m.rt_purchased_time },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "header_filename",
            |m: &CAppOverview| { &m.header_filename },
            |m: &mut CAppOverview| { &mut m.header_filename },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "local_cache_version",
            |m: &CAppOverview| { &m.local_cache_version },
            |m: &mut CAppOverview| { &mut m.local_cache_version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ps4_controller_support",
            |m: &CAppOverview| { &m.ps4_controller_support },
            |m: &mut CAppOverview| { &mut m.ps4_controller_support },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "ps5_controller_support",
            |m: &CAppOverview| { &m.ps5_controller_support },
            |m: &mut CAppOverview| { &mut m.ps5_controller_support },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gamepad_preferred",
            |m: &CAppOverview| { &m.gamepad_preferred },
            |m: &mut CAppOverview| { &mut m.gamepad_preferred },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAppOverview>(
            "CAppOverview",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAppOverview {
    const NAME: &'static str = "CAppOverview";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.display_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.visible_in_game_list = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.subscribed_to = ::std::option::Option::Some(is.read_bool()?);
                },
                50 => {
                    self.sort_as = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.app_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                104 => {
                    self.mru_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                112 => {
                    self.rt_recent_activity_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.minutes_playtime_forever = ::std::option::Option::Some(is.read_uint32()?);
                },
                136 => {
                    self.minutes_playtime_last_two_weeks = ::std::option::Option::Some(is.read_uint32()?);
                },
                144 => {
                    self.rt_last_time_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                154 => {
                    is.read_repeated_packed_uint32_into(&mut self.store_tag)?;
                },
                152 => {
                    self.store_tag.push(is.read_uint32()?);
                },
                162 => {
                    self.association.push(is.read_message()?);
                },
                186 => {
                    is.read_repeated_packed_uint32_into(&mut self.store_category)?;
                },
                184 => {
                    self.store_category.push(is.read_uint32()?);
                },
                200 => {
                    self.rt_original_release_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                208 => {
                    self.rt_steam_release_date = ::std::option::Option::Some(is.read_uint32()?);
                },
                218 => {
                    self.icon_hash = ::std::option::Option::Some(is.read_string()?);
                },
                248 => {
                    self.xbox_controller_support = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                256 => {
                    self.vr_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                288 => {
                    self.metacritic_score = ::std::option::Option::Some(is.read_uint32()?);
                },
                296 => {
                    self.size_on_disk = ::std::option::Option::Some(is.read_uint64()?);
                },
                304 => {
                    self.third_party_mod = ::std::option::Option::Some(is.read_bool()?);
                },
                314 => {
                    self.icon_data = ::std::option::Option::Some(is.read_string()?);
                },
                322 => {
                    self.icon_data_format = ::std::option::Option::Some(is.read_string()?);
                },
                330 => {
                    self.gameid = ::std::option::Option::Some(is.read_string()?);
                },
                338 => {
                    self.library_capsule_filename = ::std::option::Option::Some(is.read_string()?);
                },
                346 => {
                    self.per_client_data.push(is.read_message()?);
                },
                352 => {
                    self.most_available_clientid = ::std::option::Option::Some(is.read_uint64()?);
                },
                360 => {
                    self.selected_clientid = ::std::option::Option::Some(is.read_uint64()?);
                },
                368 => {
                    self.rt_store_asset_mtime = ::std::option::Option::Some(is.read_uint32()?);
                },
                376 => {
                    self.rt_custom_image_mtime = ::std::option::Option::Some(is.read_uint32()?);
                },
                384 => {
                    self.optional_parent_app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                392 => {
                    self.owner_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                424 => {
                    self.review_score_with_bombs = ::std::option::Option::Some(is.read_uint32()?);
                },
                432 => {
                    self.review_percentage_with_bombs = ::std::option::Option::Some(is.read_uint32()?);
                },
                440 => {
                    self.review_score_without_bombs = ::std::option::Option::Some(is.read_uint32()?);
                },
                448 => {
                    self.review_percentage_without_bombs = ::std::option::Option::Some(is.read_uint32()?);
                },
                458 => {
                    self.library_id = ::std::option::Option::Some(is.read_string()?);
                },
                464 => {
                    self.vr_only = ::std::option::Option::Some(is.read_bool()?);
                },
                472 => {
                    self.mastersub_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                482 => {
                    self.mastersub_includedwith_logo = ::std::option::Option::Some(is.read_string()?);
                },
                498 => {
                    self.site_license_site_name = ::std::option::Option::Some(is.read_string()?);
                },
                504 => {
                    self.shortcut_override_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                512 => {
                    self.steam_deck_compat_category = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                520 => {
                    self.rt_last_time_locally_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                528 => {
                    self.rt_purchased_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                538 => {
                    self.header_filename = ::std::option::Option::Some(is.read_string()?);
                },
                544 => {
                    self.local_cache_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                552 => {
                    self.ps4_controller_support = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                560 => {
                    self.ps5_controller_support = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                568 => {
                    self.gamepad_preferred = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.display_name.as_ref() {
            my_size += crate::rt::string_size(2, &v);
        }
        if let Some(v) = self.visible_in_game_list {
            my_size += 1 + 1;
        }
        if let Some(v) = self.subscribed_to {
            my_size += 1 + 1;
        }
        if let Some(v) = self.sort_as.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.app_type {
            my_size += crate::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.mru_index {
            my_size += crate::rt::uint32_size(13, v);
        }
        if let Some(v) = self.rt_recent_activity_time {
            my_size += crate::rt::uint32_size(14, v);
        }
        if let Some(v) = self.minutes_playtime_forever {
            my_size += crate::rt::uint32_size(16, v);
        }
        if let Some(v) = self.minutes_playtime_last_two_weeks {
            my_size += crate::rt::uint32_size(17, v);
        }
        if let Some(v) = self.rt_last_time_played {
            my_size += crate::rt::uint32_size(18, v);
        }
        for value in &self.store_tag {
            my_size += crate::rt::uint32_size(19, *value);
        };
        for value in &self.association {
            let len = value.compute_size();
            my_size += 2 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.store_category {
            my_size += crate::rt::uint32_size(23, *value);
        };
        if let Some(v) = self.rt_original_release_date {
            my_size += crate::rt::uint32_size(25, v);
        }
        if let Some(v) = self.rt_steam_release_date {
            my_size += crate::rt::uint32_size(26, v);
        }
        if let Some(v) = self.icon_hash.as_ref() {
            my_size += crate::rt::string_size(27, &v);
        }
        if let Some(v) = self.xbox_controller_support {
            my_size += crate::rt::int32_size(31, v.value());
        }
        if let Some(v) = self.vr_supported {
            my_size += 2 + 1;
        }
        if let Some(v) = self.metacritic_score {
            my_size += crate::rt::uint32_size(36, v);
        }
        if let Some(v) = self.size_on_disk {
            my_size += crate::rt::uint64_size(37, v);
        }
        if let Some(v) = self.third_party_mod {
            my_size += 2 + 1;
        }
        if let Some(v) = self.icon_data.as_ref() {
            my_size += crate::rt::string_size(39, &v);
        }
        if let Some(v) = self.icon_data_format.as_ref() {
            my_size += crate::rt::string_size(40, &v);
        }
        if let Some(v) = self.gameid.as_ref() {
            my_size += crate::rt::string_size(41, &v);
        }
        if let Some(v) = self.library_capsule_filename.as_ref() {
            my_size += crate::rt::string_size(42, &v);
        }
        for value in &self.per_client_data {
            let len = value.compute_size();
            my_size += 2 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.most_available_clientid {
            my_size += crate::rt::uint64_size(44, v);
        }
        if let Some(v) = self.selected_clientid {
            my_size += crate::rt::uint64_size(45, v);
        }
        if let Some(v) = self.rt_store_asset_mtime {
            my_size += crate::rt::uint32_size(46, v);
        }
        if let Some(v) = self.rt_custom_image_mtime {
            my_size += crate::rt::uint32_size(47, v);
        }
        if let Some(v) = self.optional_parent_app_id {
            my_size += crate::rt::uint32_size(48, v);
        }
        if let Some(v) = self.owner_account_id {
            my_size += crate::rt::uint32_size(49, v);
        }
        if let Some(v) = self.review_score_with_bombs {
            my_size += crate::rt::uint32_size(53, v);
        }
        if let Some(v) = self.review_percentage_with_bombs {
            my_size += crate::rt::uint32_size(54, v);
        }
        if let Some(v) = self.review_score_without_bombs {
            my_size += crate::rt::uint32_size(55, v);
        }
        if let Some(v) = self.review_percentage_without_bombs {
            my_size += crate::rt::uint32_size(56, v);
        }
        if let Some(v) = self.library_id.as_ref() {
            my_size += crate::rt::string_size(57, &v);
        }
        if let Some(v) = self.vr_only {
            my_size += 2 + 1;
        }
        if let Some(v) = self.mastersub_appid {
            my_size += crate::rt::uint32_size(59, v);
        }
        if let Some(v) = self.mastersub_includedwith_logo.as_ref() {
            my_size += crate::rt::string_size(60, &v);
        }
        if let Some(v) = self.site_license_site_name.as_ref() {
            my_size += crate::rt::string_size(62, &v);
        }
        if let Some(v) = self.shortcut_override_appid {
            my_size += crate::rt::uint32_size(63, v);
        }
        if let Some(v) = self.steam_deck_compat_category {
            my_size += crate::rt::int32_size(64, v.value());
        }
        if let Some(v) = self.rt_last_time_locally_played {
            my_size += crate::rt::uint32_size(65, v);
        }
        if let Some(v) = self.rt_purchased_time {
            my_size += crate::rt::uint32_size(66, v);
        }
        if let Some(v) = self.header_filename.as_ref() {
            my_size += crate::rt::string_size(67, &v);
        }
        if let Some(v) = self.local_cache_version {
            my_size += crate::rt::uint32_size(68, v);
        }
        if let Some(v) = self.ps4_controller_support {
            my_size += crate::rt::int32_size(69, v.value());
        }
        if let Some(v) = self.ps5_controller_support {
            my_size += crate::rt::int32_size(70, v.value());
        }
        if let Some(v) = self.gamepad_preferred {
            my_size += 2 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.display_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.visible_in_game_list {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.subscribed_to {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.sort_as.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.app_type {
            os.write_enum(7, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.mru_index {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.rt_recent_activity_time {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.minutes_playtime_forever {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.minutes_playtime_last_two_weeks {
            os.write_uint32(17, v)?;
        }
        if let Some(v) = self.rt_last_time_played {
            os.write_uint32(18, v)?;
        }
        for v in &self.store_tag {
            os.write_uint32(19, *v)?;
        };
        for v in &self.association {
            crate::rt::write_message_field_with_cached_size(20, v, os)?;
        };
        for v in &self.store_category {
            os.write_uint32(23, *v)?;
        };
        if let Some(v) = self.rt_original_release_date {
            os.write_uint32(25, v)?;
        }
        if let Some(v) = self.rt_steam_release_date {
            os.write_uint32(26, v)?;
        }
        if let Some(v) = self.icon_hash.as_ref() {
            os.write_string(27, v)?;
        }
        if let Some(v) = self.xbox_controller_support {
            os.write_enum(31, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.vr_supported {
            os.write_bool(32, v)?;
        }
        if let Some(v) = self.metacritic_score {
            os.write_uint32(36, v)?;
        }
        if let Some(v) = self.size_on_disk {
            os.write_uint64(37, v)?;
        }
        if let Some(v) = self.third_party_mod {
            os.write_bool(38, v)?;
        }
        if let Some(v) = self.icon_data.as_ref() {
            os.write_string(39, v)?;
        }
        if let Some(v) = self.icon_data_format.as_ref() {
            os.write_string(40, v)?;
        }
        if let Some(v) = self.gameid.as_ref() {
            os.write_string(41, v)?;
        }
        if let Some(v) = self.library_capsule_filename.as_ref() {
            os.write_string(42, v)?;
        }
        for v in &self.per_client_data {
            crate::rt::write_message_field_with_cached_size(43, v, os)?;
        };
        if let Some(v) = self.most_available_clientid {
            os.write_uint64(44, v)?;
        }
        if let Some(v) = self.selected_clientid {
            os.write_uint64(45, v)?;
        }
        if let Some(v) = self.rt_store_asset_mtime {
            os.write_uint32(46, v)?;
        }
        if let Some(v) = self.rt_custom_image_mtime {
            os.write_uint32(47, v)?;
        }
        if let Some(v) = self.optional_parent_app_id {
            os.write_uint32(48, v)?;
        }
        if let Some(v) = self.owner_account_id {
            os.write_uint32(49, v)?;
        }
        if let Some(v) = self.review_score_with_bombs {
            os.write_uint32(53, v)?;
        }
        if let Some(v) = self.review_percentage_with_bombs {
            os.write_uint32(54, v)?;
        }
        if let Some(v) = self.review_score_without_bombs {
            os.write_uint32(55, v)?;
        }
        if let Some(v) = self.review_percentage_without_bombs {
            os.write_uint32(56, v)?;
        }
        if let Some(v) = self.library_id.as_ref() {
            os.write_string(57, v)?;
        }
        if let Some(v) = self.vr_only {
            os.write_bool(58, v)?;
        }
        if let Some(v) = self.mastersub_appid {
            os.write_uint32(59, v)?;
        }
        if let Some(v) = self.mastersub_includedwith_logo.as_ref() {
            os.write_string(60, v)?;
        }
        if let Some(v) = self.site_license_site_name.as_ref() {
            os.write_string(62, v)?;
        }
        if let Some(v) = self.shortcut_override_appid {
            os.write_uint32(63, v)?;
        }
        if let Some(v) = self.steam_deck_compat_category {
            os.write_enum(64, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.rt_last_time_locally_played {
            os.write_uint32(65, v)?;
        }
        if let Some(v) = self.rt_purchased_time {
            os.write_uint32(66, v)?;
        }
        if let Some(v) = self.header_filename.as_ref() {
            os.write_string(67, v)?;
        }
        if let Some(v) = self.local_cache_version {
            os.write_uint32(68, v)?;
        }
        if let Some(v) = self.ps4_controller_support {
            os.write_enum(69, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.ps5_controller_support {
            os.write_enum(70, crate::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gamepad_preferred {
            os.write_bool(71, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAppOverview {
        CAppOverview::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.display_name = ::std::option::Option::None;
        self.visible_in_game_list = ::std::option::Option::None;
        self.subscribed_to = ::std::option::Option::None;
        self.sort_as = ::std::option::Option::None;
        self.app_type = ::std::option::Option::None;
        self.mru_index = ::std::option::Option::None;
        self.rt_recent_activity_time = ::std::option::Option::None;
        self.minutes_playtime_forever = ::std::option::Option::None;
        self.minutes_playtime_last_two_weeks = ::std::option::Option::None;
        self.rt_last_time_played = ::std::option::Option::None;
        self.store_tag.clear();
        self.association.clear();
        self.store_category.clear();
        self.rt_original_release_date = ::std::option::Option::None;
        self.rt_steam_release_date = ::std::option::Option::None;
        self.icon_hash = ::std::option::Option::None;
        self.xbox_controller_support = ::std::option::Option::None;
        self.vr_supported = ::std::option::Option::None;
        self.metacritic_score = ::std::option::Option::None;
        self.size_on_disk = ::std::option::Option::None;
        self.third_party_mod = ::std::option::Option::None;
        self.icon_data = ::std::option::Option::None;
        self.icon_data_format = ::std::option::Option::None;
        self.gameid = ::std::option::Option::None;
        self.library_capsule_filename = ::std::option::Option::None;
        self.per_client_data.clear();
        self.most_available_clientid = ::std::option::Option::None;
        self.selected_clientid = ::std::option::Option::None;
        self.rt_store_asset_mtime = ::std::option::Option::None;
        self.rt_custom_image_mtime = ::std::option::Option::None;
        self.optional_parent_app_id = ::std::option::Option::None;
        self.owner_account_id = ::std::option::Option::None;
        self.review_score_with_bombs = ::std::option::Option::None;
        self.review_percentage_with_bombs = ::std::option::Option::None;
        self.review_score_without_bombs = ::std::option::Option::None;
        self.review_percentage_without_bombs = ::std::option::Option::None;
        self.library_id = ::std::option::Option::None;
        self.vr_only = ::std::option::Option::None;
        self.mastersub_appid = ::std::option::Option::None;
        self.mastersub_includedwith_logo = ::std::option::Option::None;
        self.site_license_site_name = ::std::option::Option::None;
        self.shortcut_override_appid = ::std::option::Option::None;
        self.steam_deck_compat_category = ::std::option::Option::None;
        self.rt_last_time_locally_played = ::std::option::Option::None;
        self.rt_purchased_time = ::std::option::Option::None;
        self.header_filename = ::std::option::Option::None;
        self.local_cache_version = ::std::option::Option::None;
        self.ps4_controller_support = ::std::option::Option::None;
        self.ps5_controller_support = ::std::option::Option::None;
        self.gamepad_preferred = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAppOverview {
        static instance: CAppOverview = CAppOverview {
            appid: ::std::option::Option::None,
            display_name: ::std::option::Option::None,
            visible_in_game_list: ::std::option::Option::None,
            subscribed_to: ::std::option::Option::None,
            sort_as: ::std::option::Option::None,
            app_type: ::std::option::Option::None,
            mru_index: ::std::option::Option::None,
            rt_recent_activity_time: ::std::option::Option::None,
            minutes_playtime_forever: ::std::option::Option::None,
            minutes_playtime_last_two_weeks: ::std::option::Option::None,
            rt_last_time_played: ::std::option::Option::None,
            store_tag: ::std::vec::Vec::new(),
            association: ::std::vec::Vec::new(),
            store_category: ::std::vec::Vec::new(),
            rt_original_release_date: ::std::option::Option::None,
            rt_steam_release_date: ::std::option::Option::None,
            icon_hash: ::std::option::Option::None,
            xbox_controller_support: ::std::option::Option::None,
            vr_supported: ::std::option::Option::None,
            metacritic_score: ::std::option::Option::None,
            size_on_disk: ::std::option::Option::None,
            third_party_mod: ::std::option::Option::None,
            icon_data: ::std::option::Option::None,
            icon_data_format: ::std::option::Option::None,
            gameid: ::std::option::Option::None,
            library_capsule_filename: ::std::option::Option::None,
            per_client_data: ::std::vec::Vec::new(),
            most_available_clientid: ::std::option::Option::None,
            selected_clientid: ::std::option::Option::None,
            rt_store_asset_mtime: ::std::option::Option::None,
            rt_custom_image_mtime: ::std::option::Option::None,
            optional_parent_app_id: ::std::option::Option::None,
            owner_account_id: ::std::option::Option::None,
            review_score_with_bombs: ::std::option::Option::None,
            review_percentage_with_bombs: ::std::option::Option::None,
            review_score_without_bombs: ::std::option::Option::None,
            review_percentage_without_bombs: ::std::option::Option::None,
            library_id: ::std::option::Option::None,
            vr_only: ::std::option::Option::None,
            mastersub_appid: ::std::option::Option::None,
            mastersub_includedwith_logo: ::std::option::Option::None,
            site_license_site_name: ::std::option::Option::None,
            shortcut_override_appid: ::std::option::Option::None,
            steam_deck_compat_category: ::std::option::Option::None,
            rt_last_time_locally_played: ::std::option::Option::None,
            rt_purchased_time: ::std::option::Option::None,
            header_filename: ::std::option::Option::None,
            local_cache_version: ::std::option::Option::None,
            ps4_controller_support: ::std::option::Option::None,
            ps5_controller_support: ::std::option::Option::None,
            gamepad_preferred: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAppOverview {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAppOverview").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAppOverview {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAppOverview {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAppOverview_Change)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAppOverview_Change {
    // message fields
    // @@protoc_insertion_point(field:CAppOverview_Change.app_overview)
    pub app_overview: ::std::vec::Vec<CAppOverview>,
    // @@protoc_insertion_point(field:CAppOverview_Change.removed_appid)
    pub removed_appid: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CAppOverview_Change.full_update)
    pub full_update: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppOverview_Change.update_complete)
    pub update_complete: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAppOverview_Change.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAppOverview_Change {
    fn default() -> &'a CAppOverview_Change {
        <CAppOverview_Change as crate::Message>::default_instance()
    }
}

impl CAppOverview_Change {
    pub fn new() -> CAppOverview_Change {
        ::std::default::Default::default()
    }

    // repeated .CAppOverview app_overview = 1;

    pub fn app_overview(&self) -> &[CAppOverview] {
        &self.app_overview
    }

    pub fn clear_app_overview(&mut self) {
        self.app_overview.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_overview(&mut self, v: ::std::vec::Vec<CAppOverview>) {
        self.app_overview = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_overview(&mut self) -> &mut ::std::vec::Vec<CAppOverview> {
        &mut self.app_overview
    }

    // Take field
    pub fn take_app_overview(&mut self) -> ::std::vec::Vec<CAppOverview> {
        ::std::mem::replace(&mut self.app_overview, ::std::vec::Vec::new())
    }

    // repeated uint32 removed_appid = 2;

    pub fn removed_appid(&self) -> &[u32] {
        &self.removed_appid
    }

    pub fn clear_removed_appid(&mut self) {
        self.removed_appid.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_appid(&mut self, v: ::std::vec::Vec<u32>) {
        self.removed_appid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_appid(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.removed_appid
    }

    // Take field
    pub fn take_removed_appid(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.removed_appid, ::std::vec::Vec::new())
    }

    // optional bool full_update = 3;

    pub fn full_update(&self) -> bool {
        self.full_update.unwrap_or(false)
    }

    pub fn clear_full_update(&mut self) {
        self.full_update = ::std::option::Option::None;
    }

    pub fn has_full_update(&self) -> bool {
        self.full_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_full_update(&mut self, v: bool) {
        self.full_update = ::std::option::Option::Some(v);
    }

    // optional bool update_complete = 4;

    pub fn update_complete(&self) -> bool {
        self.update_complete.unwrap_or(false)
    }

    pub fn clear_update_complete(&mut self) {
        self.update_complete = ::std::option::Option::None;
    }

    pub fn has_update_complete(&self) -> bool {
        self.update_complete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_complete(&mut self, v: bool) {
        self.update_complete = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "app_overview",
            |m: &CAppOverview_Change| { &m.app_overview },
            |m: &mut CAppOverview_Change| { &mut m.app_overview },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "removed_appid",
            |m: &CAppOverview_Change| { &m.removed_appid },
            |m: &mut CAppOverview_Change| { &mut m.removed_appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "full_update",
            |m: &CAppOverview_Change| { &m.full_update },
            |m: &mut CAppOverview_Change| { &mut m.full_update },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "update_complete",
            |m: &CAppOverview_Change| { &m.update_complete },
            |m: &mut CAppOverview_Change| { &mut m.update_complete },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAppOverview_Change>(
            "CAppOverview_Change",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAppOverview_Change {
    const NAME: &'static str = "CAppOverview_Change";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.app_overview.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.removed_appid)?;
                },
                16 => {
                    self.removed_appid.push(is.read_uint32()?);
                },
                24 => {
                    self.full_update = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.update_complete = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.app_overview {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.removed_appid {
            my_size += crate::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.full_update {
            my_size += 1 + 1;
        }
        if let Some(v) = self.update_complete {
            my_size += 1 + 1;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.app_overview {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.removed_appid {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.full_update {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.update_complete {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAppOverview_Change {
        CAppOverview_Change::new()
    }

    fn clear(&mut self) {
        self.app_overview.clear();
        self.removed_appid.clear();
        self.full_update = ::std::option::Option::None;
        self.update_complete = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAppOverview_Change {
        static instance: CAppOverview_Change = CAppOverview_Change {
            app_overview: ::std::vec::Vec::new(),
            removed_appid: ::std::vec::Vec::new(),
            full_update: ::std::option::Option::None,
            update_complete: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAppOverview_Change {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAppOverview_Change").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAppOverview_Change {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAppOverview_Change {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CAppBootstrapData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAppBootstrapData {
    // message fields
    // @@protoc_insertion_point(field:CAppBootstrapData.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAppBootstrapData.hidden)
    pub hidden: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CAppBootstrapData.user_tag)
    pub user_tag: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAppBootstrapData.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAppBootstrapData {
    fn default() -> &'a CAppBootstrapData {
        <CAppBootstrapData as crate::Message>::default_instance()
    }
}

impl CAppBootstrapData {
    pub fn new() -> CAppBootstrapData {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool hidden = 2;

    pub fn hidden(&self) -> bool {
        self.hidden.unwrap_or(false)
    }

    pub fn clear_hidden(&mut self) {
        self.hidden = ::std::option::Option::None;
    }

    pub fn has_hidden(&self) -> bool {
        self.hidden.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hidden(&mut self, v: bool) {
        self.hidden = ::std::option::Option::Some(v);
    }

    // repeated string user_tag = 3;

    pub fn user_tag(&self) -> &[::std::string::String] {
        &self.user_tag
    }

    pub fn clear_user_tag(&mut self) {
        self.user_tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_tag(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.user_tag = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_tag(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.user_tag
    }

    // Take field
    pub fn take_user_tag(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.user_tag, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CAppBootstrapData| { &m.appid },
            |m: &mut CAppBootstrapData| { &mut m.appid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "hidden",
            |m: &CAppBootstrapData| { &m.hidden },
            |m: &mut CAppBootstrapData| { &mut m.hidden },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "user_tag",
            |m: &CAppBootstrapData| { &m.user_tag },
            |m: &mut CAppBootstrapData| { &mut m.user_tag },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CAppBootstrapData>(
            "CAppBootstrapData",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CAppBootstrapData {
    const NAME: &'static str = "CAppBootstrapData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.hidden = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.user_tag.push(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.hidden {
            my_size += 1 + 1;
        }
        for value in &self.user_tag {
            my_size += crate::rt::string_size(3, &value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.hidden {
            os.write_bool(2, v)?;
        }
        for v in &self.user_tag {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAppBootstrapData {
        CAppBootstrapData::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.hidden = ::std::option::Option::None;
        self.user_tag.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAppBootstrapData {
        static instance: CAppBootstrapData = CAppBootstrapData {
            appid: ::std::option::Option::None,
            hidden: ::std::option::Option::None,
            user_tag: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CAppBootstrapData {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAppBootstrapData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAppBootstrapData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CAppBootstrapData {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CLibraryBootstrapData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CLibraryBootstrapData {
    // message fields
    // @@protoc_insertion_point(field:CLibraryBootstrapData.app_data)
    pub app_data: ::std::vec::Vec<CAppBootstrapData>,
    // special fields
    // @@protoc_insertion_point(special_field:CLibraryBootstrapData.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CLibraryBootstrapData {
    fn default() -> &'a CLibraryBootstrapData {
        <CLibraryBootstrapData as crate::Message>::default_instance()
    }
}

impl CLibraryBootstrapData {
    pub fn new() -> CLibraryBootstrapData {
        ::std::default::Default::default()
    }

    // repeated .CAppBootstrapData app_data = 1;

    pub fn app_data(&self) -> &[CAppBootstrapData] {
        &self.app_data
    }

    pub fn clear_app_data(&mut self) {
        self.app_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_data(&mut self, v: ::std::vec::Vec<CAppBootstrapData>) {
        self.app_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_data(&mut self) -> &mut ::std::vec::Vec<CAppBootstrapData> {
        &mut self.app_data
    }

    // Take field
    pub fn take_app_data(&mut self) -> ::std::vec::Vec<CAppBootstrapData> {
        ::std::mem::replace(&mut self.app_data, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "app_data",
            |m: &CLibraryBootstrapData| { &m.app_data },
            |m: &mut CLibraryBootstrapData| { &mut m.app_data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CLibraryBootstrapData>(
            "CLibraryBootstrapData",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CLibraryBootstrapData {
    const NAME: &'static str = "CLibraryBootstrapData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.app_data.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.app_data {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.app_data {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CLibraryBootstrapData {
        CLibraryBootstrapData::new()
    }

    fn clear(&mut self) {
        self.app_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CLibraryBootstrapData {
        static instance: CLibraryBootstrapData = CLibraryBootstrapData {
            app_data: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CLibraryBootstrapData {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CLibraryBootstrapData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CLibraryBootstrapData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CLibraryBootstrapData {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EDisplayStatus)
pub enum EDisplayStatus {
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusInvalid)
    k_EDisplayStatusInvalid = 0,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusLaunching)
    k_EDisplayStatusLaunching = 1,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUninstalling)
    k_EDisplayStatusUninstalling = 2,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusInstalling)
    k_EDisplayStatusInstalling = 3,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusRunning)
    k_EDisplayStatusRunning = 4,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusValidating)
    k_EDisplayStatusValidating = 5,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUpdating)
    k_EDisplayStatusUpdating = 6,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusDownloading)
    k_EDisplayStatusDownloading = 7,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusSynchronizing)
    k_EDisplayStatusSynchronizing = 8,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusReadyToInstall)
    k_EDisplayStatusReadyToInstall = 9,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusReadyToPreload)
    k_EDisplayStatusReadyToPreload = 10,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusReadyToLaunch)
    k_EDisplayStatusReadyToLaunch = 11,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusRegionRestricted)
    k_EDisplayStatusRegionRestricted = 12,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusPresaleOnly)
    k_EDisplayStatusPresaleOnly = 13,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusInvalidPlatform)
    k_EDisplayStatusInvalidPlatform = 14,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusPreloadComplete)
    k_EDisplayStatusPreloadComplete = 16,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusBorrowerLocked)
    k_EDisplayStatusBorrowerLocked = 17,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUpdatePaused)
    k_EDisplayStatusUpdatePaused = 18,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUpdateQueued)
    k_EDisplayStatusUpdateQueued = 19,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUpdateRequired)
    k_EDisplayStatusUpdateRequired = 20,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUpdateDisabled)
    k_EDisplayStatusUpdateDisabled = 21,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusDownloadPaused)
    k_EDisplayStatusDownloadPaused = 22,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusDownloadQueued)
    k_EDisplayStatusDownloadQueued = 23,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusDownloadRequired)
    k_EDisplayStatusDownloadRequired = 24,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusDownloadDisabled)
    k_EDisplayStatusDownloadDisabled = 25,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusLicensePending)
    k_EDisplayStatusLicensePending = 26,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusLicenseExpired)
    k_EDisplayStatusLicenseExpired = 27,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusAvailForFree)
    k_EDisplayStatusAvailForFree = 28,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusAvailToBorrow)
    k_EDisplayStatusAvailToBorrow = 29,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusAvailGuestPass)
    k_EDisplayStatusAvailGuestPass = 30,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusPurchase)
    k_EDisplayStatusPurchase = 31,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusUnavailable)
    k_EDisplayStatusUnavailable = 32,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusNotLaunchable)
    k_EDisplayStatusNotLaunchable = 33,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusCloudError)
    k_EDisplayStatusCloudError = 34,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusCloudOutOfDate)
    k_EDisplayStatusCloudOutOfDate = 35,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusTerminating)
    k_EDisplayStatusTerminating = 36,
    // @@protoc_insertion_point(enum_value:EDisplayStatus.k_EDisplayStatusOwnerLocked)
    k_EDisplayStatusOwnerLocked = 37,
}

impl crate::Enum for EDisplayStatus {
    const NAME: &'static str = "EDisplayStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDisplayStatus> {
        match value {
            0 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusInvalid),
            1 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusLaunching),
            2 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUninstalling),
            3 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusInstalling),
            4 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusRunning),
            5 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusValidating),
            6 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdating),
            7 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloading),
            8 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusSynchronizing),
            9 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusReadyToInstall),
            10 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusReadyToPreload),
            11 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusReadyToLaunch),
            12 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusRegionRestricted),
            13 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusPresaleOnly),
            14 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusInvalidPlatform),
            16 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusPreloadComplete),
            17 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusBorrowerLocked),
            18 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdatePaused),
            19 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdateQueued),
            20 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdateRequired),
            21 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdateDisabled),
            22 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadPaused),
            23 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadQueued),
            24 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadRequired),
            25 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadDisabled),
            26 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusLicensePending),
            27 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusLicenseExpired),
            28 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusAvailForFree),
            29 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusAvailToBorrow),
            30 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusAvailGuestPass),
            31 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusPurchase),
            32 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUnavailable),
            33 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusNotLaunchable),
            34 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusCloudError),
            35 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusCloudOutOfDate),
            36 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusTerminating),
            37 => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusOwnerLocked),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EDisplayStatus> {
        match str {
            "k_EDisplayStatusInvalid" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusInvalid),
            "k_EDisplayStatusLaunching" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusLaunching),
            "k_EDisplayStatusUninstalling" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUninstalling),
            "k_EDisplayStatusInstalling" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusInstalling),
            "k_EDisplayStatusRunning" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusRunning),
            "k_EDisplayStatusValidating" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusValidating),
            "k_EDisplayStatusUpdating" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdating),
            "k_EDisplayStatusDownloading" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloading),
            "k_EDisplayStatusSynchronizing" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusSynchronizing),
            "k_EDisplayStatusReadyToInstall" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusReadyToInstall),
            "k_EDisplayStatusReadyToPreload" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusReadyToPreload),
            "k_EDisplayStatusReadyToLaunch" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusReadyToLaunch),
            "k_EDisplayStatusRegionRestricted" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusRegionRestricted),
            "k_EDisplayStatusPresaleOnly" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusPresaleOnly),
            "k_EDisplayStatusInvalidPlatform" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusInvalidPlatform),
            "k_EDisplayStatusPreloadComplete" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusPreloadComplete),
            "k_EDisplayStatusBorrowerLocked" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusBorrowerLocked),
            "k_EDisplayStatusUpdatePaused" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdatePaused),
            "k_EDisplayStatusUpdateQueued" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdateQueued),
            "k_EDisplayStatusUpdateRequired" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdateRequired),
            "k_EDisplayStatusUpdateDisabled" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUpdateDisabled),
            "k_EDisplayStatusDownloadPaused" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadPaused),
            "k_EDisplayStatusDownloadQueued" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadQueued),
            "k_EDisplayStatusDownloadRequired" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadRequired),
            "k_EDisplayStatusDownloadDisabled" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusDownloadDisabled),
            "k_EDisplayStatusLicensePending" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusLicensePending),
            "k_EDisplayStatusLicenseExpired" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusLicenseExpired),
            "k_EDisplayStatusAvailForFree" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusAvailForFree),
            "k_EDisplayStatusAvailToBorrow" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusAvailToBorrow),
            "k_EDisplayStatusAvailGuestPass" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusAvailGuestPass),
            "k_EDisplayStatusPurchase" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusPurchase),
            "k_EDisplayStatusUnavailable" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusUnavailable),
            "k_EDisplayStatusNotLaunchable" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusNotLaunchable),
            "k_EDisplayStatusCloudError" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusCloudError),
            "k_EDisplayStatusCloudOutOfDate" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusCloudOutOfDate),
            "k_EDisplayStatusTerminating" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusTerminating),
            "k_EDisplayStatusOwnerLocked" => ::std::option::Option::Some(EDisplayStatus::k_EDisplayStatusOwnerLocked),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EDisplayStatus] = &[
        EDisplayStatus::k_EDisplayStatusInvalid,
        EDisplayStatus::k_EDisplayStatusLaunching,
        EDisplayStatus::k_EDisplayStatusUninstalling,
        EDisplayStatus::k_EDisplayStatusInstalling,
        EDisplayStatus::k_EDisplayStatusRunning,
        EDisplayStatus::k_EDisplayStatusValidating,
        EDisplayStatus::k_EDisplayStatusUpdating,
        EDisplayStatus::k_EDisplayStatusDownloading,
        EDisplayStatus::k_EDisplayStatusSynchronizing,
        EDisplayStatus::k_EDisplayStatusReadyToInstall,
        EDisplayStatus::k_EDisplayStatusReadyToPreload,
        EDisplayStatus::k_EDisplayStatusReadyToLaunch,
        EDisplayStatus::k_EDisplayStatusRegionRestricted,
        EDisplayStatus::k_EDisplayStatusPresaleOnly,
        EDisplayStatus::k_EDisplayStatusInvalidPlatform,
        EDisplayStatus::k_EDisplayStatusPreloadComplete,
        EDisplayStatus::k_EDisplayStatusBorrowerLocked,
        EDisplayStatus::k_EDisplayStatusUpdatePaused,
        EDisplayStatus::k_EDisplayStatusUpdateQueued,
        EDisplayStatus::k_EDisplayStatusUpdateRequired,
        EDisplayStatus::k_EDisplayStatusUpdateDisabled,
        EDisplayStatus::k_EDisplayStatusDownloadPaused,
        EDisplayStatus::k_EDisplayStatusDownloadQueued,
        EDisplayStatus::k_EDisplayStatusDownloadRequired,
        EDisplayStatus::k_EDisplayStatusDownloadDisabled,
        EDisplayStatus::k_EDisplayStatusLicensePending,
        EDisplayStatus::k_EDisplayStatusLicenseExpired,
        EDisplayStatus::k_EDisplayStatusAvailForFree,
        EDisplayStatus::k_EDisplayStatusAvailToBorrow,
        EDisplayStatus::k_EDisplayStatusAvailGuestPass,
        EDisplayStatus::k_EDisplayStatusPurchase,
        EDisplayStatus::k_EDisplayStatusUnavailable,
        EDisplayStatus::k_EDisplayStatusNotLaunchable,
        EDisplayStatus::k_EDisplayStatusCloudError,
        EDisplayStatus::k_EDisplayStatusCloudOutOfDate,
        EDisplayStatus::k_EDisplayStatusTerminating,
        EDisplayStatus::k_EDisplayStatusOwnerLocked,
    ];
}

impl crate::EnumFull for EDisplayStatus {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EDisplayStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EDisplayStatus::k_EDisplayStatusInvalid => 0,
            EDisplayStatus::k_EDisplayStatusLaunching => 1,
            EDisplayStatus::k_EDisplayStatusUninstalling => 2,
            EDisplayStatus::k_EDisplayStatusInstalling => 3,
            EDisplayStatus::k_EDisplayStatusRunning => 4,
            EDisplayStatus::k_EDisplayStatusValidating => 5,
            EDisplayStatus::k_EDisplayStatusUpdating => 6,
            EDisplayStatus::k_EDisplayStatusDownloading => 7,
            EDisplayStatus::k_EDisplayStatusSynchronizing => 8,
            EDisplayStatus::k_EDisplayStatusReadyToInstall => 9,
            EDisplayStatus::k_EDisplayStatusReadyToPreload => 10,
            EDisplayStatus::k_EDisplayStatusReadyToLaunch => 11,
            EDisplayStatus::k_EDisplayStatusRegionRestricted => 12,
            EDisplayStatus::k_EDisplayStatusPresaleOnly => 13,
            EDisplayStatus::k_EDisplayStatusInvalidPlatform => 14,
            EDisplayStatus::k_EDisplayStatusPreloadComplete => 15,
            EDisplayStatus::k_EDisplayStatusBorrowerLocked => 16,
            EDisplayStatus::k_EDisplayStatusUpdatePaused => 17,
            EDisplayStatus::k_EDisplayStatusUpdateQueued => 18,
            EDisplayStatus::k_EDisplayStatusUpdateRequired => 19,
            EDisplayStatus::k_EDisplayStatusUpdateDisabled => 20,
            EDisplayStatus::k_EDisplayStatusDownloadPaused => 21,
            EDisplayStatus::k_EDisplayStatusDownloadQueued => 22,
            EDisplayStatus::k_EDisplayStatusDownloadRequired => 23,
            EDisplayStatus::k_EDisplayStatusDownloadDisabled => 24,
            EDisplayStatus::k_EDisplayStatusLicensePending => 25,
            EDisplayStatus::k_EDisplayStatusLicenseExpired => 26,
            EDisplayStatus::k_EDisplayStatusAvailForFree => 27,
            EDisplayStatus::k_EDisplayStatusAvailToBorrow => 28,
            EDisplayStatus::k_EDisplayStatusAvailGuestPass => 29,
            EDisplayStatus::k_EDisplayStatusPurchase => 30,
            EDisplayStatus::k_EDisplayStatusUnavailable => 31,
            EDisplayStatus::k_EDisplayStatusNotLaunchable => 32,
            EDisplayStatus::k_EDisplayStatusCloudError => 33,
            EDisplayStatus::k_EDisplayStatusCloudOutOfDate => 34,
            EDisplayStatus::k_EDisplayStatusTerminating => 35,
            EDisplayStatus::k_EDisplayStatusOwnerLocked => 36,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EDisplayStatus {
    fn default() -> Self {
        EDisplayStatus::k_EDisplayStatusInvalid
    }
}

impl EDisplayStatus {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EDisplayStatus>("EDisplayStatus")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAppCloudStatus)
pub enum EAppCloudStatus {
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusInvalid)
    k_EAppCloudStatusInvalid = 0,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusDisabled)
    k_EAppCloudStatusDisabled = 1,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusUnknown)
    k_EAppCloudStatusUnknown = 2,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusSynchronized)
    k_EAppCloudStatusSynchronized = 3,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusChecking)
    k_EAppCloudStatusChecking = 4,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusOutOfSync)
    k_EAppCloudStatusOutOfSync = 5,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusUploading)
    k_EAppCloudStatusUploading = 6,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusDownloading)
    k_EAppCloudStatusDownloading = 7,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusSyncFailed)
    k_EAppCloudStatusSyncFailed = 8,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusConflict)
    k_EAppCloudStatusConflict = 9,
    // @@protoc_insertion_point(enum_value:EAppCloudStatus.k_EAppCloudStatusPendingElsewhere)
    k_EAppCloudStatusPendingElsewhere = 10,
}

impl crate::Enum for EAppCloudStatus {
    const NAME: &'static str = "EAppCloudStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAppCloudStatus> {
        match value {
            0 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusInvalid),
            1 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusDisabled),
            2 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusUnknown),
            3 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusSynchronized),
            4 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusChecking),
            5 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusOutOfSync),
            6 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusUploading),
            7 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusDownloading),
            8 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusSyncFailed),
            9 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusConflict),
            10 => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusPendingElsewhere),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAppCloudStatus> {
        match str {
            "k_EAppCloudStatusInvalid" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusInvalid),
            "k_EAppCloudStatusDisabled" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusDisabled),
            "k_EAppCloudStatusUnknown" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusUnknown),
            "k_EAppCloudStatusSynchronized" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusSynchronized),
            "k_EAppCloudStatusChecking" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusChecking),
            "k_EAppCloudStatusOutOfSync" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusOutOfSync),
            "k_EAppCloudStatusUploading" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusUploading),
            "k_EAppCloudStatusDownloading" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusDownloading),
            "k_EAppCloudStatusSyncFailed" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusSyncFailed),
            "k_EAppCloudStatusConflict" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusConflict),
            "k_EAppCloudStatusPendingElsewhere" => ::std::option::Option::Some(EAppCloudStatus::k_EAppCloudStatusPendingElsewhere),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAppCloudStatus] = &[
        EAppCloudStatus::k_EAppCloudStatusInvalid,
        EAppCloudStatus::k_EAppCloudStatusDisabled,
        EAppCloudStatus::k_EAppCloudStatusUnknown,
        EAppCloudStatus::k_EAppCloudStatusSynchronized,
        EAppCloudStatus::k_EAppCloudStatusChecking,
        EAppCloudStatus::k_EAppCloudStatusOutOfSync,
        EAppCloudStatus::k_EAppCloudStatusUploading,
        EAppCloudStatus::k_EAppCloudStatusDownloading,
        EAppCloudStatus::k_EAppCloudStatusSyncFailed,
        EAppCloudStatus::k_EAppCloudStatusConflict,
        EAppCloudStatus::k_EAppCloudStatusPendingElsewhere,
    ];
}

impl crate::EnumFull for EAppCloudStatus {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAppCloudStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAppCloudStatus {
    fn default() -> Self {
        EAppCloudStatus::k_EAppCloudStatusInvalid
    }
}

impl EAppCloudStatus {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAppCloudStatus>("EAppCloudStatus")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EProtoAppType)
pub enum EProtoAppType {
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeInvalid)
    k_EAppTypeInvalid = 0,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeGame)
    k_EAppTypeGame = 1,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeApplication)
    k_EAppTypeApplication = 2,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeTool)
    k_EAppTypeTool = 4,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeDemo)
    k_EAppTypeDemo = 8,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeDeprected)
    k_EAppTypeDeprected = 16,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeDLC)
    k_EAppTypeDLC = 32,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeGuide)
    k_EAppTypeGuide = 64,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeDriver)
    k_EAppTypeDriver = 128,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeConfig)
    k_EAppTypeConfig = 256,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeHardware)
    k_EAppTypeHardware = 512,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeFranchise)
    k_EAppTypeFranchise = 1024,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeVideo)
    k_EAppTypeVideo = 2048,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypePlugin)
    k_EAppTypePlugin = 4096,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeMusicAlbum)
    k_EAppTypeMusicAlbum = 8192,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeSeries)
    k_EAppTypeSeries = 16384,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeComic)
    k_EAppTypeComic = 32768,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeBeta)
    k_EAppTypeBeta = 65536,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeShortcut)
    k_EAppTypeShortcut = 1073741824,
    // @@protoc_insertion_point(enum_value:EProtoAppType.k_EAppTypeDepotOnly)
    k_EAppTypeDepotOnly = -2147483648,
}

impl crate::Enum for EProtoAppType {
    const NAME: &'static str = "EProtoAppType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EProtoAppType> {
        match value {
            0 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeInvalid),
            1 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeGame),
            2 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeApplication),
            4 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeTool),
            8 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDemo),
            16 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDeprected),
            32 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDLC),
            64 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeGuide),
            128 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDriver),
            256 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeConfig),
            512 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeHardware),
            1024 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeFranchise),
            2048 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeVideo),
            4096 => ::std::option::Option::Some(EProtoAppType::k_EAppTypePlugin),
            8192 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeMusicAlbum),
            16384 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeSeries),
            32768 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeComic),
            65536 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeBeta),
            1073741824 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeShortcut),
            -2147483648 => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDepotOnly),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EProtoAppType> {
        match str {
            "k_EAppTypeInvalid" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeInvalid),
            "k_EAppTypeGame" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeGame),
            "k_EAppTypeApplication" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeApplication),
            "k_EAppTypeTool" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeTool),
            "k_EAppTypeDemo" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDemo),
            "k_EAppTypeDeprected" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDeprected),
            "k_EAppTypeDLC" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDLC),
            "k_EAppTypeGuide" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeGuide),
            "k_EAppTypeDriver" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDriver),
            "k_EAppTypeConfig" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeConfig),
            "k_EAppTypeHardware" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeHardware),
            "k_EAppTypeFranchise" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeFranchise),
            "k_EAppTypeVideo" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeVideo),
            "k_EAppTypePlugin" => ::std::option::Option::Some(EProtoAppType::k_EAppTypePlugin),
            "k_EAppTypeMusicAlbum" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeMusicAlbum),
            "k_EAppTypeSeries" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeSeries),
            "k_EAppTypeComic" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeComic),
            "k_EAppTypeBeta" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeBeta),
            "k_EAppTypeShortcut" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeShortcut),
            "k_EAppTypeDepotOnly" => ::std::option::Option::Some(EProtoAppType::k_EAppTypeDepotOnly),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EProtoAppType] = &[
        EProtoAppType::k_EAppTypeInvalid,
        EProtoAppType::k_EAppTypeGame,
        EProtoAppType::k_EAppTypeApplication,
        EProtoAppType::k_EAppTypeTool,
        EProtoAppType::k_EAppTypeDemo,
        EProtoAppType::k_EAppTypeDeprected,
        EProtoAppType::k_EAppTypeDLC,
        EProtoAppType::k_EAppTypeGuide,
        EProtoAppType::k_EAppTypeDriver,
        EProtoAppType::k_EAppTypeConfig,
        EProtoAppType::k_EAppTypeHardware,
        EProtoAppType::k_EAppTypeFranchise,
        EProtoAppType::k_EAppTypeVideo,
        EProtoAppType::k_EAppTypePlugin,
        EProtoAppType::k_EAppTypeMusicAlbum,
        EProtoAppType::k_EAppTypeSeries,
        EProtoAppType::k_EAppTypeComic,
        EProtoAppType::k_EAppTypeBeta,
        EProtoAppType::k_EAppTypeShortcut,
        EProtoAppType::k_EAppTypeDepotOnly,
    ];
}

impl crate::EnumFull for EProtoAppType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EProtoAppType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EProtoAppType::k_EAppTypeInvalid => 0,
            EProtoAppType::k_EAppTypeGame => 1,
            EProtoAppType::k_EAppTypeApplication => 2,
            EProtoAppType::k_EAppTypeTool => 3,
            EProtoAppType::k_EAppTypeDemo => 4,
            EProtoAppType::k_EAppTypeDeprected => 5,
            EProtoAppType::k_EAppTypeDLC => 6,
            EProtoAppType::k_EAppTypeGuide => 7,
            EProtoAppType::k_EAppTypeDriver => 8,
            EProtoAppType::k_EAppTypeConfig => 9,
            EProtoAppType::k_EAppTypeHardware => 10,
            EProtoAppType::k_EAppTypeFranchise => 11,
            EProtoAppType::k_EAppTypeVideo => 12,
            EProtoAppType::k_EAppTypePlugin => 13,
            EProtoAppType::k_EAppTypeMusicAlbum => 14,
            EProtoAppType::k_EAppTypeSeries => 15,
            EProtoAppType::k_EAppTypeComic => 16,
            EProtoAppType::k_EAppTypeBeta => 17,
            EProtoAppType::k_EAppTypeShortcut => 18,
            EProtoAppType::k_EAppTypeDepotOnly => 19,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EProtoAppType {
    fn default() -> Self {
        EProtoAppType::k_EAppTypeInvalid
    }
}

impl EProtoAppType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EProtoAppType>("EProtoAppType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAppAssociationType)
pub enum EAppAssociationType {
    // @@protoc_insertion_point(enum_value:EAppAssociationType.k_EAppAssociationTypeInvalid)
    k_EAppAssociationTypeInvalid = 0,
    // @@protoc_insertion_point(enum_value:EAppAssociationType.k_EAppAssociationTypePublisher)
    k_EAppAssociationTypePublisher = 1,
    // @@protoc_insertion_point(enum_value:EAppAssociationType.k_EAppAssociationTypeDeveloper)
    k_EAppAssociationTypeDeveloper = 2,
    // @@protoc_insertion_point(enum_value:EAppAssociationType.k_EAppAssociationTypeFranchise)
    k_EAppAssociationTypeFranchise = 3,
}

impl crate::Enum for EAppAssociationType {
    const NAME: &'static str = "EAppAssociationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAppAssociationType> {
        match value {
            0 => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypeInvalid),
            1 => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypePublisher),
            2 => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypeDeveloper),
            3 => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypeFranchise),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAppAssociationType> {
        match str {
            "k_EAppAssociationTypeInvalid" => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypeInvalid),
            "k_EAppAssociationTypePublisher" => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypePublisher),
            "k_EAppAssociationTypeDeveloper" => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypeDeveloper),
            "k_EAppAssociationTypeFranchise" => ::std::option::Option::Some(EAppAssociationType::k_EAppAssociationTypeFranchise),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAppAssociationType] = &[
        EAppAssociationType::k_EAppAssociationTypeInvalid,
        EAppAssociationType::k_EAppAssociationTypePublisher,
        EAppAssociationType::k_EAppAssociationTypeDeveloper,
        EAppAssociationType::k_EAppAssociationTypeFranchise,
    ];
}

impl crate::EnumFull for EAppAssociationType {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAppAssociationType").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAppAssociationType {
    fn default() -> Self {
        EAppAssociationType::k_EAppAssociationTypeInvalid
    }
}

impl EAppAssociationType {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAppAssociationType>("EAppAssociationType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAppControllerSupportLevel)
pub enum EAppControllerSupportLevel {
    // @@protoc_insertion_point(enum_value:EAppControllerSupportLevel.k_EAppControllerSupportLevelNone)
    k_EAppControllerSupportLevelNone = 0,
    // @@protoc_insertion_point(enum_value:EAppControllerSupportLevel.k_EAppControllerSupportLevelPartial)
    k_EAppControllerSupportLevelPartial = 1,
    // @@protoc_insertion_point(enum_value:EAppControllerSupportLevel.k_EAppControllerSupportLevelFull)
    k_EAppControllerSupportLevelFull = 2,
}

impl crate::Enum for EAppControllerSupportLevel {
    const NAME: &'static str = "EAppControllerSupportLevel";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAppControllerSupportLevel> {
        match value {
            0 => ::std::option::Option::Some(EAppControllerSupportLevel::k_EAppControllerSupportLevelNone),
            1 => ::std::option::Option::Some(EAppControllerSupportLevel::k_EAppControllerSupportLevelPartial),
            2 => ::std::option::Option::Some(EAppControllerSupportLevel::k_EAppControllerSupportLevelFull),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAppControllerSupportLevel> {
        match str {
            "k_EAppControllerSupportLevelNone" => ::std::option::Option::Some(EAppControllerSupportLevel::k_EAppControllerSupportLevelNone),
            "k_EAppControllerSupportLevelPartial" => ::std::option::Option::Some(EAppControllerSupportLevel::k_EAppControllerSupportLevelPartial),
            "k_EAppControllerSupportLevelFull" => ::std::option::Option::Some(EAppControllerSupportLevel::k_EAppControllerSupportLevelFull),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAppControllerSupportLevel] = &[
        EAppControllerSupportLevel::k_EAppControllerSupportLevelNone,
        EAppControllerSupportLevel::k_EAppControllerSupportLevelPartial,
        EAppControllerSupportLevel::k_EAppControllerSupportLevelFull,
    ];
}

impl crate::EnumFull for EAppControllerSupportLevel {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAppControllerSupportLevel").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAppControllerSupportLevel {
    fn default() -> Self {
        EAppControllerSupportLevel::k_EAppControllerSupportLevelNone
    }
}

impl EAppControllerSupportLevel {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAppControllerSupportLevel>("EAppControllerSupportLevel")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAppGamepadGyroTrackpadSupportLevel)
pub enum EAppGamepadGyroTrackpadSupportLevel {
    // @@protoc_insertion_point(enum_value:EAppGamepadGyroTrackpadSupportLevel.k_EAppGamepadGyroTrackpadSupportLevelUnknown)
    k_EAppGamepadGyroTrackpadSupportLevelUnknown = -1,
    // @@protoc_insertion_point(enum_value:EAppGamepadGyroTrackpadSupportLevel.k_EAppGamepadGyroTrackpadSupportLevelNoGamepad)
    k_EAppGamepadGyroTrackpadSupportLevelNoGamepad = 0,
    // @@protoc_insertion_point(enum_value:EAppGamepadGyroTrackpadSupportLevel.k_EAppGamepadGyroTrackpadSupportLevelGamepad)
    k_EAppGamepadGyroTrackpadSupportLevelGamepad = 1,
    // @@protoc_insertion_point(enum_value:EAppGamepadGyroTrackpadSupportLevel.k_EAppGamepadGyroTrackpadSupportLevelSimultaneous)
    k_EAppGamepadGyroTrackpadSupportLevelSimultaneous = 2,
}

impl crate::Enum for EAppGamepadGyroTrackpadSupportLevel {
    const NAME: &'static str = "EAppGamepadGyroTrackpadSupportLevel";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAppGamepadGyroTrackpadSupportLevel> {
        match value {
            -1 => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelUnknown),
            0 => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelNoGamepad),
            1 => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelGamepad),
            2 => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelSimultaneous),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAppGamepadGyroTrackpadSupportLevel> {
        match str {
            "k_EAppGamepadGyroTrackpadSupportLevelUnknown" => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelUnknown),
            "k_EAppGamepadGyroTrackpadSupportLevelNoGamepad" => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelNoGamepad),
            "k_EAppGamepadGyroTrackpadSupportLevelGamepad" => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelGamepad),
            "k_EAppGamepadGyroTrackpadSupportLevelSimultaneous" => ::std::option::Option::Some(EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelSimultaneous),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAppGamepadGyroTrackpadSupportLevel] = &[
        EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelUnknown,
        EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelNoGamepad,
        EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelGamepad,
        EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelSimultaneous,
    ];
}

impl crate::EnumFull for EAppGamepadGyroTrackpadSupportLevel {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAppGamepadGyroTrackpadSupportLevel").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = match self {
            EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelUnknown => 0,
            EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelNoGamepad => 1,
            EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelGamepad => 2,
            EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelSimultaneous => 3,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EAppGamepadGyroTrackpadSupportLevel {
    fn default() -> Self {
        EAppGamepadGyroTrackpadSupportLevel::k_EAppGamepadGyroTrackpadSupportLevelUnknown
    }
}

impl EAppGamepadGyroTrackpadSupportLevel {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAppGamepadGyroTrackpadSupportLevel>("EAppGamepadGyroTrackpadSupportLevel")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EAppHDRSupport)
pub enum EAppHDRSupport {
    // @@protoc_insertion_point(enum_value:EAppHDRSupport.k_EHDRSupport_Unknown)
    k_EHDRSupport_Unknown = 0,
    // @@protoc_insertion_point(enum_value:EAppHDRSupport.k_EHDRSupport_SDR)
    k_EHDRSupport_SDR = 1,
    // @@protoc_insertion_point(enum_value:EAppHDRSupport.k_EHDRSupport_HDR)
    k_EHDRSupport_HDR = 2,
    // @@protoc_insertion_point(enum_value:EAppHDRSupport.k_EHDRSupport_HDR_Broken)
    k_EHDRSupport_HDR_Broken = 3,
    // @@protoc_insertion_point(enum_value:EAppHDRSupport.k_EHDRSupport_HDR_RequiresUserAction)
    k_EHDRSupport_HDR_RequiresUserAction = 4,
}

impl crate::Enum for EAppHDRSupport {
    const NAME: &'static str = "EAppHDRSupport";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAppHDRSupport> {
        match value {
            0 => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_Unknown),
            1 => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_SDR),
            2 => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_HDR),
            3 => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_HDR_Broken),
            4 => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_HDR_RequiresUserAction),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EAppHDRSupport> {
        match str {
            "k_EHDRSupport_Unknown" => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_Unknown),
            "k_EHDRSupport_SDR" => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_SDR),
            "k_EHDRSupport_HDR" => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_HDR),
            "k_EHDRSupport_HDR_Broken" => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_HDR_Broken),
            "k_EHDRSupport_HDR_RequiresUserAction" => ::std::option::Option::Some(EAppHDRSupport::k_EHDRSupport_HDR_RequiresUserAction),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EAppHDRSupport] = &[
        EAppHDRSupport::k_EHDRSupport_Unknown,
        EAppHDRSupport::k_EHDRSupport_SDR,
        EAppHDRSupport::k_EHDRSupport_HDR,
        EAppHDRSupport::k_EHDRSupport_HDR_Broken,
        EAppHDRSupport::k_EHDRSupport_HDR_RequiresUserAction,
    ];
}

impl crate::EnumFull for EAppHDRSupport {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EAppHDRSupport").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EAppHDRSupport {
    fn default() -> Self {
        EAppHDRSupport::k_EHDRSupport_Unknown
    }
}

impl EAppHDRSupport {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<EAppHDRSupport>("EAppHDRSupport")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fsteammessages_appoverview.proto\x1a\x0benums.proto\"y\n\x1bCAppOve\
    rview_AppAssociation\x12F\n\x04type\x18\x01\x20\x01(\x0e2\x14.EAppAssoci\
    ationType:\x1ck_EAppAssociationTypeInvalidR\x04type\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\"\xde\x05\n\x1aCAppOverview_PerClientData\
    \x12\x1a\n\x08clientid\x18\x01\x20\x01(\x04R\x08clientid\x12\x1f\n\x0bcl\
    ient_name\x18\x02\x20\x01(\tR\nclientName\x12O\n\x0edisplay_status\x18\
    \x03\x20\x01(\x0e2\x0f.EDisplayStatus:\x17k_EDisplayStatusInvalidR\rdisp\
    layStatus\x12.\n\x11status_percentage\x18\x04\x20\x01(\r:\x010R\x10statu\
    sPercentage\x12\x1f\n\x0bactive_beta\x18\x05\x20\x01(\tR\nactiveBeta\x12\
    \x1c\n\tinstalled\x18\x06\x20\x01(\x08R\tinstalled\x12,\n\x10bytes_downl\
    oaded\x18\x07\x20\x01(\x04:\x010R\x0fbytesDownloaded\x12\"\n\x0bbytes_to\
    tal\x18\x08\x20\x01(\x04:\x010R\nbytesTotal\x129\n\x19streaming_to_local\
    _client\x18\t\x20\x01(\x08R\x16streamingToLocalClient\x12F\n\x20is_avail\
    able_on_current_platform\x18\n\x20\x01(\x08R\x1cisAvailableOnCurrentPlat\
    form\x12+\n\x12is_invalid_os_type\x18\x0b\x20\x01(\x08R\x0fisInvalidOsTy\
    pe\x12#\n\rplaytime_left\x18\x0c\x20\x01(\rR\x0cplaytimeLeft\x12M\n\x0cc\
    loud_status\x18\r\x20\x01(\x0e2\x10.EAppCloudStatus:\x18k_EAppCloudStatu\
    sInvalidR\x0bcloudStatus\x12M\n$update_available_but_disabled_by_app\x18\
    \x0e\x20\x01(\x08R\x1fupdateAvailableButDisabledByApp\"\x9a\x15\n\x0cCAp\
    pOverview\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12!\n\x0cdisp\
    lay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12/\n\x14visible_in_game_li\
    st\x18\x04\x20\x01(\x08R\x11visibleInGameList\x12#\n\rsubscribed_to\x18\
    \x05\x20\x01(\x08R\x0csubscribedTo\x12\x17\n\x07sort_as\x18\x06\x20\x01(\
    \tR\x06sortAs\x12<\n\x08app_type\x18\x07\x20\x01(\x0e2\x0e.EProtoAppType\
    :\x11k_EAppTypeInvalidR\x07appType\x12\x1b\n\tmru_index\x18\r\x20\x01(\r\
    R\x08mruIndex\x128\n\x17rt_recent_activity_time\x18\x0e\x20\x01(\r:\x010\
    R\x14rtRecentActivityTime\x12;\n\x18minutes_playtime_forever\x18\x10\x20\
    \x01(\r:\x010R\x16minutesPlaytimeForever\x12G\n\x1fminutes_playtime_last\
    _two_weeks\x18\x11\x20\x01(\r:\x010R\x1bminutesPlaytimeLastTwoWeeks\x120\
    \n\x13rt_last_time_played\x18\x12\x20\x01(\r:\x010R\x10rtLastTimePlayed\
    \x12\x1b\n\tstore_tag\x18\x13\x20\x03(\rR\x08storeTag\x12>\n\x0bassociat\
    ion\x18\x14\x20\x03(\x0b2\x1c.CAppOverview_AppAssociationR\x0bassociatio\
    n\x12%\n\x0estore_category\x18\x17\x20\x03(\rR\rstoreCategory\x12:\n\x18\
    rt_original_release_date\x18\x19\x20\x01(\r:\x010R\x15rtOriginalReleaseD\
    ate\x124\n\x15rt_steam_release_date\x18\x1a\x20\x01(\r:\x010R\x12rtSteam\
    ReleaseDate\x12\x1b\n\ticon_hash\x18\x1b\x20\x01(\tR\x08iconHash\x12u\n\
    \x17xbox_controller_support\x18\x1f\x20\x01(\x0e2\x1b.EAppControllerSupp\
    ortLevel:\x20k_EAppControllerSupportLevelNoneR\x15xboxControllerSupport\
    \x12!\n\x0cvr_supported\x18\x20\x20\x01(\x08R\x0bvrSupported\x12)\n\x10m\
    etacritic_score\x18$\x20\x01(\rR\x0fmetacriticScore\x12\x20\n\x0csize_on\
    _disk\x18%\x20\x01(\x04R\nsizeOnDisk\x12&\n\x0fthird_party_mod\x18&\x20\
    \x01(\x08R\rthirdPartyMod\x12\x1b\n\ticon_data\x18'\x20\x01(\tR\x08iconD\
    ata\x12(\n\x10icon_data_format\x18(\x20\x01(\tR\x0eiconDataFormat\x12\
    \x16\n\x06gameid\x18)\x20\x01(\tR\x06gameid\x128\n\x18library_capsule_fi\
    lename\x18*\x20\x01(\tR\x16libraryCapsuleFilename\x12C\n\x0fper_client_d\
    ata\x18+\x20\x03(\x0b2\x1b.CAppOverview_PerClientDataR\rperClientData\
    \x126\n\x17most_available_clientid\x18,\x20\x01(\x04R\x15mostAvailableCl\
    ientid\x12+\n\x11selected_clientid\x18-\x20\x01(\x04R\x10selectedClienti\
    d\x12/\n\x14rt_store_asset_mtime\x18.\x20\x01(\rR\x11rtStoreAssetMtime\
    \x121\n\x15rt_custom_image_mtime\x18/\x20\x01(\rR\x12rtCustomImageMtime\
    \x123\n\x16optional_parent_app_id\x180\x20\x01(\rR\x13optionalParentAppI\
    d\x12(\n\x10owner_account_id\x181\x20\x01(\rR\x0eownerAccountId\x125\n\
    \x17review_score_with_bombs\x185\x20\x01(\rR\x14reviewScoreWithBombs\x12\
    ?\n\x1creview_percentage_with_bombs\x186\x20\x01(\rR\x19reviewPercentage\
    WithBombs\x12;\n\x1areview_score_without_bombs\x187\x20\x01(\rR\x17revie\
    wScoreWithoutBombs\x12E\n\x1freview_percentage_without_bombs\x188\x20\
    \x01(\rR\x1creviewPercentageWithoutBombs\x12\x1d\n\nlibrary_id\x189\x20\
    \x01(\tR\tlibraryId\x12\x17\n\x07vr_only\x18:\x20\x01(\x08R\x06vrOnly\
    \x12'\n\x0fmastersub_appid\x18;\x20\x01(\rR\x0emastersubAppid\x12>\n\x1b\
    mastersub_includedwith_logo\x18<\x20\x01(\tR\x19mastersubIncludedwithLog\
    o\x123\n\x16site_license_site_name\x18>\x20\x01(\tR\x13siteLicenseSiteNa\
    me\x126\n\x17shortcut_override_appid\x18?\x20\x01(\rR\x15shortcutOverrid\
    eAppid\x12\x88\x01\n\x1asteam_deck_compat_category\x18@\x20\x01(\x0e2\
    \x20.ESteamDeckCompatibilityCategory:)k_ESteamDeckCompatibilityCategory_\
    UnknownR\x17steamDeckCompatCategory\x12<\n\x1brt_last_time_locally_playe\
    d\x18A\x20\x01(\rR\x17rtLastTimeLocallyPlayed\x12*\n\x11rt_purchased_tim\
    e\x18B\x20\x01(\rR\x0frtPurchasedTime\x12'\n\x0fheader_filename\x18C\x20\
    \x01(\tR\x0eheaderFilename\x12.\n\x13local_cache_version\x18D\x20\x01(\r\
    R\x11localCacheVersion\x12s\n\x16ps4_controller_support\x18E\x20\x01(\
    \x0e2\x1b.EAppControllerSupportLevel:\x20k_EAppControllerSupportLevelNon\
    eR\x14ps4ControllerSupport\x12s\n\x16ps5_controller_support\x18F\x20\x01\
    (\x0e2\x1b.EAppControllerSupportLevel:\x20k_EAppControllerSupportLevelNo\
    neR\x14ps5ControllerSupport\x12+\n\x11gamepad_preferred\x18G\x20\x01(\
    \x08R\x10gamepadPreferred\"\xb6\x01\n\x13CAppOverview_Change\x120\n\x0ca\
    pp_overview\x18\x01\x20\x03(\x0b2\r.CAppOverviewR\x0bappOverview\x12#\n\
    \rremoved_appid\x18\x02\x20\x03(\rR\x0cremovedAppid\x12\x1f\n\x0bfull_up\
    date\x18\x03\x20\x01(\x08R\nfullUpdate\x12'\n\x0fupdate_complete\x18\x04\
    \x20\x01(\x08R\x0eupdateComplete\"\\\n\x11CAppBootstrapData\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x16\n\x06hidden\x18\x02\x20\
    \x01(\x08R\x06hidden\x12\x19\n\x08user_tag\x18\x03\x20\x03(\tR\x07userTa\
    g\"F\n\x15CLibraryBootstrapData\x12-\n\x08app_data\x18\x01\x20\x03(\x0b2\
    \x12.CAppBootstrapDataR\x07appData*\x86\n\n\x0eEDisplayStatus\x12\x1b\n\
    \x17k_EDisplayStatusInvalid\x10\0\x12\x1d\n\x19k_EDisplayStatusLaunching\
    \x10\x01\x12\x20\n\x1ck_EDisplayStatusUninstalling\x10\x02\x12\x1e\n\x1a\
    k_EDisplayStatusInstalling\x10\x03\x12\x1b\n\x17k_EDisplayStatusRunning\
    \x10\x04\x12\x1e\n\x1ak_EDisplayStatusValidating\x10\x05\x12\x1c\n\x18k_\
    EDisplayStatusUpdating\x10\x06\x12\x1f\n\x1bk_EDisplayStatusDownloading\
    \x10\x07\x12!\n\x1dk_EDisplayStatusSynchronizing\x10\x08\x12\"\n\x1ek_ED\
    isplayStatusReadyToInstall\x10\t\x12\"\n\x1ek_EDisplayStatusReadyToPrelo\
    ad\x10\n\x12!\n\x1dk_EDisplayStatusReadyToLaunch\x10\x0b\x12$\n\x20k_EDi\
    splayStatusRegionRestricted\x10\x0c\x12\x1f\n\x1bk_EDisplayStatusPresale\
    Only\x10\r\x12#\n\x1fk_EDisplayStatusInvalidPlatform\x10\x0e\x12#\n\x1fk\
    _EDisplayStatusPreloadComplete\x10\x10\x12\"\n\x1ek_EDisplayStatusBorrow\
    erLocked\x10\x11\x12\x20\n\x1ck_EDisplayStatusUpdatePaused\x10\x12\x12\
    \x20\n\x1ck_EDisplayStatusUpdateQueued\x10\x13\x12\"\n\x1ek_EDisplayStat\
    usUpdateRequired\x10\x14\x12\"\n\x1ek_EDisplayStatusUpdateDisabled\x10\
    \x15\x12\"\n\x1ek_EDisplayStatusDownloadPaused\x10\x16\x12\"\n\x1ek_EDis\
    playStatusDownloadQueued\x10\x17\x12$\n\x20k_EDisplayStatusDownloadRequi\
    red\x10\x18\x12$\n\x20k_EDisplayStatusDownloadDisabled\x10\x19\x12\"\n\
    \x1ek_EDisplayStatusLicensePending\x10\x1a\x12\"\n\x1ek_EDisplayStatusLi\
    censeExpired\x10\x1b\x12\x20\n\x1ck_EDisplayStatusAvailForFree\x10\x1c\
    \x12!\n\x1dk_EDisplayStatusAvailToBorrow\x10\x1d\x12\"\n\x1ek_EDisplaySt\
    atusAvailGuestPass\x10\x1e\x12\x1c\n\x18k_EDisplayStatusPurchase\x10\x1f\
    \x12\x1f\n\x1bk_EDisplayStatusUnavailable\x10\x20\x12!\n\x1dk_EDisplaySt\
    atusNotLaunchable\x10!\x12\x1e\n\x1ak_EDisplayStatusCloudError\x10\"\x12\
    \"\n\x1ek_EDisplayStatusCloudOutOfDate\x10#\x12\x1f\n\x1bk_EDisplayStatu\
    sTerminating\x10$\x12\x1f\n\x1bk_EDisplayStatusOwnerLocked\x10%*\xf7\x02\
    \n\x0fEAppCloudStatus\x12\x1c\n\x18k_EAppCloudStatusInvalid\x10\0\x12\
    \x1d\n\x19k_EAppCloudStatusDisabled\x10\x01\x12\x1c\n\x18k_EAppCloudStat\
    usUnknown\x10\x02\x12!\n\x1dk_EAppCloudStatusSynchronized\x10\x03\x12\
    \x1d\n\x19k_EAppCloudStatusChecking\x10\x04\x12\x1e\n\x1ak_EAppCloudStat\
    usOutOfSync\x10\x05\x12\x1e\n\x1ak_EAppCloudStatusUploading\x10\x06\x12\
    \x20\n\x1ck_EAppCloudStatusDownloading\x10\x07\x12\x1f\n\x1bk_EAppCloudS\
    tatusSyncFailed\x10\x08\x12\x1d\n\x19k_EAppCloudStatusConflict\x10\t\x12\
    %\n!k_EAppCloudStatusPendingElsewhere\x10\n*\xea\x03\n\rEProtoAppType\
    \x12\x15\n\x11k_EAppTypeInvalid\x10\0\x12\x12\n\x0ek_EAppTypeGame\x10\
    \x01\x12\x19\n\x15k_EAppTypeApplication\x10\x02\x12\x12\n\x0ek_EAppTypeT\
    ool\x10\x04\x12\x12\n\x0ek_EAppTypeDemo\x10\x08\x12\x17\n\x13k_EAppTypeD\
    eprected\x10\x10\x12\x11\n\rk_EAppTypeDLC\x10\x20\x12\x13\n\x0fk_EAppTyp\
    eGuide\x10@\x12\x15\n\x10k_EAppTypeDriver\x10\x80\x01\x12\x15\n\x10k_EAp\
    pTypeConfig\x10\x80\x02\x12\x17\n\x12k_EAppTypeHardware\x10\x80\x04\x12\
    \x18\n\x13k_EAppTypeFranchise\x10\x80\x08\x12\x14\n\x0fk_EAppTypeVideo\
    \x10\x80\x10\x12\x15\n\x10k_EAppTypePlugin\x10\x80\x20\x12\x19\n\x14k_EA\
    ppTypeMusicAlbum\x10\x80@\x12\x16\n\x10k_EAppTypeSeries\x10\x80\x80\x01\
    \x12\x15\n\x0fk_EAppTypeComic\x10\x80\x80\x02\x12\x14\n\x0ek_EAppTypeBet\
    a\x10\x80\x80\x04\x12\x1a\n\x12k_EAppTypeShortcut\x10\x80\x80\x80\x80\
    \x04\x12\x20\n\x13k_EAppTypeDepotOnly\x10\x80\x80\x80\x80\xf8\xff\xff\
    \xff\xff\x01*\xa3\x01\n\x13EAppAssociationType\x12\x20\n\x1ck_EAppAssoci\
    ationTypeInvalid\x10\0\x12\"\n\x1ek_EAppAssociationTypePublisher\x10\x01\
    \x12\"\n\x1ek_EAppAssociationTypeDeveloper\x10\x02\x12\"\n\x1ek_EAppAsso\
    ciationTypeFranchise\x10\x03*\x91\x01\n\x1aEAppControllerSupportLevel\
    \x12$\n\x20k_EAppControllerSupportLevelNone\x10\0\x12'\n#k_EAppControlle\
    rSupportLevelPartial\x10\x01\x12$\n\x20k_EAppControllerSupportLevelFull\
    \x10\x02*\xfd\x01\n#EAppGamepadGyroTrackpadSupportLevel\x129\n,k_EAppGam\
    epadGyroTrackpadSupportLevelUnknown\x10\xff\xff\xff\xff\xff\xff\xff\xff\
    \xff\x01\x122\n.k_EAppGamepadGyroTrackpadSupportLevelNoGamepad\x10\0\x12\
    0\n,k_EAppGamepadGyroTrackpadSupportLevelGamepad\x10\x01\x125\n1k_EAppGa\
    mepadGyroTrackpadSupportLevelSimultaneous\x10\x02*\xa1\x01\n\x0eEAppHDRS\
    upport\x12\x19\n\x15k_EHDRSupport_Unknown\x10\0\x12\x15\n\x11k_EHDRSuppo\
    rt_SDR\x10\x01\x12\x15\n\x11k_EHDRSupport_HDR\x10\x02\x12\x1c\n\x18k_EHD\
    RSupport_HDR_Broken\x10\x03\x12(\n$k_EHDRSupport_HDR_RequiresUserAction\
    \x10\x04B\x05H\x01\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::enums::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CAppOverview_AppAssociation::generated_message_descriptor_data());
            messages.push(CAppOverview_PerClientData::generated_message_descriptor_data());
            messages.push(CAppOverview::generated_message_descriptor_data());
            messages.push(CAppOverview_Change::generated_message_descriptor_data());
            messages.push(CAppBootstrapData::generated_message_descriptor_data());
            messages.push(CLibraryBootstrapData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(7);
            enums.push(EDisplayStatus::generated_enum_descriptor_data());
            enums.push(EAppCloudStatus::generated_enum_descriptor_data());
            enums.push(EProtoAppType::generated_enum_descriptor_data());
            enums.push(EAppAssociationType::generated_enum_descriptor_data());
            enums.push(EAppControllerSupportLevel::generated_enum_descriptor_data());
            enums.push(EAppGamepadGyroTrackpadSupportLevel::generated_enum_descriptor_data());
            enums.push(EAppHDRSupport::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
