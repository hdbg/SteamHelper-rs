// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]


#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gameservers.steamclient.proto`

// @@protoc_insertion_point(message:CGameServers_GetServerList_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerList_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerList_Request.filter)
    pub filter: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameServers_GetServerList_Request.limit)
    pub limit: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerList_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerList_Request {
    fn default() -> &'a CGameServers_GetServerList_Request {
        <CGameServers_GetServerList_Request as crate::Message>::default_instance()
    }
}

impl CGameServers_GetServerList_Request {
    pub fn new() -> CGameServers_GetServerList_Request {
        ::std::default::Default::default()
    }

    // optional string filter = 1;

    pub fn filter(&self) -> &str {
        match self.filter.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filter(&mut self) {
        self.filter = ::std::option::Option::None;
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        if self.filter.is_none() {
            self.filter = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        self.filter.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 limit = 2;

    pub fn limit(&self) -> u32 {
        self.limit.unwrap_or(100u32)
    }

    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u32) {
        self.limit = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "filter",
            |m: &CGameServers_GetServerList_Request| { &m.filter },
            |m: &mut CGameServers_GetServerList_Request| { &mut m.filter },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "limit",
            |m: &CGameServers_GetServerList_Request| { &m.limit },
            |m: &mut CGameServers_GetServerList_Request| { &mut m.limit },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerList_Request>(
            "CGameServers_GetServerList_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_GetServerList_Request {
    const NAME: &'static str = "CGameServers_GetServerList_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filter = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filter.as_ref() {
            my_size += crate::rt::string_size(1, &v);
        }
        if let Some(v) = self.limit {
            my_size += crate::rt::uint32_size(2, v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.filter.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.limit {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerList_Request {
        CGameServers_GetServerList_Request::new()
    }

    fn clear(&mut self) {
        self.filter = ::std::option::Option::None;
        self.limit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerList_Request {
        static instance: CGameServers_GetServerList_Request = CGameServers_GetServerList_Request {
            filter: ::std::option::Option::None,
            limit: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_GetServerList_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerList_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerList_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_GetServerList_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameServers_GetServerList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerList_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.servers)
    pub servers: ::std::vec::Vec<cgame_servers_get_server_list_response::Server>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerList_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerList_Response {
    fn default() -> &'a CGameServers_GetServerList_Response {
        <CGameServers_GetServerList_Response as crate::Message>::default_instance()
    }
}

impl CGameServers_GetServerList_Response {
    pub fn new() -> CGameServers_GetServerList_Response {
        ::std::default::Default::default()
    }

    // repeated .CGameServers_GetServerList_Response.Server servers = 1;

    pub fn servers(&self) -> &[cgame_servers_get_server_list_response::Server] {
        &self.servers
    }

    pub fn clear_servers(&mut self) {
        self.servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_servers(&mut self, v: ::std::vec::Vec<cgame_servers_get_server_list_response::Server>) {
        self.servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servers(&mut self) -> &mut ::std::vec::Vec<cgame_servers_get_server_list_response::Server> {
        &mut self.servers
    }

    // Take field
    pub fn take_servers(&mut self) -> ::std::vec::Vec<cgame_servers_get_server_list_response::Server> {
        ::std::mem::replace(&mut self.servers, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servers",
            |m: &CGameServers_GetServerList_Response| { &m.servers },
            |m: &mut CGameServers_GetServerList_Response| { &mut m.servers },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerList_Response>(
            "CGameServers_GetServerList_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_GetServerList_Response {
    const NAME: &'static str = "CGameServers_GetServerList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.servers.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.servers {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerList_Response {
        CGameServers_GetServerList_Response::new()
    }

    fn clear(&mut self) {
        self.servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerList_Response {
        static instance: CGameServers_GetServerList_Response = CGameServers_GetServerList_Response {
            servers: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_GetServerList_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerList_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerList_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_GetServerList_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameServers_GetServerList_Response`
pub mod cgame_servers_get_server_list_response {
    // @@protoc_insertion_point(message:CGameServers_GetServerList_Response.Server)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Server {
        // message fields
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.addr)
        pub addr: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.gameport)
        pub gameport: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.specport)
        pub specport: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.gamedir)
        pub gamedir: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.version)
        pub version: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.product)
        pub product: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.region)
        pub region: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.players)
        pub players: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.max_players)
        pub max_players: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.bots)
        pub bots: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.map)
        pub map: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.secure)
        pub secure: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.dedicated)
        pub dedicated: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.os)
        pub os: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_GetServerList_Response.Server.gametype)
        pub gametype: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameServers_GetServerList_Response.Server.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Server {
        fn default() -> &'a Server {
            <Server as crate::Message>::default_instance()
        }
    }

    impl Server {
        pub fn new() -> Server {
            ::std::default::Default::default()
        }

        // optional string addr = 1;

        pub fn addr(&self) -> &str {
            match self.addr.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_addr(&mut self) {
            self.addr = ::std::option::Option::None;
        }

        pub fn has_addr(&self) -> bool {
            self.addr.is_some()
        }

        // Param is passed by value, moved
        pub fn set_addr(&mut self, v: ::std::string::String) {
            self.addr = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_addr(&mut self) -> &mut ::std::string::String {
            if self.addr.is_none() {
                self.addr = ::std::option::Option::Some(::std::string::String::new());
            }
            self.addr.as_mut().unwrap()
        }

        // Take field
        pub fn take_addr(&mut self) -> ::std::string::String {
            self.addr.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 gameport = 2;

        pub fn gameport(&self) -> u32 {
            self.gameport.unwrap_or(0)
        }

        pub fn clear_gameport(&mut self) {
            self.gameport = ::std::option::Option::None;
        }

        pub fn has_gameport(&self) -> bool {
            self.gameport.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gameport(&mut self, v: u32) {
            self.gameport = ::std::option::Option::Some(v);
        }

        // optional uint32 specport = 3;

        pub fn specport(&self) -> u32 {
            self.specport.unwrap_or(0)
        }

        pub fn clear_specport(&mut self) {
            self.specport = ::std::option::Option::None;
        }

        pub fn has_specport(&self) -> bool {
            self.specport.is_some()
        }

        // Param is passed by value, moved
        pub fn set_specport(&mut self, v: u32) {
            self.specport = ::std::option::Option::Some(v);
        }

        // optional fixed64 steamid = 4;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional string name = 5;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 appid = 6;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional string gamedir = 7;

        pub fn gamedir(&self) -> &str {
            match self.gamedir.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_gamedir(&mut self) {
            self.gamedir = ::std::option::Option::None;
        }

        pub fn has_gamedir(&self) -> bool {
            self.gamedir.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gamedir(&mut self, v: ::std::string::String) {
            self.gamedir = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_gamedir(&mut self) -> &mut ::std::string::String {
            if self.gamedir.is_none() {
                self.gamedir = ::std::option::Option::Some(::std::string::String::new());
            }
            self.gamedir.as_mut().unwrap()
        }

        // Take field
        pub fn take_gamedir(&mut self) -> ::std::string::String {
            self.gamedir.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string version = 8;

        pub fn version(&self) -> &str {
            match self.version.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_version(&mut self) {
            self.version = ::std::option::Option::None;
        }

        pub fn has_version(&self) -> bool {
            self.version.is_some()
        }

        // Param is passed by value, moved
        pub fn set_version(&mut self, v: ::std::string::String) {
            self.version = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_version(&mut self) -> &mut ::std::string::String {
            if self.version.is_none() {
                self.version = ::std::option::Option::Some(::std::string::String::new());
            }
            self.version.as_mut().unwrap()
        }

        // Take field
        pub fn take_version(&mut self) -> ::std::string::String {
            self.version.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string product = 9;

        pub fn product(&self) -> &str {
            match self.product.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_product(&mut self) {
            self.product = ::std::option::Option::None;
        }

        pub fn has_product(&self) -> bool {
            self.product.is_some()
        }

        // Param is passed by value, moved
        pub fn set_product(&mut self, v: ::std::string::String) {
            self.product = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_product(&mut self) -> &mut ::std::string::String {
            if self.product.is_none() {
                self.product = ::std::option::Option::Some(::std::string::String::new());
            }
            self.product.as_mut().unwrap()
        }

        // Take field
        pub fn take_product(&mut self) -> ::std::string::String {
            self.product.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 region = 10;

        pub fn region(&self) -> i32 {
            self.region.unwrap_or(0)
        }

        pub fn clear_region(&mut self) {
            self.region = ::std::option::Option::None;
        }

        pub fn has_region(&self) -> bool {
            self.region.is_some()
        }

        // Param is passed by value, moved
        pub fn set_region(&mut self, v: i32) {
            self.region = ::std::option::Option::Some(v);
        }

        // optional int32 players = 11;

        pub fn players(&self) -> i32 {
            self.players.unwrap_or(0)
        }

        pub fn clear_players(&mut self) {
            self.players = ::std::option::Option::None;
        }

        pub fn has_players(&self) -> bool {
            self.players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_players(&mut self, v: i32) {
            self.players = ::std::option::Option::Some(v);
        }

        // optional int32 max_players = 12;

        pub fn max_players(&self) -> i32 {
            self.max_players.unwrap_or(0)
        }

        pub fn clear_max_players(&mut self) {
            self.max_players = ::std::option::Option::None;
        }

        pub fn has_max_players(&self) -> bool {
            self.max_players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_players(&mut self, v: i32) {
            self.max_players = ::std::option::Option::Some(v);
        }

        // optional int32 bots = 13;

        pub fn bots(&self) -> i32 {
            self.bots.unwrap_or(0)
        }

        pub fn clear_bots(&mut self) {
            self.bots = ::std::option::Option::None;
        }

        pub fn has_bots(&self) -> bool {
            self.bots.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bots(&mut self, v: i32) {
            self.bots = ::std::option::Option::Some(v);
        }

        // optional string map = 14;

        pub fn map(&self) -> &str {
            match self.map.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_map(&mut self) {
            self.map = ::std::option::Option::None;
        }

        pub fn has_map(&self) -> bool {
            self.map.is_some()
        }

        // Param is passed by value, moved
        pub fn set_map(&mut self, v: ::std::string::String) {
            self.map = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_map(&mut self) -> &mut ::std::string::String {
            if self.map.is_none() {
                self.map = ::std::option::Option::Some(::std::string::String::new());
            }
            self.map.as_mut().unwrap()
        }

        // Take field
        pub fn take_map(&mut self) -> ::std::string::String {
            self.map.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool secure = 15;

        pub fn secure(&self) -> bool {
            self.secure.unwrap_or(false)
        }

        pub fn clear_secure(&mut self) {
            self.secure = ::std::option::Option::None;
        }

        pub fn has_secure(&self) -> bool {
            self.secure.is_some()
        }

        // Param is passed by value, moved
        pub fn set_secure(&mut self, v: bool) {
            self.secure = ::std::option::Option::Some(v);
        }

        // optional bool dedicated = 16;

        pub fn dedicated(&self) -> bool {
            self.dedicated.unwrap_or(false)
        }

        pub fn clear_dedicated(&mut self) {
            self.dedicated = ::std::option::Option::None;
        }

        pub fn has_dedicated(&self) -> bool {
            self.dedicated.is_some()
        }

        // Param is passed by value, moved
        pub fn set_dedicated(&mut self, v: bool) {
            self.dedicated = ::std::option::Option::Some(v);
        }

        // optional string os = 17;

        pub fn os(&self) -> &str {
            match self.os.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_os(&mut self) {
            self.os = ::std::option::Option::None;
        }

        pub fn has_os(&self) -> bool {
            self.os.is_some()
        }

        // Param is passed by value, moved
        pub fn set_os(&mut self, v: ::std::string::String) {
            self.os = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_os(&mut self) -> &mut ::std::string::String {
            if self.os.is_none() {
                self.os = ::std::option::Option::Some(::std::string::String::new());
            }
            self.os.as_mut().unwrap()
        }

        // Take field
        pub fn take_os(&mut self) -> ::std::string::String {
            self.os.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string gametype = 18;

        pub fn gametype(&self) -> &str {
            match self.gametype.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_gametype(&mut self) {
            self.gametype = ::std::option::Option::None;
        }

        pub fn has_gametype(&self) -> bool {
            self.gametype.is_some()
        }

        // Param is passed by value, moved
        pub fn set_gametype(&mut self, v: ::std::string::String) {
            self.gametype = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_gametype(&mut self) -> &mut ::std::string::String {
            if self.gametype.is_none() {
                self.gametype = ::std::option::Option::Some(::std::string::String::new());
            }
            self.gametype.as_mut().unwrap()
        }

        // Take field
        pub fn take_gametype(&mut self) -> ::std::string::String {
            self.gametype.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(18);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "addr",
                |m: &Server| { &m.addr },
                |m: &mut Server| { &mut m.addr },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "gameport",
                |m: &Server| { &m.gameport },
                |m: &mut Server| { &mut m.gameport },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "specport",
                |m: &Server| { &m.specport },
                |m: &mut Server| { &mut m.specport },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Server| { &m.steamid },
                |m: &mut Server| { &mut m.steamid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Server| { &m.name },
                |m: &mut Server| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Server| { &m.appid },
                |m: &mut Server| { &mut m.appid },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "gamedir",
                |m: &Server| { &m.gamedir },
                |m: &mut Server| { &mut m.gamedir },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "version",
                |m: &Server| { &m.version },
                |m: &mut Server| { &mut m.version },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "product",
                |m: &Server| { &m.product },
                |m: &mut Server| { &mut m.product },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "region",
                |m: &Server| { &m.region },
                |m: &mut Server| { &mut m.region },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "players",
                |m: &Server| { &m.players },
                |m: &mut Server| { &mut m.players },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_players",
                |m: &Server| { &m.max_players },
                |m: &mut Server| { &mut m.max_players },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "bots",
                |m: &Server| { &m.bots },
                |m: &mut Server| { &mut m.bots },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "map",
                |m: &Server| { &m.map },
                |m: &mut Server| { &mut m.map },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "secure",
                |m: &Server| { &m.secure },
                |m: &mut Server| { &mut m.secure },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "dedicated",
                |m: &Server| { &m.dedicated },
                |m: &mut Server| { &mut m.dedicated },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "os",
                |m: &Server| { &m.os },
                |m: &mut Server| { &mut m.os },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "gametype",
                |m: &Server| { &m.gametype },
                |m: &mut Server| { &mut m.gametype },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Server>(
                "CGameServers_GetServerList_Response.Server",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Server {
        const NAME: &'static str = "Server";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.addr = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.gameport = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.specport = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    33 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    42 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    48 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    58 => {
                        self.gamedir = ::std::option::Option::Some(is.read_string()?);
                    },
                    66 => {
                        self.version = ::std::option::Option::Some(is.read_string()?);
                    },
                    74 => {
                        self.product = ::std::option::Option::Some(is.read_string()?);
                    },
                    80 => {
                        self.region = ::std::option::Option::Some(is.read_int32()?);
                    },
                    88 => {
                        self.players = ::std::option::Option::Some(is.read_int32()?);
                    },
                    96 => {
                        self.max_players = ::std::option::Option::Some(is.read_int32()?);
                    },
                    104 => {
                        self.bots = ::std::option::Option::Some(is.read_int32()?);
                    },
                    114 => {
                        self.map = ::std::option::Option::Some(is.read_string()?);
                    },
                    120 => {
                        self.secure = ::std::option::Option::Some(is.read_bool()?);
                    },
                    128 => {
                        self.dedicated = ::std::option::Option::Some(is.read_bool()?);
                    },
                    138 => {
                        self.os = ::std::option::Option::Some(is.read_string()?);
                    },
                    146 => {
                        self.gametype = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.addr.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.gameport {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.specport {
                my_size += crate::rt::uint32_size(3, v);
            }
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(5, &v);
            }
            if let Some(v) = self.appid {
                my_size += crate::rt::uint32_size(6, v);
            }
            if let Some(v) = self.gamedir.as_ref() {
                my_size += crate::rt::string_size(7, &v);
            }
            if let Some(v) = self.version.as_ref() {
                my_size += crate::rt::string_size(8, &v);
            }
            if let Some(v) = self.product.as_ref() {
                my_size += crate::rt::string_size(9, &v);
            }
            if let Some(v) = self.region {
                my_size += crate::rt::int32_size(10, v);
            }
            if let Some(v) = self.players {
                my_size += crate::rt::int32_size(11, v);
            }
            if let Some(v) = self.max_players {
                my_size += crate::rt::int32_size(12, v);
            }
            if let Some(v) = self.bots {
                my_size += crate::rt::int32_size(13, v);
            }
            if let Some(v) = self.map.as_ref() {
                my_size += crate::rt::string_size(14, &v);
            }
            if let Some(v) = self.secure {
                my_size += 1 + 1;
            }
            if let Some(v) = self.dedicated {
                my_size += 2 + 1;
            }
            if let Some(v) = self.os.as_ref() {
                my_size += crate::rt::string_size(17, &v);
            }
            if let Some(v) = self.gametype.as_ref() {
                my_size += crate::rt::string_size(18, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.addr.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.gameport {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.specport {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_fixed64(4, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.appid {
                os.write_uint32(6, v)?;
            }
            if let Some(v) = self.gamedir.as_ref() {
                os.write_string(7, v)?;
            }
            if let Some(v) = self.version.as_ref() {
                os.write_string(8, v)?;
            }
            if let Some(v) = self.product.as_ref() {
                os.write_string(9, v)?;
            }
            if let Some(v) = self.region {
                os.write_int32(10, v)?;
            }
            if let Some(v) = self.players {
                os.write_int32(11, v)?;
            }
            if let Some(v) = self.max_players {
                os.write_int32(12, v)?;
            }
            if let Some(v) = self.bots {
                os.write_int32(13, v)?;
            }
            if let Some(v) = self.map.as_ref() {
                os.write_string(14, v)?;
            }
            if let Some(v) = self.secure {
                os.write_bool(15, v)?;
            }
            if let Some(v) = self.dedicated {
                os.write_bool(16, v)?;
            }
            if let Some(v) = self.os.as_ref() {
                os.write_string(17, v)?;
            }
            if let Some(v) = self.gametype.as_ref() {
                os.write_string(18, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Server {
            Server::new()
        }

        fn clear(&mut self) {
            self.addr = ::std::option::Option::None;
            self.gameport = ::std::option::Option::None;
            self.specport = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.appid = ::std::option::Option::None;
            self.gamedir = ::std::option::Option::None;
            self.version = ::std::option::Option::None;
            self.product = ::std::option::Option::None;
            self.region = ::std::option::Option::None;
            self.players = ::std::option::Option::None;
            self.max_players = ::std::option::Option::None;
            self.bots = ::std::option::Option::None;
            self.map = ::std::option::Option::None;
            self.secure = ::std::option::Option::None;
            self.dedicated = ::std::option::Option::None;
            self.os = ::std::option::Option::None;
            self.gametype = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Server {
            static instance: Server = Server {
                addr: ::std::option::Option::None,
                gameport: ::std::option::Option::None,
                specport: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                name: ::std::option::Option::None,
                appid: ::std::option::Option::None,
                gamedir: ::std::option::Option::None,
                version: ::std::option::Option::None,
                product: ::std::option::Option::None,
                region: ::std::option::Option::None,
                players: ::std::option::Option::None,
                max_players: ::std::option::Option::None,
                bots: ::std::option::Option::None,
                map: ::std::option::Option::None,
                secure: ::std::option::Option::None,
                dedicated: ::std::option::Option::None,
                os: ::std::option::Option::None,
                gametype: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Server {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGameServers_GetServerList_Response.Server").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Server {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Server {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameServers_GetServerSteamIDsByIP_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerSteamIDsByIP_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
    pub server_ips: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerSteamIDsByIP_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerSteamIDsByIP_Request {
    fn default() -> &'a CGameServers_GetServerSteamIDsByIP_Request {
        <CGameServers_GetServerSteamIDsByIP_Request as crate::Message>::default_instance()
    }
}

impl CGameServers_GetServerSteamIDsByIP_Request {
    pub fn new() -> CGameServers_GetServerSteamIDsByIP_Request {
        ::std::default::Default::default()
    }

    // repeated string server_ips = 1;

    pub fn server_ips(&self) -> &[::std::string::String] {
        &self.server_ips
    }

    pub fn clear_server_ips(&mut self) {
        self.server_ips.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_ips(&mut self, v: ::std::vec::Vec<::std::string::String>) {
        self.server_ips = v;
    }

    // Mutable pointer to the field.
    pub fn mut_server_ips(&mut self) -> &mut ::std::vec::Vec<::std::string::String> {
        &mut self.server_ips
    }

    // Take field
    pub fn take_server_ips(&mut self) -> ::std::vec::Vec<::std::string::String> {
        ::std::mem::replace(&mut self.server_ips, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_ips",
            |m: &CGameServers_GetServerSteamIDsByIP_Request| { &m.server_ips },
            |m: &mut CGameServers_GetServerSteamIDsByIP_Request| { &mut m.server_ips },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerSteamIDsByIP_Request>(
            "CGameServers_GetServerSteamIDsByIP_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_GetServerSteamIDsByIP_Request {
    const NAME: &'static str = "CGameServers_GetServerSteamIDsByIP_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.server_ips.push(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.server_ips {
            my_size += crate::rt::string_size(1, &value);
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.server_ips {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerSteamIDsByIP_Request {
        CGameServers_GetServerSteamIDsByIP_Request::new()
    }

    fn clear(&mut self) {
        self.server_ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerSteamIDsByIP_Request {
        static instance: CGameServers_GetServerSteamIDsByIP_Request = CGameServers_GetServerSteamIDsByIP_Request {
            server_ips: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_GetServerSteamIDsByIP_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerSteamIDsByIP_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerSteamIDsByIP_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_GetServerSteamIDsByIP_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameServers_IPsWithSteamIDs_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_IPsWithSteamIDs_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_IPsWithSteamIDs_Response.servers)
    pub servers: ::std::vec::Vec<cgame_servers_ips_with_steam_ids_response::Server>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_IPsWithSteamIDs_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_IPsWithSteamIDs_Response {
    fn default() -> &'a CGameServers_IPsWithSteamIDs_Response {
        <CGameServers_IPsWithSteamIDs_Response as crate::Message>::default_instance()
    }
}

impl CGameServers_IPsWithSteamIDs_Response {
    pub fn new() -> CGameServers_IPsWithSteamIDs_Response {
        ::std::default::Default::default()
    }

    // repeated .CGameServers_IPsWithSteamIDs_Response.Server servers = 1;

    pub fn servers(&self) -> &[cgame_servers_ips_with_steam_ids_response::Server] {
        &self.servers
    }

    pub fn clear_servers(&mut self) {
        self.servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_servers(&mut self, v: ::std::vec::Vec<cgame_servers_ips_with_steam_ids_response::Server>) {
        self.servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servers(&mut self) -> &mut ::std::vec::Vec<cgame_servers_ips_with_steam_ids_response::Server> {
        &mut self.servers
    }

    // Take field
    pub fn take_servers(&mut self) -> ::std::vec::Vec<cgame_servers_ips_with_steam_ids_response::Server> {
        ::std::mem::replace(&mut self.servers, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "servers",
            |m: &CGameServers_IPsWithSteamIDs_Response| { &m.servers },
            |m: &mut CGameServers_IPsWithSteamIDs_Response| { &mut m.servers },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_IPsWithSteamIDs_Response>(
            "CGameServers_IPsWithSteamIDs_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_IPsWithSteamIDs_Response {
    const NAME: &'static str = "CGameServers_IPsWithSteamIDs_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.servers.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.servers {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_IPsWithSteamIDs_Response {
        CGameServers_IPsWithSteamIDs_Response::new()
    }

    fn clear(&mut self) {
        self.servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_IPsWithSteamIDs_Response {
        static instance: CGameServers_IPsWithSteamIDs_Response = CGameServers_IPsWithSteamIDs_Response {
            servers: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_IPsWithSteamIDs_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_IPsWithSteamIDs_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_IPsWithSteamIDs_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_IPsWithSteamIDs_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameServers_IPsWithSteamIDs_Response`
pub mod cgame_servers_ips_with_steam_ids_response {
    // @@protoc_insertion_point(message:CGameServers_IPsWithSteamIDs_Response.Server)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Server {
        // message fields
        // @@protoc_insertion_point(field:CGameServers_IPsWithSteamIDs_Response.Server.addr)
        pub addr: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CGameServers_IPsWithSteamIDs_Response.Server.steamid)
        pub steamid: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameServers_IPsWithSteamIDs_Response.Server.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Server {
        fn default() -> &'a Server {
            <Server as crate::Message>::default_instance()
        }
    }

    impl Server {
        pub fn new() -> Server {
            ::std::default::Default::default()
        }

        // optional string addr = 1;

        pub fn addr(&self) -> &str {
            match self.addr.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_addr(&mut self) {
            self.addr = ::std::option::Option::None;
        }

        pub fn has_addr(&self) -> bool {
            self.addr.is_some()
        }

        // Param is passed by value, moved
        pub fn set_addr(&mut self, v: ::std::string::String) {
            self.addr = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_addr(&mut self) -> &mut ::std::string::String {
            if self.addr.is_none() {
                self.addr = ::std::option::Option::Some(::std::string::String::new());
            }
            self.addr.as_mut().unwrap()
        }

        // Take field
        pub fn take_addr(&mut self) -> ::std::string::String {
            self.addr.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional fixed64 steamid = 2;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "addr",
                |m: &Server| { &m.addr },
                |m: &mut Server| { &mut m.addr },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &Server| { &m.steamid },
                |m: &mut Server| { &mut m.steamid },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Server>(
                "CGameServers_IPsWithSteamIDs_Response.Server",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Server {
        const NAME: &'static str = "Server";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.addr = ::std::option::Option::Some(is.read_string()?);
                    },
                    17 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.addr.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.addr.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_fixed64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Server {
            Server::new()
        }

        fn clear(&mut self) {
            self.addr = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Server {
            static instance: Server = Server {
                addr: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Server {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CGameServers_IPsWithSteamIDs_Response.Server").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Server {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Server {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameServers_GetServerIPsBySteamID_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GetServerIPsBySteamID_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
    pub server_steamids: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GetServerIPsBySteamID_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GetServerIPsBySteamID_Request {
    fn default() -> &'a CGameServers_GetServerIPsBySteamID_Request {
        <CGameServers_GetServerIPsBySteamID_Request as crate::Message>::default_instance()
    }
}

impl CGameServers_GetServerIPsBySteamID_Request {
    pub fn new() -> CGameServers_GetServerIPsBySteamID_Request {
        ::std::default::Default::default()
    }

    // repeated fixed64 server_steamids = 1;

    pub fn server_steamids(&self) -> &[u64] {
        &self.server_steamids
    }

    pub fn clear_server_steamids(&mut self) {
        self.server_steamids.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_steamids(&mut self, v: ::std::vec::Vec<u64>) {
        self.server_steamids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_server_steamids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.server_steamids
    }

    // Take field
    pub fn take_server_steamids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.server_steamids, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "server_steamids",
            |m: &CGameServers_GetServerIPsBySteamID_Request| { &m.server_steamids },
            |m: &mut CGameServers_GetServerIPsBySteamID_Request| { &mut m.server_steamids },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GetServerIPsBySteamID_Request>(
            "CGameServers_GetServerIPsBySteamID_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_GetServerIPsBySteamID_Request {
    const NAME: &'static str = "CGameServers_GetServerIPsBySteamID_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.server_steamids)?;
                },
                9 => {
                    self.server_steamids.push(is.read_fixed64()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.server_steamids.len() as u64;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.server_steamids {
            os.write_fixed64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GetServerIPsBySteamID_Request {
        CGameServers_GetServerIPsBySteamID_Request::new()
    }

    fn clear(&mut self) {
        self.server_steamids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GetServerIPsBySteamID_Request {
        static instance: CGameServers_GetServerIPsBySteamID_Request = CGameServers_GetServerIPsBySteamID_Request {
            server_steamids: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_GetServerIPsBySteamID_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GetServerIPsBySteamID_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GetServerIPsBySteamID_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_GetServerIPsBySteamID_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CGameServers_QueryByFakeIP_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_QueryByFakeIP_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_QueryByFakeIP_Request.fake_ip)
    pub fake_ip: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameServers_QueryByFakeIP_Request.fake_port)
    pub fake_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameServers_QueryByFakeIP_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameServers_QueryByFakeIP_Request.query_type)
    pub query_type: ::std::option::Option<crate::EnumOrUnknown<cgame_servers_query_by_fake_ip_request::EQueryType>>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_QueryByFakeIP_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_QueryByFakeIP_Request {
    fn default() -> &'a CGameServers_QueryByFakeIP_Request {
        <CGameServers_QueryByFakeIP_Request as crate::Message>::default_instance()
    }
}

impl CGameServers_QueryByFakeIP_Request {
    pub fn new() -> CGameServers_QueryByFakeIP_Request {
        ::std::default::Default::default()
    }

    // optional uint32 fake_ip = 1;

    pub fn fake_ip(&self) -> u32 {
        self.fake_ip.unwrap_or(0)
    }

    pub fn clear_fake_ip(&mut self) {
        self.fake_ip = ::std::option::Option::None;
    }

    pub fn has_fake_ip(&self) -> bool {
        self.fake_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fake_ip(&mut self, v: u32) {
        self.fake_ip = ::std::option::Option::Some(v);
    }

    // optional uint32 fake_port = 2;

    pub fn fake_port(&self) -> u32 {
        self.fake_port.unwrap_or(0)
    }

    pub fn clear_fake_port(&mut self) {
        self.fake_port = ::std::option::Option::None;
    }

    pub fn has_fake_port(&self) -> bool {
        self.fake_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fake_port(&mut self, v: u32) {
        self.fake_port = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional .CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4;

    pub fn query_type(&self) -> cgame_servers_query_by_fake_ip_request::EQueryType {
        match self.query_type {
            Some(e) => e.enum_value_or(cgame_servers_query_by_fake_ip_request::EQueryType::Query_Invalid),
            None => cgame_servers_query_by_fake_ip_request::EQueryType::Query_Invalid,
        }
    }

    pub fn clear_query_type(&mut self) {
        self.query_type = ::std::option::Option::None;
    }

    pub fn has_query_type(&self) -> bool {
        self.query_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query_type(&mut self, v: cgame_servers_query_by_fake_ip_request::EQueryType) {
        self.query_type = ::std::option::Option::Some(crate::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "fake_ip",
            |m: &CGameServers_QueryByFakeIP_Request| { &m.fake_ip },
            |m: &mut CGameServers_QueryByFakeIP_Request| { &mut m.fake_ip },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "fake_port",
            |m: &CGameServers_QueryByFakeIP_Request| { &m.fake_port },
            |m: &mut CGameServers_QueryByFakeIP_Request| { &mut m.fake_port },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CGameServers_QueryByFakeIP_Request| { &m.app_id },
            |m: &mut CGameServers_QueryByFakeIP_Request| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "query_type",
            |m: &CGameServers_QueryByFakeIP_Request| { &m.query_type },
            |m: &mut CGameServers_QueryByFakeIP_Request| { &mut m.query_type },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_QueryByFakeIP_Request>(
            "CGameServers_QueryByFakeIP_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_QueryByFakeIP_Request {
    const NAME: &'static str = "CGameServers_QueryByFakeIP_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.fake_ip = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.fake_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.query_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.fake_ip {
            my_size += crate::rt::uint32_size(1, v);
        }
        if let Some(v) = self.fake_port {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.query_type {
            my_size += crate::rt::int32_size(4, v.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.fake_ip {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.fake_port {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.query_type {
            os.write_enum(4, crate::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_QueryByFakeIP_Request {
        CGameServers_QueryByFakeIP_Request::new()
    }

    fn clear(&mut self) {
        self.fake_ip = ::std::option::Option::None;
        self.fake_port = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.query_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_QueryByFakeIP_Request {
        static instance: CGameServers_QueryByFakeIP_Request = CGameServers_QueryByFakeIP_Request {
            fake_ip: ::std::option::Option::None,
            fake_port: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            query_type: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_QueryByFakeIP_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_QueryByFakeIP_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_QueryByFakeIP_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_QueryByFakeIP_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CGameServers_QueryByFakeIP_Request`
pub mod cgame_servers_query_by_fake_ip_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:CGameServers_QueryByFakeIP_Request.EQueryType)
    pub enum EQueryType {
        // @@protoc_insertion_point(enum_value:CGameServers_QueryByFakeIP_Request.EQueryType.Query_Invalid)
        Query_Invalid = 0,
        // @@protoc_insertion_point(enum_value:CGameServers_QueryByFakeIP_Request.EQueryType.Query_Ping)
        Query_Ping = 1,
        // @@protoc_insertion_point(enum_value:CGameServers_QueryByFakeIP_Request.EQueryType.Query_Players)
        Query_Players = 2,
        // @@protoc_insertion_point(enum_value:CGameServers_QueryByFakeIP_Request.EQueryType.Query_Rules)
        Query_Rules = 3,
    }

    impl crate::Enum for EQueryType {
        const NAME: &'static str = "EQueryType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<EQueryType> {
            match value {
                0 => ::std::option::Option::Some(EQueryType::Query_Invalid),
                1 => ::std::option::Option::Some(EQueryType::Query_Ping),
                2 => ::std::option::Option::Some(EQueryType::Query_Players),
                3 => ::std::option::Option::Some(EQueryType::Query_Rules),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<EQueryType> {
            match str {
                "Query_Invalid" => ::std::option::Option::Some(EQueryType::Query_Invalid),
                "Query_Ping" => ::std::option::Option::Some(EQueryType::Query_Ping),
                "Query_Players" => ::std::option::Option::Some(EQueryType::Query_Players),
                "Query_Rules" => ::std::option::Option::Some(EQueryType::Query_Rules),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [EQueryType] = &[
            EQueryType::Query_Invalid,
            EQueryType::Query_Ping,
            EQueryType::Query_Players,
            EQueryType::Query_Rules,
        ];
    }

    impl crate::EnumFull for EQueryType {
        fn enum_descriptor() -> crate::reflect::EnumDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CGameServers_QueryByFakeIP_Request.EQueryType").unwrap()).clone()
        }

        fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for EQueryType {
        fn default() -> Self {
            EQueryType::Query_Invalid
        }
    }

    impl EQueryType {
        pub(in super) fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
            crate::reflect::GeneratedEnumDescriptorData::new::<EQueryType>("CGameServers_QueryByFakeIP_Request.EQueryType")
        }
    }
}

// @@protoc_insertion_point(message:CMsgGameServerPingQueryData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGameServerPingQueryData {
    // message fields
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.server_ip)
    pub server_ip: crate::MessageField<super::steammessages_base::CMsgIPAddress>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.query_port)
    pub query_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.game_port)
    pub game_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.spectator_port)
    pub spectator_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.spectator_server_name)
    pub spectator_server_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.server_name)
    pub server_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.gamedir)
    pub gamedir: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.map)
    pub map: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.game_description)
    pub game_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.gametype)
    pub gametype: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.num_players)
    pub num_players: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.max_players)
    pub max_players: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.num_bots)
    pub num_bots: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.password)
    pub password: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.secure)
    pub secure: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.dedicated)
    pub dedicated: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.sdr_popid)
    pub sdr_popid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGameServerPingQueryData.sdr_location_string)
    pub sdr_location_string: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGameServerPingQueryData.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGameServerPingQueryData {
    fn default() -> &'a CMsgGameServerPingQueryData {
        <CMsgGameServerPingQueryData as crate::Message>::default_instance()
    }
}

impl CMsgGameServerPingQueryData {
    pub fn new() -> CMsgGameServerPingQueryData {
        ::std::default::Default::default()
    }

    // optional .CMsgIPAddress server_ip = 1;

    pub fn server_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.server_ip.as_ref().unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as crate::Message>::default_instance())
    }

    pub fn clear_server_ip(&mut self) {
        self.server_ip.clear();
    }

    pub fn has_server_ip(&self) -> bool {
        self.server_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.server_ip = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        self.server_ip.mut_or_insert_default()
    }

    // Take field
    pub fn take_server_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.server_ip.take().unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional uint32 query_port = 2;

    pub fn query_port(&self) -> u32 {
        self.query_port.unwrap_or(0)
    }

    pub fn clear_query_port(&mut self) {
        self.query_port = ::std::option::Option::None;
    }

    pub fn has_query_port(&self) -> bool {
        self.query_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query_port(&mut self, v: u32) {
        self.query_port = ::std::option::Option::Some(v);
    }

    // optional uint32 game_port = 3;

    pub fn game_port(&self) -> u32 {
        self.game_port.unwrap_or(0)
    }

    pub fn clear_game_port(&mut self) {
        self.game_port = ::std::option::Option::None;
    }

    pub fn has_game_port(&self) -> bool {
        self.game_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_port(&mut self, v: u32) {
        self.game_port = ::std::option::Option::Some(v);
    }

    // optional uint32 spectator_port = 4;

    pub fn spectator_port(&self) -> u32 {
        self.spectator_port.unwrap_or(0)
    }

    pub fn clear_spectator_port(&mut self) {
        self.spectator_port = ::std::option::Option::None;
    }

    pub fn has_spectator_port(&self) -> bool {
        self.spectator_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spectator_port(&mut self, v: u32) {
        self.spectator_port = ::std::option::Option::Some(v);
    }

    // optional string spectator_server_name = 5;

    pub fn spectator_server_name(&self) -> &str {
        match self.spectator_server_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_spectator_server_name(&mut self) {
        self.spectator_server_name = ::std::option::Option::None;
    }

    pub fn has_spectator_server_name(&self) -> bool {
        self.spectator_server_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spectator_server_name(&mut self, v: ::std::string::String) {
        self.spectator_server_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spectator_server_name(&mut self) -> &mut ::std::string::String {
        if self.spectator_server_name.is_none() {
            self.spectator_server_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.spectator_server_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_spectator_server_name(&mut self) -> ::std::string::String {
        self.spectator_server_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string server_name = 6;

    pub fn server_name(&self) -> &str {
        match self.server_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_server_name(&mut self) {
        self.server_name = ::std::option::Option::None;
    }

    pub fn has_server_name(&self) -> bool {
        self.server_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_name(&mut self, v: ::std::string::String) {
        self.server_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_name(&mut self) -> &mut ::std::string::String {
        if self.server_name.is_none() {
            self.server_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.server_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_server_name(&mut self) -> ::std::string::String {
        self.server_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 7;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 8;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional string gamedir = 9;

    pub fn gamedir(&self) -> &str {
        match self.gamedir.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gamedir(&mut self) {
        self.gamedir = ::std::option::Option::None;
    }

    pub fn has_gamedir(&self) -> bool {
        self.gamedir.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gamedir(&mut self, v: ::std::string::String) {
        self.gamedir = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gamedir(&mut self) -> &mut ::std::string::String {
        if self.gamedir.is_none() {
            self.gamedir = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gamedir.as_mut().unwrap()
    }

    // Take field
    pub fn take_gamedir(&mut self) -> ::std::string::String {
        self.gamedir.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string map = 10;

    pub fn map(&self) -> &str {
        match self.map.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_map(&mut self) {
        self.map = ::std::option::Option::None;
    }

    pub fn has_map(&self) -> bool {
        self.map.is_some()
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ::std::string::String) {
        self.map = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_map(&mut self) -> &mut ::std::string::String {
        if self.map.is_none() {
            self.map = ::std::option::Option::Some(::std::string::String::new());
        }
        self.map.as_mut().unwrap()
    }

    // Take field
    pub fn take_map(&mut self) -> ::std::string::String {
        self.map.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string game_description = 11;

    pub fn game_description(&self) -> &str {
        match self.game_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_game_description(&mut self) {
        self.game_description = ::std::option::Option::None;
    }

    pub fn has_game_description(&self) -> bool {
        self.game_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_description(&mut self, v: ::std::string::String) {
        self.game_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_game_description(&mut self) -> &mut ::std::string::String {
        if self.game_description.is_none() {
            self.game_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.game_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_game_description(&mut self) -> ::std::string::String {
        self.game_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string gametype = 12;

    pub fn gametype(&self) -> &str {
        match self.gametype.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_gametype(&mut self) {
        self.gametype = ::std::option::Option::None;
    }

    pub fn has_gametype(&self) -> bool {
        self.gametype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gametype(&mut self, v: ::std::string::String) {
        self.gametype = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gametype(&mut self) -> &mut ::std::string::String {
        if self.gametype.is_none() {
            self.gametype = ::std::option::Option::Some(::std::string::String::new());
        }
        self.gametype.as_mut().unwrap()
    }

    // Take field
    pub fn take_gametype(&mut self) -> ::std::string::String {
        self.gametype.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 num_players = 13;

    pub fn num_players(&self) -> u32 {
        self.num_players.unwrap_or(0)
    }

    pub fn clear_num_players(&mut self) {
        self.num_players = ::std::option::Option::None;
    }

    pub fn has_num_players(&self) -> bool {
        self.num_players.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_players(&mut self, v: u32) {
        self.num_players = ::std::option::Option::Some(v);
    }

    // optional uint32 max_players = 14;

    pub fn max_players(&self) -> u32 {
        self.max_players.unwrap_or(0)
    }

    pub fn clear_max_players(&mut self) {
        self.max_players = ::std::option::Option::None;
    }

    pub fn has_max_players(&self) -> bool {
        self.max_players.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_players(&mut self, v: u32) {
        self.max_players = ::std::option::Option::Some(v);
    }

    // optional uint32 num_bots = 15;

    pub fn num_bots(&self) -> u32 {
        self.num_bots.unwrap_or(0)
    }

    pub fn clear_num_bots(&mut self) {
        self.num_bots = ::std::option::Option::None;
    }

    pub fn has_num_bots(&self) -> bool {
        self.num_bots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_bots(&mut self, v: u32) {
        self.num_bots = ::std::option::Option::Some(v);
    }

    // optional bool password = 16;

    pub fn password(&self) -> bool {
        self.password.unwrap_or(false)
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: bool) {
        self.password = ::std::option::Option::Some(v);
    }

    // optional bool secure = 17;

    pub fn secure(&self) -> bool {
        self.secure.unwrap_or(false)
    }

    pub fn clear_secure(&mut self) {
        self.secure = ::std::option::Option::None;
    }

    pub fn has_secure(&self) -> bool {
        self.secure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secure(&mut self, v: bool) {
        self.secure = ::std::option::Option::Some(v);
    }

    // optional bool dedicated = 18;

    pub fn dedicated(&self) -> bool {
        self.dedicated.unwrap_or(false)
    }

    pub fn clear_dedicated(&mut self) {
        self.dedicated = ::std::option::Option::None;
    }

    pub fn has_dedicated(&self) -> bool {
        self.dedicated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dedicated(&mut self, v: bool) {
        self.dedicated = ::std::option::Option::Some(v);
    }

    // optional string version = 19;

    pub fn version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version = ::std::option::Option::Some(::std::string::String::new());
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 sdr_popid = 20;

    pub fn sdr_popid(&self) -> u32 {
        self.sdr_popid.unwrap_or(0)
    }

    pub fn clear_sdr_popid(&mut self) {
        self.sdr_popid = ::std::option::Option::None;
    }

    pub fn has_sdr_popid(&self) -> bool {
        self.sdr_popid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sdr_popid(&mut self, v: u32) {
        self.sdr_popid = ::std::option::Option::Some(v);
    }

    // optional string sdr_location_string = 21;

    pub fn sdr_location_string(&self) -> &str {
        match self.sdr_location_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_sdr_location_string(&mut self) {
        self.sdr_location_string = ::std::option::Option::None;
    }

    pub fn has_sdr_location_string(&self) -> bool {
        self.sdr_location_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sdr_location_string(&mut self, v: ::std::string::String) {
        self.sdr_location_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sdr_location_string(&mut self) -> &mut ::std::string::String {
        if self.sdr_location_string.is_none() {
            self.sdr_location_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sdr_location_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_sdr_location_string(&mut self) -> ::std::string::String {
        self.sdr_location_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(21);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, super::steammessages_base::CMsgIPAddress>(
            "server_ip",
            |m: &CMsgGameServerPingQueryData| { &m.server_ip },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.server_ip },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "query_port",
            |m: &CMsgGameServerPingQueryData| { &m.query_port },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.query_port },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_port",
            |m: &CMsgGameServerPingQueryData| { &m.game_port },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.game_port },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "spectator_port",
            |m: &CMsgGameServerPingQueryData| { &m.spectator_port },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.spectator_port },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "spectator_server_name",
            |m: &CMsgGameServerPingQueryData| { &m.spectator_server_name },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.spectator_server_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_name",
            |m: &CMsgGameServerPingQueryData| { &m.server_name },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.server_name },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGameServerPingQueryData| { &m.steamid },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.steamid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_id",
            |m: &CMsgGameServerPingQueryData| { &m.app_id },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.app_id },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gamedir",
            |m: &CMsgGameServerPingQueryData| { &m.gamedir },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.gamedir },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "map",
            |m: &CMsgGameServerPingQueryData| { &m.map },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.map },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_description",
            |m: &CMsgGameServerPingQueryData| { &m.game_description },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.game_description },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "gametype",
            |m: &CMsgGameServerPingQueryData| { &m.gametype },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.gametype },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_players",
            |m: &CMsgGameServerPingQueryData| { &m.num_players },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.num_players },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_players",
            |m: &CMsgGameServerPingQueryData| { &m.max_players },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.max_players },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_bots",
            |m: &CMsgGameServerPingQueryData| { &m.num_bots },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.num_bots },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &CMsgGameServerPingQueryData| { &m.password },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.password },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "secure",
            |m: &CMsgGameServerPingQueryData| { &m.secure },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.secure },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "dedicated",
            |m: &CMsgGameServerPingQueryData| { &m.dedicated },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.dedicated },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &CMsgGameServerPingQueryData| { &m.version },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.version },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sdr_popid",
            |m: &CMsgGameServerPingQueryData| { &m.sdr_popid },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.sdr_popid },
        ));
        fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
            "sdr_location_string",
            |m: &CMsgGameServerPingQueryData| { &m.sdr_location_string },
            |m: &mut CMsgGameServerPingQueryData| { &mut m.sdr_location_string },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGameServerPingQueryData>(
            "CMsgGameServerPingQueryData",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgGameServerPingQueryData {
    const NAME: &'static str = "CMsgGameServerPingQueryData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.server_ip)?;
                },
                16 => {
                    self.query_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.game_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.spectator_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.spectator_server_name = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.server_name = ::std::option::Option::Some(is.read_string()?);
                },
                57 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                64 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.gamedir = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.map = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.game_description = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.gametype = ::std::option::Option::Some(is.read_string()?);
                },
                104 => {
                    self.num_players = ::std::option::Option::Some(is.read_uint32()?);
                },
                112 => {
                    self.max_players = ::std::option::Option::Some(is.read_uint32()?);
                },
                120 => {
                    self.num_bots = ::std::option::Option::Some(is.read_uint32()?);
                },
                128 => {
                    self.password = ::std::option::Option::Some(is.read_bool()?);
                },
                136 => {
                    self.secure = ::std::option::Option::Some(is.read_bool()?);
                },
                144 => {
                    self.dedicated = ::std::option::Option::Some(is.read_bool()?);
                },
                154 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                165 => {
                    self.sdr_popid = ::std::option::Option::Some(is.read_fixed32()?);
                },
                170 => {
                    self.sdr_location_string = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.query_port {
            my_size += crate::rt::uint32_size(2, v);
        }
        if let Some(v) = self.game_port {
            my_size += crate::rt::uint32_size(3, v);
        }
        if let Some(v) = self.spectator_port {
            my_size += crate::rt::uint32_size(4, v);
        }
        if let Some(v) = self.spectator_server_name.as_ref() {
            my_size += crate::rt::string_size(5, &v);
        }
        if let Some(v) = self.server_name.as_ref() {
            my_size += crate::rt::string_size(6, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.app_id {
            my_size += crate::rt::uint32_size(8, v);
        }
        if let Some(v) = self.gamedir.as_ref() {
            my_size += crate::rt::string_size(9, &v);
        }
        if let Some(v) = self.map.as_ref() {
            my_size += crate::rt::string_size(10, &v);
        }
        if let Some(v) = self.game_description.as_ref() {
            my_size += crate::rt::string_size(11, &v);
        }
        if let Some(v) = self.gametype.as_ref() {
            my_size += crate::rt::string_size(12, &v);
        }
        if let Some(v) = self.num_players {
            my_size += crate::rt::uint32_size(13, v);
        }
        if let Some(v) = self.max_players {
            my_size += crate::rt::uint32_size(14, v);
        }
        if let Some(v) = self.num_bots {
            my_size += crate::rt::uint32_size(15, v);
        }
        if let Some(v) = self.password {
            my_size += 2 + 1;
        }
        if let Some(v) = self.secure {
            my_size += 2 + 1;
        }
        if let Some(v) = self.dedicated {
            my_size += 2 + 1;
        }
        if let Some(v) = self.version.as_ref() {
            my_size += crate::rt::string_size(19, &v);
        }
        if let Some(v) = self.sdr_popid {
            my_size += 2 + 4;
        }
        if let Some(v) = self.sdr_location_string.as_ref() {
            my_size += crate::rt::string_size(21, &v);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.server_ip.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.query_port {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.game_port {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.spectator_port {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.spectator_server_name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.server_name.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(7, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.gamedir.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.map.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.game_description.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.gametype.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.num_players {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.max_players {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.num_bots {
            os.write_uint32(15, v)?;
        }
        if let Some(v) = self.password {
            os.write_bool(16, v)?;
        }
        if let Some(v) = self.secure {
            os.write_bool(17, v)?;
        }
        if let Some(v) = self.dedicated {
            os.write_bool(18, v)?;
        }
        if let Some(v) = self.version.as_ref() {
            os.write_string(19, v)?;
        }
        if let Some(v) = self.sdr_popid {
            os.write_fixed32(20, v)?;
        }
        if let Some(v) = self.sdr_location_string.as_ref() {
            os.write_string(21, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGameServerPingQueryData {
        CMsgGameServerPingQueryData::new()
    }

    fn clear(&mut self) {
        self.server_ip.clear();
        self.query_port = ::std::option::Option::None;
        self.game_port = ::std::option::Option::None;
        self.spectator_port = ::std::option::Option::None;
        self.spectator_server_name = ::std::option::Option::None;
        self.server_name = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.gamedir = ::std::option::Option::None;
        self.map = ::std::option::Option::None;
        self.game_description = ::std::option::Option::None;
        self.gametype = ::std::option::Option::None;
        self.num_players = ::std::option::Option::None;
        self.max_players = ::std::option::Option::None;
        self.num_bots = ::std::option::Option::None;
        self.password = ::std::option::Option::None;
        self.secure = ::std::option::Option::None;
        self.dedicated = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.sdr_popid = ::std::option::Option::None;
        self.sdr_location_string = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGameServerPingQueryData {
        static instance: CMsgGameServerPingQueryData = CMsgGameServerPingQueryData {
            server_ip: crate::MessageField::none(),
            query_port: ::std::option::Option::None,
            game_port: ::std::option::Option::None,
            spectator_port: ::std::option::Option::None,
            spectator_server_name: ::std::option::Option::None,
            server_name: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            gamedir: ::std::option::Option::None,
            map: ::std::option::Option::None,
            game_description: ::std::option::Option::None,
            gametype: ::std::option::Option::None,
            num_players: ::std::option::Option::None,
            max_players: ::std::option::Option::None,
            num_bots: ::std::option::Option::None,
            password: ::std::option::Option::None,
            secure: ::std::option::Option::None,
            dedicated: ::std::option::Option::None,
            version: ::std::option::Option::None,
            sdr_popid: ::std::option::Option::None,
            sdr_location_string: ::std::option::Option::None,
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgGameServerPingQueryData {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGameServerPingQueryData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGameServerPingQueryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgGameServerPingQueryData {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgGameServerPlayersQueryData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGameServerPlayersQueryData {
    // message fields
    // @@protoc_insertion_point(field:CMsgGameServerPlayersQueryData.players)
    pub players: ::std::vec::Vec<cmsg_game_server_players_query_data::Player>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGameServerPlayersQueryData.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGameServerPlayersQueryData {
    fn default() -> &'a CMsgGameServerPlayersQueryData {
        <CMsgGameServerPlayersQueryData as crate::Message>::default_instance()
    }
}

impl CMsgGameServerPlayersQueryData {
    pub fn new() -> CMsgGameServerPlayersQueryData {
        ::std::default::Default::default()
    }

    // repeated .CMsgGameServerPlayersQueryData.Player players = 1;

    pub fn players(&self) -> &[cmsg_game_server_players_query_data::Player] {
        &self.players
    }

    pub fn clear_players(&mut self) {
        self.players.clear();
    }

    // Param is passed by value, moved
    pub fn set_players(&mut self, v: ::std::vec::Vec<cmsg_game_server_players_query_data::Player>) {
        self.players = v;
    }

    // Mutable pointer to the field.
    pub fn mut_players(&mut self) -> &mut ::std::vec::Vec<cmsg_game_server_players_query_data::Player> {
        &mut self.players
    }

    // Take field
    pub fn take_players(&mut self) -> ::std::vec::Vec<cmsg_game_server_players_query_data::Player> {
        ::std::mem::replace(&mut self.players, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &CMsgGameServerPlayersQueryData| { &m.players },
            |m: &mut CMsgGameServerPlayersQueryData| { &mut m.players },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGameServerPlayersQueryData>(
            "CMsgGameServerPlayersQueryData",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgGameServerPlayersQueryData {
    const NAME: &'static str = "CMsgGameServerPlayersQueryData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.players {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGameServerPlayersQueryData {
        CMsgGameServerPlayersQueryData::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGameServerPlayersQueryData {
        static instance: CMsgGameServerPlayersQueryData = CMsgGameServerPlayersQueryData {
            players: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgGameServerPlayersQueryData {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGameServerPlayersQueryData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGameServerPlayersQueryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgGameServerPlayersQueryData {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGameServerPlayersQueryData`
pub mod cmsg_game_server_players_query_data {
    // @@protoc_insertion_point(message:CMsgGameServerPlayersQueryData.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:CMsgGameServerPlayersQueryData.Player.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGameServerPlayersQueryData.Player.score)
        pub score: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgGameServerPlayersQueryData.Player.time_played)
        pub time_played: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGameServerPlayersQueryData.Player.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as crate::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 score = 2;

        pub fn score(&self) -> u32 {
            self.score.unwrap_or(0)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: u32) {
            self.score = ::std::option::Option::Some(v);
        }

        // optional uint32 time_played = 3;

        pub fn time_played(&self) -> u32 {
            self.time_played.unwrap_or(0)
        }

        pub fn clear_time_played(&mut self) {
            self.time_played = ::std::option::Option::None;
        }

        pub fn has_time_played(&self) -> bool {
            self.time_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_time_played(&mut self, v: u32) {
            self.time_played = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &Player| { &m.name },
                |m: &mut Player| { &mut m.name },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "score",
                |m: &Player| { &m.score },
                |m: &mut Player| { &mut m.score },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "time_played",
                |m: &Player| { &m.time_played },
                |m: &mut Player| { &mut m.time_played },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
                "CMsgGameServerPlayersQueryData.Player",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.score = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.time_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.score {
                my_size += crate::rt::uint32_size(2, v);
            }
            if let Some(v) = self.time_played {
                my_size += crate::rt::uint32_size(3, v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.score {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.time_played {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.score = ::std::option::Option::None;
            self.time_played = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                name: ::std::option::Option::None,
                score: ::std::option::Option::None,
                time_played: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Player {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGameServerPlayersQueryData.Player").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Player {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Player {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CMsgGameServerRulesQueryData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGameServerRulesQueryData {
    // message fields
    // @@protoc_insertion_point(field:CMsgGameServerRulesQueryData.rules)
    pub rules: ::std::vec::Vec<cmsg_game_server_rules_query_data::Rule>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGameServerRulesQueryData.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGameServerRulesQueryData {
    fn default() -> &'a CMsgGameServerRulesQueryData {
        <CMsgGameServerRulesQueryData as crate::Message>::default_instance()
    }
}

impl CMsgGameServerRulesQueryData {
    pub fn new() -> CMsgGameServerRulesQueryData {
        ::std::default::Default::default()
    }

    // repeated .CMsgGameServerRulesQueryData.Rule rules = 1;

    pub fn rules(&self) -> &[cmsg_game_server_rules_query_data::Rule] {
        &self.rules
    }

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::std::vec::Vec<cmsg_game_server_rules_query_data::Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::std::vec::Vec<cmsg_game_server_rules_query_data::Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::std::vec::Vec<cmsg_game_server_rules_query_data::Rule> {
        ::std::mem::replace(&mut self.rules, ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &CMsgGameServerRulesQueryData| { &m.rules },
            |m: &mut CMsgGameServerRulesQueryData| { &mut m.rules },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGameServerRulesQueryData>(
            "CMsgGameServerRulesQueryData",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CMsgGameServerRulesQueryData {
    const NAME: &'static str = "CMsgGameServerRulesQueryData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        for v in &self.rules {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGameServerRulesQueryData {
        CMsgGameServerRulesQueryData::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGameServerRulesQueryData {
        static instance: CMsgGameServerRulesQueryData = CMsgGameServerRulesQueryData {
            rules: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CMsgGameServerRulesQueryData {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGameServerRulesQueryData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGameServerRulesQueryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CMsgGameServerRulesQueryData {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CMsgGameServerRulesQueryData`
pub mod cmsg_game_server_rules_query_data {
    // @@protoc_insertion_point(message:CMsgGameServerRulesQueryData.Rule)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Rule {
        // message fields
        // @@protoc_insertion_point(field:CMsgGameServerRulesQueryData.Rule.rule)
        pub rule: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CMsgGameServerRulesQueryData.Rule.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgGameServerRulesQueryData.Rule.special_fields)
        pub special_fields: crate::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Rule {
        fn default() -> &'a Rule {
            <Rule as crate::Message>::default_instance()
        }
    }

    impl Rule {
        pub fn new() -> Rule {
            ::std::default::Default::default()
        }

        // optional string rule = 1;

        pub fn rule(&self) -> &str {
            match self.rule.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_rule(&mut self) {
            self.rule = ::std::option::Option::None;
        }

        pub fn has_rule(&self) -> bool {
            self.rule.is_some()
        }

        // Param is passed by value, moved
        pub fn set_rule(&mut self, v: ::std::string::String) {
            self.rule = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_rule(&mut self) -> &mut ::std::string::String {
            if self.rule.is_none() {
                self.rule = ::std::option::Option::Some(::std::string::String::new());
            }
            self.rule.as_mut().unwrap()
        }

        // Take field
        pub fn take_rule(&mut self) -> ::std::string::String {
            self.rule.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "rule",
                |m: &Rule| { &m.rule },
                |m: &mut Rule| { &mut m.rule },
            ));
            fields.push(crate::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &Rule| { &m.value },
                |m: &mut Rule| { &mut m.value },
            ));
            crate::reflect::GeneratedMessageDescriptorData::new_2::<Rule>(
                "CMsgGameServerRulesQueryData.Rule",
                fields,
                oneofs,
            )
        }
    }

    impl crate::Message for Rule {
        const NAME: &'static str = "Rule";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.rule = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.rule.as_ref() {
                my_size += crate::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += crate::rt::string_size(2, &v);
            }
            my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
            if let Some(v) = self.rule.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &crate::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Rule {
            Rule::new()
        }

        fn clear(&mut self) {
            self.rule = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Rule {
            static instance: Rule = Rule {
                rule: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: crate::SpecialFields::new(),
            };
            &instance
        }
    }

    impl crate::MessageFull for Rule {
        fn descriptor() -> crate::reflect::MessageDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CMsgGameServerRulesQueryData.Rule").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Rule {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            crate::text_format::fmt(self, f)
        }
    }

    impl crate::reflect::ProtobufValue for Rule {
        type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CGameServers_GameServerQuery_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameServers_GameServerQuery_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameServers_GameServerQuery_Response.ping_data)
    pub ping_data: crate::MessageField<CMsgGameServerPingQueryData>,
    // @@protoc_insertion_point(field:CGameServers_GameServerQuery_Response.players_data)
    pub players_data: crate::MessageField<CMsgGameServerPlayersQueryData>,
    // @@protoc_insertion_point(field:CGameServers_GameServerQuery_Response.rules_data)
    pub rules_data: crate::MessageField<CMsgGameServerRulesQueryData>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameServers_GameServerQuery_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameServers_GameServerQuery_Response {
    fn default() -> &'a CGameServers_GameServerQuery_Response {
        <CGameServers_GameServerQuery_Response as crate::Message>::default_instance()
    }
}

impl CGameServers_GameServerQuery_Response {
    pub fn new() -> CGameServers_GameServerQuery_Response {
        ::std::default::Default::default()
    }

    // optional .CMsgGameServerPingQueryData ping_data = 1;

    pub fn ping_data(&self) -> &CMsgGameServerPingQueryData {
        self.ping_data.as_ref().unwrap_or_else(|| <CMsgGameServerPingQueryData as crate::Message>::default_instance())
    }

    pub fn clear_ping_data(&mut self) {
        self.ping_data.clear();
    }

    pub fn has_ping_data(&self) -> bool {
        self.ping_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_data(&mut self, v: CMsgGameServerPingQueryData) {
        self.ping_data = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ping_data(&mut self) -> &mut CMsgGameServerPingQueryData {
        self.ping_data.mut_or_insert_default()
    }

    // Take field
    pub fn take_ping_data(&mut self) -> CMsgGameServerPingQueryData {
        self.ping_data.take().unwrap_or_else(|| CMsgGameServerPingQueryData::new())
    }

    // optional .CMsgGameServerPlayersQueryData players_data = 2;

    pub fn players_data(&self) -> &CMsgGameServerPlayersQueryData {
        self.players_data.as_ref().unwrap_or_else(|| <CMsgGameServerPlayersQueryData as crate::Message>::default_instance())
    }

    pub fn clear_players_data(&mut self) {
        self.players_data.clear();
    }

    pub fn has_players_data(&self) -> bool {
        self.players_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players_data(&mut self, v: CMsgGameServerPlayersQueryData) {
        self.players_data = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_players_data(&mut self) -> &mut CMsgGameServerPlayersQueryData {
        self.players_data.mut_or_insert_default()
    }

    // Take field
    pub fn take_players_data(&mut self) -> CMsgGameServerPlayersQueryData {
        self.players_data.take().unwrap_or_else(|| CMsgGameServerPlayersQueryData::new())
    }

    // optional .CMsgGameServerRulesQueryData rules_data = 3;

    pub fn rules_data(&self) -> &CMsgGameServerRulesQueryData {
        self.rules_data.as_ref().unwrap_or_else(|| <CMsgGameServerRulesQueryData as crate::Message>::default_instance())
    }

    pub fn clear_rules_data(&mut self) {
        self.rules_data.clear();
    }

    pub fn has_rules_data(&self) -> bool {
        self.rules_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rules_data(&mut self, v: CMsgGameServerRulesQueryData) {
        self.rules_data = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rules_data(&mut self) -> &mut CMsgGameServerRulesQueryData {
        self.rules_data.mut_or_insert_default()
    }

    // Take field
    pub fn take_rules_data(&mut self) -> CMsgGameServerRulesQueryData {
        self.rules_data.take().unwrap_or_else(|| CMsgGameServerRulesQueryData::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGameServerPingQueryData>(
            "ping_data",
            |m: &CGameServers_GameServerQuery_Response| { &m.ping_data },
            |m: &mut CGameServers_GameServerQuery_Response| { &mut m.ping_data },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGameServerPlayersQueryData>(
            "players_data",
            |m: &CGameServers_GameServerQuery_Response| { &m.players_data },
            |m: &mut CGameServers_GameServerQuery_Response| { &mut m.players_data },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGameServerRulesQueryData>(
            "rules_data",
            |m: &CGameServers_GameServerQuery_Response| { &m.rules_data },
            |m: &mut CGameServers_GameServerQuery_Response| { &mut m.rules_data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<CGameServers_GameServerQuery_Response>(
            "CGameServers_GameServerQuery_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for CGameServers_GameServerQuery_Response {
    const NAME: &'static str = "CGameServers_GameServerQuery_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.ping_data)?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.players_data)?;
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.rules_data)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ping_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.players_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rules_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.ping_data.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.players_data.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.rules_data.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameServers_GameServerQuery_Response {
        CGameServers_GameServerQuery_Response::new()
    }

    fn clear(&mut self) {
        self.ping_data.clear();
        self.players_data.clear();
        self.rules_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameServers_GameServerQuery_Response {
        static instance: CGameServers_GameServerQuery_Response = CGameServers_GameServerQuery_Response {
            ping_data: crate::MessageField::none(),
            players_data: crate::MessageField::none(),
            rules_data: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for CGameServers_GameServerQuery_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CGameServers_GameServerQuery_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CGameServers_GameServerQuery_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for CGameServers_GameServerQuery_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GameServerClient_QueryServerData_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GameServerClient_QueryServerData_Request {
    // special fields
    // @@protoc_insertion_point(special_field:GameServerClient_QueryServerData_Request.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameServerClient_QueryServerData_Request {
    fn default() -> &'a GameServerClient_QueryServerData_Request {
        <GameServerClient_QueryServerData_Request as crate::Message>::default_instance()
    }
}

impl GameServerClient_QueryServerData_Request {
    pub fn new() -> GameServerClient_QueryServerData_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        crate::reflect::GeneratedMessageDescriptorData::new_2::<GameServerClient_QueryServerData_Request>(
            "GameServerClient_QueryServerData_Request",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for GameServerClient_QueryServerData_Request {
    const NAME: &'static str = "GameServerClient_QueryServerData_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameServerClient_QueryServerData_Request {
        GameServerClient_QueryServerData_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameServerClient_QueryServerData_Request {
        static instance: GameServerClient_QueryServerData_Request = GameServerClient_QueryServerData_Request {
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for GameServerClient_QueryServerData_Request {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameServerClient_QueryServerData_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameServerClient_QueryServerData_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for GameServerClient_QueryServerData_Request {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GameServerClient_QueryServerData_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GameServerClient_QueryServerData_Response {
    // message fields
    // @@protoc_insertion_point(field:GameServerClient_QueryServerData_Response.ping_data)
    pub ping_data: crate::MessageField<CMsgGameServerPingQueryData>,
    // @@protoc_insertion_point(field:GameServerClient_QueryServerData_Response.players_data)
    pub players_data: crate::MessageField<CMsgGameServerPlayersQueryData>,
    // @@protoc_insertion_point(field:GameServerClient_QueryServerData_Response.rules_data)
    pub rules_data: crate::MessageField<CMsgGameServerRulesQueryData>,
    // special fields
    // @@protoc_insertion_point(special_field:GameServerClient_QueryServerData_Response.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameServerClient_QueryServerData_Response {
    fn default() -> &'a GameServerClient_QueryServerData_Response {
        <GameServerClient_QueryServerData_Response as crate::Message>::default_instance()
    }
}

impl GameServerClient_QueryServerData_Response {
    pub fn new() -> GameServerClient_QueryServerData_Response {
        ::std::default::Default::default()
    }

    // optional .CMsgGameServerPingQueryData ping_data = 1;

    pub fn ping_data(&self) -> &CMsgGameServerPingQueryData {
        self.ping_data.as_ref().unwrap_or_else(|| <CMsgGameServerPingQueryData as crate::Message>::default_instance())
    }

    pub fn clear_ping_data(&mut self) {
        self.ping_data.clear();
    }

    pub fn has_ping_data(&self) -> bool {
        self.ping_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ping_data(&mut self, v: CMsgGameServerPingQueryData) {
        self.ping_data = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ping_data(&mut self) -> &mut CMsgGameServerPingQueryData {
        self.ping_data.mut_or_insert_default()
    }

    // Take field
    pub fn take_ping_data(&mut self) -> CMsgGameServerPingQueryData {
        self.ping_data.take().unwrap_or_else(|| CMsgGameServerPingQueryData::new())
    }

    // optional .CMsgGameServerPlayersQueryData players_data = 2;

    pub fn players_data(&self) -> &CMsgGameServerPlayersQueryData {
        self.players_data.as_ref().unwrap_or_else(|| <CMsgGameServerPlayersQueryData as crate::Message>::default_instance())
    }

    pub fn clear_players_data(&mut self) {
        self.players_data.clear();
    }

    pub fn has_players_data(&self) -> bool {
        self.players_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_players_data(&mut self, v: CMsgGameServerPlayersQueryData) {
        self.players_data = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_players_data(&mut self) -> &mut CMsgGameServerPlayersQueryData {
        self.players_data.mut_or_insert_default()
    }

    // Take field
    pub fn take_players_data(&mut self) -> CMsgGameServerPlayersQueryData {
        self.players_data.take().unwrap_or_else(|| CMsgGameServerPlayersQueryData::new())
    }

    // optional .CMsgGameServerRulesQueryData rules_data = 3;

    pub fn rules_data(&self) -> &CMsgGameServerRulesQueryData {
        self.rules_data.as_ref().unwrap_or_else(|| <CMsgGameServerRulesQueryData as crate::Message>::default_instance())
    }

    pub fn clear_rules_data(&mut self) {
        self.rules_data.clear();
    }

    pub fn has_rules_data(&self) -> bool {
        self.rules_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rules_data(&mut self, v: CMsgGameServerRulesQueryData) {
        self.rules_data = crate::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rules_data(&mut self) -> &mut CMsgGameServerRulesQueryData {
        self.rules_data.mut_or_insert_default()
    }

    // Take field
    pub fn take_rules_data(&mut self) -> CMsgGameServerRulesQueryData {
        self.rules_data.take().unwrap_or_else(|| CMsgGameServerRulesQueryData::new())
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGameServerPingQueryData>(
            "ping_data",
            |m: &GameServerClient_QueryServerData_Response| { &m.ping_data },
            |m: &mut GameServerClient_QueryServerData_Response| { &mut m.ping_data },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGameServerPlayersQueryData>(
            "players_data",
            |m: &GameServerClient_QueryServerData_Response| { &m.players_data },
            |m: &mut GameServerClient_QueryServerData_Response| { &mut m.players_data },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, CMsgGameServerRulesQueryData>(
            "rules_data",
            |m: &GameServerClient_QueryServerData_Response| { &m.rules_data },
            |m: &mut GameServerClient_QueryServerData_Response| { &mut m.rules_data },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<GameServerClient_QueryServerData_Response>(
            "GameServerClient_QueryServerData_Response",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for GameServerClient_QueryServerData_Response {
    const NAME: &'static str = "GameServerClient_QueryServerData_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.ping_data)?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.players_data)?;
                },
                26 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.rules_data)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ping_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.players_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rules_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if let Some(v) = self.ping_data.as_ref() {
            crate::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.players_data.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.rules_data.as_ref() {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameServerClient_QueryServerData_Response {
        GameServerClient_QueryServerData_Response::new()
    }

    fn clear(&mut self) {
        self.ping_data.clear();
        self.players_data.clear();
        self.rules_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameServerClient_QueryServerData_Response {
        static instance: GameServerClient_QueryServerData_Response = GameServerClient_QueryServerData_Response {
            ping_data: crate::MessageField::none(),
            players_data: crate::MessageField::none(),
            rules_data: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for GameServerClient_QueryServerData_Response {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameServerClient_QueryServerData_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameServerClient_QueryServerData_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for GameServerClient_QueryServerData_Response {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+steammessages_gameservers.steamclient.proto\x1a\x18steammessages_base\
    .proto\x1a,steammessages_unified_base.steamclient.proto\"W\n\"CGameServe\
    rs_GetServerList_Request\x12\x16\n\x06filter\x18\x01\x20\x01(\tR\x06filt\
    er\x12\x19\n\x05limit\x18\x02\x20\x01(\r:\x03100R\x05limit\"\xb0\x04\n#C\
    GameServers_GetServerList_Response\x12E\n\x07servers\x18\x01\x20\x03(\
    \x0b2+.CGameServers_GetServerList_Response.ServerR\x07servers\x1a\xc1\
    \x03\n\x06Server\x12\x12\n\x04addr\x18\x01\x20\x01(\tR\x04addr\x12\x1a\n\
    \x08gameport\x18\x02\x20\x01(\rR\x08gameport\x12\x1a\n\x08specport\x18\
    \x03\x20\x01(\rR\x08specport\x12\x18\n\x07steamid\x18\x04\x20\x01(\x06R\
    \x07steamid\x12\x12\n\x04name\x18\x05\x20\x01(\tR\x04name\x12\x14\n\x05a\
    ppid\x18\x06\x20\x01(\rR\x05appid\x12\x18\n\x07gamedir\x18\x07\x20\x01(\
    \tR\x07gamedir\x12\x18\n\x07version\x18\x08\x20\x01(\tR\x07version\x12\
    \x18\n\x07product\x18\t\x20\x01(\tR\x07product\x12\x16\n\x06region\x18\n\
    \x20\x01(\x05R\x06region\x12\x18\n\x07players\x18\x0b\x20\x01(\x05R\x07p\
    layers\x12\x1f\n\x0bmax_players\x18\x0c\x20\x01(\x05R\nmaxPlayers\x12\
    \x12\n\x04bots\x18\r\x20\x01(\x05R\x04bots\x12\x10\n\x03map\x18\x0e\x20\
    \x01(\tR\x03map\x12\x16\n\x06secure\x18\x0f\x20\x01(\x08R\x06secure\x12\
    \x1c\n\tdedicated\x18\x10\x20\x01(\x08R\tdedicated\x12\x0e\n\x02os\x18\
    \x11\x20\x01(\tR\x02os\x12\x1a\n\x08gametype\x18\x12\x20\x01(\tR\x08game\
    type\"K\n*CGameServers_GetServerSteamIDsByIP_Request\x12\x1d\n\nserver_i\
    ps\x18\x01\x20\x03(\tR\tserverIps\"\xa8\x01\n%CGameServers_IPsWithSteamI\
    Ds_Response\x12G\n\x07servers\x18\x01\x20\x03(\x0b2-.CGameServers_IPsWit\
    hSteamIDs_Response.ServerR\x07servers\x1a6\n\x06Server\x12\x12\n\x04addr\
    \x18\x01\x20\x01(\tR\x04addr\x12\x18\n\x07steamid\x18\x02\x20\x01(\x06R\
    \x07steamid\"U\n*CGameServers_GetServerIPsBySteamID_Request\x12'\n\x0fse\
    rver_steamids\x18\x01\x20\x03(\x06R\x0eserverSteamids\"\xa4\x02\n\"CGame\
    Servers_QueryByFakeIP_Request\x12\x17\n\x07fake_ip\x18\x01\x20\x01(\rR\
    \x06fakeIp\x12\x1b\n\tfake_port\x18\x02\x20\x01(\rR\x08fakePort\x12\x15\
    \n\x06app_id\x18\x03\x20\x01(\rR\x05appId\x12\\\n\nquery_type\x18\x04\
    \x20\x01(\x0e2..CGameServers_QueryByFakeIP_Request.EQueryType:\rQuery_In\
    validR\tqueryType\"S\n\nEQueryType\x12\x11\n\rQuery_Invalid\x10\0\x12\
    \x0e\n\nQuery_Ping\x10\x01\x12\x11\n\rQuery_Players\x10\x02\x12\x0f\n\
    \x0bQuery_Rules\x10\x03\"\xbc\x05\n\x1bCMsgGameServerPingQueryData\x12+\
    \n\tserver_ip\x18\x01\x20\x01(\x0b2\x0e.CMsgIPAddressR\x08serverIp\x12\
    \x1d\n\nquery_port\x18\x02\x20\x01(\rR\tqueryPort\x12\x1b\n\tgame_port\
    \x18\x03\x20\x01(\rR\x08gamePort\x12%\n\x0espectator_port\x18\x04\x20\
    \x01(\rR\rspectatorPort\x122\n\x15spectator_server_name\x18\x05\x20\x01(\
    \tR\x13spectatorServerName\x12\x1f\n\x0bserver_name\x18\x06\x20\x01(\tR\
    \nserverName\x12\x18\n\x07steamid\x18\x07\x20\x01(\x06R\x07steamid\x12\
    \x15\n\x06app_id\x18\x08\x20\x01(\rR\x05appId\x12\x18\n\x07gamedir\x18\t\
    \x20\x01(\tR\x07gamedir\x12\x10\n\x03map\x18\n\x20\x01(\tR\x03map\x12)\n\
    \x10game_description\x18\x0b\x20\x01(\tR\x0fgameDescription\x12\x1a\n\
    \x08gametype\x18\x0c\x20\x01(\tR\x08gametype\x12\x1f\n\x0bnum_players\
    \x18\r\x20\x01(\rR\nnumPlayers\x12\x1f\n\x0bmax_players\x18\x0e\x20\x01(\
    \rR\nmaxPlayers\x12\x19\n\x08num_bots\x18\x0f\x20\x01(\rR\x07numBots\x12\
    \x1a\n\x08password\x18\x10\x20\x01(\x08R\x08password\x12\x16\n\x06secure\
    \x18\x11\x20\x01(\x08R\x06secure\x12\x1c\n\tdedicated\x18\x12\x20\x01(\
    \x08R\tdedicated\x12\x18\n\x07version\x18\x13\x20\x01(\tR\x07version\x12\
    \x1b\n\tsdr_popid\x18\x14\x20\x01(\x07R\x08sdrPopid\x12.\n\x13sdr_locati\
    on_string\x18\x15\x20\x01(\tR\x11sdrLocationString\"\xb7\x01\n\x1eCMsgGa\
    meServerPlayersQueryData\x12@\n\x07players\x18\x01\x20\x03(\x0b2&.CMsgGa\
    meServerPlayersQueryData.PlayerR\x07players\x1aS\n\x06Player\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05score\x18\x02\x20\x01(\
    \rR\x05score\x12\x1f\n\x0btime_played\x18\x03\x20\x01(\rR\ntimePlayed\"\
    \x8a\x01\n\x1cCMsgGameServerRulesQueryData\x128\n\x05rules\x18\x01\x20\
    \x03(\x0b2\".CMsgGameServerRulesQueryData.RuleR\x05rules\x1a0\n\x04Rule\
    \x12\x12\n\x04rule\x18\x01\x20\x01(\tR\x04rule\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value\"\xe4\x01\n%CGameServers_GameServerQuery_Respo\
    nse\x129\n\tping_data\x18\x01\x20\x01(\x0b2\x1c.CMsgGameServerPingQueryD\
    ataR\x08pingData\x12B\n\x0cplayers_data\x18\x02\x20\x01(\x0b2\x1f.CMsgGa\
    meServerPlayersQueryDataR\x0bplayersData\x12<\n\nrules_data\x18\x03\x20\
    \x01(\x0b2\x1d.CMsgGameServerRulesQueryDataR\trulesData\"*\n(GameServerC\
    lient_QueryServerData_Request\"\xe8\x01\n)GameServerClient_QueryServerDa\
    ta_Response\x129\n\tping_data\x18\x01\x20\x01(\x0b2\x1c.CMsgGameServerPi\
    ngQueryDataR\x08pingData\x12B\n\x0cplayers_data\x18\x02\x20\x01(\x0b2\
    \x1f.CMsgGameServerPlayersQueryDataR\x0bplayersData\x12<\n\nrules_data\
    \x18\x03\x20\x01(\x0b2\x1d.CMsgGameServerRulesQueryDataR\trulesData2\xa3\
    \x03\n\x0bGameServers\x12Z\n\rGetServerList\x12#.CGameServers_GetServerL\
    ist_Request\x1a$.CGameServers_GetServerList_Response\x12l\n\x15GetServer\
    SteamIDsByIP\x12+.CGameServers_GetServerSteamIDsByIP_Request\x1a&.CGameS\
    ervers_IPsWithSteamIDs_Response\x12l\n\x15GetServerIPsBySteamID\x12+.CGa\
    meServers_GetServerIPsBySteamID_Request\x1a&.CGameServers_IPsWithSteamID\
    s_Response\x12\\\n\rQueryByFakeIP\x12#.CGameServers_QueryByFakeIP_Reques\
    t\x1a&.CGameServers_GameServerQuery_Response2\x82\x01\n\x10GameServerCli\
    ent\x12h\n\x0fQueryServerData\x12).GameServerClient_QueryServerData_Requ\
    est\x1a*.GameServerClient_QueryServerData_Response\x1a\x04\xc0\xb5\x18\
    \x02B\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::steammessages_base::file_descriptor().clone());
            deps.push(super::steammessages_unified_base_steamclient::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(CGameServers_GetServerList_Request::generated_message_descriptor_data());
            messages.push(CGameServers_GetServerList_Response::generated_message_descriptor_data());
            messages.push(CGameServers_GetServerSteamIDsByIP_Request::generated_message_descriptor_data());
            messages.push(CGameServers_IPsWithSteamIDs_Response::generated_message_descriptor_data());
            messages.push(CGameServers_GetServerIPsBySteamID_Request::generated_message_descriptor_data());
            messages.push(CGameServers_QueryByFakeIP_Request::generated_message_descriptor_data());
            messages.push(CMsgGameServerPingQueryData::generated_message_descriptor_data());
            messages.push(CMsgGameServerPlayersQueryData::generated_message_descriptor_data());
            messages.push(CMsgGameServerRulesQueryData::generated_message_descriptor_data());
            messages.push(CGameServers_GameServerQuery_Response::generated_message_descriptor_data());
            messages.push(GameServerClient_QueryServerData_Request::generated_message_descriptor_data());
            messages.push(GameServerClient_QueryServerData_Response::generated_message_descriptor_data());
            messages.push(cgame_servers_get_server_list_response::Server::generated_message_descriptor_data());
            messages.push(cgame_servers_ips_with_steam_ids_response::Server::generated_message_descriptor_data());
            messages.push(cmsg_game_server_players_query_data::Player::generated_message_descriptor_data());
            messages.push(cmsg_game_server_rules_query_data::Rule::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(cgame_servers_query_by_fake_ip_request::EQueryType::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
